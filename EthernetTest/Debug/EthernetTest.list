
EthernetTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dec  08014490  08014490  00024490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801727c  0801727c  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801727c  0801727c  0002727c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017284  08017284  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017284  08017284  00027284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017288  08017288  00027288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801728c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  08017320  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  080173c0  00030134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c9c0  200001d4  08017460  000301d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000cb94  08017460  0003cb94  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000352ae  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007a0c  00000000  00000000  000654b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002520  00000000  00000000  0006cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002390  00000000  00000000  0006f3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003754f  00000000  00000000  00071770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00038a5f  00000000  00000000  000a8cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00119b7f  00000000  00000000  000e171e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001fb29d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a2fc  00000000  00000000  001fb2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014478 	.word	0x08014478

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08014478 	.word	0x08014478

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200001f0 	.word	0x200001f0
 80005e4:	200002a4 	.word	0x200002a4

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fdb5 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f81f 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f8e9 	bl	80007cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 f889 	bl	8000710 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005fe:	f000 f8b7 	bl	8000770 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <main+0x44>)
 8000604:	1d3c      	adds	r4, r7, #4
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f005 fe73 	bl	8006304 <osThreadCreate>
 800061e:	4603      	mov	r3, r0
 8000620:	4a03      	ldr	r2, [pc, #12]	; (8000630 <main+0x48>)
 8000622:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000624:	f005 fe57 	bl	80062d6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	e7fe      	b.n	8000628 <main+0x40>
 800062a:	bf00      	nop
 800062c:	0801449c 	.word	0x0801449c
 8000630:	20000a34 	.word	0x20000a34

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f012 ff4f 	bl	80134e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000658:	f002 fc70 	bl	8002f3c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <SystemClock_Config+0xd4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a29      	ldr	r2, [pc, #164]	; (8000708 <SystemClock_Config+0xd4>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b27      	ldr	r3, [pc, #156]	; (8000708 <SystemClock_Config+0xd4>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xd8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a24      	ldr	r2, [pc, #144]	; (800070c <SystemClock_Config+0xd8>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006a4:	23d8      	movs	r3, #216	; 0xd8
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006ac:	2309      	movs	r3, #9
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fca1 	bl	8002ffc <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006c0:	f000 f942 	bl	8000948 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006c4:	f002 fc4a 	bl	8002f5c <HAL_PWREx_EnableOverDrive>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ce:	f000 f93b 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2107      	movs	r1, #7
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 ff27 	bl	8003544 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006fc:	f000 f924 	bl	8000948 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	; 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_USART3_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000754:	f004 f81e 	bl	8004794 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f8f3 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200004a4 	.word	0x200004a4
 800076c:	40004800 	.word	0x40004800

08000770 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800077a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	2206      	movs	r2, #6
 8000780:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000784:	2202      	movs	r2, #2
 8000786:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	2202      	movs	r2, #2
 8000792:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2201      	movs	r2, #1
 8000798:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	f002 fa79 	bl	8002caa <HAL_PCD_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f8c3 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000052c 	.word	0x2000052c

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b47      	ldr	r3, [pc, #284]	; (8000900 <MX_GPIO_Init+0x134>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a46      	ldr	r2, [pc, #280]	; (8000900 <MX_GPIO_Init+0x134>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b44      	ldr	r3, [pc, #272]	; (8000900 <MX_GPIO_Init+0x134>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b41      	ldr	r3, [pc, #260]	; (8000900 <MX_GPIO_Init+0x134>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a40      	ldr	r2, [pc, #256]	; (8000900 <MX_GPIO_Init+0x134>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b3e      	ldr	r3, [pc, #248]	; (8000900 <MX_GPIO_Init+0x134>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <MX_GPIO_Init+0x134>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a3a      	ldr	r2, [pc, #232]	; (8000900 <MX_GPIO_Init+0x134>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <MX_GPIO_Init+0x134>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b35      	ldr	r3, [pc, #212]	; (8000900 <MX_GPIO_Init+0x134>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a34      	ldr	r2, [pc, #208]	; (8000900 <MX_GPIO_Init+0x134>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b32      	ldr	r3, [pc, #200]	; (8000900 <MX_GPIO_Init+0x134>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <MX_GPIO_Init+0x134>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a2e      	ldr	r2, [pc, #184]	; (8000900 <MX_GPIO_Init+0x134>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <MX_GPIO_Init+0x134>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <MX_GPIO_Init+0x134>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a28      	ldr	r2, [pc, #160]	; (8000900 <MX_GPIO_Init+0x134>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <MX_GPIO_Init+0x134>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f244 0181 	movw	r1, #16513	; 0x4081
 8000878:	4822      	ldr	r0, [pc, #136]	; (8000904 <MX_GPIO_Init+0x138>)
 800087a:	f002 f9fd 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2140      	movs	r1, #64	; 0x40
 8000882:	4821      	ldr	r0, [pc, #132]	; (8000908 <MX_GPIO_Init+0x13c>)
 8000884:	f002 f9f8 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	481b      	ldr	r0, [pc, #108]	; (800090c <MX_GPIO_Init+0x140>)
 80008a0:	f002 f83e 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008a4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_GPIO_Init+0x138>)
 80008be:	f002 f82f 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	480b      	ldr	r0, [pc, #44]	; (8000908 <MX_GPIO_Init+0x13c>)
 80008da:	f002 f821 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_GPIO_Init+0x13c>)
 80008f2:	f002 f815 	bl	8002920 <HAL_GPIO_Init>

}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	; 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020400 	.word	0x40020400
 8000908:	40021800 	.word	0x40021800
 800090c:	40020800 	.word	0x40020800

08000910 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000918:	f004 fe82 	bl	8005620 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f005 fd3d 	bl	800639c <osDelay>
 8000922:	e7fb      	b.n	800091c <StartDefaultTask+0xc>

08000924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d101      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000936:	f000 fc1f 	bl	8001178 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40014400 	.word	0x40014400

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <HAL_MspInit+0x4c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_MspInit+0x4c>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	210f      	movs	r1, #15
 800098e:	f06f 0001 	mvn.w	r0, #1
 8000992:	f000 fced 	bl	8001370 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0aa      	sub	sp, #168	; 0xa8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	2284      	movs	r2, #132	; 0x84
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f012 fd8e 	bl	80134e6 <memset>
  if(huart->Instance==USART3)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <HAL_UART_MspInit+0xb4>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d13c      	bne.n	8000a4e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009da:	2300      	movs	r3, #0
 80009dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 f806 	bl	80039f4 <HAL_RCCEx_PeriphCLKConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009ee:	f7ff ffab 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <HAL_UART_MspInit+0xb8>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <HAL_UART_MspInit+0xb8>)
 80009f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_UART_MspInit+0xb8>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_UART_MspInit+0xb8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <HAL_UART_MspInit+0xb8>)
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_UART_MspInit+0xb8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a42:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <HAL_UART_MspInit+0xbc>)
 8000a4a:	f001 ff69 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a4e:	bf00      	nop
 8000a50:	37a8      	adds	r7, #168	; 0xa8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40004800 	.word	0x40004800
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020c00 	.word	0x40020c00

08000a64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0ac      	sub	sp, #176	; 0xb0
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a7c:	f107 0318 	add.w	r3, r7, #24
 8000a80:	2284      	movs	r2, #132	; 0x84
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f012 fd2e 	bl	80134e6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a92:	d159      	bne.n	8000b48 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa0:	f107 0318 	add.w	r3, r7, #24
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 ffa5 	bl	80039f4 <HAL_RCCEx_PeriphCLKConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ab0:	f7ff ff4a 	bl	8000948 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <HAL_PCD_MspInit+0xec>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a25      	ldr	r2, [pc, #148]	; (8000b50 <HAL_PCD_MspInit+0xec>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <HAL_PCD_MspInit+0xec>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000acc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ae6:	230a      	movs	r3, #10
 8000ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af0:	4619      	mov	r1, r3
 8000af2:	4818      	ldr	r0, [pc, #96]	; (8000b54 <HAL_PCD_MspInit+0xf0>)
 8000af4:	f001 ff14 	bl	8002920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b10:	4619      	mov	r1, r3
 8000b12:	4810      	ldr	r0, [pc, #64]	; (8000b54 <HAL_PCD_MspInit+0xf0>)
 8000b14:	f001 ff04 	bl	8002920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_PCD_MspInit+0xec>)
 8000b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <HAL_PCD_MspInit+0xec>)
 8000b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b22:	6353      	str	r3, [r2, #52]	; 0x34
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_PCD_MspInit+0xec>)
 8000b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <HAL_PCD_MspInit+0xec>)
 8000b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_PCD_MspInit+0xec>)
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <HAL_PCD_MspInit+0xec>)
 8000b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b48:	bf00      	nop
 8000b4a:	37b0      	adds	r7, #176	; 0xb0
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000

08000b58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	; 0x30
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000b68:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <HAL_InitTick+0xd0>)
 8000b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6c:	4a2e      	ldr	r2, [pc, #184]	; (8000c28 <HAL_InitTick+0xd0>)
 8000b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b72:	6453      	str	r3, [r2, #68]	; 0x44
 8000b74:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <HAL_InitTick+0xd0>)
 8000b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b80:	f107 020c 	add.w	r2, r7, #12
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 ff00 	bl	8003990 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b90:	f002 feea 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8000b94:	4603      	mov	r3, r0
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b9c:	4a23      	ldr	r2, [pc, #140]	; (8000c2c <HAL_InitTick+0xd4>)
 8000b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba2:	0c9b      	lsrs	r3, r3, #18
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <HAL_InitTick+0xd8>)
 8000baa:	4a22      	ldr	r2, [pc, #136]	; (8000c34 <HAL_InitTick+0xdc>)
 8000bac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_InitTick+0xd8>)
 8000bb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000bb6:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <HAL_InitTick+0xd8>)
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <HAL_InitTick+0xd8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <HAL_InitTick+0xd8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_InitTick+0xd8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000bce:	4818      	ldr	r0, [pc, #96]	; (8000c30 <HAL_InitTick+0xd8>)
 8000bd0:	f003 fb00 	bl	80041d4 <HAL_TIM_Base_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d11b      	bne.n	8000c1a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000be2:	4813      	ldr	r0, [pc, #76]	; (8000c30 <HAL_InitTick+0xd8>)
 8000be4:	f003 fb58 	bl	8004298 <HAL_TIM_Base_Start_IT>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d111      	bne.n	8000c1a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bf6:	2019      	movs	r0, #25
 8000bf8:	f000 fbd6 	bl	80013a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	d808      	bhi.n	8000c14 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c02:	2200      	movs	r2, #0
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	2019      	movs	r0, #25
 8000c08:	f000 fbb2 	bl	8001370 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_InitTick+0xe0>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e002      	b.n	8000c1a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3730      	adds	r7, #48	; 0x30
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	431bde83 	.word	0x431bde83
 8000c30:	20000a38 	.word	0x20000a38
 8000c34:	40014400 	.word	0x40014400
 8000c38:	20000004 	.word	0x20000004

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c6e:	f003 fb8b 	bl	8004388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000a38 	.word	0x20000a38

08000c7c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <ETH_IRQHandler+0x10>)
 8000c82:	f000 ff79 	bl	8001b78 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000546c 	.word	0x2000546c

08000c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
	return 1;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_kill>:

int _kill(int pid, int sig)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <_kill+0x20>)
 8000cac:	2216      	movs	r2, #22
 8000cae:	601a      	str	r2, [r3, #0]
	return -1;
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	2000cb90 	.word	0x2000cb90

08000cc4 <_exit>:

void _exit (int status)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ffe5 	bl	8000ca0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cd6:	e7fe      	b.n	8000cd6 <_exit+0x12>

08000cd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e00a      	b.n	8000d00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cea:	f3af 8000 	nop.w
 8000cee:	4601      	mov	r1, r0
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	b2ca      	uxtb	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbf0      	blt.n	8000cea <_read+0x12>
	}

return len;
 8000d08:	687b      	ldr	r3, [r7, #4]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e009      	b.n	8000d38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60ba      	str	r2, [r7, #8]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbf1      	blt.n	8000d24 <_write+0x12>
	}
	return len;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_close>:

int _close(int file)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	return -1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d72:	605a      	str	r2, [r3, #4]
	return 0;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_isatty>:

int _isatty(int file)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	return 1;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	return 0;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d205      	bcs.n	8000df0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <_sbrk+0x6c>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	20050000 	.word	0x20050000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	20000a84 	.word	0x20000a84
 8000e1c:	2000cb98 	.word	0x2000cb98
 8000e20:	2000cb90 	.word	0x2000cb90

08000e24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4e:	490e      	ldr	r1, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e64:	4c0b      	ldr	r4, [pc, #44]	; (8000e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e72:	f7ff ffd7 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f012 faf1 	bl	801345c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fbb5 	bl	80005e8 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000e8c:	0801728c 	.word	0x0801728c
  ldr r2, =_sbss
 8000e90:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000e94:	2000cb94 	.word	0x2000cb94

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>

08000e9a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00b      	beq.n	8000ec2 <LAN8742_RegisterBusIO+0x28>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d007      	beq.n	8000ec2 <LAN8742_RegisterBusIO+0x28>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <LAN8742_RegisterBusIO+0x28>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d102      	bne.n	8000ec8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	e014      	b.n	8000ef2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d17c      	bne.n	8001018 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2220      	movs	r2, #32
 8000f30:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e01c      	b.n	8000f72 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f107 0208 	add.w	r2, r7, #8
 8000f40:	2112      	movs	r1, #18
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	4798      	blx	r3
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da03      	bge.n	8000f54 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000f4c:	f06f 0304 	mvn.w	r3, #4
 8000f50:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000f52:	e00b      	b.n	8000f6c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	f003 031f 	and.w	r3, r3, #31
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d105      	bne.n	8000f6c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
         break;
 8000f6a:	e005      	b.n	8000f78 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2b1f      	cmp	r3, #31
 8000f76:	d9df      	bls.n	8000f38 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b1f      	cmp	r3, #31
 8000f7e:	d902      	bls.n	8000f86 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f80:	f06f 0302 	mvn.w	r3, #2
 8000f84:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d145      	bne.n	8001018 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	6810      	ldr	r0, [r2, #0]
 8000f94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4798      	blx	r3
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db37      	blt.n	8001012 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	6810      	ldr	r0, [r2, #0]
 8000faa:	f107 0208 	add.w	r2, r7, #8
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4798      	blx	r3
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db28      	blt.n	800100a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4798      	blx	r3
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000fc2:	e01c      	b.n	8000ffe <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4798      	blx	r3
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fd6:	d80e      	bhi.n	8000ff6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	6810      	ldr	r0, [r2, #0]
 8000fe0:	f107 0208 	add.w	r2, r7, #8
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4798      	blx	r3
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	da07      	bge.n	8000ffe <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000fee:	f06f 0304 	mvn.w	r3, #4
 8000ff2:	613b      	str	r3, [r7, #16]
                 break;
 8000ff4:	e010      	b.n	8001018 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000ff6:	f06f 0301 	mvn.w	r3, #1
 8000ffa:	613b      	str	r3, [r7, #16]
               break;
 8000ffc:	e00c      	b.n	8001018 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1dd      	bne.n	8000fc4 <LAN8742_Init+0xc6>
 8001008:	e006      	b.n	8001018 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800100a:	f06f 0304 	mvn.w	r3, #4
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	e002      	b.n	8001018 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001012:	f06f 0303 	mvn.w	r3, #3
 8001016:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d112      	bne.n	8001044 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	4798      	blx	r3
 8001024:	4603      	mov	r3, r0
 8001026:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001028:	bf00      	nop
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	4798      	blx	r3
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800103c:	d9f5      	bls.n	800102a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001044:	693b      	ldr	r3, [r7, #16]
 }
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6810      	ldr	r0, [r2, #0]
 8001062:	f107 020c 	add.w	r2, r7, #12
 8001066:	2101      	movs	r1, #1
 8001068:	4798      	blx	r3
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	da02      	bge.n	8001076 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001070:	f06f 0304 	mvn.w	r3, #4
 8001074:	e06e      	b.n	8001154 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6810      	ldr	r0, [r2, #0]
 800107e:	f107 020c 	add.w	r2, r7, #12
 8001082:	2101      	movs	r1, #1
 8001084:	4798      	blx	r3
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	da02      	bge.n	8001092 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800108c:	f06f 0304 	mvn.w	r3, #4
 8001090:	e060      	b.n	8001154 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800109c:	2301      	movs	r3, #1
 800109e:	e059      	b.n	8001154 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	6810      	ldr	r0, [r2, #0]
 80010a8:	f107 020c 	add.w	r2, r7, #12
 80010ac:	2100      	movs	r1, #0
 80010ae:	4798      	blx	r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	da02      	bge.n	80010bc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010b6:	f06f 0304 	mvn.w	r3, #4
 80010ba:	e04b      	b.n	8001154 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d11b      	bne.n	80010fe <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d006      	beq.n	80010de <LAN8742_GetLinkState+0x90>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010da:	2302      	movs	r3, #2
 80010dc:	e03a      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e033      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010f6:	2304      	movs	r3, #4
 80010f8:	e02c      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010fa:	2305      	movs	r3, #5
 80010fc:	e02a      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6810      	ldr	r0, [r2, #0]
 8001106:	f107 020c 	add.w	r2, r7, #12
 800110a:	211f      	movs	r1, #31
 800110c:	4798      	blx	r3
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	da02      	bge.n	800111a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001114:	f06f 0304 	mvn.w	r3, #4
 8001118:	e01c      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001124:	2306      	movs	r3, #6
 8001126:	e015      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 031c 	and.w	r3, r3, #28
 800112e:	2b18      	cmp	r3, #24
 8001130:	d101      	bne.n	8001136 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001132:	2302      	movs	r3, #2
 8001134:	e00e      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f003 031c 	and.w	r3, r3, #28
 800113c:	2b08      	cmp	r3, #8
 800113e:	d101      	bne.n	8001144 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001140:	2303      	movs	r3, #3
 8001142:	e007      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 031c 	and.w	r3, r3, #28
 800114a:	2b14      	cmp	r3, #20
 800114c:	d101      	bne.n	8001152 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800114e:	2304      	movs	r3, #4
 8001150:	e000      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001152:	2305      	movs	r3, #5
    }				
  }
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 f8fa 	bl	800135a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001166:	200f      	movs	r0, #15
 8001168:	f7ff fcf6 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f7ff fbf2 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008
 800119c:	20000a88 	.word	0x20000a88

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000a88 	.word	0x20000a88

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <__NVIC_SetPriorityGrouping+0x40>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	4313      	orrs	r3, r2
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x40>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00
 8001244:	05fa0000 	.word	0x05fa0000

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff4c 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001382:	f7ff ff61 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001386:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f7ff ffb1 	bl	80012f4 <NVIC_EncodePriority>
 8001392:	4602      	mov	r2, r0
 8001394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff80 	bl	80012a0 <__NVIC_SetPriority>
}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff54 	bl	8001264 <__NVIC_EnableIRQ>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e06a      	b.n	80014ac <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d106      	bne.n	80013ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2223      	movs	r2, #35	; 0x23
 80013e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f004 fd31 	bl	8005e50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <HAL_ETH_Init+0xf0>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a30      	ldr	r2, [pc, #192]	; (80014b4 <HAL_ETH_Init+0xf0>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <HAL_ETH_Init+0xf0>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001406:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <HAL_ETH_Init+0xf4>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4a2b      	ldr	r2, [pc, #172]	; (80014b8 <HAL_ETH_Init+0xf4>)
 800140c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001410:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <HAL_ETH_Init+0xf4>)
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	4927      	ldr	r1, [pc, #156]	; (80014b8 <HAL_ETH_Init+0xf4>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <HAL_ETH_Init+0xf4>)
 8001422:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800143a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800143c:	f7ff feb0 	bl	80011a0 <HAL_GetTick>
 8001440:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001442:	e011      	b.n	8001468 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001444:	f7ff feac 	bl	80011a0 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001452:	d909      	bls.n	8001468 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2204      	movs	r2, #4
 8001458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	22e0      	movs	r2, #224	; 0xe0
 8001460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e021      	b.n	80014ac <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e4      	bne.n	8001444 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 ffac 	bl	80023d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f001 f853 	bl	800252c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f001 f8a9 	bl	80025de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	461a      	mov	r2, r3
 8001492:	2100      	movs	r1, #0
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f001 f811 	bl	80024bc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2210      	movs	r2, #16
 80014a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40013800 	.word	0x40013800

080014bc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d150      	bne.n	8001570 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2223      	movs	r2, #35	; 0x23
 80014d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2204      	movs	r2, #4
 80014da:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 fa7b 	bl	80019d8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 0208 	orr.w	r2, r2, #8
 80014f0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff fe5c 	bl	80011b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0204 	orr.w	r2, r2, #4
 8001516:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fe49 	bl	80011b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fdf3 	bl	800211a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001546:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800154a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001562:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2223      	movs	r2, #35	; 0x23
 8001568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	e000      	b.n	8001572 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
  }
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800158a:	2b10      	cmp	r3, #16
 800158c:	d17b      	bne.n	8001686 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2223      	movs	r2, #35	; 0x23
 8001592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80015aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b35      	ldr	r3, [pc, #212]	; (8001690 <HAL_ETH_Start_IT+0x114>)
 80015ba:	430b      	orrs	r3, r1
 80015bc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80015d0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2204      	movs	r2, #4
 80015d8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f9fc 	bl	80019d8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0208 	orr.w	r2, r2, #8
 80015ee:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff fddd 	bl	80011b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0204 	orr.w	r2, r2, #4
 8001614:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800161e:	2001      	movs	r0, #1
 8001620:	f7ff fdca 	bl	80011b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fd74 	bl	800211a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001644:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001648:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001660:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	69d9      	ldr	r1, [r3, #28]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_ETH_Start_IT+0x118>)
 8001672:	430b      	orrs	r3, r1
 8001674:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001678:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2223      	movs	r2, #35	; 0x23
 800167e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
  }
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	00020060 	.word	0x00020060
 8001694:	0001a0c1 	.word	0x0001a0c1

08001698 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016a6:	2b23      	cmp	r3, #35	; 0x23
 80016a8:	d16e      	bne.n	8001788 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2223      	movs	r2, #35	; 0x23
 80016ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ba:	69d9      	ldr	r1, [r3, #28]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b34      	ldr	r3, [pc, #208]	; (8001794 <HAL_ETH_Stop_IT+0xfc>)
 80016c2:	400b      	ands	r3, r1
 80016c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016c8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016e0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	f023 0302 	bic.w	r3, r3, #2
 80016f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016f8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0204 	bic.w	r2, r2, #4
 8001708:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001712:	2001      	movs	r0, #1
 8001714:	f7ff fd50 	bl	80011b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 fcfa 	bl	800211a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0208 	bic.w	r2, r2, #8
 8001734:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800173e:	2001      	movs	r0, #1
 8001740:	f7ff fd3a 	bl	80011b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00e      	b.n	8001770 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	3212      	adds	r2, #18
 8001758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d9ed      	bls.n	8001752 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2210      	movs	r2, #16
 8001780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	e000      	b.n	800178a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
  }
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	fffe5f3e 	.word	0xfffe5f3e

08001798 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d109      	bne.n	80017bc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ae:	f043 0201 	orr.w	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e045      	b.n	8001848 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017c2:	2b23      	cmp	r3, #35	; 0x23
 80017c4:	d13f      	bne.n	8001846 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80017ce:	2201      	movs	r2, #1
 80017d0:	6839      	ldr	r1, [r7, #0]
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 ff70 	bl	80026b8 <ETH_Prepare_Tx_Descriptors>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e4:	f043 0202 	orr.w	r2, r3, #2
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e02a      	b.n	8001848 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017f2:	f3bf 8f4f 	dsb	sy
}
 80017f6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	629a      	str	r2, [r3, #40]	; 0x28
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	2b03      	cmp	r3, #3
 8001808:	d904      	bls.n	8001814 <HAL_ETH_Transmit_IT+0x7c>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	1f1a      	subs	r2, r3, #4
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00d      	beq.n	8001842 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182e:	461a      	mov	r2, r3
 8001830:	2304      	movs	r3, #4
 8001832:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183c:	461a      	mov	r2, r3
 800183e:	2300      	movs	r3, #0
 8001840:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
  }
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d109      	bne.n	800187c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186e:	f043 0201 	orr.w	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0a8      	b.n	80019ce <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001882:	2b23      	cmp	r3, #35	; 0x23
 8001884:	d001      	beq.n	800188a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0a1      	b.n	80019ce <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	3212      	adds	r2, #18
 8001896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018a0:	f1c3 0304 	rsb	r3, r3, #4
 80018a4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018a6:	e06a      	b.n	800197e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d007      	beq.n	80018c4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	699a      	ldr	r2, [r3, #24]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	69da      	ldr	r2, [r3, #28]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d103      	bne.n	80018d8 <HAL_ETH_ReadData+0x88>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d040      	beq.n	800195a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00c      	beq.n	800191c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	0c1b      	lsrs	r3, r3, #16
 8001908:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800190c:	3b04      	subs	r3, #4
 800190e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001934:	461a      	mov	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	b29b      	uxth	r3, r3
 800193a:	f004 fc55 	bl	80061e8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	441a      	add	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2200      	movs	r2, #0
 8001958:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3301      	adds	r3, #1
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d902      	bls.n	800196c <HAL_ETH_ReadData+0x11c>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b04      	subs	r3, #4
 800196a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	3212      	adds	r2, #18
 8001972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001976:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	3301      	adds	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db06      	blt.n	8001994 <HAL_ETH_ReadData+0x144>
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	429a      	cmp	r2, r3
 800198c:	d202      	bcs.n	8001994 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d089      	beq.n	80018a8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	441a      	add	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f815 	bl	80019d8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d108      	bne.n	80019cc <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	e000      	b.n	80019ce <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3720      	adds	r7, #32
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80019e4:	2301      	movs	r3, #1
 80019e6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019ec:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	3212      	adds	r2, #18
 80019f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019fe:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a00:	e040      	b.n	8001a84 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d112      	bne.n	8001a30 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 fbba 	bl	8006188 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	74fb      	strb	r3, [r7, #19]
 8001a1e:	e007      	b.n	8001a30 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	461a      	mov	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001a30:	7cfb      	ldrb	r3, [r7, #19]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d026      	beq.n	8001a84 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d103      	bne.n	8001a46 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <ETH_UpdateDescriptor+0xe4>)
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	e003      	b.n	8001a4e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001a4c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a4e:	f3bf 8f5f 	dmb	sy
}
 8001a52:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	3301      	adds	r3, #1
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d902      	bls.n	8001a72 <ETH_UpdateDescriptor+0x9a>
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	3212      	adds	r2, #18
 8001a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <ETH_UpdateDescriptor+0xb8>
 8001a8a:	7cfb      	ldrb	r3, [r7, #19]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1b8      	bne.n	8001a02 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d00c      	beq.n	8001ab4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	800045f8 	.word	0x800045f8

08001ac0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3318      	adds	r3, #24
 8001acc:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001ade:	e03f      	b.n	8001b60 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	3304      	adds	r3, #4
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	3301      	adds	r3, #1
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001b08:	7bbb      	ldrb	r3, [r7, #14]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d028      	beq.n	8001b60 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68d9      	ldr	r1, [r3, #12]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	db1b      	blt.n	8001b5c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 fb9b 	bl	800626c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	3301      	adds	r3, #1
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b5a:	e001      	b.n	8001b60 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_ETH_ReleaseTxPacket+0xac>
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1b9      	bne.n	8001ae0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8e:	2b40      	cmp	r3, #64	; 0x40
 8001b90:	d112      	bne.n	8001bb8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba0:	2b40      	cmp	r3, #64	; 0x40
 8001ba2:	d109      	bne.n	8001bb8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_ETH_IRQHandler+0x178>)
 8001bb0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f003 feb0 	bl	8005918 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d113      	bne.n	8001bf2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10a      	bne.n	8001bf2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be4:	461a      	mov	r2, r3
 8001be6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001bea:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f003 fea3 	bl	8005938 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c04:	d14c      	bne.n	8001ca0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c18:	d142      	bne.n	8001ca0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c20:	f043 0208 	orr.w	r2, r3, #8
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c3c:	d11a      	bne.n	8001c74 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c46:	695a      	ldr	r2, [r3, #20]
 8001c48:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <HAL_ETH_IRQHandler+0x17c>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001c64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c68:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	22e0      	movs	r2, #224	; 0xe0
 8001c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c72:	e012      	b.n	8001c9a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	f248 6380 	movw	r3, #34432	; 0x8680
 8001c82:	4013      	ands	r3, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c92:	461a      	mov	r2, r3
 8001c94:	f248 6380 	movw	r3, #34432	; 0x8680
 8001c98:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f003 fe5c 	bl	8005958 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d10e      	bne.n	8001ccc <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f81c 	bl	8001cfc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_ETH_IRQHandler+0x180>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <HAL_ETH_IRQHandler+0x180>)
 8001cda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cde:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f815 	bl	8001d10 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	00010040 	.word	0x00010040
 8001cf4:	007e2000 	.word	0x007e2000
 8001cf8:	40013c00 	.word	0x40013c00

08001cfc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 031c 	and.w	r3, r3, #28
 8001d40:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	02db      	lsls	r3, r3, #11
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	019b      	lsls	r3, r3, #6
 8001d52:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f023 0302 	bic.w	r3, r3, #2
 8001d62:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001d74:	f7ff fa14 	bl	80011a0 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d7a:	e00d      	b.n	8001d98 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001d7c:	f7ff fa10 	bl	80011a0 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8a:	d301      	bcc.n	8001d90 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e010      	b.n	8001db2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1ec      	bne.n	8001d7c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f003 031c 	and.w	r3, r3, #28
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	02db      	lsls	r3, r3, #11
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	019b      	lsls	r3, r3, #6
 8001de8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e14:	f7ff f9c4 	bl	80011a0 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e1a:	e00d      	b.n	8001e38 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001e1c:	f7ff f9c0 	bl	80011a0 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2a:	d301      	bcc.n	8001e30 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e009      	b.n	8001e44 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ec      	bne.n	8001e1c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0d9      	b.n	8002014 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf14      	ite	ne
 8001e6e:	2301      	movne	r3, #1
 8001e70:	2300      	moveq	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf0c      	ite	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	2300      	movne	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf14      	ite	ne
 8001ee8:	2301      	movne	r3, #1
 8001eea:	2300      	moveq	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	bf0c      	ite	eq
 8001f1e:	2301      	moveq	r3, #1
 8001f20:	2300      	movne	r3, #0
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	461a      	mov	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	bf14      	ite	ne
 8001f52:	2301      	movne	r3, #1
 8001f54:	2300      	moveq	r3, #0
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bf14      	ite	ne
 8001f7a:	2301      	movne	r3, #1
 8001f7c:	2300      	moveq	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	461a      	mov	r2, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf14      	ite	ne
 8001f94:	2301      	movne	r3, #1
 8001f96:	2300      	moveq	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	0c1b      	lsrs	r3, r3, #16
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf14      	ite	ne
 8001fe8:	2301      	movne	r3, #1
 8001fea:	2300      	moveq	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e00b      	b.n	800204c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800203a:	2b10      	cmp	r3, #16
 800203c:	d105      	bne.n	800204a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800203e:	6839      	ldr	r1, [r7, #0]
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f88f 	bl	8002164 <ETH_SetMACConfig>

    return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
  }
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 031c 	bic.w	r3, r3, #28
 800206a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800206c:	f001 fc5c 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8002070:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <HAL_ETH_SetMDIOClockRange+0x98>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d908      	bls.n	800208c <HAL_ETH_SetMDIOClockRange+0x38>
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4a1c      	ldr	r2, [pc, #112]	; (80020f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d804      	bhi.n	800208c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f043 0308 	orr.w	r3, r3, #8
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	e027      	b.n	80020dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d908      	bls.n	80020a6 <HAL_ETH_SetMDIOClockRange+0x52>
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d204      	bcs.n	80020a6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f043 030c 	orr.w	r3, r3, #12
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e01a      	b.n	80020dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d303      	bcc.n	80020b6 <HAL_ETH_SetMDIOClockRange+0x62>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	4a11      	ldr	r2, [pc, #68]	; (80020f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d911      	bls.n	80020da <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d908      	bls.n	80020d0 <HAL_ETH_SetMDIOClockRange+0x7c>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d804      	bhi.n	80020d0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	e005      	b.n	80020dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f043 0310 	orr.w	r3, r3, #16
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e000      	b.n	80020dc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80020da:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	611a      	str	r2, [r3, #16]
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	01312cff 	.word	0x01312cff
 80020f0:	02160ebf 	.word	0x02160ebf
 80020f4:	03938700 	.word	0x03938700
 80020f8:	05f5e0ff 	.word	0x05f5e0ff
 80020fc:	08f0d17f 	.word	0x08f0d17f

08002100 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002138:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800213c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800214a:	2001      	movs	r0, #1
 800214c:	f7ff f834 	bl	80011b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800215a:	6193      	str	r3, [r2, #24]
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <ETH_SetMACConfig+0x15c>)
 800217a:	4013      	ands	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	7c1b      	ldrb	r3, [r3, #16]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <ETH_SetMACConfig+0x28>
 8002186:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800218a:	e000      	b.n	800218e <ETH_SetMACConfig+0x2a>
 800218c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	7c5b      	ldrb	r3, [r3, #17]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d102      	bne.n	800219c <ETH_SetMACConfig+0x38>
 8002196:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800219a:	e000      	b.n	800219e <ETH_SetMACConfig+0x3a>
 800219c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800219e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	7fdb      	ldrb	r3, [r3, #31]
 80021aa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80021ac:	431a      	orrs	r2, r3
                        macconf->Speed |
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	7f92      	ldrb	r2, [r2, #30]
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	d102      	bne.n	80021c2 <ETH_SetMACConfig+0x5e>
 80021bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c0:	e000      	b.n	80021c4 <ETH_SetMACConfig+0x60>
 80021c2:	2200      	movs	r2, #0
                        macconf->Speed |
 80021c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	7f1b      	ldrb	r3, [r3, #28]
 80021ca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021cc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	791b      	ldrb	r3, [r3, #4]
 80021d8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80021da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021e2:	2a00      	cmp	r2, #0
 80021e4:	d102      	bne.n	80021ec <ETH_SetMACConfig+0x88>
 80021e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ea:	e000      	b.n	80021ee <ETH_SetMACConfig+0x8a>
 80021ec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	7bdb      	ldrb	r3, [r3, #15]
 80021f4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021f6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002204:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002206:	4313      	orrs	r3, r2
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800221e:	2001      	movs	r0, #1
 8002220:	f7fe ffca 	bl	80011b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	f64f 7341 	movw	r3, #65345	; 0xff41
 800223a:	4013      	ands	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002242:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800224a:	2a00      	cmp	r2, #0
 800224c:	d101      	bne.n	8002252 <ETH_SetMACConfig+0xee>
 800224e:	2280      	movs	r2, #128	; 0x80
 8002250:	e000      	b.n	8002254 <ETH_SetMACConfig+0xf0>
 8002252:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002254:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800225a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002262:	2a01      	cmp	r2, #1
 8002264:	d101      	bne.n	800226a <ETH_SetMACConfig+0x106>
 8002266:	2208      	movs	r2, #8
 8002268:	e000      	b.n	800226c <ETH_SetMACConfig+0x108>
 800226a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800226c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002274:	2a01      	cmp	r2, #1
 8002276:	d101      	bne.n	800227c <ETH_SetMACConfig+0x118>
 8002278:	2204      	movs	r2, #4
 800227a:	e000      	b.n	800227e <ETH_SetMACConfig+0x11a>
 800227c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800227e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002286:	2a01      	cmp	r2, #1
 8002288:	d101      	bne.n	800228e <ETH_SetMACConfig+0x12a>
 800228a:	2202      	movs	r2, #2
 800228c:	e000      	b.n	8002290 <ETH_SetMACConfig+0x12c>
 800228e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002290:	4313      	orrs	r3, r2
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a8:	2001      	movs	r0, #1
 80022aa:	f7fe ff85 	bl	80011b8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	619a      	str	r2, [r3, #24]
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	ff20810f 	.word	0xff20810f

080022c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4b3d      	ldr	r3, [pc, #244]	; (80023d4 <ETH_SetDMAConfig+0x110>)
 80022de:	4013      	ands	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	7b1b      	ldrb	r3, [r3, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <ETH_SetDMAConfig+0x2c>
 80022ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022ee:	e000      	b.n	80022f2 <ETH_SetDMAConfig+0x2e>
 80022f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	7b5b      	ldrb	r3, [r3, #13]
 80022f6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022f8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	7f52      	ldrb	r2, [r2, #29]
 80022fe:	2a00      	cmp	r2, #0
 8002300:	d102      	bne.n	8002308 <ETH_SetDMAConfig+0x44>
 8002302:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002306:	e000      	b.n	800230a <ETH_SetDMAConfig+0x46>
 8002308:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800230a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	7b9b      	ldrb	r3, [r3, #14]
 8002310:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002312:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002318:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	7f1b      	ldrb	r3, [r3, #28]
 800231e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002320:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	7f9b      	ldrb	r3, [r3, #30]
 8002326:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002328:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800232e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002336:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002338:	4313      	orrs	r3, r2
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002348:	461a      	mov	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800235a:	2001      	movs	r0, #1
 800235c:	f7fe ff2c 	bl	80011b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002368:	461a      	mov	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	791b      	ldrb	r3, [r3, #4]
 8002372:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002378:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800237e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002384:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800238c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800238e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002396:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800239c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023b8:	2001      	movs	r0, #1
 80023ba:	f7fe fefd 	bl	80011b8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	f8de3f23 	.word	0xf8de3f23

080023d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b0a6      	sub	sp, #152	; 0x98
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80023e6:	2301      	movs	r3, #1
 80023e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80023ec:	2300      	movs	r3, #0
 80023ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002402:	2301      	movs	r3, #1
 8002404:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002414:	2300      	movs	r3, #0
 8002416:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800241e:	2300      	movs	r3, #0
 8002420:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800243a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800243e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002440:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002444:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002446:	2300      	movs	r3, #0
 8002448:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800244c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002450:	4619      	mov	r1, r3
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff fe86 	bl	8002164 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002458:	2301      	movs	r3, #1
 800245a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800245c:	2301      	movs	r3, #1
 800245e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002460:	2301      	movs	r3, #1
 8002462:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002466:	2301      	movs	r3, #1
 8002468:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800247a:	2300      	movs	r3, #0
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800247e:	2301      	movs	r3, #1
 8002480:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002484:	2301      	movs	r3, #1
 8002486:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800248c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800248e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002492:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002498:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800249a:	2301      	movs	r3, #1
 800249c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80024a8:	f107 0308 	add.w	r3, r7, #8
 80024ac:	4619      	mov	r1, r3
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff ff08 	bl	80022c4 <ETH_SetDMAConfig>
}
 80024b4:	bf00      	nop
 80024b6:	3798      	adds	r7, #152	; 0x98
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3305      	adds	r3, #5
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	3204      	adds	r2, #4
 80024d4:	7812      	ldrb	r2, [r2, #0]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <ETH_MACAddressConfig+0x68>)
 80024de:	4413      	add	r3, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3303      	adds	r3, #3
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	061a      	lsls	r2, r3, #24
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3302      	adds	r3, #2
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	041b      	lsls	r3, r3, #16
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3301      	adds	r3, #1
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	4313      	orrs	r3, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	7812      	ldrb	r2, [r2, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <ETH_MACAddressConfig+0x6c>)
 800250e:	4413      	add	r3, r2
 8002510:	461a      	mov	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	6013      	str	r3, [r2, #0]
}
 8002516:	bf00      	nop
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40028040 	.word	0x40028040
 8002528:	40028044 	.word	0x40028044

0800252c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e03e      	b.n	80025b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68d9      	ldr	r1, [r3, #12]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	440b      	add	r3, r1
 800254a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2200      	movs	r2, #0
 8002556:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	3206      	adds	r2, #6
 800256c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d80c      	bhi.n	800259c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68d9      	ldr	r1, [r3, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	461a      	mov	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	e004      	b.n	80025a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	461a      	mov	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3301      	adds	r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d9bd      	bls.n	800253a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d0:	611a      	str	r2, [r3, #16]
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80025de:	b480      	push	{r7}
 80025e0:	b085      	sub	sp, #20
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	e046      	b.n	800267a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6919      	ldr	r1, [r3, #16]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2200      	movs	r2, #0
 8002608:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2200      	movs	r2, #0
 800261a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2200      	movs	r2, #0
 8002620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002628:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002630:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	3212      	adds	r2, #18
 8002646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d80c      	bhi.n	800266a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6919      	ldr	r1, [r3, #16]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	461a      	mov	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	60da      	str	r2, [r3, #12]
 8002668:	e004      	b.n	8002674 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	461a      	mov	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3301      	adds	r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d9b5      	bls.n	80025ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026aa:	60da      	str	r2, [r3, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b08d      	sub	sp, #52	; 0x34
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3318      	adds	r3, #24
 80026c8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026fa:	d007      	beq.n	800270c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	3304      	adds	r3, #4
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800270c:	2302      	movs	r3, #2
 800270e:	e0ff      	b.n	8002910 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	3301      	adds	r3, #1
 8002714:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4b7d      	ldr	r3, [pc, #500]	; (800291c <ETH_Prepare_Tx_Descriptors+0x264>)
 8002726:	4013      	ands	r3, r2
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	6852      	ldr	r2, [r2, #4]
 800272c:	431a      	orrs	r2, r3
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d008      	beq.n	8002750 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	431a      	orrs	r2, r3
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	431a      	orrs	r2, r3
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002792:	f3bf 8f5f 	dmb	sy
}
 8002796:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80027a4:	e082      	b.n	80028ac <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d006      	beq.n	80027c6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e005      	b.n	80027d2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80027d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d4:	3301      	adds	r3, #1
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d902      	bls.n	80027e4 <ETH_Prepare_Tx_Descriptors+0x12c>
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	3b04      	subs	r3, #4
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ec:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002806:	d007      	beq.n	8002818 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	3304      	adds	r3, #4
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d029      	beq.n	800286c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002824:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002826:	2300      	movs	r3, #0
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
 800282a:	e019      	b.n	8002860 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800282c:	f3bf 8f5f 	dmb	sy
}
 8002830:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	3301      	adds	r3, #1
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	2b03      	cmp	r3, #3
 8002848:	d902      	bls.n	8002850 <ETH_Prepare_Tx_Descriptors+0x198>
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	3b04      	subs	r3, #4
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002858:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	3301      	adds	r3, #1
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	429a      	cmp	r2, r3
 8002866:	d3e1      	bcc.n	800282c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002868:	2302      	movs	r3, #2
 800286a:	e051      	b.n	8002910 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	3301      	adds	r3, #1
 8002870:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4b25      	ldr	r3, [pc, #148]	; (800291c <ETH_Prepare_Tx_Descriptors+0x264>)
 8002888:	4013      	ands	r3, r2
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	6852      	ldr	r2, [r2, #4]
 800288e:	431a      	orrs	r2, r3
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	3301      	adds	r3, #1
 8002898:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800289a:	f3bf 8f5f 	dmb	sy
}
 800289e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f47f af78 	bne.w	80027a6 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e005      	b.n	80028d6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e6:	6979      	ldr	r1, [r7, #20]
 80028e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ea:	3304      	adds	r3, #4
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80028f8:	b672      	cpsid	i
}
 80028fa:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4413      	add	r3, r2
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800290a:	b662      	cpsie	i
}
 800290c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3734      	adds	r7, #52	; 0x34
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	ffffe000 	.word	0xffffe000

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	e175      	b.n	8002c2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002940:	2201      	movs	r2, #1
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	429a      	cmp	r2, r3
 800295a:	f040 8164 	bne.w	8002c26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d005      	beq.n	8002976 <HAL_GPIO_Init+0x56>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d130      	bne.n	80029d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	2203      	movs	r2, #3
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029ac:	2201      	movs	r2, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 0201 	and.w	r2, r3, #1
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d017      	beq.n	8002a14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	2203      	movs	r2, #3
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d123      	bne.n	8002a68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	08da      	lsrs	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3208      	adds	r2, #8
 8002a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	220f      	movs	r2, #15
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	08da      	lsrs	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3208      	adds	r2, #8
 8002a62:	69b9      	ldr	r1, [r7, #24]
 8002a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2203      	movs	r2, #3
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0203 	and.w	r2, r3, #3
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80be 	beq.w	8002c26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aaa:	4b66      	ldr	r3, [pc, #408]	; (8002c44 <HAL_GPIO_Init+0x324>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	4a65      	ldr	r2, [pc, #404]	; (8002c44 <HAL_GPIO_Init+0x324>)
 8002ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_GPIO_Init+0x324>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ac2:	4a61      	ldr	r2, [pc, #388]	; (8002c48 <HAL_GPIO_Init+0x328>)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a58      	ldr	r2, [pc, #352]	; (8002c4c <HAL_GPIO_Init+0x32c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d037      	beq.n	8002b5e <HAL_GPIO_Init+0x23e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a57      	ldr	r2, [pc, #348]	; (8002c50 <HAL_GPIO_Init+0x330>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d031      	beq.n	8002b5a <HAL_GPIO_Init+0x23a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a56      	ldr	r2, [pc, #344]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d02b      	beq.n	8002b56 <HAL_GPIO_Init+0x236>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a55      	ldr	r2, [pc, #340]	; (8002c58 <HAL_GPIO_Init+0x338>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d025      	beq.n	8002b52 <HAL_GPIO_Init+0x232>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a54      	ldr	r2, [pc, #336]	; (8002c5c <HAL_GPIO_Init+0x33c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d01f      	beq.n	8002b4e <HAL_GPIO_Init+0x22e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a53      	ldr	r2, [pc, #332]	; (8002c60 <HAL_GPIO_Init+0x340>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d019      	beq.n	8002b4a <HAL_GPIO_Init+0x22a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a52      	ldr	r2, [pc, #328]	; (8002c64 <HAL_GPIO_Init+0x344>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_GPIO_Init+0x226>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a51      	ldr	r2, [pc, #324]	; (8002c68 <HAL_GPIO_Init+0x348>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00d      	beq.n	8002b42 <HAL_GPIO_Init+0x222>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a50      	ldr	r2, [pc, #320]	; (8002c6c <HAL_GPIO_Init+0x34c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <HAL_GPIO_Init+0x21e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4f      	ldr	r2, [pc, #316]	; (8002c70 <HAL_GPIO_Init+0x350>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d101      	bne.n	8002b3a <HAL_GPIO_Init+0x21a>
 8002b36:	2309      	movs	r3, #9
 8002b38:	e012      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b3a:	230a      	movs	r3, #10
 8002b3c:	e010      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b3e:	2308      	movs	r3, #8
 8002b40:	e00e      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b42:	2307      	movs	r3, #7
 8002b44:	e00c      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b46:	2306      	movs	r3, #6
 8002b48:	e00a      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b4a:	2305      	movs	r3, #5
 8002b4c:	e008      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b4e:	2304      	movs	r3, #4
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b52:	2303      	movs	r3, #3
 8002b54:	e004      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e002      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f002 0203 	and.w	r2, r2, #3
 8002b66:	0092      	lsls	r2, r2, #2
 8002b68:	4093      	lsls	r3, r2
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b70:	4935      	ldr	r1, [pc, #212]	; (8002c48 <HAL_GPIO_Init+0x328>)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ba2:	4a34      	ldr	r2, [pc, #208]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba8:	4b32      	ldr	r3, [pc, #200]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bcc:	4a29      	ldr	r2, [pc, #164]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bd2:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bf6:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c20:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2b0f      	cmp	r3, #15
 8002c30:	f67f ae86 	bls.w	8002940 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3724      	adds	r7, #36	; 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40013800 	.word	0x40013800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40020400 	.word	0x40020400
 8002c54:	40020800 	.word	0x40020800
 8002c58:	40020c00 	.word	0x40020c00
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40021400 	.word	0x40021400
 8002c64:	40021800 	.word	0x40021800
 8002c68:	40021c00 	.word	0x40021c00
 8002c6c:	40022000 	.word	0x40022000
 8002c70:	40022400 	.word	0x40022400
 8002c74:	40013c00 	.word	0x40013c00

08002c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
 8002c84:	4613      	mov	r3, r2
 8002c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c88:	787b      	ldrb	r3, [r7, #1]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c94:	e003      	b.n	8002c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	041a      	lsls	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	619a      	str	r2, [r3, #24]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002caa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cac:	b08f      	sub	sp, #60	; 0x3c
 8002cae:	af0a      	add	r7, sp, #40	; 0x28
 8002cb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e116      	b.n	8002eea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd fec4 	bl	8000a64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2203      	movs	r2, #3
 8002ce0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f002 f9f4 	bl	80050e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	687e      	ldr	r6, [r7, #4]
 8002d08:	466d      	mov	r5, sp
 8002d0a:	f106 0410 	add.w	r4, r6, #16
 8002d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d1e:	1d33      	adds	r3, r6, #4
 8002d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d22:	6838      	ldr	r0, [r7, #0]
 8002d24:	f002 f988 	bl	8005038 <USB_CoreInit>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0d7      	b.n	8002eea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f002 f9e2 	bl	800510a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
 8002d4a:	e04a      	b.n	8002de2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	333d      	adds	r3, #61	; 0x3d
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	333c      	adds	r3, #60	; 0x3c
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	b298      	uxth	r0, r3
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	3344      	adds	r3, #68	; 0x44
 8002d88:	4602      	mov	r2, r0
 8002d8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3340      	adds	r3, #64	; 0x40
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	3348      	adds	r3, #72	; 0x48
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	334c      	adds	r3, #76	; 0x4c
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3354      	adds	r3, #84	; 0x54
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	3301      	adds	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d3af      	bcc.n	8002d4c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e044      	b.n	8002e7c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002df2:	7bfa      	ldrb	r2, [r7, #15]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e1e:	7bfa      	ldrb	r2, [r7, #15]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e34:	7bfa      	ldrb	r2, [r7, #15]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d3b5      	bcc.n	8002df2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	687e      	ldr	r6, [r7, #4]
 8002e8e:	466d      	mov	r5, sp
 8002e90:	f106 0410 	add.w	r4, r6, #16
 8002e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ea0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ea4:	1d33      	adds	r3, r6, #4
 8002ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ea8:	6838      	ldr	r0, [r7, #0]
 8002eaa:	f002 f97b 	bl	80051a4 <USB_DevInit>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e014      	b.n	8002eea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d102      	bne.n	8002ede <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f80b 	bl	8002ef4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f002 fb39 	bl	800555a <USB_DevDisconnect>

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ef4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_PCDEx_ActivateLPM+0x44>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	10000003 	.word	0x10000003

08002f3c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4a:	6013      	str	r3, [r2, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40007000 	.word	0x40007000

08002f5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	4a22      	ldr	r2, [pc, #136]	; (8002ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f70:	6413      	str	r3, [r2, #64]	; 0x40
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1d      	ldr	r2, [pc, #116]	; (8002ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f88:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f8a:	f7fe f909 	bl	80011a0 <HAL_GetTick>
 8002f8e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f90:	e009      	b.n	8002fa6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f92:	f7fe f905 	bl	80011a0 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa0:	d901      	bls.n	8002fa6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e022      	b.n	8002fec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fa6:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb2:	d1ee      	bne.n	8002f92 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002fb4:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0f      	ldr	r2, [pc, #60]	; (8002ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fbe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fc0:	f7fe f8ee 	bl	80011a0 <HAL_GetTick>
 8002fc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fc6:	e009      	b.n	8002fdc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fc8:	f7fe f8ea 	bl	80011a0 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fd6:	d901      	bls.n	8002fdc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e007      	b.n	8002fec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fe8:	d1ee      	bne.n	8002fc8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40007000 	.word	0x40007000

08002ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003004:	2300      	movs	r3, #0
 8003006:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e291      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8087 	beq.w	800312e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003020:	4b96      	ldr	r3, [pc, #600]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b04      	cmp	r3, #4
 800302a:	d00c      	beq.n	8003046 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302c:	4b93      	ldr	r3, [pc, #588]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d112      	bne.n	800305e <HAL_RCC_OscConfig+0x62>
 8003038:	4b90      	ldr	r3, [pc, #576]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003044:	d10b      	bne.n	800305e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003046:	4b8d      	ldr	r3, [pc, #564]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d06c      	beq.n	800312c <HAL_RCC_OscConfig+0x130>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d168      	bne.n	800312c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e26b      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x7a>
 8003068:	4b84      	ldr	r3, [pc, #528]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a83      	ldr	r2, [pc, #524]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e02e      	b.n	80030d4 <HAL_RCC_OscConfig+0xd8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x9c>
 800307e:	4b7f      	ldr	r3, [pc, #508]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7e      	ldr	r2, [pc, #504]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b7c      	ldr	r3, [pc, #496]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7b      	ldr	r2, [pc, #492]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e01d      	b.n	80030d4 <HAL_RCC_OscConfig+0xd8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0xc0>
 80030a2:	4b76      	ldr	r3, [pc, #472]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a75      	ldr	r2, [pc, #468]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b73      	ldr	r3, [pc, #460]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a72      	ldr	r2, [pc, #456]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0xd8>
 80030bc:	4b6f      	ldr	r3, [pc, #444]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a6e      	ldr	r2, [pc, #440]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b6c      	ldr	r3, [pc, #432]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a6b      	ldr	r2, [pc, #428]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d013      	beq.n	8003104 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe f860 	bl	80011a0 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e4:	f7fe f85c 	bl	80011a0 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	; 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e21f      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b61      	ldr	r3, [pc, #388]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0xe8>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe f84c 	bl	80011a0 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800310c:	f7fe f848 	bl	80011a0 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e20b      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	4b57      	ldr	r3, [pc, #348]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x110>
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d069      	beq.n	800320e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800313a:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b4d      	ldr	r3, [pc, #308]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b08      	cmp	r3, #8
 8003150:	d11c      	bne.n	800318c <HAL_RCC_OscConfig+0x190>
 8003152:	4b4a      	ldr	r3, [pc, #296]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d116      	bne.n	800318c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	4b47      	ldr	r3, [pc, #284]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_RCC_OscConfig+0x17a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d001      	beq.n	8003176 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e1df      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	493d      	ldr	r1, [pc, #244]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	e040      	b.n	800320e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d023      	beq.n	80031dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003194:	4b39      	ldr	r3, [pc, #228]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a38      	ldr	r2, [pc, #224]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fd fffe 	bl	80011a0 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a8:	f7fd fffa 	bl	80011a0 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e1bd      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ba:	4b30      	ldr	r3, [pc, #192]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c6:	4b2d      	ldr	r3, [pc, #180]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4929      	ldr	r1, [pc, #164]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]
 80031da:	e018      	b.n	800320e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031dc:	4b27      	ldr	r3, [pc, #156]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a26      	ldr	r2, [pc, #152]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fd ffda 	bl	80011a0 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f0:	f7fd ffd6 	bl	80011a0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e199      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003202:	4b1e      	ldr	r3, [pc, #120]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d038      	beq.n	800328c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d019      	beq.n	8003256 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003222:	4b16      	ldr	r3, [pc, #88]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	4a15      	ldr	r2, [pc, #84]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322e:	f7fd ffb7 	bl	80011a0 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003236:	f7fd ffb3 	bl	80011a0 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e176      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800324a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x23a>
 8003254:	e01a      	b.n	800328c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325a:	4a08      	ldr	r2, [pc, #32]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fd ff9d 	bl	80011a0 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326a:	f7fd ff99 	bl	80011a0 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d903      	bls.n	8003280 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e15c      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
 800327c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003280:	4b91      	ldr	r3, [pc, #580]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ee      	bne.n	800326a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80a4 	beq.w	80033e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329a:	4b8b      	ldr	r3, [pc, #556]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	4b88      	ldr	r3, [pc, #544]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	4a87      	ldr	r2, [pc, #540]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b0:	6413      	str	r3, [r2, #64]	; 0x40
 80032b2:	4b85      	ldr	r3, [pc, #532]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032be:	2301      	movs	r3, #1
 80032c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c2:	4b82      	ldr	r3, [pc, #520]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d118      	bne.n	8003300 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032ce:	4b7f      	ldr	r3, [pc, #508]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a7e      	ldr	r2, [pc, #504]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032da:	f7fd ff61 	bl	80011a0 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e2:	f7fd ff5d 	bl	80011a0 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b64      	cmp	r3, #100	; 0x64
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e120      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f4:	4b75      	ldr	r3, [pc, #468]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x31a>
 8003308:	4b6f      	ldr	r3, [pc, #444]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	4a6e      	ldr	r2, [pc, #440]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6713      	str	r3, [r2, #112]	; 0x70
 8003314:	e02d      	b.n	8003372 <HAL_RCC_OscConfig+0x376>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x33c>
 800331e:	4b6a      	ldr	r3, [pc, #424]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a69      	ldr	r2, [pc, #420]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
 800332a:	4b67      	ldr	r3, [pc, #412]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a66      	ldr	r2, [pc, #408]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	e01c      	b.n	8003372 <HAL_RCC_OscConfig+0x376>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b05      	cmp	r3, #5
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0x35e>
 8003340:	4b61      	ldr	r3, [pc, #388]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a60      	ldr	r2, [pc, #384]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003346:	f043 0304 	orr.w	r3, r3, #4
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
 800334c:	4b5e      	ldr	r3, [pc, #376]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a5d      	ldr	r2, [pc, #372]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
 8003358:	e00b      	b.n	8003372 <HAL_RCC_OscConfig+0x376>
 800335a:	4b5b      	ldr	r3, [pc, #364]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a5a      	ldr	r2, [pc, #360]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
 8003366:	4b58      	ldr	r3, [pc, #352]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a57      	ldr	r2, [pc, #348]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d015      	beq.n	80033a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fd ff11 	bl	80011a0 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fd ff0d 	bl	80011a0 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0ce      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	4b4b      	ldr	r3, [pc, #300]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ee      	beq.n	8003382 <HAL_RCC_OscConfig+0x386>
 80033a4:	e014      	b.n	80033d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a6:	f7fd fefb 	bl	80011a0 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fd fef7 	bl	80011a0 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e0b8      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ee      	bne.n	80033ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d6:	4b3c      	ldr	r3, [pc, #240]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a3b      	ldr	r2, [pc, #236]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 80033dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80a4 	beq.w	8003534 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ec:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d06b      	beq.n	80034d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d149      	bne.n	8003494 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003400:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a30      	ldr	r2, [pc, #192]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800340a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fd fec8 	bl	80011a0 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003414:	f7fd fec4 	bl	80011a0 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e087      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003426:	4b28      	ldr	r3, [pc, #160]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	019b      	lsls	r3, r3, #6
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	3b01      	subs	r3, #1
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	061b      	lsls	r3, r3, #24
 8003456:	4313      	orrs	r3, r2
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 800345a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800345e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800346a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fd fe98 	bl	80011a0 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003474:	f7fd fe94 	bl	80011a0 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e057      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x478>
 8003492:	e04f      	b.n	8003534 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 800349a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800349e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fd fe7e 	bl	80011a0 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a8:	f7fd fe7a 	bl	80011a0 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e03d      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ba:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4ac>
 80034c6:	e035      	b.n	8003534 <HAL_RCC_OscConfig+0x538>
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034d0:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <HAL_RCC_OscConfig+0x544>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d028      	beq.n	8003530 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d121      	bne.n	8003530 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d11a      	bne.n	8003530 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003500:	4013      	ands	r3, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003506:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003508:	4293      	cmp	r3, r2
 800350a:	d111      	bne.n	8003530 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	3b01      	subs	r3, #1
 800351a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d107      	bne.n	8003530 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800

08003544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0d0      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b6a      	ldr	r3, [pc, #424]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d910      	bls.n	800358c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b67      	ldr	r3, [pc, #412]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 020f 	bic.w	r2, r3, #15
 8003572:	4965      	ldr	r1, [pc, #404]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b63      	ldr	r3, [pc, #396]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0b8      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a4:	4b59      	ldr	r3, [pc, #356]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a58      	ldr	r2, [pc, #352]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035bc:	4b53      	ldr	r3, [pc, #332]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a52      	ldr	r2, [pc, #328]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c8:	4b50      	ldr	r3, [pc, #320]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	494d      	ldr	r1, [pc, #308]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d040      	beq.n	8003668 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	4b47      	ldr	r3, [pc, #284]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d115      	bne.n	8003626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e07f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003606:	4b41      	ldr	r3, [pc, #260]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e073      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	4b3d      	ldr	r3, [pc, #244]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06b      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4936      	ldr	r1, [pc, #216]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003638:	f7fd fdb2 	bl	80011a0 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fd fdae 	bl	80011a0 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e053      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b2d      	ldr	r3, [pc, #180]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 020c 	and.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1eb      	bne.n	8003640 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003668:	4b27      	ldr	r3, [pc, #156]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d210      	bcs.n	8003698 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b24      	ldr	r3, [pc, #144]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 020f 	bic.w	r2, r3, #15
 800367e:	4922      	ldr	r1, [pc, #136]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b20      	ldr	r3, [pc, #128]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e032      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4916      	ldr	r1, [pc, #88]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	490e      	ldr	r1, [pc, #56]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036d6:	f000 f821 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036da:	4602      	mov	r2, r0
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	490a      	ldr	r1, [pc, #40]	; (8003710 <HAL_RCC_ClockConfig+0x1cc>)
 80036e8:	5ccb      	ldrb	r3, [r1, r3]
 80036ea:	fa22 f303 	lsr.w	r3, r2, r3
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <HAL_RCC_ClockConfig+0x1d0>)
 80036f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_RCC_ClockConfig+0x1d4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fa2e 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023c00 	.word	0x40023c00
 800370c:	40023800 	.word	0x40023800
 8003710:	08016fe4 	.word	0x08016fe4
 8003714:	20000000 	.word	0x20000000
 8003718:	20000004 	.word	0x20000004

0800371c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003720:	b094      	sub	sp, #80	; 0x50
 8003722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	647b      	str	r3, [r7, #68]	; 0x44
 8003728:	2300      	movs	r3, #0
 800372a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800372c:	2300      	movs	r3, #0
 800372e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003734:	4b79      	ldr	r3, [pc, #484]	; (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d00d      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x40>
 8003740:	2b08      	cmp	r3, #8
 8003742:	f200 80e1 	bhi.w	8003908 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x34>
 800374a:	2b04      	cmp	r3, #4
 800374c:	d003      	beq.n	8003756 <HAL_RCC_GetSysClockFreq+0x3a>
 800374e:	e0db      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b73      	ldr	r3, [pc, #460]	; (8003920 <HAL_RCC_GetSysClockFreq+0x204>)
 8003752:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003754:	e0db      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003756:	4b73      	ldr	r3, [pc, #460]	; (8003924 <HAL_RCC_GetSysClockFreq+0x208>)
 8003758:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800375a:	e0d8      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800375c:	4b6f      	ldr	r3, [pc, #444]	; (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003764:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003766:	4b6d      	ldr	r3, [pc, #436]	; (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d063      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003772:	4b6a      	ldr	r3, [pc, #424]	; (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	099b      	lsrs	r3, r3, #6
 8003778:	2200      	movs	r2, #0
 800377a:	63bb      	str	r3, [r7, #56]	; 0x38
 800377c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003784:	633b      	str	r3, [r7, #48]	; 0x30
 8003786:	2300      	movs	r3, #0
 8003788:	637b      	str	r3, [r7, #52]	; 0x34
 800378a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800378e:	4622      	mov	r2, r4
 8003790:	462b      	mov	r3, r5
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	0159      	lsls	r1, r3, #5
 800379c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a0:	0150      	lsls	r0, r2, #5
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4621      	mov	r1, r4
 80037a8:	1a51      	subs	r1, r2, r1
 80037aa:	6139      	str	r1, [r7, #16]
 80037ac:	4629      	mov	r1, r5
 80037ae:	eb63 0301 	sbc.w	r3, r3, r1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c0:	4659      	mov	r1, fp
 80037c2:	018b      	lsls	r3, r1, #6
 80037c4:	4651      	mov	r1, sl
 80037c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ca:	4651      	mov	r1, sl
 80037cc:	018a      	lsls	r2, r1, #6
 80037ce:	4651      	mov	r1, sl
 80037d0:	ebb2 0801 	subs.w	r8, r2, r1
 80037d4:	4659      	mov	r1, fp
 80037d6:	eb63 0901 	sbc.w	r9, r3, r1
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ee:	4690      	mov	r8, r2
 80037f0:	4699      	mov	r9, r3
 80037f2:	4623      	mov	r3, r4
 80037f4:	eb18 0303 	adds.w	r3, r8, r3
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	462b      	mov	r3, r5
 80037fc:	eb49 0303 	adc.w	r3, r9, r3
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800380e:	4629      	mov	r1, r5
 8003810:	024b      	lsls	r3, r1, #9
 8003812:	4621      	mov	r1, r4
 8003814:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003818:	4621      	mov	r1, r4
 800381a:	024a      	lsls	r2, r1, #9
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003822:	2200      	movs	r2, #0
 8003824:	62bb      	str	r3, [r7, #40]	; 0x28
 8003826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800382c:	f7fc fd40 	bl	80002b0 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003838:	e058      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383a:	4b38      	ldr	r3, [pc, #224]	; (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	099b      	lsrs	r3, r3, #6
 8003840:	2200      	movs	r2, #0
 8003842:	4618      	mov	r0, r3
 8003844:	4611      	mov	r1, r2
 8003846:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800384a:	623b      	str	r3, [r7, #32]
 800384c:	2300      	movs	r3, #0
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
 8003850:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003854:	4642      	mov	r2, r8
 8003856:	464b      	mov	r3, r9
 8003858:	f04f 0000 	mov.w	r0, #0
 800385c:	f04f 0100 	mov.w	r1, #0
 8003860:	0159      	lsls	r1, r3, #5
 8003862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003866:	0150      	lsls	r0, r2, #5
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4641      	mov	r1, r8
 800386e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003872:	4649      	mov	r1, r9
 8003874:	eb63 0b01 	sbc.w	fp, r3, r1
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003884:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003888:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800388c:	ebb2 040a 	subs.w	r4, r2, sl
 8003890:	eb63 050b 	sbc.w	r5, r3, fp
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	00eb      	lsls	r3, r5, #3
 800389e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a2:	00e2      	lsls	r2, r4, #3
 80038a4:	4614      	mov	r4, r2
 80038a6:	461d      	mov	r5, r3
 80038a8:	4643      	mov	r3, r8
 80038aa:	18e3      	adds	r3, r4, r3
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	464b      	mov	r3, r9
 80038b0:	eb45 0303 	adc.w	r3, r5, r3
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038c2:	4629      	mov	r1, r5
 80038c4:	028b      	lsls	r3, r1, #10
 80038c6:	4621      	mov	r1, r4
 80038c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038cc:	4621      	mov	r1, r4
 80038ce:	028a      	lsls	r2, r1, #10
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d6:	2200      	movs	r2, #0
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	61fa      	str	r2, [r7, #28]
 80038dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e0:	f7fc fce6 	bl	80002b0 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038ec:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	3301      	adds	r3, #1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80038fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003906:	e002      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetSysClockFreq+0x204>)
 800390a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800390c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003910:	4618      	mov	r0, r3
 8003912:	3750      	adds	r7, #80	; 0x50
 8003914:	46bd      	mov	sp, r7
 8003916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	00f42400 	.word	0x00f42400
 8003924:	007a1200 	.word	0x007a1200

08003928 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000000 	.word	0x20000000

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003944:	f7ff fff0 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0a9b      	lsrs	r3, r3, #10
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4903      	ldr	r1, [pc, #12]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	08016ff4 	.word	0x08016ff4

08003968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800396c:	f7ff ffdc 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0b5b      	lsrs	r3, r3, #13
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4903      	ldr	r1, [pc, #12]	; (800398c <HAL_RCC_GetPCLK2Freq+0x24>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	08016ff4 	.word	0x08016ff4

08003990 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	220f      	movs	r2, #15
 800399e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0203 	and.w	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	08db      	lsrs	r3, r3, #3
 80039ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039d2:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <HAL_RCC_GetClockConfig+0x60>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 020f 	and.w	r2, r3, #15
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	601a      	str	r2, [r3, #0]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40023c00 	.word	0x40023c00

080039f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d012      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a1c:	4b69      	ldr	r3, [pc, #420]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a68      	ldr	r2, [pc, #416]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a26:	6093      	str	r3, [r2, #8]
 8003a28:	4b66      	ldr	r3, [pc, #408]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a30:	4964      	ldr	r1, [pc, #400]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d017      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a4e:	4b5d      	ldr	r3, [pc, #372]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	4959      	ldr	r1, [pc, #356]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d017      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a8a:	4b4e      	ldr	r3, [pc, #312]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	494a      	ldr	r1, [pc, #296]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa8:	d101      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 808b 	beq.w	8003bee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ad8:	4b3a      	ldr	r3, [pc, #232]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	4a39      	ldr	r2, [pc, #228]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae4:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003af0:	4b35      	ldr	r3, [pc, #212]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a34      	ldr	r2, [pc, #208]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afc:	f7fd fb50 	bl	80011a0 <HAL_GetTick>
 8003b00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b04:	f7fd fb4c 	bl	80011a0 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e357      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b16:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b22:	4b28      	ldr	r3, [pc, #160]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d035      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d02e      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b40:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b56:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b62:	4a18      	ldr	r2, [pc, #96]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b68:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d114      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fd fb14 	bl	80011a0 <HAL_GetTick>
 8003b78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fd fb10 	bl	80011a0 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e319      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ee      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003baa:	d111      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bac:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bb8:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bba:	400b      	ands	r3, r1
 8003bbc:	4901      	ldr	r1, [pc, #4]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40007000 	.word	0x40007000
 8003bcc:	0ffffcff 	.word	0x0ffffcff
 8003bd0:	4baa      	ldr	r3, [pc, #680]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4aa9      	ldr	r2, [pc, #676]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bda:	6093      	str	r3, [r2, #8]
 8003bdc:	4ba7      	ldr	r3, [pc, #668]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	49a4      	ldr	r1, [pc, #656]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d010      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bfa:	4ba0      	ldr	r3, [pc, #640]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c00:	4a9e      	ldr	r2, [pc, #632]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c0a:	4b9c      	ldr	r3, [pc, #624]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	4999      	ldr	r1, [pc, #612]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c28:	4b94      	ldr	r3, [pc, #592]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c36:	4991      	ldr	r1, [pc, #580]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c4a:	4b8c      	ldr	r3, [pc, #560]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c58:	4988      	ldr	r1, [pc, #544]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c6c:	4b83      	ldr	r3, [pc, #524]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7a:	4980      	ldr	r1, [pc, #512]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c8e:	4b7b      	ldr	r3, [pc, #492]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	4977      	ldr	r1, [pc, #476]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb0:	4b72      	ldr	r3, [pc, #456]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb6:	f023 0203 	bic.w	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	496f      	ldr	r1, [pc, #444]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd2:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd8:	f023 020c 	bic.w	r2, r3, #12
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce0:	4966      	ldr	r1, [pc, #408]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf4:	4b61      	ldr	r3, [pc, #388]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	495e      	ldr	r1, [pc, #376]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d16:	4b59      	ldr	r3, [pc, #356]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d24:	4955      	ldr	r1, [pc, #340]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d38:	4b50      	ldr	r3, [pc, #320]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	494d      	ldr	r1, [pc, #308]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d5a:	4b48      	ldr	r3, [pc, #288]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	4944      	ldr	r1, [pc, #272]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d7c:	4b3f      	ldr	r3, [pc, #252]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8a:	493c      	ldr	r1, [pc, #240]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d9e:	4b37      	ldr	r3, [pc, #220]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dac:	4933      	ldr	r1, [pc, #204]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dc0:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dce:	492b      	ldr	r1, [pc, #172]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d011      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003df0:	4922      	ldr	r1, [pc, #136]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e00:	d101      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e22:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e30:	4912      	ldr	r1, [pc, #72]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00b      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e44:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e54:	4909      	ldr	r1, [pc, #36]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d006      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80d9 	beq.w	8004022 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e70:	4b02      	ldr	r3, [pc, #8]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a01      	ldr	r2, [pc, #4]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e7a:	e001      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e82:	f7fd f98d 	bl	80011a0 <HAL_GetTick>
 8003e86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e8a:	f7fd f989 	bl	80011a0 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b64      	cmp	r3, #100	; 0x64
 8003e96:	d901      	bls.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e194      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e9c:	4b6c      	ldr	r3, [pc, #432]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d021      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d11d      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ebc:	4b64      	ldr	r3, [pc, #400]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec2:	0c1b      	lsrs	r3, r3, #16
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003eca:	4b61      	ldr	r3, [pc, #388]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed0:	0e1b      	lsrs	r3, r3, #24
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	019a      	lsls	r2, r3, #6
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	061b      	lsls	r3, r3, #24
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	071b      	lsls	r3, r3, #28
 8003ef0:	4957      	ldr	r1, [pc, #348]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d004      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d02e      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f22:	d129      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f24:	4b4a      	ldr	r3, [pc, #296]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2a:	0c1b      	lsrs	r3, r3, #16
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f32:	4b47      	ldr	r3, [pc, #284]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f38:	0f1b      	lsrs	r3, r3, #28
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	019a      	lsls	r2, r3, #6
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	061b      	lsls	r3, r3, #24
 8003f52:	431a      	orrs	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	071b      	lsls	r3, r3, #28
 8003f58:	493d      	ldr	r1, [pc, #244]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f60:	4b3b      	ldr	r3, [pc, #236]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f66:	f023 021f 	bic.w	r2, r3, #31
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	4937      	ldr	r1, [pc, #220]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01d      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f84:	4b32      	ldr	r3, [pc, #200]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f8a:	0e1b      	lsrs	r3, r3, #24
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f92:	4b2f      	ldr	r3, [pc, #188]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f98:	0f1b      	lsrs	r3, r3, #28
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	019a      	lsls	r2, r3, #6
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	431a      	orrs	r2, r3
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	071b      	lsls	r3, r3, #28
 8003fb8:	4925      	ldr	r1, [pc, #148]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d011      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	019a      	lsls	r2, r3, #6
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	061b      	lsls	r3, r3, #24
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	071b      	lsls	r3, r3, #28
 8003fe8:	4919      	ldr	r1, [pc, #100]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ff0:	4b17      	ldr	r3, [pc, #92]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a16      	ldr	r2, [pc, #88]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ffc:	f7fd f8d0 	bl	80011a0 <HAL_GetTick>
 8004000:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004004:	f7fd f8cc 	bl	80011a0 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e0d7      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004016:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b01      	cmp	r3, #1
 8004026:	f040 80cd 	bne.w	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800402a:	4b09      	ldr	r3, [pc, #36]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a08      	ldr	r2, [pc, #32]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004036:	f7fd f8b3 	bl	80011a0 <HAL_GetTick>
 800403a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800403c:	e00a      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800403e:	f7fd f8af 	bl	80011a0 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b64      	cmp	r3, #100	; 0x64
 800404a:	d903      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e0ba      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004050:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004054:	4b5e      	ldr	r3, [pc, #376]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800405c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004060:	d0ed      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800407e:	2b00      	cmp	r3, #0
 8004080:	d02e      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d12a      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800408a:	4b51      	ldr	r3, [pc, #324]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004098:	4b4d      	ldr	r3, [pc, #308]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	0f1b      	lsrs	r3, r3, #28
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	019a      	lsls	r2, r3, #6
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	061b      	lsls	r3, r3, #24
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	4944      	ldr	r1, [pc, #272]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040c6:	4b42      	ldr	r3, [pc, #264]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	3b01      	subs	r3, #1
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	493d      	ldr	r1, [pc, #244]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d022      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f4:	d11d      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040f6:	4b36      	ldr	r3, [pc, #216]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	0e1b      	lsrs	r3, r3, #24
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004104:	4b32      	ldr	r3, [pc, #200]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	0f1b      	lsrs	r3, r3, #28
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	019a      	lsls	r2, r3, #6
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	041b      	lsls	r3, r3, #16
 800411e:	431a      	orrs	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	061b      	lsls	r3, r3, #24
 8004124:	431a      	orrs	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	071b      	lsls	r3, r3, #28
 800412a:	4929      	ldr	r1, [pc, #164]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d028      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800413e:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004144:	0e1b      	lsrs	r3, r3, #24
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800414c:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	019a      	lsls	r2, r3, #6
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	431a      	orrs	r2, r3
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	071b      	lsls	r3, r3, #28
 8004172:	4917      	ldr	r1, [pc, #92]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800417a:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800417c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	4911      	ldr	r1, [pc, #68]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004190:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a0e      	ldr	r2, [pc, #56]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419c:	f7fd f800 	bl	80011a0 <HAL_GetTick>
 80041a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041a4:	f7fc fffc 	bl	80011a0 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b64      	cmp	r3, #100	; 0x64
 80041b0:	d901      	bls.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e007      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c2:	d1ef      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800

080041d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e049      	b.n	800427a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f841 	bl	8004282 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f000 fa00 	bl	8004618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d001      	beq.n	80042b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e054      	b.n	800435a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a26      	ldr	r2, [pc, #152]	; (8004368 <HAL_TIM_Base_Start_IT+0xd0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d022      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x80>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042da:	d01d      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x80>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a22      	ldr	r2, [pc, #136]	; (800436c <HAL_TIM_Base_Start_IT+0xd4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d018      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x80>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a21      	ldr	r2, [pc, #132]	; (8004370 <HAL_TIM_Base_Start_IT+0xd8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d013      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x80>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1f      	ldr	r2, [pc, #124]	; (8004374 <HAL_TIM_Base_Start_IT+0xdc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x80>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <HAL_TIM_Base_Start_IT+0xe0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d009      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x80>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1c      	ldr	r2, [pc, #112]	; (800437c <HAL_TIM_Base_Start_IT+0xe4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x80>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <HAL_TIM_Base_Start_IT+0xe8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d115      	bne.n	8004344 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	4b19      	ldr	r3, [pc, #100]	; (8004384 <HAL_TIM_Base_Start_IT+0xec>)
 8004320:	4013      	ands	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b06      	cmp	r3, #6
 8004328:	d015      	beq.n	8004356 <HAL_TIM_Base_Start_IT+0xbe>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004330:	d011      	beq.n	8004356 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0201 	orr.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004342:	e008      	b.n	8004356 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	e000      	b.n	8004358 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004356:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40010000 	.word	0x40010000
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800
 8004374:	40000c00 	.word	0x40000c00
 8004378:	40010400 	.word	0x40010400
 800437c:	40014000 	.word	0x40014000
 8004380:	40001800 	.word	0x40001800
 8004384:	00010007 	.word	0x00010007

08004388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b02      	cmp	r3, #2
 800439c:	d122      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d11b      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0202 	mvn.w	r2, #2
 80043b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f905 	bl	80045da <HAL_TIM_IC_CaptureCallback>
 80043d0:	e005      	b.n	80043de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f8f7 	bl	80045c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f908 	bl	80045ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d122      	bne.n	8004438 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d11b      	bne.n	8004438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0204 	mvn.w	r2, #4
 8004408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2202      	movs	r2, #2
 800440e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f8db 	bl	80045da <HAL_TIM_IC_CaptureCallback>
 8004424:	e005      	b.n	8004432 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f8cd 	bl	80045c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f8de 	bl	80045ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b08      	cmp	r3, #8
 8004444:	d122      	bne.n	800448c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b08      	cmp	r3, #8
 8004452:	d11b      	bne.n	800448c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0208 	mvn.w	r2, #8
 800445c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2204      	movs	r2, #4
 8004462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f8b1 	bl	80045da <HAL_TIM_IC_CaptureCallback>
 8004478:	e005      	b.n	8004486 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f8a3 	bl	80045c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f8b4 	bl	80045ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b10      	cmp	r3, #16
 8004498:	d122      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b10      	cmp	r3, #16
 80044a6:	d11b      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0210 	mvn.w	r2, #16
 80044b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2208      	movs	r2, #8
 80044b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f887 	bl	80045da <HAL_TIM_IC_CaptureCallback>
 80044cc:	e005      	b.n	80044da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f879 	bl	80045c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f88a 	bl	80045ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d10e      	bne.n	800450c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d107      	bne.n	800450c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0201 	mvn.w	r2, #1
 8004504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fc fa0c 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004516:	2b80      	cmp	r3, #128	; 0x80
 8004518:	d10e      	bne.n	8004538 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004524:	2b80      	cmp	r3, #128	; 0x80
 8004526:	d107      	bne.n	8004538 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f91a 	bl	800476c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004546:	d10e      	bne.n	8004566 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004552:	2b80      	cmp	r3, #128	; 0x80
 8004554:	d107      	bne.n	8004566 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800455e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f90d 	bl	8004780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004570:	2b40      	cmp	r3, #64	; 0x40
 8004572:	d10e      	bne.n	8004592 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457e:	2b40      	cmp	r3, #64	; 0x40
 8004580:	d107      	bne.n	8004592 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800458a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f838 	bl	8004602 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b20      	cmp	r3, #32
 800459e:	d10e      	bne.n	80045be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d107      	bne.n	80045be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f06f 0220 	mvn.w	r2, #32
 80045b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f8cd 	bl	8004758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a40      	ldr	r2, [pc, #256]	; (800472c <TIM_Base_SetConfig+0x114>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d013      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004636:	d00f      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a3d      	ldr	r2, [pc, #244]	; (8004730 <TIM_Base_SetConfig+0x118>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00b      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a3c      	ldr	r2, [pc, #240]	; (8004734 <TIM_Base_SetConfig+0x11c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d007      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a3b      	ldr	r2, [pc, #236]	; (8004738 <TIM_Base_SetConfig+0x120>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a3a      	ldr	r2, [pc, #232]	; (800473c <TIM_Base_SetConfig+0x124>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d108      	bne.n	800466a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2f      	ldr	r2, [pc, #188]	; (800472c <TIM_Base_SetConfig+0x114>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d02b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004678:	d027      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a2c      	ldr	r2, [pc, #176]	; (8004730 <TIM_Base_SetConfig+0x118>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d023      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a2b      	ldr	r2, [pc, #172]	; (8004734 <TIM_Base_SetConfig+0x11c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01f      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a2a      	ldr	r2, [pc, #168]	; (8004738 <TIM_Base_SetConfig+0x120>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a29      	ldr	r2, [pc, #164]	; (800473c <TIM_Base_SetConfig+0x124>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d017      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a28      	ldr	r2, [pc, #160]	; (8004740 <TIM_Base_SetConfig+0x128>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a27      	ldr	r2, [pc, #156]	; (8004744 <TIM_Base_SetConfig+0x12c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00f      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a26      	ldr	r2, [pc, #152]	; (8004748 <TIM_Base_SetConfig+0x130>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a25      	ldr	r2, [pc, #148]	; (800474c <TIM_Base_SetConfig+0x134>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d007      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a24      	ldr	r2, [pc, #144]	; (8004750 <TIM_Base_SetConfig+0x138>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d003      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a23      	ldr	r2, [pc, #140]	; (8004754 <TIM_Base_SetConfig+0x13c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d108      	bne.n	80046dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a0a      	ldr	r2, [pc, #40]	; (800472c <TIM_Base_SetConfig+0x114>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_Base_SetConfig+0xf8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a0c      	ldr	r2, [pc, #48]	; (800473c <TIM_Base_SetConfig+0x124>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d103      	bne.n	8004718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	615a      	str	r2, [r3, #20]
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40010000 	.word	0x40010000
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800
 8004738:	40000c00 	.word	0x40000c00
 800473c:	40010400 	.word	0x40010400
 8004740:	40014000 	.word	0x40014000
 8004744:	40014400 	.word	0x40014400
 8004748:	40014800 	.word	0x40014800
 800474c:	40001800 	.word	0x40001800
 8004750:	40001c00 	.word	0x40001c00
 8004754:	40002000 	.word	0x40002000

08004758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e040      	b.n	8004828 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fc f8f4 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2224      	movs	r2, #36	; 0x24
 80047c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0201 	bic.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f82c 	bl	8004830 <UART_SetConfig>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e022      	b.n	8004828 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fa84 	bl	8004cf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800480e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fb0b 	bl	8004e3c <UART_CheckIdleState>
 8004826:	4603      	mov	r3, r0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4ba6      	ldr	r3, [pc, #664]	; (8004af4 <UART_SetConfig+0x2c4>)
 800485c:	4013      	ands	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	6979      	ldr	r1, [r7, #20]
 8004864:	430b      	orrs	r3, r1
 8004866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	430a      	orrs	r2, r1
 80048a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a94      	ldr	r2, [pc, #592]	; (8004af8 <UART_SetConfig+0x2c8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d120      	bne.n	80048ee <UART_SetConfig+0xbe>
 80048ac:	4b93      	ldr	r3, [pc, #588]	; (8004afc <UART_SetConfig+0x2cc>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d816      	bhi.n	80048e8 <UART_SetConfig+0xb8>
 80048ba:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <UART_SetConfig+0x90>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048d1 	.word	0x080048d1
 80048c4:	080048dd 	.word	0x080048dd
 80048c8:	080048d7 	.word	0x080048d7
 80048cc:	080048e3 	.word	0x080048e3
 80048d0:	2301      	movs	r3, #1
 80048d2:	77fb      	strb	r3, [r7, #31]
 80048d4:	e150      	b.n	8004b78 <UART_SetConfig+0x348>
 80048d6:	2302      	movs	r3, #2
 80048d8:	77fb      	strb	r3, [r7, #31]
 80048da:	e14d      	b.n	8004b78 <UART_SetConfig+0x348>
 80048dc:	2304      	movs	r3, #4
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e14a      	b.n	8004b78 <UART_SetConfig+0x348>
 80048e2:	2308      	movs	r3, #8
 80048e4:	77fb      	strb	r3, [r7, #31]
 80048e6:	e147      	b.n	8004b78 <UART_SetConfig+0x348>
 80048e8:	2310      	movs	r3, #16
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e144      	b.n	8004b78 <UART_SetConfig+0x348>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a83      	ldr	r2, [pc, #524]	; (8004b00 <UART_SetConfig+0x2d0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d132      	bne.n	800495e <UART_SetConfig+0x12e>
 80048f8:	4b80      	ldr	r3, [pc, #512]	; (8004afc <UART_SetConfig+0x2cc>)
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b0c      	cmp	r3, #12
 8004904:	d828      	bhi.n	8004958 <UART_SetConfig+0x128>
 8004906:	a201      	add	r2, pc, #4	; (adr r2, 800490c <UART_SetConfig+0xdc>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	08004941 	.word	0x08004941
 8004910:	08004959 	.word	0x08004959
 8004914:	08004959 	.word	0x08004959
 8004918:	08004959 	.word	0x08004959
 800491c:	0800494d 	.word	0x0800494d
 8004920:	08004959 	.word	0x08004959
 8004924:	08004959 	.word	0x08004959
 8004928:	08004959 	.word	0x08004959
 800492c:	08004947 	.word	0x08004947
 8004930:	08004959 	.word	0x08004959
 8004934:	08004959 	.word	0x08004959
 8004938:	08004959 	.word	0x08004959
 800493c:	08004953 	.word	0x08004953
 8004940:	2300      	movs	r3, #0
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e118      	b.n	8004b78 <UART_SetConfig+0x348>
 8004946:	2302      	movs	r3, #2
 8004948:	77fb      	strb	r3, [r7, #31]
 800494a:	e115      	b.n	8004b78 <UART_SetConfig+0x348>
 800494c:	2304      	movs	r3, #4
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e112      	b.n	8004b78 <UART_SetConfig+0x348>
 8004952:	2308      	movs	r3, #8
 8004954:	77fb      	strb	r3, [r7, #31]
 8004956:	e10f      	b.n	8004b78 <UART_SetConfig+0x348>
 8004958:	2310      	movs	r3, #16
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e10c      	b.n	8004b78 <UART_SetConfig+0x348>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a68      	ldr	r2, [pc, #416]	; (8004b04 <UART_SetConfig+0x2d4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d120      	bne.n	80049aa <UART_SetConfig+0x17a>
 8004968:	4b64      	ldr	r3, [pc, #400]	; (8004afc <UART_SetConfig+0x2cc>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004972:	2b30      	cmp	r3, #48	; 0x30
 8004974:	d013      	beq.n	800499e <UART_SetConfig+0x16e>
 8004976:	2b30      	cmp	r3, #48	; 0x30
 8004978:	d814      	bhi.n	80049a4 <UART_SetConfig+0x174>
 800497a:	2b20      	cmp	r3, #32
 800497c:	d009      	beq.n	8004992 <UART_SetConfig+0x162>
 800497e:	2b20      	cmp	r3, #32
 8004980:	d810      	bhi.n	80049a4 <UART_SetConfig+0x174>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <UART_SetConfig+0x15c>
 8004986:	2b10      	cmp	r3, #16
 8004988:	d006      	beq.n	8004998 <UART_SetConfig+0x168>
 800498a:	e00b      	b.n	80049a4 <UART_SetConfig+0x174>
 800498c:	2300      	movs	r3, #0
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	e0f2      	b.n	8004b78 <UART_SetConfig+0x348>
 8004992:	2302      	movs	r3, #2
 8004994:	77fb      	strb	r3, [r7, #31]
 8004996:	e0ef      	b.n	8004b78 <UART_SetConfig+0x348>
 8004998:	2304      	movs	r3, #4
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e0ec      	b.n	8004b78 <UART_SetConfig+0x348>
 800499e:	2308      	movs	r3, #8
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e0e9      	b.n	8004b78 <UART_SetConfig+0x348>
 80049a4:	2310      	movs	r3, #16
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e0e6      	b.n	8004b78 <UART_SetConfig+0x348>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a56      	ldr	r2, [pc, #344]	; (8004b08 <UART_SetConfig+0x2d8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d120      	bne.n	80049f6 <UART_SetConfig+0x1c6>
 80049b4:	4b51      	ldr	r3, [pc, #324]	; (8004afc <UART_SetConfig+0x2cc>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049be:	2bc0      	cmp	r3, #192	; 0xc0
 80049c0:	d013      	beq.n	80049ea <UART_SetConfig+0x1ba>
 80049c2:	2bc0      	cmp	r3, #192	; 0xc0
 80049c4:	d814      	bhi.n	80049f0 <UART_SetConfig+0x1c0>
 80049c6:	2b80      	cmp	r3, #128	; 0x80
 80049c8:	d009      	beq.n	80049de <UART_SetConfig+0x1ae>
 80049ca:	2b80      	cmp	r3, #128	; 0x80
 80049cc:	d810      	bhi.n	80049f0 <UART_SetConfig+0x1c0>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <UART_SetConfig+0x1a8>
 80049d2:	2b40      	cmp	r3, #64	; 0x40
 80049d4:	d006      	beq.n	80049e4 <UART_SetConfig+0x1b4>
 80049d6:	e00b      	b.n	80049f0 <UART_SetConfig+0x1c0>
 80049d8:	2300      	movs	r3, #0
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e0cc      	b.n	8004b78 <UART_SetConfig+0x348>
 80049de:	2302      	movs	r3, #2
 80049e0:	77fb      	strb	r3, [r7, #31]
 80049e2:	e0c9      	b.n	8004b78 <UART_SetConfig+0x348>
 80049e4:	2304      	movs	r3, #4
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e0c6      	b.n	8004b78 <UART_SetConfig+0x348>
 80049ea:	2308      	movs	r3, #8
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e0c3      	b.n	8004b78 <UART_SetConfig+0x348>
 80049f0:	2310      	movs	r3, #16
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e0c0      	b.n	8004b78 <UART_SetConfig+0x348>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a44      	ldr	r2, [pc, #272]	; (8004b0c <UART_SetConfig+0x2dc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d125      	bne.n	8004a4c <UART_SetConfig+0x21c>
 8004a00:	4b3e      	ldr	r3, [pc, #248]	; (8004afc <UART_SetConfig+0x2cc>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a0e:	d017      	beq.n	8004a40 <UART_SetConfig+0x210>
 8004a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a14:	d817      	bhi.n	8004a46 <UART_SetConfig+0x216>
 8004a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a1a:	d00b      	beq.n	8004a34 <UART_SetConfig+0x204>
 8004a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a20:	d811      	bhi.n	8004a46 <UART_SetConfig+0x216>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <UART_SetConfig+0x1fe>
 8004a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2a:	d006      	beq.n	8004a3a <UART_SetConfig+0x20a>
 8004a2c:	e00b      	b.n	8004a46 <UART_SetConfig+0x216>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e0a1      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a34:	2302      	movs	r3, #2
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e09e      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	77fb      	strb	r3, [r7, #31]
 8004a3e:	e09b      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a40:	2308      	movs	r3, #8
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e098      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a46:	2310      	movs	r3, #16
 8004a48:	77fb      	strb	r3, [r7, #31]
 8004a4a:	e095      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2f      	ldr	r2, [pc, #188]	; (8004b10 <UART_SetConfig+0x2e0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d125      	bne.n	8004aa2 <UART_SetConfig+0x272>
 8004a56:	4b29      	ldr	r3, [pc, #164]	; (8004afc <UART_SetConfig+0x2cc>)
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a64:	d017      	beq.n	8004a96 <UART_SetConfig+0x266>
 8004a66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a6a:	d817      	bhi.n	8004a9c <UART_SetConfig+0x26c>
 8004a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a70:	d00b      	beq.n	8004a8a <UART_SetConfig+0x25a>
 8004a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a76:	d811      	bhi.n	8004a9c <UART_SetConfig+0x26c>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <UART_SetConfig+0x254>
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d006      	beq.n	8004a90 <UART_SetConfig+0x260>
 8004a82:	e00b      	b.n	8004a9c <UART_SetConfig+0x26c>
 8004a84:	2301      	movs	r3, #1
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e076      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e073      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a90:	2304      	movs	r3, #4
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e070      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a96:	2308      	movs	r3, #8
 8004a98:	77fb      	strb	r3, [r7, #31]
 8004a9a:	e06d      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e06a      	b.n	8004b78 <UART_SetConfig+0x348>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1b      	ldr	r2, [pc, #108]	; (8004b14 <UART_SetConfig+0x2e4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d138      	bne.n	8004b1e <UART_SetConfig+0x2ee>
 8004aac:	4b13      	ldr	r3, [pc, #76]	; (8004afc <UART_SetConfig+0x2cc>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ab6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004aba:	d017      	beq.n	8004aec <UART_SetConfig+0x2bc>
 8004abc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ac0:	d82a      	bhi.n	8004b18 <UART_SetConfig+0x2e8>
 8004ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac6:	d00b      	beq.n	8004ae0 <UART_SetConfig+0x2b0>
 8004ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004acc:	d824      	bhi.n	8004b18 <UART_SetConfig+0x2e8>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <UART_SetConfig+0x2aa>
 8004ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad6:	d006      	beq.n	8004ae6 <UART_SetConfig+0x2b6>
 8004ad8:	e01e      	b.n	8004b18 <UART_SetConfig+0x2e8>
 8004ada:	2300      	movs	r3, #0
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e04b      	b.n	8004b78 <UART_SetConfig+0x348>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e048      	b.n	8004b78 <UART_SetConfig+0x348>
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	77fb      	strb	r3, [r7, #31]
 8004aea:	e045      	b.n	8004b78 <UART_SetConfig+0x348>
 8004aec:	2308      	movs	r3, #8
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e042      	b.n	8004b78 <UART_SetConfig+0x348>
 8004af2:	bf00      	nop
 8004af4:	efff69f3 	.word	0xefff69f3
 8004af8:	40011000 	.word	0x40011000
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40004400 	.word	0x40004400
 8004b04:	40004800 	.word	0x40004800
 8004b08:	40004c00 	.word	0x40004c00
 8004b0c:	40005000 	.word	0x40005000
 8004b10:	40011400 	.word	0x40011400
 8004b14:	40007800 	.word	0x40007800
 8004b18:	2310      	movs	r3, #16
 8004b1a:	77fb      	strb	r3, [r7, #31]
 8004b1c:	e02c      	b.n	8004b78 <UART_SetConfig+0x348>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a72      	ldr	r2, [pc, #456]	; (8004cec <UART_SetConfig+0x4bc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d125      	bne.n	8004b74 <UART_SetConfig+0x344>
 8004b28:	4b71      	ldr	r3, [pc, #452]	; (8004cf0 <UART_SetConfig+0x4c0>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b36:	d017      	beq.n	8004b68 <UART_SetConfig+0x338>
 8004b38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b3c:	d817      	bhi.n	8004b6e <UART_SetConfig+0x33e>
 8004b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b42:	d00b      	beq.n	8004b5c <UART_SetConfig+0x32c>
 8004b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b48:	d811      	bhi.n	8004b6e <UART_SetConfig+0x33e>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <UART_SetConfig+0x326>
 8004b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b52:	d006      	beq.n	8004b62 <UART_SetConfig+0x332>
 8004b54:	e00b      	b.n	8004b6e <UART_SetConfig+0x33e>
 8004b56:	2300      	movs	r3, #0
 8004b58:	77fb      	strb	r3, [r7, #31]
 8004b5a:	e00d      	b.n	8004b78 <UART_SetConfig+0x348>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	77fb      	strb	r3, [r7, #31]
 8004b60:	e00a      	b.n	8004b78 <UART_SetConfig+0x348>
 8004b62:	2304      	movs	r3, #4
 8004b64:	77fb      	strb	r3, [r7, #31]
 8004b66:	e007      	b.n	8004b78 <UART_SetConfig+0x348>
 8004b68:	2308      	movs	r3, #8
 8004b6a:	77fb      	strb	r3, [r7, #31]
 8004b6c:	e004      	b.n	8004b78 <UART_SetConfig+0x348>
 8004b6e:	2310      	movs	r3, #16
 8004b70:	77fb      	strb	r3, [r7, #31]
 8004b72:	e001      	b.n	8004b78 <UART_SetConfig+0x348>
 8004b74:	2310      	movs	r3, #16
 8004b76:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b80:	d15b      	bne.n	8004c3a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b82:	7ffb      	ldrb	r3, [r7, #31]
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d828      	bhi.n	8004bda <UART_SetConfig+0x3aa>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0x360>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bb5 	.word	0x08004bb5
 8004b94:	08004bbd 	.word	0x08004bbd
 8004b98:	08004bc5 	.word	0x08004bc5
 8004b9c:	08004bdb 	.word	0x08004bdb
 8004ba0:	08004bcb 	.word	0x08004bcb
 8004ba4:	08004bdb 	.word	0x08004bdb
 8004ba8:	08004bdb 	.word	0x08004bdb
 8004bac:	08004bdb 	.word	0x08004bdb
 8004bb0:	08004bd3 	.word	0x08004bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb4:	f7fe fec4 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8004bb8:	61b8      	str	r0, [r7, #24]
        break;
 8004bba:	e013      	b.n	8004be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bbc:	f7fe fed4 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8004bc0:	61b8      	str	r0, [r7, #24]
        break;
 8004bc2:	e00f      	b.n	8004be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc4:	4b4b      	ldr	r3, [pc, #300]	; (8004cf4 <UART_SetConfig+0x4c4>)
 8004bc6:	61bb      	str	r3, [r7, #24]
        break;
 8004bc8:	e00c      	b.n	8004be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bca:	f7fe fda7 	bl	800371c <HAL_RCC_GetSysClockFreq>
 8004bce:	61b8      	str	r0, [r7, #24]
        break;
 8004bd0:	e008      	b.n	8004be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd6:	61bb      	str	r3, [r7, #24]
        break;
 8004bd8:	e004      	b.n	8004be4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	77bb      	strb	r3, [r7, #30]
        break;
 8004be2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d074      	beq.n	8004cd4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	005a      	lsls	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	441a      	add	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2b0f      	cmp	r3, #15
 8004c04:	d916      	bls.n	8004c34 <UART_SetConfig+0x404>
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0c:	d212      	bcs.n	8004c34 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f023 030f 	bic.w	r3, r3, #15
 8004c16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	89fb      	ldrh	r3, [r7, #14]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	89fa      	ldrh	r2, [r7, #14]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	e04f      	b.n	8004cd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	77bb      	strb	r3, [r7, #30]
 8004c38:	e04c      	b.n	8004cd4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c3a:	7ffb      	ldrb	r3, [r7, #31]
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d828      	bhi.n	8004c92 <UART_SetConfig+0x462>
 8004c40:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <UART_SetConfig+0x418>)
 8004c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c46:	bf00      	nop
 8004c48:	08004c6d 	.word	0x08004c6d
 8004c4c:	08004c75 	.word	0x08004c75
 8004c50:	08004c7d 	.word	0x08004c7d
 8004c54:	08004c93 	.word	0x08004c93
 8004c58:	08004c83 	.word	0x08004c83
 8004c5c:	08004c93 	.word	0x08004c93
 8004c60:	08004c93 	.word	0x08004c93
 8004c64:	08004c93 	.word	0x08004c93
 8004c68:	08004c8b 	.word	0x08004c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c6c:	f7fe fe68 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8004c70:	61b8      	str	r0, [r7, #24]
        break;
 8004c72:	e013      	b.n	8004c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c74:	f7fe fe78 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8004c78:	61b8      	str	r0, [r7, #24]
        break;
 8004c7a:	e00f      	b.n	8004c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c7c:	4b1d      	ldr	r3, [pc, #116]	; (8004cf4 <UART_SetConfig+0x4c4>)
 8004c7e:	61bb      	str	r3, [r7, #24]
        break;
 8004c80:	e00c      	b.n	8004c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c82:	f7fe fd4b 	bl	800371c <HAL_RCC_GetSysClockFreq>
 8004c86:	61b8      	str	r0, [r7, #24]
        break;
 8004c88:	e008      	b.n	8004c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c8e:	61bb      	str	r3, [r7, #24]
        break;
 8004c90:	e004      	b.n	8004c9c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	77bb      	strb	r3, [r7, #30]
        break;
 8004c9a:	bf00      	nop
    }

    if (pclk != 0U)
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d018      	beq.n	8004cd4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	085a      	lsrs	r2, r3, #1
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	441a      	add	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b0f      	cmp	r3, #15
 8004cba:	d909      	bls.n	8004cd0 <UART_SetConfig+0x4a0>
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc2:	d205      	bcs.n	8004cd0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	e001      	b.n	8004cd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ce0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3720      	adds	r7, #32
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40007c00 	.word	0x40007c00
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	00f42400 	.word	0x00f42400

08004cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01a      	beq.n	8004e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004df6:	d10a      	bne.n	8004e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	605a      	str	r2, [r3, #4]
  }
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af02      	add	r7, sp, #8
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e4c:	f7fc f9a8 	bl	80011a0 <HAL_GetTick>
 8004e50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0308 	and.w	r3, r3, #8
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d10e      	bne.n	8004e7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f81b 	bl	8004eaa <UART_WaitOnFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e011      	b.n	8004ea2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b09c      	sub	sp, #112	; 0x70
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	603b      	str	r3, [r7, #0]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eba:	e0a7      	b.n	800500c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	f000 80a3 	beq.w	800500c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec6:	f7fc f96b 	bl	80011a0 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d302      	bcc.n	8004edc <UART_WaitOnFlagUntilTimeout+0x32>
 8004ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d13f      	bne.n	8004f5c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ef0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004efa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004efc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e6      	bne.n	8004edc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3308      	adds	r3, #8
 8004f14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	663b      	str	r3, [r7, #96]	; 0x60
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e5      	bne.n	8004f0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e068      	b.n	800502e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d050      	beq.n	800500c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f78:	d148      	bne.n	800500c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f82:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e6      	bne.n	8004f84 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
 8004fcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fd6:	623a      	str	r2, [r7, #32]
 8004fd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	69f9      	ldr	r1, [r7, #28]
 8004fdc:	6a3a      	ldr	r2, [r7, #32]
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e5      	bne.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2220      	movs	r2, #32
 8004fee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e010      	b.n	800502e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69da      	ldr	r2, [r3, #28]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	4013      	ands	r3, r2
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	429a      	cmp	r2, r3
 800501a:	bf0c      	ite	eq
 800501c:	2301      	moveq	r3, #1
 800501e:	2300      	movne	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	429a      	cmp	r2, r3
 8005028:	f43f af48 	beq.w	8004ebc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3770      	adds	r7, #112	; 0x70
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005038:	b084      	sub	sp, #16
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	f107 001c 	add.w	r0, r7, #28
 8005046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	2b01      	cmp	r3, #1
 800504e:	d120      	bne.n	8005092 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	4b20      	ldr	r3, [pc, #128]	; (80050e4 <USB_CoreInit+0xac>)
 8005062:	4013      	ands	r3, r2
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005076:	2b01      	cmp	r3, #1
 8005078:	d105      	bne.n	8005086 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fa96 	bl	80055b8 <USB_CoreReset>
 800508c:	4603      	mov	r3, r0
 800508e:	73fb      	strb	r3, [r7, #15]
 8005090:	e010      	b.n	80050b4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa8a 	bl	80055b8 <USB_CoreReset>
 80050a4:	4603      	mov	r3, r0
 80050a6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d10b      	bne.n	80050d2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f043 0206 	orr.w	r2, r3, #6
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f043 0220 	orr.w	r2, r3, #32
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050de:	b004      	add	sp, #16
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	ffbdffbf 	.word	0xffbdffbf

080050e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f023 0201 	bic.w	r2, r3, #1
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	460b      	mov	r3, r1
 8005114:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d115      	bne.n	8005158 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005138:	2001      	movs	r0, #1
 800513a:	f7fc f83d 	bl	80011b8 <HAL_Delay>
      ms++;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3301      	adds	r3, #1
 8005142:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fa29 	bl	800559c <USB_GetMode>
 800514a:	4603      	mov	r3, r0
 800514c:	2b01      	cmp	r3, #1
 800514e:	d01e      	beq.n	800518e <USB_SetCurrentMode+0x84>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b31      	cmp	r3, #49	; 0x31
 8005154:	d9f0      	bls.n	8005138 <USB_SetCurrentMode+0x2e>
 8005156:	e01a      	b.n	800518e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d115      	bne.n	800518a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800516a:	2001      	movs	r0, #1
 800516c:	f7fc f824 	bl	80011b8 <HAL_Delay>
      ms++;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3301      	adds	r3, #1
 8005174:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fa10 	bl	800559c <USB_GetMode>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <USB_SetCurrentMode+0x84>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b31      	cmp	r3, #49	; 0x31
 8005186:	d9f0      	bls.n	800516a <USB_SetCurrentMode+0x60>
 8005188:	e001      	b.n	800518e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e005      	b.n	800519a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b32      	cmp	r3, #50	; 0x32
 8005192:	d101      	bne.n	8005198 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051a4:	b084      	sub	sp, #16
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b086      	sub	sp, #24
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80051b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051be:	2300      	movs	r3, #0
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	e009      	b.n	80051d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	3340      	adds	r3, #64	; 0x40
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	2200      	movs	r2, #0
 80051d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	3301      	adds	r3, #1
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2b0e      	cmp	r3, #14
 80051dc:	d9f2      	bls.n	80051c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d11c      	bne.n	800521e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051f2:	f043 0302 	orr.w	r3, r3, #2
 80051f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	e005      	b.n	800522a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005230:	461a      	mov	r2, r3
 8005232:	2300      	movs	r3, #0
 8005234:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523c:	4619      	mov	r1, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005244:	461a      	mov	r2, r3
 8005246:	680b      	ldr	r3, [r1, #0]
 8005248:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	2b01      	cmp	r3, #1
 800524e:	d10c      	bne.n	800526a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005252:	2b00      	cmp	r3, #0
 8005254:	d104      	bne.n	8005260 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005256:	2100      	movs	r1, #0
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f965 	bl	8005528 <USB_SetDevSpeed>
 800525e:	e008      	b.n	8005272 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005260:	2101      	movs	r1, #1
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f960 	bl	8005528 <USB_SetDevSpeed>
 8005268:	e003      	b.n	8005272 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800526a:	2103      	movs	r1, #3
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f95b 	bl	8005528 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005272:	2110      	movs	r1, #16
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f8f3 	bl	8005460 <USB_FlushTxFifo>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f91f 	bl	80054c8 <USB_FlushRxFifo>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529a:	461a      	mov	r2, r3
 800529c:	2300      	movs	r3, #0
 800529e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a6:	461a      	mov	r2, r3
 80052a8:	2300      	movs	r3, #0
 80052aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b2:	461a      	mov	r2, r3
 80052b4:	2300      	movs	r3, #0
 80052b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052b8:	2300      	movs	r3, #0
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	e043      	b.n	8005346 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d4:	d118      	bne.n	8005308 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e8:	461a      	mov	r2, r3
 80052ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	e013      	b.n	800531a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fe:	461a      	mov	r2, r3
 8005300:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e008      	b.n	800531a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005314:	461a      	mov	r2, r3
 8005316:	2300      	movs	r3, #0
 8005318:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005326:	461a      	mov	r2, r3
 8005328:	2300      	movs	r3, #0
 800532a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005338:	461a      	mov	r2, r3
 800533a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800533e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	3301      	adds	r3, #1
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	429a      	cmp	r2, r3
 800534c:	d3b7      	bcc.n	80052be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800534e:	2300      	movs	r3, #0
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	e043      	b.n	80053dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800536a:	d118      	bne.n	800539e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10a      	bne.n	8005388 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537e:	461a      	mov	r2, r3
 8005380:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e013      	b.n	80053b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005394:	461a      	mov	r2, r3
 8005396:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	e008      	b.n	80053b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	461a      	mov	r2, r3
 80053ac:	2300      	movs	r3, #0
 80053ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053bc:	461a      	mov	r2, r3
 80053be:	2300      	movs	r3, #0
 80053c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ce:	461a      	mov	r2, r3
 80053d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	3301      	adds	r3, #1
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d3b7      	bcc.n	8005354 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005404:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	2b00      	cmp	r3, #0
 800540a:	d105      	bne.n	8005418 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f043 0210 	orr.w	r2, r3, #16
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699a      	ldr	r2, [r3, #24]
 800541c:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <USB_DevInit+0x2b4>)
 800541e:	4313      	orrs	r3, r2
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f043 0208 	orr.w	r2, r3, #8
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d105      	bne.n	8005448 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699a      	ldr	r2, [r3, #24]
 8005440:	4b06      	ldr	r3, [pc, #24]	; (800545c <USB_DevInit+0x2b8>)
 8005442:	4313      	orrs	r3, r2
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005448:	7dfb      	ldrb	r3, [r7, #23]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005454:	b004      	add	sp, #16
 8005456:	4770      	bx	lr
 8005458:	803c3800 	.word	0x803c3800
 800545c:	40000004 	.word	0x40000004

08005460 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3301      	adds	r3, #1
 8005472:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4a13      	ldr	r2, [pc, #76]	; (80054c4 <USB_FlushTxFifo+0x64>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d901      	bls.n	8005480 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e01b      	b.n	80054b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	daf2      	bge.n	800546e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	019b      	lsls	r3, r3, #6
 8005490:	f043 0220 	orr.w	r2, r3, #32
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3301      	adds	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <USB_FlushTxFifo+0x64>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e006      	b.n	80054b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d0f0      	beq.n	8005498 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	00030d40 	.word	0x00030d40

080054c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3301      	adds	r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4a11      	ldr	r2, [pc, #68]	; (8005524 <USB_FlushRxFifo+0x5c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e018      	b.n	8005518 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	daf2      	bge.n	80054d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2210      	movs	r2, #16
 80054f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	3301      	adds	r3, #1
 80054fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4a08      	ldr	r2, [pc, #32]	; (8005524 <USB_FlushRxFifo+0x5c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d901      	bls.n	800550a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e006      	b.n	8005518 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b10      	cmp	r3, #16
 8005514:	d0f0      	beq.n	80054f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	00030d40 	.word	0x00030d40

08005528 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	68f9      	ldr	r1, [r7, #12]
 8005544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005548:	4313      	orrs	r3, r2
 800554a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005574:	f023 0303 	bic.w	r3, r3, #3
 8005578:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005588:	f043 0302 	orr.w	r3, r3, #2
 800558c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f003 0301 	and.w	r3, r3, #1
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4a13      	ldr	r2, [pc, #76]	; (800561c <USB_CoreReset+0x64>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e01b      	b.n	800560e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	daf2      	bge.n	80055c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f043 0201 	orr.w	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3301      	adds	r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4a09      	ldr	r2, [pc, #36]	; (800561c <USB_CoreReset+0x64>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d901      	bls.n	8005600 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e006      	b.n	800560e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b01      	cmp	r3, #1
 800560a:	d0f0      	beq.n	80055ee <USB_CoreReset+0x36>

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	00030d40 	.word	0x00030d40

08005620 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005620:	b5b0      	push	{r4, r5, r7, lr}
 8005622:	b08c      	sub	sp, #48	; 0x30
 8005624:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005626:	4b96      	ldr	r3, [pc, #600]	; (8005880 <MX_LWIP_Init+0x260>)
 8005628:	22c0      	movs	r2, #192	; 0xc0
 800562a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800562c:	4b94      	ldr	r3, [pc, #592]	; (8005880 <MX_LWIP_Init+0x260>)
 800562e:	22a8      	movs	r2, #168	; 0xa8
 8005630:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 8005632:	4b93      	ldr	r3, [pc, #588]	; (8005880 <MX_LWIP_Init+0x260>)
 8005634:	220a      	movs	r2, #10
 8005636:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8005638:	4b91      	ldr	r3, [pc, #580]	; (8005880 <MX_LWIP_Init+0x260>)
 800563a:	2264      	movs	r2, #100	; 0x64
 800563c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800563e:	4b91      	ldr	r3, [pc, #580]	; (8005884 <MX_LWIP_Init+0x264>)
 8005640:	22ff      	movs	r2, #255	; 0xff
 8005642:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005644:	4b8f      	ldr	r3, [pc, #572]	; (8005884 <MX_LWIP_Init+0x264>)
 8005646:	22ff      	movs	r2, #255	; 0xff
 8005648:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800564a:	4b8e      	ldr	r3, [pc, #568]	; (8005884 <MX_LWIP_Init+0x264>)
 800564c:	22ff      	movs	r2, #255	; 0xff
 800564e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005650:	4b8c      	ldr	r3, [pc, #560]	; (8005884 <MX_LWIP_Init+0x264>)
 8005652:	2200      	movs	r2, #0
 8005654:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005656:	4b8c      	ldr	r3, [pc, #560]	; (8005888 <MX_LWIP_Init+0x268>)
 8005658:	22c0      	movs	r2, #192	; 0xc0
 800565a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800565c:	4b8a      	ldr	r3, [pc, #552]	; (8005888 <MX_LWIP_Init+0x268>)
 800565e:	22a8      	movs	r2, #168	; 0xa8
 8005660:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 10;
 8005662:	4b89      	ldr	r3, [pc, #548]	; (8005888 <MX_LWIP_Init+0x268>)
 8005664:	220a      	movs	r2, #10
 8005666:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005668:	4b87      	ldr	r3, [pc, #540]	; (8005888 <MX_LWIP_Init+0x268>)
 800566a:	2201      	movs	r2, #1
 800566c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800566e:	2100      	movs	r1, #0
 8005670:	2000      	movs	r0, #0
 8005672:	f003 febb 	bl	80093ec <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005676:	4b82      	ldr	r3, [pc, #520]	; (8005880 <MX_LWIP_Init+0x260>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	061a      	lsls	r2, r3, #24
 800567c:	4b80      	ldr	r3, [pc, #512]	; (8005880 <MX_LWIP_Init+0x260>)
 800567e:	785b      	ldrb	r3, [r3, #1]
 8005680:	041b      	lsls	r3, r3, #16
 8005682:	431a      	orrs	r2, r3
 8005684:	4b7e      	ldr	r3, [pc, #504]	; (8005880 <MX_LWIP_Init+0x260>)
 8005686:	789b      	ldrb	r3, [r3, #2]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	4313      	orrs	r3, r2
 800568c:	4a7c      	ldr	r2, [pc, #496]	; (8005880 <MX_LWIP_Init+0x260>)
 800568e:	78d2      	ldrb	r2, [r2, #3]
 8005690:	4313      	orrs	r3, r2
 8005692:	061a      	lsls	r2, r3, #24
 8005694:	4b7a      	ldr	r3, [pc, #488]	; (8005880 <MX_LWIP_Init+0x260>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	0619      	lsls	r1, r3, #24
 800569a:	4b79      	ldr	r3, [pc, #484]	; (8005880 <MX_LWIP_Init+0x260>)
 800569c:	785b      	ldrb	r3, [r3, #1]
 800569e:	041b      	lsls	r3, r3, #16
 80056a0:	4319      	orrs	r1, r3
 80056a2:	4b77      	ldr	r3, [pc, #476]	; (8005880 <MX_LWIP_Init+0x260>)
 80056a4:	789b      	ldrb	r3, [r3, #2]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	430b      	orrs	r3, r1
 80056aa:	4975      	ldr	r1, [pc, #468]	; (8005880 <MX_LWIP_Init+0x260>)
 80056ac:	78c9      	ldrb	r1, [r1, #3]
 80056ae:	430b      	orrs	r3, r1
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056b6:	431a      	orrs	r2, r3
 80056b8:	4b71      	ldr	r3, [pc, #452]	; (8005880 <MX_LWIP_Init+0x260>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	0619      	lsls	r1, r3, #24
 80056be:	4b70      	ldr	r3, [pc, #448]	; (8005880 <MX_LWIP_Init+0x260>)
 80056c0:	785b      	ldrb	r3, [r3, #1]
 80056c2:	041b      	lsls	r3, r3, #16
 80056c4:	4319      	orrs	r1, r3
 80056c6:	4b6e      	ldr	r3, [pc, #440]	; (8005880 <MX_LWIP_Init+0x260>)
 80056c8:	789b      	ldrb	r3, [r3, #2]
 80056ca:	021b      	lsls	r3, r3, #8
 80056cc:	430b      	orrs	r3, r1
 80056ce:	496c      	ldr	r1, [pc, #432]	; (8005880 <MX_LWIP_Init+0x260>)
 80056d0:	78c9      	ldrb	r1, [r1, #3]
 80056d2:	430b      	orrs	r3, r1
 80056d4:	0a1b      	lsrs	r3, r3, #8
 80056d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056da:	431a      	orrs	r2, r3
 80056dc:	4b68      	ldr	r3, [pc, #416]	; (8005880 <MX_LWIP_Init+0x260>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	0619      	lsls	r1, r3, #24
 80056e2:	4b67      	ldr	r3, [pc, #412]	; (8005880 <MX_LWIP_Init+0x260>)
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	041b      	lsls	r3, r3, #16
 80056e8:	4319      	orrs	r1, r3
 80056ea:	4b65      	ldr	r3, [pc, #404]	; (8005880 <MX_LWIP_Init+0x260>)
 80056ec:	789b      	ldrb	r3, [r3, #2]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	430b      	orrs	r3, r1
 80056f2:	4963      	ldr	r1, [pc, #396]	; (8005880 <MX_LWIP_Init+0x260>)
 80056f4:	78c9      	ldrb	r1, [r1, #3]
 80056f6:	430b      	orrs	r3, r1
 80056f8:	0e1b      	lsrs	r3, r3, #24
 80056fa:	4313      	orrs	r3, r2
 80056fc:	4a63      	ldr	r2, [pc, #396]	; (800588c <MX_LWIP_Init+0x26c>)
 80056fe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005700:	4b60      	ldr	r3, [pc, #384]	; (8005884 <MX_LWIP_Init+0x264>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	061a      	lsls	r2, r3, #24
 8005706:	4b5f      	ldr	r3, [pc, #380]	; (8005884 <MX_LWIP_Init+0x264>)
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	041b      	lsls	r3, r3, #16
 800570c:	431a      	orrs	r2, r3
 800570e:	4b5d      	ldr	r3, [pc, #372]	; (8005884 <MX_LWIP_Init+0x264>)
 8005710:	789b      	ldrb	r3, [r3, #2]
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	4313      	orrs	r3, r2
 8005716:	4a5b      	ldr	r2, [pc, #364]	; (8005884 <MX_LWIP_Init+0x264>)
 8005718:	78d2      	ldrb	r2, [r2, #3]
 800571a:	4313      	orrs	r3, r2
 800571c:	061a      	lsls	r2, r3, #24
 800571e:	4b59      	ldr	r3, [pc, #356]	; (8005884 <MX_LWIP_Init+0x264>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	0619      	lsls	r1, r3, #24
 8005724:	4b57      	ldr	r3, [pc, #348]	; (8005884 <MX_LWIP_Init+0x264>)
 8005726:	785b      	ldrb	r3, [r3, #1]
 8005728:	041b      	lsls	r3, r3, #16
 800572a:	4319      	orrs	r1, r3
 800572c:	4b55      	ldr	r3, [pc, #340]	; (8005884 <MX_LWIP_Init+0x264>)
 800572e:	789b      	ldrb	r3, [r3, #2]
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	430b      	orrs	r3, r1
 8005734:	4953      	ldr	r1, [pc, #332]	; (8005884 <MX_LWIP_Init+0x264>)
 8005736:	78c9      	ldrb	r1, [r1, #3]
 8005738:	430b      	orrs	r3, r1
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005740:	431a      	orrs	r2, r3
 8005742:	4b50      	ldr	r3, [pc, #320]	; (8005884 <MX_LWIP_Init+0x264>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	0619      	lsls	r1, r3, #24
 8005748:	4b4e      	ldr	r3, [pc, #312]	; (8005884 <MX_LWIP_Init+0x264>)
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	041b      	lsls	r3, r3, #16
 800574e:	4319      	orrs	r1, r3
 8005750:	4b4c      	ldr	r3, [pc, #304]	; (8005884 <MX_LWIP_Init+0x264>)
 8005752:	789b      	ldrb	r3, [r3, #2]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	430b      	orrs	r3, r1
 8005758:	494a      	ldr	r1, [pc, #296]	; (8005884 <MX_LWIP_Init+0x264>)
 800575a:	78c9      	ldrb	r1, [r1, #3]
 800575c:	430b      	orrs	r3, r1
 800575e:	0a1b      	lsrs	r3, r3, #8
 8005760:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005764:	431a      	orrs	r2, r3
 8005766:	4b47      	ldr	r3, [pc, #284]	; (8005884 <MX_LWIP_Init+0x264>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	0619      	lsls	r1, r3, #24
 800576c:	4b45      	ldr	r3, [pc, #276]	; (8005884 <MX_LWIP_Init+0x264>)
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	041b      	lsls	r3, r3, #16
 8005772:	4319      	orrs	r1, r3
 8005774:	4b43      	ldr	r3, [pc, #268]	; (8005884 <MX_LWIP_Init+0x264>)
 8005776:	789b      	ldrb	r3, [r3, #2]
 8005778:	021b      	lsls	r3, r3, #8
 800577a:	430b      	orrs	r3, r1
 800577c:	4941      	ldr	r1, [pc, #260]	; (8005884 <MX_LWIP_Init+0x264>)
 800577e:	78c9      	ldrb	r1, [r1, #3]
 8005780:	430b      	orrs	r3, r1
 8005782:	0e1b      	lsrs	r3, r3, #24
 8005784:	4313      	orrs	r3, r2
 8005786:	4a42      	ldr	r2, [pc, #264]	; (8005890 <MX_LWIP_Init+0x270>)
 8005788:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800578a:	4b3f      	ldr	r3, [pc, #252]	; (8005888 <MX_LWIP_Init+0x268>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	061a      	lsls	r2, r3, #24
 8005790:	4b3d      	ldr	r3, [pc, #244]	; (8005888 <MX_LWIP_Init+0x268>)
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	041b      	lsls	r3, r3, #16
 8005796:	431a      	orrs	r2, r3
 8005798:	4b3b      	ldr	r3, [pc, #236]	; (8005888 <MX_LWIP_Init+0x268>)
 800579a:	789b      	ldrb	r3, [r3, #2]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	4313      	orrs	r3, r2
 80057a0:	4a39      	ldr	r2, [pc, #228]	; (8005888 <MX_LWIP_Init+0x268>)
 80057a2:	78d2      	ldrb	r2, [r2, #3]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	061a      	lsls	r2, r3, #24
 80057a8:	4b37      	ldr	r3, [pc, #220]	; (8005888 <MX_LWIP_Init+0x268>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	0619      	lsls	r1, r3, #24
 80057ae:	4b36      	ldr	r3, [pc, #216]	; (8005888 <MX_LWIP_Init+0x268>)
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	4319      	orrs	r1, r3
 80057b6:	4b34      	ldr	r3, [pc, #208]	; (8005888 <MX_LWIP_Init+0x268>)
 80057b8:	789b      	ldrb	r3, [r3, #2]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	430b      	orrs	r3, r1
 80057be:	4932      	ldr	r1, [pc, #200]	; (8005888 <MX_LWIP_Init+0x268>)
 80057c0:	78c9      	ldrb	r1, [r1, #3]
 80057c2:	430b      	orrs	r3, r1
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057ca:	431a      	orrs	r2, r3
 80057cc:	4b2e      	ldr	r3, [pc, #184]	; (8005888 <MX_LWIP_Init+0x268>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	0619      	lsls	r1, r3, #24
 80057d2:	4b2d      	ldr	r3, [pc, #180]	; (8005888 <MX_LWIP_Init+0x268>)
 80057d4:	785b      	ldrb	r3, [r3, #1]
 80057d6:	041b      	lsls	r3, r3, #16
 80057d8:	4319      	orrs	r1, r3
 80057da:	4b2b      	ldr	r3, [pc, #172]	; (8005888 <MX_LWIP_Init+0x268>)
 80057dc:	789b      	ldrb	r3, [r3, #2]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	430b      	orrs	r3, r1
 80057e2:	4929      	ldr	r1, [pc, #164]	; (8005888 <MX_LWIP_Init+0x268>)
 80057e4:	78c9      	ldrb	r1, [r1, #3]
 80057e6:	430b      	orrs	r3, r1
 80057e8:	0a1b      	lsrs	r3, r3, #8
 80057ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80057ee:	431a      	orrs	r2, r3
 80057f0:	4b25      	ldr	r3, [pc, #148]	; (8005888 <MX_LWIP_Init+0x268>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	0619      	lsls	r1, r3, #24
 80057f6:	4b24      	ldr	r3, [pc, #144]	; (8005888 <MX_LWIP_Init+0x268>)
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	041b      	lsls	r3, r3, #16
 80057fc:	4319      	orrs	r1, r3
 80057fe:	4b22      	ldr	r3, [pc, #136]	; (8005888 <MX_LWIP_Init+0x268>)
 8005800:	789b      	ldrb	r3, [r3, #2]
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	430b      	orrs	r3, r1
 8005806:	4920      	ldr	r1, [pc, #128]	; (8005888 <MX_LWIP_Init+0x268>)
 8005808:	78c9      	ldrb	r1, [r1, #3]
 800580a:	430b      	orrs	r3, r1
 800580c:	0e1b      	lsrs	r3, r3, #24
 800580e:	4313      	orrs	r3, r2
 8005810:	4a20      	ldr	r2, [pc, #128]	; (8005894 <MX_LWIP_Init+0x274>)
 8005812:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005814:	4b20      	ldr	r3, [pc, #128]	; (8005898 <MX_LWIP_Init+0x278>)
 8005816:	9302      	str	r3, [sp, #8]
 8005818:	4b20      	ldr	r3, [pc, #128]	; (800589c <MX_LWIP_Init+0x27c>)
 800581a:	9301      	str	r3, [sp, #4]
 800581c:	2300      	movs	r3, #0
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	4b1c      	ldr	r3, [pc, #112]	; (8005894 <MX_LWIP_Init+0x274>)
 8005822:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <MX_LWIP_Init+0x270>)
 8005824:	4919      	ldr	r1, [pc, #100]	; (800588c <MX_LWIP_Init+0x26c>)
 8005826:	481e      	ldr	r0, [pc, #120]	; (80058a0 <MX_LWIP_Init+0x280>)
 8005828:	f004 fbaa 	bl	8009f80 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800582c:	481c      	ldr	r0, [pc, #112]	; (80058a0 <MX_LWIP_Init+0x280>)
 800582e:	f004 fd59 	bl	800a2e4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005832:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <MX_LWIP_Init+0x280>)
 8005834:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005838:	089b      	lsrs	r3, r3, #2
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005844:	4816      	ldr	r0, [pc, #88]	; (80058a0 <MX_LWIP_Init+0x280>)
 8005846:	f004 fd5d 	bl	800a304 <netif_set_up>
 800584a:	e002      	b.n	8005852 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800584c:	4814      	ldr	r0, [pc, #80]	; (80058a0 <MX_LWIP_Init+0x280>)
 800584e:	f004 fdc5 	bl	800a3dc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005852:	4914      	ldr	r1, [pc, #80]	; (80058a4 <MX_LWIP_Init+0x284>)
 8005854:	4812      	ldr	r0, [pc, #72]	; (80058a0 <MX_LWIP_Init+0x280>)
 8005856:	f004 fe57 	bl	800a508 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800585a:	4b13      	ldr	r3, [pc, #76]	; (80058a8 <MX_LWIP_Init+0x288>)
 800585c:	1d3c      	adds	r4, r7, #4
 800585e:	461d      	mov	r5, r3
 8005860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005864:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005868:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800586c:	1d3b      	adds	r3, r7, #4
 800586e:	490c      	ldr	r1, [pc, #48]	; (80058a0 <MX_LWIP_Init+0x280>)
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fd47 	bl	8006304 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005876:	bf00      	nop
 8005878:	3720      	adds	r7, #32
 800587a:	46bd      	mov	sp, r7
 800587c:	bdb0      	pop	{r4, r5, r7, pc}
 800587e:	bf00      	nop
 8005880:	20000acc 	.word	0x20000acc
 8005884:	20000ad0 	.word	0x20000ad0
 8005888:	20000ad4 	.word	0x20000ad4
 800588c:	20000ac0 	.word	0x20000ac0
 8005890:	20000ac4 	.word	0x20000ac4
 8005894:	20000ac8 	.word	0x20000ac8
 8005898:	08009329 	.word	0x08009329
 800589c:	08005da5 	.word	0x08005da5
 80058a0:	20000a8c 	.word	0x20000a8c
 80058a4:	080058ad 	.word	0x080058ad
 80058a8:	080144c0 	.word	0x080144c0

080058ac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80058d2:	2320      	movs	r3, #32
 80058d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80058d6:	f3bf 8f4f 	dsb	sy
}
 80058da:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80058dc:	e00b      	b.n	80058f6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80058de:	4a0d      	ldr	r2, [pc, #52]	; (8005914 <SCB_InvalidateDCache_by_Addr+0x54>)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4413      	add	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	dcf0      	bgt.n	80058de <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80058fc:	f3bf 8f4f 	dsb	sy
}
 8005900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005902:	f3bf 8f6f 	isb	sy
}
 8005906:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	e000ed00 	.word	0xe000ed00

08005918 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005920:	4b04      	ldr	r3, [pc, #16]	; (8005934 <HAL_ETH_RxCpltCallback+0x1c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fe37 	bl	8006598 <osSemaphoreRelease>
}
 800592a:	bf00      	nop
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20005464 	.word	0x20005464

08005938 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005940:	4b04      	ldr	r3, [pc, #16]	; (8005954 <HAL_ETH_TxCpltCallback+0x1c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fe27 	bl	8006598 <osSemaphoreRelease>
}
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20005468 	.word	0x20005468

08005958 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7fc fbcd 	bl	8002100 <HAL_ETH_GetDMAError>
 8005966:	4603      	mov	r3, r0
 8005968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596c:	2b80      	cmp	r3, #128	; 0x80
 800596e:	d104      	bne.n	800597a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005970:	4b04      	ldr	r3, [pc, #16]	; (8005984 <HAL_ETH_ErrorCallback+0x2c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fe0f 	bl	8006598 <osSemaphoreRelease>
  }
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20005464 	.word	0x20005464

08005988 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005988:	b5b0      	push	{r4, r5, r7, lr}
 800598a:	b0a8      	sub	sp, #160	; 0xa0
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 80059a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059a6:	2264      	movs	r2, #100	; 0x64
 80059a8:	2100      	movs	r1, #0
 80059aa:	4618      	mov	r0, r3
 80059ac:	f00d fd9b 	bl	80134e6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80059b0:	4b85      	ldr	r3, [pc, #532]	; (8005bc8 <low_level_init+0x240>)
 80059b2:	4a86      	ldr	r2, [pc, #536]	; (8005bcc <low_level_init+0x244>)
 80059b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80059b6:	2300      	movs	r3, #0
 80059b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 80059bc:	2380      	movs	r3, #128	; 0x80
 80059be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 80059c2:	23e1      	movs	r3, #225	; 0xe1
 80059c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 80059c8:	2300      	movs	r3, #0
 80059ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 80059ce:	2300      	movs	r3, #0
 80059d0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 80059d4:	2300      	movs	r3, #0
 80059d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80059da:	4a7b      	ldr	r2, [pc, #492]	; (8005bc8 <low_level_init+0x240>)
 80059dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059e0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80059e2:	4b79      	ldr	r3, [pc, #484]	; (8005bc8 <low_level_init+0x240>)
 80059e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80059e8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80059ea:	4b77      	ldr	r3, [pc, #476]	; (8005bc8 <low_level_init+0x240>)
 80059ec:	4a78      	ldr	r2, [pc, #480]	; (8005bd0 <low_level_init+0x248>)
 80059ee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80059f0:	4b75      	ldr	r3, [pc, #468]	; (8005bc8 <low_level_init+0x240>)
 80059f2:	4a78      	ldr	r2, [pc, #480]	; (8005bd4 <low_level_init+0x24c>)
 80059f4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80059f6:	4b74      	ldr	r3, [pc, #464]	; (8005bc8 <low_level_init+0x240>)
 80059f8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80059fc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80059fe:	4872      	ldr	r0, [pc, #456]	; (8005bc8 <low_level_init+0x240>)
 8005a00:	f7fb fce0 	bl	80013c4 <HAL_ETH_Init>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005a0a:	2238      	movs	r2, #56	; 0x38
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4872      	ldr	r0, [pc, #456]	; (8005bd8 <low_level_init+0x250>)
 8005a10:	f00d fd69 	bl	80134e6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005a14:	4b70      	ldr	r3, [pc, #448]	; (8005bd8 <low_level_init+0x250>)
 8005a16:	2221      	movs	r2, #33	; 0x21
 8005a18:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005a1a:	4b6f      	ldr	r3, [pc, #444]	; (8005bd8 <low_level_init+0x250>)
 8005a1c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005a20:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005a22:	4b6d      	ldr	r3, [pc, #436]	; (8005bd8 <low_level_init+0x250>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005a28:	486c      	ldr	r0, [pc, #432]	; (8005bdc <low_level_init+0x254>)
 8005a2a:	f004 f963 	bl	8009cf4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2206      	movs	r2, #6
 8005a32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005a36:	4b64      	ldr	r3, [pc, #400]	; (8005bc8 <low_level_init+0x240>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	781a      	ldrb	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005a42:	4b61      	ldr	r3, [pc, #388]	; (8005bc8 <low_level_init+0x240>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	785a      	ldrb	r2, [r3, #1]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005a4e:	4b5e      	ldr	r3, [pc, #376]	; (8005bc8 <low_level_init+0x240>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	789a      	ldrb	r2, [r3, #2]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005a5a:	4b5b      	ldr	r3, [pc, #364]	; (8005bc8 <low_level_init+0x240>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	78da      	ldrb	r2, [r3, #3]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005a66:	4b58      	ldr	r3, [pc, #352]	; (8005bc8 <low_level_init+0x240>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	791a      	ldrb	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005a72:	4b55      	ldr	r3, [pc, #340]	; (8005bc8 <low_level_init+0x240>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	795a      	ldrb	r2, [r3, #5]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005a84:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a8c:	f043 030a 	orr.w	r3, r3, #10
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8005a98:	2203      	movs	r2, #3
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	f001 f82d 	bl	8006afc <xQueueGenericCreate>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4a4e      	ldr	r2, [pc, #312]	; (8005be0 <low_level_init+0x258>)
 8005aa6:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	2100      	movs	r1, #0
 8005aac:	2001      	movs	r0, #1
 8005aae:	f001 f825 	bl	8006afc <xQueueGenericCreate>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4a4b      	ldr	r2, [pc, #300]	; (8005be4 <low_level_init+0x25c>)
 8005ab6:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005ab8:	4b4b      	ldr	r3, [pc, #300]	; (8005be8 <low_level_init+0x260>)
 8005aba:	f107 0408 	add.w	r4, r7, #8
 8005abe:	461d      	mov	r5, r3
 8005ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ac4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005ac8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005acc:	f107 0308 	add.w	r3, r7, #8
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fc16 	bl	8006304 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005ad8:	4944      	ldr	r1, [pc, #272]	; (8005bec <low_level_init+0x264>)
 8005ada:	4845      	ldr	r0, [pc, #276]	; (8005bf0 <low_level_init+0x268>)
 8005adc:	f7fb f9dd 	bl	8000e9a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005ae0:	4843      	ldr	r0, [pc, #268]	; (8005bf0 <low_level_init+0x268>)
 8005ae2:	f7fb fa0c 	bl	8000efe <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005ae6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d165      	bne.n	8005bba <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005aee:	4840      	ldr	r0, [pc, #256]	; (8005bf0 <low_level_init+0x268>)
 8005af0:	f7fb faad 	bl	800104e <LAN8742_GetLinkState>
 8005af4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005af8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	dc06      	bgt.n	8005b0e <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f004 fcd1 	bl	800a4a8 <netif_set_link_down>
      netif_set_down(netif);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f004 fc68 	bl	800a3dc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005b0c:	e057      	b.n	8005bbe <low_level_init+0x236>
      switch (PHYLinkState)
 8005b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b12:	3b02      	subs	r3, #2
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d82b      	bhi.n	8005b70 <low_level_init+0x1e8>
 8005b18:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <low_level_init+0x198>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005b31 	.word	0x08005b31
 8005b24:	08005b43 	.word	0x08005b43
 8005b28:	08005b53 	.word	0x08005b53
 8005b2c:	08005b63 	.word	0x08005b63
        duplex = ETH_FULLDUPLEX_MODE;
 8005b30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005b38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005b40:	e01f      	b.n	8005b82 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005b42:	2300      	movs	r3, #0
 8005b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005b48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005b50:	e017      	b.n	8005b82 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005b52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005b60:	e00f      	b.n	8005b82 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005b6e:	e008      	b.n	8005b82 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005b78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005b80:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b86:	4619      	mov	r1, r3
 8005b88:	480f      	ldr	r0, [pc, #60]	; (8005bc8 <low_level_init+0x240>)
 8005b8a:	f7fc f95f 	bl	8001e4c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b92:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8005b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b98:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4809      	ldr	r0, [pc, #36]	; (8005bc8 <low_level_init+0x240>)
 8005ba2:	f7fc fa3d 	bl	8002020 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005ba6:	4808      	ldr	r0, [pc, #32]	; (8005bc8 <low_level_init+0x240>)
 8005ba8:	f7fb fce8 	bl	800157c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f004 fba9 	bl	800a304 <netif_set_up>
    netif_set_link_up(netif);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f004 fc44 	bl	800a440 <netif_set_link_up>
}
 8005bb8:	e001      	b.n	8005bbe <low_level_init+0x236>
    Error_Handler();
 8005bba:	f7fa fec5 	bl	8000948 <Error_Handler>
}
 8005bbe:	bf00      	nop
 8005bc0:	37a0      	adds	r7, #160	; 0xa0
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	2000546c 	.word	0x2000546c
 8005bcc:	40028000 	.word	0x40028000
 8005bd0:	20000134 	.word	0x20000134
 8005bd4:	20000094 	.word	0x20000094
 8005bd8:	2000551c 	.word	0x2000551c
 8005bdc:	08016ffc 	.word	0x08016ffc
 8005be0:	20005464 	.word	0x20005464
 8005be4:	20005468 	.word	0x20005468
 8005be8:	080144e4 	.word	0x080144e4
 8005bec:	2000000c 	.word	0x2000000c
 8005bf0:	20005554 	.word	0x20005554

08005bf4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b092      	sub	sp, #72	; 0x48
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005c0c:	f107 030c 	add.w	r3, r7, #12
 8005c10:	2230      	movs	r2, #48	; 0x30
 8005c12:	2100      	movs	r1, #0
 8005c14:	4618      	mov	r0, r3
 8005c16:	f00d fc66 	bl	80134e6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005c1a:	f107 030c 	add.w	r3, r7, #12
 8005c1e:	2230      	movs	r2, #48	; 0x30
 8005c20:	2100      	movs	r1, #0
 8005c22:	4618      	mov	r0, r3
 8005c24:	f00d fc5f 	bl	80134e6 <memset>

  for(q = p; q != NULL; q = q->next)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c2c:	e045      	b.n	8005cba <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d902      	bls.n	8005c3a <low_level_output+0x46>
      return ERR_IF;
 8005c34:	f06f 030b 	mvn.w	r3, #11
 8005c38:	e065      	b.n	8005d06 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8005c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c3c:	6859      	ldr	r1, [r3, #4]
 8005c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c40:	4613      	mov	r3, r2
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	4413      	add	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	3348      	adds	r3, #72	; 0x48
 8005c4a:	443b      	add	r3, r7
 8005c4c:	3b3c      	subs	r3, #60	; 0x3c
 8005c4e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c52:	895b      	ldrh	r3, [r3, #10]
 8005c54:	4619      	mov	r1, r3
 8005c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c58:	4613      	mov	r3, r2
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	3348      	adds	r3, #72	; 0x48
 8005c62:	443b      	add	r3, r7
 8005c64:	3b38      	subs	r3, #56	; 0x38
 8005c66:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d011      	beq.n	8005c92 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c70:	1e5a      	subs	r2, r3, #1
 8005c72:	f107 000c 	add.w	r0, r7, #12
 8005c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c78:	460b      	mov	r3, r1
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	440b      	add	r3, r1
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	18c1      	adds	r1, r0, r3
 8005c82:	4613      	mov	r3, r2
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	3348      	adds	r3, #72	; 0x48
 8005c8c:	443b      	add	r3, r7
 8005c8e:	3b34      	subs	r3, #52	; 0x34
 8005c90:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d109      	bne.n	8005cae <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	3348      	adds	r3, #72	; 0x48
 8005ca6:	443b      	add	r3, r7
 8005ca8:	3b34      	subs	r3, #52	; 0x34
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	643b      	str	r3, [r7, #64]	; 0x40
 8005cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1b6      	bne.n	8005c2e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	891b      	ldrh	r3, [r3, #8]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <low_level_output+0x11c>)
 8005cc8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005cca:	4a11      	ldr	r2, [pc, #68]	; (8005d10 <low_level_output+0x11c>)
 8005ccc:	f107 030c 	add.w	r3, r7, #12
 8005cd0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005cd2:	4a0f      	ldr	r2, [pc, #60]	; (8005d10 <low_level_output+0x11c>)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005cd8:	6838      	ldr	r0, [r7, #0]
 8005cda:	f005 f869 	bl	800adb0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005cde:	490c      	ldr	r1, [pc, #48]	; (8005d10 <low_level_output+0x11c>)
 8005ce0:	480c      	ldr	r0, [pc, #48]	; (8005d14 <low_level_output+0x120>)
 8005ce2:	f7fb fd59 	bl	8001798 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005ce6:	bf00      	nop
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <low_level_output+0x124>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f04f 31ff 	mov.w	r1, #4294967295
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fc03 	bl	80064fc <osSemaphoreWait>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1f5      	bne.n	8005ce8 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005cfc:	4805      	ldr	r0, [pc, #20]	; (8005d14 <low_level_output+0x120>)
 8005cfe:	f7fb fedf 	bl	8001ac0 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005d02:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3748      	adds	r7, #72	; 0x48
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	2000551c 	.word	0x2000551c
 8005d14:	2000546c 	.word	0x2000546c
 8005d18:	20005468 	.word	0x20005468

08005d1c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005d28:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <low_level_input+0x2c>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d105      	bne.n	8005d3c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005d30:	f107 030c 	add.w	r3, r7, #12
 8005d34:	4619      	mov	r1, r3
 8005d36:	4805      	ldr	r0, [pc, #20]	; (8005d4c <low_level_input+0x30>)
 8005d38:	f7fb fd8a 	bl	8001850 <HAL_ETH_ReadData>
  }

  return p;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20005460 	.word	0x20005460
 8005d4c:	2000546c 	.word	0x2000546c

08005d50 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005d60:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <ethernetif_input+0x50>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f04f 31ff 	mov.w	r1, #4294967295
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fbc7 	bl	80064fc <osSemaphoreWait>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1f5      	bne.n	8005d60 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005d74:	68b8      	ldr	r0, [r7, #8]
 8005d76:	f7ff ffd1 	bl	8005d1c <low_level_input>
 8005d7a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	68b9      	ldr	r1, [r7, #8]
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	4798      	blx	r3
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f004 ff66 	bl	800ac64 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1ea      	bne.n	8005d74 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005d9e:	e7df      	b.n	8005d60 <ethernetif_input+0x10>
 8005da0:	20005464 	.word	0x20005464

08005da4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <ethernetif_init+0x1c>
 8005db2:	4b0e      	ldr	r3, [pc, #56]	; (8005dec <ethernetif_init+0x48>)
 8005db4:	f240 12ef 	movw	r2, #495	; 0x1ef
 8005db8:	490d      	ldr	r1, [pc, #52]	; (8005df0 <ethernetif_init+0x4c>)
 8005dba:	480e      	ldr	r0, [pc, #56]	; (8005df4 <ethernetif_init+0x50>)
 8005dbc:	f00d fc30 	bl	8013620 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2273      	movs	r2, #115	; 0x73
 8005dc4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2274      	movs	r2, #116	; 0x74
 8005dcc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a09      	ldr	r2, [pc, #36]	; (8005df8 <ethernetif_init+0x54>)
 8005dd4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a08      	ldr	r2, [pc, #32]	; (8005dfc <ethernetif_init+0x58>)
 8005dda:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff fdd3 	bl	8005988 <low_level_init>

  return ERR_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	08014500 	.word	0x08014500
 8005df0:	0801451c 	.word	0x0801451c
 8005df4:	0801452c 	.word	0x0801452c
 8005df8:	08011351 	.word	0x08011351
 8005dfc:	08005bf5 	.word	0x08005bf5

08005e00 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005e0c:	68f9      	ldr	r1, [r7, #12]
 8005e0e:	4809      	ldr	r0, [pc, #36]	; (8005e34 <pbuf_free_custom+0x34>)
 8005e10:	f004 f860 	bl	8009ed4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005e14:	4b08      	ldr	r3, [pc, #32]	; (8005e38 <pbuf_free_custom+0x38>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d107      	bne.n	8005e2c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005e1c:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <pbuf_free_custom+0x38>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005e22:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <pbuf_free_custom+0x3c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fbb6 	bl	8006598 <osSemaphoreRelease>
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	08016ffc 	.word	0x08016ffc
 8005e38:	20005460 	.word	0x20005460
 8005e3c:	20005464 	.word	0x20005464

08005e40 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005e44:	f7fb f9ac 	bl	80011a0 <HAL_GetTick>
 8005e48:	4603      	mov	r3, r0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08e      	sub	sp, #56	; 0x38
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	609a      	str	r2, [r3, #8]
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a52      	ldr	r2, [pc, #328]	; (8005fb8 <HAL_ETH_MspInit+0x168>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	f040 809e 	bne.w	8005fb0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005e74:	4b51      	ldr	r3, [pc, #324]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	4a50      	ldr	r2, [pc, #320]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005e7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8005e80:	4b4e      	ldr	r3, [pc, #312]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e88:	623b      	str	r3, [r7, #32]
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	4b4b      	ldr	r3, [pc, #300]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e90:	4a4a      	ldr	r2, [pc, #296]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005e92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e96:	6313      	str	r3, [r2, #48]	; 0x30
 8005e98:	4b48      	ldr	r3, [pc, #288]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ea0:	61fb      	str	r3, [r7, #28]
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4b45      	ldr	r3, [pc, #276]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea8:	4a44      	ldr	r2, [pc, #272]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005eaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005eae:	6313      	str	r3, [r2, #48]	; 0x30
 8005eb0:	4b42      	ldr	r3, [pc, #264]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ebc:	4b3f      	ldr	r3, [pc, #252]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	4a3e      	ldr	r2, [pc, #248]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005ec2:	f043 0304 	orr.w	r3, r3, #4
 8005ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ec8:	4b3c      	ldr	r3, [pc, #240]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ed4:	4b39      	ldr	r3, [pc, #228]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed8:	4a38      	ldr	r2, [pc, #224]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005eda:	f043 0301 	orr.w	r3, r3, #1
 8005ede:	6313      	str	r3, [r2, #48]	; 0x30
 8005ee0:	4b36      	ldr	r3, [pc, #216]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eec:	4b33      	ldr	r3, [pc, #204]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	4a32      	ldr	r2, [pc, #200]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005ef2:	f043 0302 	orr.w	r3, r3, #2
 8005ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ef8:	4b30      	ldr	r3, [pc, #192]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005f04:	4b2d      	ldr	r3, [pc, #180]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	4a2c      	ldr	r2, [pc, #176]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f10:	4b2a      	ldr	r3, [pc, #168]	; (8005fbc <HAL_ETH_MspInit+0x16c>)
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	60bb      	str	r3, [r7, #8]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005f1c:	2332      	movs	r3, #50	; 0x32
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f20:	2302      	movs	r3, #2
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f24:	2300      	movs	r3, #0
 8005f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f2c:	230b      	movs	r3, #11
 8005f2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f34:	4619      	mov	r1, r3
 8005f36:	4822      	ldr	r0, [pc, #136]	; (8005fc0 <HAL_ETH_MspInit+0x170>)
 8005f38:	f7fc fcf2 	bl	8002920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005f3c:	2386      	movs	r3, #134	; 0x86
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f40:	2302      	movs	r3, #2
 8005f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f44:	2300      	movs	r3, #0
 8005f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f4c:	230b      	movs	r3, #11
 8005f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f54:	4619      	mov	r1, r3
 8005f56:	481b      	ldr	r0, [pc, #108]	; (8005fc4 <HAL_ETH_MspInit+0x174>)
 8005f58:	f7fc fce2 	bl	8002920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f62:	2302      	movs	r3, #2
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f6e:	230b      	movs	r3, #11
 8005f70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f76:	4619      	mov	r1, r3
 8005f78:	4813      	ldr	r0, [pc, #76]	; (8005fc8 <HAL_ETH_MspInit+0x178>)
 8005f7a:	f7fc fcd1 	bl	8002920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005f7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f84:	2302      	movs	r3, #2
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f90:	230b      	movs	r3, #11
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f98:	4619      	mov	r1, r3
 8005f9a:	480c      	ldr	r0, [pc, #48]	; (8005fcc <HAL_ETH_MspInit+0x17c>)
 8005f9c:	f7fc fcc0 	bl	8002920 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2105      	movs	r1, #5
 8005fa4:	203d      	movs	r0, #61	; 0x3d
 8005fa6:	f7fb f9e3 	bl	8001370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005faa:	203d      	movs	r0, #61	; 0x3d
 8005fac:	f7fb f9fc 	bl	80013a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	3738      	adds	r7, #56	; 0x38
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	40028000 	.word	0x40028000
 8005fbc:	40023800 	.word	0x40023800
 8005fc0:	40020800 	.word	0x40020800
 8005fc4:	40020000 	.word	0x40020000
 8005fc8:	40020400 	.word	0x40020400
 8005fcc:	40021800 	.word	0x40021800

08005fd0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005fd4:	4802      	ldr	r0, [pc, #8]	; (8005fe0 <ETH_PHY_IO_Init+0x10>)
 8005fd6:	f7fc f83d 	bl	8002054 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	2000546c 	.word	0x2000546c

08005fe4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  return 0;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	68f9      	ldr	r1, [r7, #12]
 8006006:	4807      	ldr	r0, [pc, #28]	; (8006024 <ETH_PHY_IO_ReadReg+0x30>)
 8006008:	f7fb fe8c 	bl	8001d24 <HAL_ETH_ReadPHYRegister>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006012:	f04f 33ff 	mov.w	r3, #4294967295
 8006016:	e000      	b.n	800601a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	2000546c 	.word	0x2000546c

08006028 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	68f9      	ldr	r1, [r7, #12]
 800603a:	4807      	ldr	r0, [pc, #28]	; (8006058 <ETH_PHY_IO_WriteReg+0x30>)
 800603c:	f7fb febd 	bl	8001dba <HAL_ETH_WritePHYRegister>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006046:	f04f 33ff 	mov.w	r3, #4294967295
 800604a:	e000      	b.n	800604e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	2000546c 	.word	0x2000546c

0800605c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006060:	f7fb f89e 	bl	80011a0 <HAL_GetTick>
 8006064:	4603      	mov	r3, r0
}
 8006066:	4618      	mov	r0, r3
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b0a0      	sub	sp, #128	; 0x80
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006074:	f107 0308 	add.w	r3, r7, #8
 8006078:	2264      	movs	r2, #100	; 0x64
 800607a:	2100      	movs	r1, #0
 800607c:	4618      	mov	r0, r3
 800607e:	f00d fa32 	bl	80134e6 <memset>
  int32_t PHYLinkState = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	67fb      	str	r3, [r7, #124]	; 0x7c
 800608a:	2300      	movs	r3, #0
 800608c:	67bb      	str	r3, [r7, #120]	; 0x78
 800608e:	2300      	movs	r3, #0
 8006090:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006096:	483a      	ldr	r0, [pc, #232]	; (8006180 <ethernet_link_thread+0x114>)
 8006098:	f7fa ffd9 	bl	800104e <LAN8742_GetLinkState>
 800609c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800609e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060a4:	089b      	lsrs	r3, r3, #2
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00c      	beq.n	80060ca <ethernet_link_thread+0x5e>
 80060b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	dc09      	bgt.n	80060ca <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80060b6:	4833      	ldr	r0, [pc, #204]	; (8006184 <ethernet_link_thread+0x118>)
 80060b8:	f7fb faee 	bl	8001698 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80060bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80060be:	f004 f98d 	bl	800a3dc <netif_set_down>
    netif_set_link_down(netif);
 80060c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80060c4:	f004 f9f0 	bl	800a4a8 <netif_set_link_down>
 80060c8:	e055      	b.n	8006176 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80060ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d14e      	bne.n	8006176 <ethernet_link_thread+0x10a>
 80060d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060da:	2b01      	cmp	r3, #1
 80060dc:	dd4b      	ble.n	8006176 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80060de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060e0:	3b02      	subs	r3, #2
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d82a      	bhi.n	800613c <ethernet_link_thread+0xd0>
 80060e6:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <ethernet_link_thread+0x80>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	080060fd 	.word	0x080060fd
 80060f0:	0800610f 	.word	0x0800610f
 80060f4:	0800611f 	.word	0x0800611f
 80060f8:	0800612f 	.word	0x0800612f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80060fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006100:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006102:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006106:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006108:	2301      	movs	r3, #1
 800610a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800610c:	e017      	b.n	800613e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800610e:	2300      	movs	r3, #0
 8006110:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006112:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006116:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006118:	2301      	movs	r3, #1
 800611a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800611c:	e00f      	b.n	800613e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800611e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006122:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006124:	2300      	movs	r3, #0
 8006126:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006128:	2301      	movs	r3, #1
 800612a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800612c:	e007      	b.n	800613e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800612e:	2300      	movs	r3, #0
 8006130:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006132:	2300      	movs	r3, #0
 8006134:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006136:	2301      	movs	r3, #1
 8006138:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800613a:	e000      	b.n	800613e <ethernet_link_thread+0xd2>
    default:
      break;
 800613c:	bf00      	nop
    }

    if(linkchanged)
 800613e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006140:	2b00      	cmp	r3, #0
 8006142:	d018      	beq.n	8006176 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006144:	f107 0308 	add.w	r3, r7, #8
 8006148:	4619      	mov	r1, r3
 800614a:	480e      	ldr	r0, [pc, #56]	; (8006184 <ethernet_link_thread+0x118>)
 800614c:	f7fb fe7e 	bl	8001e4c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006152:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006156:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006158:	f107 0308 	add.w	r3, r7, #8
 800615c:	4619      	mov	r1, r3
 800615e:	4809      	ldr	r0, [pc, #36]	; (8006184 <ethernet_link_thread+0x118>)
 8006160:	f7fb ff5e 	bl	8002020 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006164:	4807      	ldr	r0, [pc, #28]	; (8006184 <ethernet_link_thread+0x118>)
 8006166:	f7fb f9a9 	bl	80014bc <HAL_ETH_Start>
      netif_set_up(netif);
 800616a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800616c:	f004 f8ca 	bl	800a304 <netif_set_up>
      netif_set_link_up(netif);
 8006170:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006172:	f004 f965 	bl	800a440 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006176:	2064      	movs	r0, #100	; 0x64
 8006178:	f000 f910 	bl	800639c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800617c:	e78b      	b.n	8006096 <ethernet_link_thread+0x2a>
 800617e:	bf00      	nop
 8006180:	20005554 	.word	0x20005554
 8006184:	2000546c 	.word	0x2000546c

08006188 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af02      	add	r7, sp, #8
 800618e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006190:	4812      	ldr	r0, [pc, #72]	; (80061dc <HAL_ETH_RxAllocateCallback+0x54>)
 8006192:	f003 fe2b 	bl	8009dec <memp_malloc_pool>
 8006196:	60f8      	str	r0, [r7, #12]
  if (p)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d014      	beq.n	80061c8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f103 0220 	add.w	r2, r3, #32
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4a0d      	ldr	r2, [pc, #52]	; (80061e0 <HAL_ETH_RxAllocateCallback+0x58>)
 80061ac:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80061b6:	9201      	str	r2, [sp, #4]
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2241      	movs	r2, #65	; 0x41
 80061be:	2100      	movs	r1, #0
 80061c0:	2000      	movs	r0, #0
 80061c2:	f004 fb95 	bl	800a8f0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80061c6:	e005      	b.n	80061d4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80061ca:	2201      	movs	r2, #1
 80061cc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
}
 80061d4:	bf00      	nop
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	08016ffc 	.word	0x08016ffc
 80061e0:	08005e01 	.word	0x08005e01
 80061e4:	20005460 	.word	0x20005460

080061e8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3b20      	subs	r3, #32
 8006206:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	2200      	movs	r2, #0
 8006212:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	887a      	ldrh	r2, [r7, #2]
 8006218:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d103      	bne.n	800622a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	e003      	b.n	8006232 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	69fa      	ldr	r2, [r7, #28]
 8006236:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	61fb      	str	r3, [r7, #28]
 800623e:	e009      	b.n	8006254 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	891a      	ldrh	r2, [r3, #8]
 8006244:	887b      	ldrh	r3, [r7, #2]
 8006246:	4413      	add	r3, r2
 8006248:	b29a      	uxth	r2, r3
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1f2      	bne.n	8006240 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800625a:	887b      	ldrh	r3, [r7, #2]
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff fb2e 	bl	80058c0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006264:	bf00      	nop
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f004 fcf5 	bl	800ac64 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	4603      	mov	r3, r0
 800628a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800628c:	2300      	movs	r3, #0
 800628e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006294:	2b84      	cmp	r3, #132	; 0x84
 8006296:	d005      	beq.n	80062a4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006298:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	3303      	adds	r3, #3
 80062a2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80062a4:	68fb      	ldr	r3, [r7, #12]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062b8:	f3ef 8305 	mrs	r3, IPSR
 80062bc:	607b      	str	r3, [r7, #4]
  return(result);
 80062be:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	bf14      	ite	ne
 80062c4:	2301      	movne	r3, #1
 80062c6:	2300      	moveq	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80062da:	f001 fc89 	bl	8007bf0 <vTaskStartScheduler>
  
  return osOK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80062e8:	f7ff ffe3 	bl	80062b2 <inHandlerMode>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80062f2:	f001 fda7 	bl	8007e44 <xTaskGetTickCountFromISR>
 80062f6:	4603      	mov	r3, r0
 80062f8:	e002      	b.n	8006300 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80062fa:	f001 fd93 	bl	8007e24 <xTaskGetTickCount>
 80062fe:	4603      	mov	r3, r0
  }
}
 8006300:	4618      	mov	r0, r3
 8006302:	bd80      	pop	{r7, pc}

08006304 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006306:	b089      	sub	sp, #36	; 0x24
 8006308:	af04      	add	r7, sp, #16
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d020      	beq.n	8006358 <osThreadCreate+0x54>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d01c      	beq.n	8006358 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685c      	ldr	r4, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681d      	ldr	r5, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691e      	ldr	r6, [r3, #16]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff ffa6 	bl	8006282 <makeFreeRtosPriority>
 8006336:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006340:	9202      	str	r2, [sp, #8]
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	9100      	str	r1, [sp, #0]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	4632      	mov	r2, r6
 800634a:	4629      	mov	r1, r5
 800634c:	4620      	mov	r0, r4
 800634e:	f001 fa67 	bl	8007820 <xTaskCreateStatic>
 8006352:	4603      	mov	r3, r0
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	e01c      	b.n	8006392 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685c      	ldr	r4, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006364:	b29e      	uxth	r6, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff ff88 	bl	8006282 <makeFreeRtosPriority>
 8006372:	4602      	mov	r2, r0
 8006374:	f107 030c 	add.w	r3, r7, #12
 8006378:	9301      	str	r3, [sp, #4]
 800637a:	9200      	str	r2, [sp, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	4632      	mov	r2, r6
 8006380:	4629      	mov	r1, r5
 8006382:	4620      	mov	r0, r4
 8006384:	f001 faaf 	bl	80078e6 <xTaskCreate>
 8006388:	4603      	mov	r3, r0
 800638a:	2b01      	cmp	r3, #1
 800638c:	d001      	beq.n	8006392 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800638e:	2300      	movs	r3, #0
 8006390:	e000      	b.n	8006394 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006392:	68fb      	ldr	r3, [r7, #12]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800639c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <osDelay+0x16>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	e000      	b.n	80063b4 <osDelay+0x18>
 80063b2:	2301      	movs	r3, #1
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 fbe5 	bl	8007b84 <vTaskDelay>
  
  return osOK;
 80063ba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d007      	beq.n	80063e4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	4619      	mov	r1, r3
 80063da:	2001      	movs	r0, #1
 80063dc:	f000 fc21 	bl	8006c22 <xQueueCreateMutexStatic>
 80063e0:	4603      	mov	r3, r0
 80063e2:	e003      	b.n	80063ec <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80063e4:	2001      	movs	r0, #1
 80063e6:	f000 fc04 	bl	8006bf2 <xQueueCreateMutex>
 80063ea:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80063fe:	2300      	movs	r3, #0
 8006400:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <osMutexWait+0x18>
    return osErrorParameter;
 8006408:	2380      	movs	r3, #128	; 0x80
 800640a:	e03a      	b.n	8006482 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006416:	d103      	bne.n	8006420 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006418:	f04f 33ff 	mov.w	r3, #4294967295
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	e009      	b.n	8006434 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d006      	beq.n	8006434 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <osMutexWait+0x40>
      ticks = 1;
 8006430:	2301      	movs	r3, #1
 8006432:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006434:	f7ff ff3d 	bl	80062b2 <inHandlerMode>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d017      	beq.n	800646e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800643e:	f107 0308 	add.w	r3, r7, #8
 8006442:	461a      	mov	r2, r3
 8006444:	2100      	movs	r1, #0
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 f83c 	bl	80074c4 <xQueueReceiveFromISR>
 800644c:	4603      	mov	r3, r0
 800644e:	2b01      	cmp	r3, #1
 8006450:	d001      	beq.n	8006456 <osMutexWait+0x62>
      return osErrorOS;
 8006452:	23ff      	movs	r3, #255	; 0xff
 8006454:	e015      	b.n	8006482 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d011      	beq.n	8006480 <osMutexWait+0x8c>
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <osMutexWait+0x98>)
 800645e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	e008      	b.n	8006480 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800646e:	68f9      	ldr	r1, [r7, #12]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 ff13 	bl	800729c <xQueueSemaphoreTake>
 8006476:	4603      	mov	r3, r0
 8006478:	2b01      	cmp	r3, #1
 800647a:	d001      	beq.n	8006480 <osMutexWait+0x8c>
    return osErrorOS;
 800647c:	23ff      	movs	r3, #255	; 0xff
 800647e:	e000      	b.n	8006482 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	e000ed04 	.word	0xe000ed04

08006490 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800649c:	2300      	movs	r3, #0
 800649e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80064a0:	f7ff ff07 	bl	80062b2 <inHandlerMode>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d016      	beq.n	80064d8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80064aa:	f107 0308 	add.w	r3, r7, #8
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fd77 	bl	8006fa4 <xQueueGiveFromISR>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d001      	beq.n	80064c0 <osMutexRelease+0x30>
      return osErrorOS;
 80064bc:	23ff      	movs	r3, #255	; 0xff
 80064be:	e017      	b.n	80064f0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d013      	beq.n	80064ee <osMutexRelease+0x5e>
 80064c6:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <osMutexRelease+0x68>)
 80064c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	e00a      	b.n	80064ee <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80064d8:	2300      	movs	r3, #0
 80064da:	2200      	movs	r2, #0
 80064dc:	2100      	movs	r1, #0
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fbba 	bl	8006c58 <xQueueGenericSend>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d001      	beq.n	80064ee <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80064ea:	23ff      	movs	r3, #255	; 0xff
 80064ec:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80064ee:	68fb      	ldr	r3, [r7, #12]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006506:	2300      	movs	r3, #0
 8006508:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006510:	2380      	movs	r3, #128	; 0x80
 8006512:	e03a      	b.n	800658a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651e:	d103      	bne.n	8006528 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006520:	f04f 33ff 	mov.w	r3, #4294967295
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	e009      	b.n	800653c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d006      	beq.n	800653c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <osSemaphoreWait+0x40>
      ticks = 1;
 8006538:	2301      	movs	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800653c:	f7ff feb9 	bl	80062b2 <inHandlerMode>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d017      	beq.n	8006576 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006546:	f107 0308 	add.w	r3, r7, #8
 800654a:	461a      	mov	r2, r3
 800654c:	2100      	movs	r1, #0
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 ffb8 	bl	80074c4 <xQueueReceiveFromISR>
 8006554:	4603      	mov	r3, r0
 8006556:	2b01      	cmp	r3, #1
 8006558:	d001      	beq.n	800655e <osSemaphoreWait+0x62>
      return osErrorOS;
 800655a:	23ff      	movs	r3, #255	; 0xff
 800655c:	e015      	b.n	800658a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d011      	beq.n	8006588 <osSemaphoreWait+0x8c>
 8006564:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <osSemaphoreWait+0x98>)
 8006566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	e008      	b.n	8006588 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006576:	68f9      	ldr	r1, [r7, #12]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fe8f 	bl	800729c <xQueueSemaphoreTake>
 800657e:	4603      	mov	r3, r0
 8006580:	2b01      	cmp	r3, #1
 8006582:	d001      	beq.n	8006588 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006584:	23ff      	movs	r3, #255	; 0xff
 8006586:	e000      	b.n	800658a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	e000ed04 	.word	0xe000ed04

08006598 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80065a4:	2300      	movs	r3, #0
 80065a6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80065a8:	f7ff fe83 	bl	80062b2 <inHandlerMode>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d016      	beq.n	80065e0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80065b2:	f107 0308 	add.w	r3, r7, #8
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fcf3 	bl	8006fa4 <xQueueGiveFromISR>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d001      	beq.n	80065c8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80065c4:	23ff      	movs	r3, #255	; 0xff
 80065c6:	e017      	b.n	80065f8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d013      	beq.n	80065f6 <osSemaphoreRelease+0x5e>
 80065ce:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <osSemaphoreRelease+0x68>)
 80065d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	e00a      	b.n	80065f6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80065e0:	2300      	movs	r3, #0
 80065e2:	2200      	movs	r2, #0
 80065e4:	2100      	movs	r1, #0
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fb36 	bl	8006c58 <xQueueGenericSend>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d001      	beq.n	80065f6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80065f2:	23ff      	movs	r3, #255	; 0xff
 80065f4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80065f6:	68fb      	ldr	r3, [r7, #12]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	e000ed04 	.word	0xe000ed04

08006604 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006604:	b590      	push	{r4, r7, lr}
 8006606:	b085      	sub	sp, #20
 8006608:	af02      	add	r7, sp, #8
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d011      	beq.n	800663a <osMessageCreate+0x36>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00d      	beq.n	800663a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6859      	ldr	r1, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	2400      	movs	r4, #0
 8006630:	9400      	str	r4, [sp, #0]
 8006632:	f000 f9e1 	bl	80069f8 <xQueueGenericCreateStatic>
 8006636:	4603      	mov	r3, r0
 8006638:	e008      	b.n	800664c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	4619      	mov	r1, r3
 8006646:	f000 fa59 	bl	8006afc <xQueueGenericCreate>
 800664a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800664c:	4618      	mov	r0, r3
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	bd90      	pop	{r4, r7, pc}

08006654 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006660:	2300      	movs	r3, #0
 8006662:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <osMessagePut+0x1e>
    ticks = 1;
 800666e:	2301      	movs	r3, #1
 8006670:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006672:	f7ff fe1e 	bl	80062b2 <inHandlerMode>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d018      	beq.n	80066ae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800667c:	f107 0210 	add.w	r2, r7, #16
 8006680:	f107 0108 	add.w	r1, r7, #8
 8006684:	2300      	movs	r3, #0
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f000 fbec 	bl	8006e64 <xQueueGenericSendFromISR>
 800668c:	4603      	mov	r3, r0
 800668e:	2b01      	cmp	r3, #1
 8006690:	d001      	beq.n	8006696 <osMessagePut+0x42>
      return osErrorOS;
 8006692:	23ff      	movs	r3, #255	; 0xff
 8006694:	e018      	b.n	80066c8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d014      	beq.n	80066c6 <osMessagePut+0x72>
 800669c:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <osMessagePut+0x7c>)
 800669e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	e00b      	b.n	80066c6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80066ae:	f107 0108 	add.w	r1, r7, #8
 80066b2:	2300      	movs	r3, #0
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 face 	bl	8006c58 <xQueueGenericSend>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d001      	beq.n	80066c6 <osMessagePut+0x72>
      return osErrorOS;
 80066c2:	23ff      	movs	r3, #255	; 0xff
 80066c4:	e000      	b.n	80066c8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	e000ed04 	.word	0xe000ed04

080066d4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80066d4:	b590      	push	{r4, r7, lr}
 80066d6:	b08b      	sub	sp, #44	; 0x2c
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10a      	bne.n	8006704 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80066ee:	2380      	movs	r3, #128	; 0x80
 80066f0:	617b      	str	r3, [r7, #20]
    return event;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	461c      	mov	r4, r3
 80066f6:	f107 0314 	add.w	r3, r7, #20
 80066fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006702:	e054      	b.n	80067ae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006704:	2300      	movs	r3, #0
 8006706:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d103      	bne.n	800671c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006714:	f04f 33ff 	mov.w	r3, #4294967295
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
 800671a:	e009      	b.n	8006730 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d006      	beq.n	8006730 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <osMessageGet+0x5c>
      ticks = 1;
 800672c:	2301      	movs	r3, #1
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006730:	f7ff fdbf 	bl	80062b2 <inHandlerMode>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d01c      	beq.n	8006774 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800673a:	f107 0220 	add.w	r2, r7, #32
 800673e:	f107 0314 	add.w	r3, r7, #20
 8006742:	3304      	adds	r3, #4
 8006744:	4619      	mov	r1, r3
 8006746:	68b8      	ldr	r0, [r7, #8]
 8006748:	f000 febc 	bl	80074c4 <xQueueReceiveFromISR>
 800674c:	4603      	mov	r3, r0
 800674e:	2b01      	cmp	r3, #1
 8006750:	d102      	bne.n	8006758 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006752:	2310      	movs	r3, #16
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	e001      	b.n	800675c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d01d      	beq.n	800679e <osMessageGet+0xca>
 8006762:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <osMessageGet+0xe4>)
 8006764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006768:	601a      	str	r2, [r3, #0]
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	e014      	b.n	800679e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006774:	f107 0314 	add.w	r3, r7, #20
 8006778:	3304      	adds	r3, #4
 800677a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677c:	4619      	mov	r1, r3
 800677e:	68b8      	ldr	r0, [r7, #8]
 8006780:	f000 fca6 	bl	80070d0 <xQueueReceive>
 8006784:	4603      	mov	r3, r0
 8006786:	2b01      	cmp	r3, #1
 8006788:	d102      	bne.n	8006790 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800678a:	2310      	movs	r3, #16
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	e006      	b.n	800679e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <osMessageGet+0xc6>
 8006796:	2300      	movs	r3, #0
 8006798:	e000      	b.n	800679c <osMessageGet+0xc8>
 800679a:	2340      	movs	r3, #64	; 0x40
 800679c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	461c      	mov	r4, r3
 80067a2:	f107 0314 	add.w	r3, r7, #20
 80067a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	372c      	adds	r7, #44	; 0x2c
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd90      	pop	{r4, r7, pc}
 80067b6:	bf00      	nop
 80067b8:	e000ed04 	.word	0xe000ed04

080067bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f103 0208 	add.w	r2, r3, #8
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f04f 32ff 	mov.w	r2, #4294967295
 80067d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f103 0208 	add.w	r2, r3, #8
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f103 0208 	add.w	r2, r3, #8
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006816:	b480      	push	{r7}
 8006818:	b085      	sub	sp, #20
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	601a      	str	r2, [r3, #0]
}
 8006852:	bf00      	nop
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006874:	d103      	bne.n	800687e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	e00c      	b.n	8006898 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3308      	adds	r3, #8
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e002      	b.n	800688c <vListInsert+0x2e>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	d2f6      	bcs.n	8006886 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	601a      	str	r2, [r3, #0]
}
 80068c4:	bf00      	nop
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6892      	ldr	r2, [r2, #8]
 80068e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	6852      	ldr	r2, [r2, #4]
 80068f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d103      	bne.n	8006904 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	1e5a      	subs	r2, r3, #1
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10c      	bne.n	8006952 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	b672      	cpsid	i
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	b662      	cpsie	i
 800694c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006952:	f002 f8e3 	bl	8008b1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695e:	68f9      	ldr	r1, [r7, #12]
 8006960:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	441a      	add	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006982:	3b01      	subs	r3, #1
 8006984:	68f9      	ldr	r1, [r7, #12]
 8006986:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006988:	fb01 f303 	mul.w	r3, r1, r3
 800698c:	441a      	add	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	22ff      	movs	r2, #255	; 0xff
 8006996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	22ff      	movs	r2, #255	; 0xff
 800699e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d114      	bne.n	80069d2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01a      	beq.n	80069e6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3310      	adds	r3, #16
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 fb9b 	bl	80080f0 <xTaskRemoveFromEventList>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d012      	beq.n	80069e6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069c0:	4b0c      	ldr	r3, [pc, #48]	; (80069f4 <xQueueGenericReset+0xd0>)
 80069c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	e009      	b.n	80069e6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3310      	adds	r3, #16
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff fef0 	bl	80067bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3324      	adds	r3, #36	; 0x24
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff feeb 	bl	80067bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069e6:	f002 f8cd 	bl	8008b84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069ea:	2301      	movs	r3, #1
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	e000ed04 	.word	0xe000ed04

080069f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08e      	sub	sp, #56	; 0x38
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10c      	bne.n	8006a26 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	b672      	cpsid	i
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	b662      	cpsie	i
 8006a20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10c      	bne.n	8006a46 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	b672      	cpsid	i
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	b662      	cpsie	i
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <xQueueGenericCreateStatic+0x5a>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <xQueueGenericCreateStatic+0x5e>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <xQueueGenericCreateStatic+0x60>
 8006a56:	2300      	movs	r3, #0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10c      	bne.n	8006a76 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	b672      	cpsid	i
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	b662      	cpsie	i
 8006a70:	623b      	str	r3, [r7, #32]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d102      	bne.n	8006a82 <xQueueGenericCreateStatic+0x8a>
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <xQueueGenericCreateStatic+0x8e>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <xQueueGenericCreateStatic+0x90>
 8006a86:	2300      	movs	r3, #0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10c      	bne.n	8006aa6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	b672      	cpsid	i
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	b662      	cpsie	i
 8006aa0:	61fb      	str	r3, [r7, #28]
}
 8006aa2:	bf00      	nop
 8006aa4:	e7fe      	b.n	8006aa4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006aa6:	2348      	movs	r3, #72	; 0x48
 8006aa8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b48      	cmp	r3, #72	; 0x48
 8006aae:	d00c      	beq.n	8006aca <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	b672      	cpsid	i
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	b662      	cpsie	i
 8006ac4:	61bb      	str	r3, [r7, #24]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006aca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00d      	beq.n	8006af2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ade:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	68b9      	ldr	r1, [r7, #8]
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 f847 	bl	8006b80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3730      	adds	r7, #48	; 0x30
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08a      	sub	sp, #40	; 0x28
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	4613      	mov	r3, r2
 8006b08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10c      	bne.n	8006b2a <xQueueGenericCreate+0x2e>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	b672      	cpsid	i
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	b662      	cpsie	i
 8006b24:	613b      	str	r3, [r7, #16]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d102      	bne.n	8006b36 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	e004      	b.n	8006b40 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	3348      	adds	r3, #72	; 0x48
 8006b44:	4618      	mov	r0, r3
 8006b46:	f002 f915 	bl	8008d74 <pvPortMalloc>
 8006b4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d011      	beq.n	8006b76 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	3348      	adds	r3, #72	; 0x48
 8006b5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b64:	79fa      	ldrb	r2, [r7, #7]
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 f805 	bl	8006b80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b76:	69bb      	ldr	r3, [r7, #24]
	}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3720      	adds	r7, #32
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d103      	bne.n	8006b9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e002      	b.n	8006ba2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bae:	2101      	movs	r1, #1
 8006bb0:	69b8      	ldr	r0, [r7, #24]
 8006bb2:	f7ff feb7 	bl	8006924 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00e      	beq.n	8006bea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006bde:	2300      	movs	r3, #0
 8006be0:	2200      	movs	r2, #0
 8006be2:	2100      	movs	r1, #0
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f837 	bl	8006c58 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006bea:	bf00      	nop
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b086      	sub	sp, #24
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	2300      	movs	r3, #0
 8006c02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006c04:	79fb      	ldrb	r3, [r7, #7]
 8006c06:	461a      	mov	r2, r3
 8006c08:	6939      	ldr	r1, [r7, #16]
 8006c0a:	6978      	ldr	r0, [r7, #20]
 8006c0c:	f7ff ff76 	bl	8006afc <xQueueGenericCreate>
 8006c10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f7ff ffd3 	bl	8006bbe <prvInitialiseMutex>

		return xNewQueue;
 8006c18:	68fb      	ldr	r3, [r7, #12]
	}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b088      	sub	sp, #32
 8006c26:	af02      	add	r7, sp, #8
 8006c28:	4603      	mov	r3, r0
 8006c2a:	6039      	str	r1, [r7, #0]
 8006c2c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	2300      	movs	r3, #0
 8006c34:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	6939      	ldr	r1, [r7, #16]
 8006c40:	6978      	ldr	r0, [r7, #20]
 8006c42:	f7ff fed9 	bl	80069f8 <xQueueGenericCreateStatic>
 8006c46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f7ff ffb8 	bl	8006bbe <prvInitialiseMutex>

		return xNewQueue;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
	}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08e      	sub	sp, #56	; 0x38
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c66:	2300      	movs	r3, #0
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10c      	bne.n	8006c8e <xQueueGenericSend+0x36>
	__asm volatile
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	b672      	cpsid	i
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	b662      	cpsie	i
 8006c88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c8a:	bf00      	nop
 8006c8c:	e7fe      	b.n	8006c8c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d103      	bne.n	8006c9c <xQueueGenericSend+0x44>
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <xQueueGenericSend+0x48>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <xQueueGenericSend+0x4a>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10c      	bne.n	8006cc0 <xQueueGenericSend+0x68>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	b672      	cpsid	i
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	b662      	cpsie	i
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d103      	bne.n	8006cce <xQueueGenericSend+0x76>
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <xQueueGenericSend+0x7a>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <xQueueGenericSend+0x7c>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10c      	bne.n	8006cf2 <xQueueGenericSend+0x9a>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	b672      	cpsid	i
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	b662      	cpsie	i
 8006cec:	623b      	str	r3, [r7, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	e7fe      	b.n	8006cf0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cf2:	f001 fbc5 	bl	8008480 <xTaskGetSchedulerState>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d102      	bne.n	8006d02 <xQueueGenericSend+0xaa>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <xQueueGenericSend+0xae>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e000      	b.n	8006d08 <xQueueGenericSend+0xb0>
 8006d06:	2300      	movs	r3, #0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10c      	bne.n	8006d26 <xQueueGenericSend+0xce>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	b672      	cpsid	i
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	b662      	cpsie	i
 8006d20:	61fb      	str	r3, [r7, #28]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d26:	f001 fef9 	bl	8008b1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d302      	bcc.n	8006d3c <xQueueGenericSend+0xe4>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d129      	bne.n	8006d90 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	68b9      	ldr	r1, [r7, #8]
 8006d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d42:	f000 fc5d 	bl	8007600 <prvCopyDataToQueue>
 8006d46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d010      	beq.n	8006d72 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	3324      	adds	r3, #36	; 0x24
 8006d54:	4618      	mov	r0, r3
 8006d56:	f001 f9cb 	bl	80080f0 <xTaskRemoveFromEventList>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d013      	beq.n	8006d88 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d60:	4b3f      	ldr	r3, [pc, #252]	; (8006e60 <xQueueGenericSend+0x208>)
 8006d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	e00a      	b.n	8006d88 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d78:	4b39      	ldr	r3, [pc, #228]	; (8006e60 <xQueueGenericSend+0x208>)
 8006d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d88:	f001 fefc 	bl	8008b84 <vPortExitCritical>
				return pdPASS;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e063      	b.n	8006e58 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d103      	bne.n	8006d9e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d96:	f001 fef5 	bl	8008b84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e05c      	b.n	8006e58 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 fa05 	bl	80081b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dae:	2301      	movs	r3, #1
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006db2:	f001 fee7 	bl	8008b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006db6:	f000 ff89 	bl	8007ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dba:	f001 feaf 	bl	8008b1c <vPortEnterCritical>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dc4:	b25b      	sxtb	r3, r3
 8006dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dca:	d103      	bne.n	8006dd4 <xQueueGenericSend+0x17c>
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dda:	b25b      	sxtb	r3, r3
 8006ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de0:	d103      	bne.n	8006dea <xQueueGenericSend+0x192>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dea:	f001 fecb 	bl	8008b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dee:	1d3a      	adds	r2, r7, #4
 8006df0:	f107 0314 	add.w	r3, r7, #20
 8006df4:	4611      	mov	r1, r2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f001 f9f4 	bl	80081e4 <xTaskCheckForTimeOut>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d124      	bne.n	8006e4c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e04:	f000 fcf4 	bl	80077f0 <prvIsQueueFull>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d018      	beq.n	8006e40 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	3310      	adds	r3, #16
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	4611      	mov	r1, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 f944 	bl	80080a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e1e:	f000 fc7f 	bl	8007720 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e22:	f000 ff61 	bl	8007ce8 <xTaskResumeAll>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f47f af7c 	bne.w	8006d26 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006e2e:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <xQueueGenericSend+0x208>)
 8006e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	e772      	b.n	8006d26 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e42:	f000 fc6d 	bl	8007720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e46:	f000 ff4f 	bl	8007ce8 <xTaskResumeAll>
 8006e4a:	e76c      	b.n	8006d26 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e4e:	f000 fc67 	bl	8007720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e52:	f000 ff49 	bl	8007ce8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3738      	adds	r7, #56	; 0x38
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08e      	sub	sp, #56	; 0x38
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10c      	bne.n	8006e96 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	b672      	cpsid	i
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	b662      	cpsie	i
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e92:	bf00      	nop
 8006e94:	e7fe      	b.n	8006e94 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d103      	bne.n	8006ea4 <xQueueGenericSendFromISR+0x40>
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <xQueueGenericSendFromISR+0x44>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e000      	b.n	8006eaa <xQueueGenericSendFromISR+0x46>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10c      	bne.n	8006ec8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	b672      	cpsid	i
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	b662      	cpsie	i
 8006ec2:	623b      	str	r3, [r7, #32]
}
 8006ec4:	bf00      	nop
 8006ec6:	e7fe      	b.n	8006ec6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d103      	bne.n	8006ed6 <xQueueGenericSendFromISR+0x72>
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <xQueueGenericSendFromISR+0x76>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <xQueueGenericSendFromISR+0x78>
 8006eda:	2300      	movs	r3, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10c      	bne.n	8006efa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	b672      	cpsid	i
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	b662      	cpsie	i
 8006ef4:	61fb      	str	r3, [r7, #28]
}
 8006ef6:	bf00      	nop
 8006ef8:	e7fe      	b.n	8006ef8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006efa:	f001 fef7 	bl	8008cec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006efe:	f3ef 8211 	mrs	r2, BASEPRI
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	b672      	cpsid	i
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	b662      	cpsie	i
 8006f16:	61ba      	str	r2, [r7, #24]
 8006f18:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f1a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <xQueueGenericSendFromISR+0xcc>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d12c      	bne.n	8006f8a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	68b9      	ldr	r1, [r7, #8]
 8006f3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f40:	f000 fb5e 	bl	8007600 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f44:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4c:	d112      	bne.n	8006f74 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d016      	beq.n	8006f84 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	3324      	adds	r3, #36	; 0x24
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f001 f8c8 	bl	80080f0 <xTaskRemoveFromEventList>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00e      	beq.n	8006f84 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00b      	beq.n	8006f84 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	e007      	b.n	8006f84 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f78:	3301      	adds	r3, #1
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	b25a      	sxtb	r2, r3
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f84:	2301      	movs	r3, #1
 8006f86:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006f88:	e001      	b.n	8006f8e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3738      	adds	r7, #56	; 0x38
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08e      	sub	sp, #56	; 0x38
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10c      	bne.n	8006fd2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	b672      	cpsid	i
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	b662      	cpsie	i
 8006fcc:	623b      	str	r3, [r7, #32]
}
 8006fce:	bf00      	nop
 8006fd0:	e7fe      	b.n	8006fd0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00c      	beq.n	8006ff4 <xQueueGiveFromISR+0x50>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	b672      	cpsid	i
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	b662      	cpsie	i
 8006fee:	61fb      	str	r3, [r7, #28]
}
 8006ff0:	bf00      	nop
 8006ff2:	e7fe      	b.n	8006ff2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d103      	bne.n	8007004 <xQueueGiveFromISR+0x60>
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <xQueueGiveFromISR+0x64>
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <xQueueGiveFromISR+0x66>
 8007008:	2300      	movs	r3, #0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10c      	bne.n	8007028 <xQueueGiveFromISR+0x84>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	b672      	cpsid	i
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	b662      	cpsie	i
 8007022:	61bb      	str	r3, [r7, #24]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007028:	f001 fe60 	bl	8008cec <vPortValidateInterruptPriority>
	__asm volatile
 800702c:	f3ef 8211 	mrs	r2, BASEPRI
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	b672      	cpsid	i
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	b662      	cpsie	i
 8007044:	617a      	str	r2, [r7, #20]
 8007046:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007048:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800704a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007058:	429a      	cmp	r2, r3
 800705a:	d22b      	bcs.n	80070b4 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800706e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	d112      	bne.n	800709e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	2b00      	cmp	r3, #0
 800707e:	d016      	beq.n	80070ae <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007082:	3324      	adds	r3, #36	; 0x24
 8007084:	4618      	mov	r0, r3
 8007086:	f001 f833 	bl	80080f0 <xTaskRemoveFromEventList>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00e      	beq.n	80070ae <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00b      	beq.n	80070ae <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2201      	movs	r2, #1
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	e007      	b.n	80070ae <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800709e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070a2:	3301      	adds	r3, #1
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	b25a      	sxtb	r2, r3
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80070ae:	2301      	movs	r3, #1
 80070b0:	637b      	str	r3, [r7, #52]	; 0x34
 80070b2:	e001      	b.n	80070b8 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80070b4:	2300      	movs	r3, #0
 80070b6:	637b      	str	r3, [r7, #52]	; 0x34
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f383 8811 	msr	BASEPRI, r3
}
 80070c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3738      	adds	r7, #56	; 0x38
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08c      	sub	sp, #48	; 0x30
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80070dc:	2300      	movs	r3, #0
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10c      	bne.n	8007104 <xQueueReceive+0x34>
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	b672      	cpsid	i
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	b662      	cpsie	i
 80070fe:	623b      	str	r3, [r7, #32]
}
 8007100:	bf00      	nop
 8007102:	e7fe      	b.n	8007102 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d103      	bne.n	8007112 <xQueueReceive+0x42>
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <xQueueReceive+0x46>
 8007112:	2301      	movs	r3, #1
 8007114:	e000      	b.n	8007118 <xQueueReceive+0x48>
 8007116:	2300      	movs	r3, #0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10c      	bne.n	8007136 <xQueueReceive+0x66>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007120:	b672      	cpsid	i
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	b662      	cpsie	i
 8007130:	61fb      	str	r3, [r7, #28]
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007136:	f001 f9a3 	bl	8008480 <xTaskGetSchedulerState>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d102      	bne.n	8007146 <xQueueReceive+0x76>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <xQueueReceive+0x7a>
 8007146:	2301      	movs	r3, #1
 8007148:	e000      	b.n	800714c <xQueueReceive+0x7c>
 800714a:	2300      	movs	r3, #0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10c      	bne.n	800716a <xQueueReceive+0x9a>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	b672      	cpsid	i
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	b662      	cpsie	i
 8007164:	61bb      	str	r3, [r7, #24]
}
 8007166:	bf00      	nop
 8007168:	e7fe      	b.n	8007168 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800716a:	f001 fcd7 	bl	8008b1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007172:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	2b00      	cmp	r3, #0
 8007178:	d01f      	beq.n	80071ba <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800717e:	f000 faa9 	bl	80076d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	1e5a      	subs	r2, r3, #1
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00f      	beq.n	80071b2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	3310      	adds	r3, #16
 8007196:	4618      	mov	r0, r3
 8007198:	f000 ffaa 	bl	80080f0 <xTaskRemoveFromEventList>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d007      	beq.n	80071b2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071a2:	4b3d      	ldr	r3, [pc, #244]	; (8007298 <xQueueReceive+0x1c8>)
 80071a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071b2:	f001 fce7 	bl	8008b84 <vPortExitCritical>
				return pdPASS;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e069      	b.n	800728e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071c0:	f001 fce0 	bl	8008b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071c4:	2300      	movs	r3, #0
 80071c6:	e062      	b.n	800728e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071ce:	f107 0310 	add.w	r3, r7, #16
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 fff0 	bl	80081b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071d8:	2301      	movs	r3, #1
 80071da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071dc:	f001 fcd2 	bl	8008b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071e0:	f000 fd74 	bl	8007ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071e4:	f001 fc9a 	bl	8008b1c <vPortEnterCritical>
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071ee:	b25b      	sxtb	r3, r3
 80071f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f4:	d103      	bne.n	80071fe <xQueueReceive+0x12e>
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007204:	b25b      	sxtb	r3, r3
 8007206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720a:	d103      	bne.n	8007214 <xQueueReceive+0x144>
 800720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007214:	f001 fcb6 	bl	8008b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007218:	1d3a      	adds	r2, r7, #4
 800721a:	f107 0310 	add.w	r3, r7, #16
 800721e:	4611      	mov	r1, r2
 8007220:	4618      	mov	r0, r3
 8007222:	f000 ffdf 	bl	80081e4 <xTaskCheckForTimeOut>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d123      	bne.n	8007274 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800722c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800722e:	f000 fac9 	bl	80077c4 <prvIsQueueEmpty>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d017      	beq.n	8007268 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	3324      	adds	r3, #36	; 0x24
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	4611      	mov	r1, r2
 8007240:	4618      	mov	r0, r3
 8007242:	f000 ff2f 	bl	80080a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007248:	f000 fa6a 	bl	8007720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800724c:	f000 fd4c 	bl	8007ce8 <xTaskResumeAll>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d189      	bne.n	800716a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007256:	4b10      	ldr	r3, [pc, #64]	; (8007298 <xQueueReceive+0x1c8>)
 8007258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	e780      	b.n	800716a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800726a:	f000 fa59 	bl	8007720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800726e:	f000 fd3b 	bl	8007ce8 <xTaskResumeAll>
 8007272:	e77a      	b.n	800716a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007276:	f000 fa53 	bl	8007720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800727a:	f000 fd35 	bl	8007ce8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800727e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007280:	f000 faa0 	bl	80077c4 <prvIsQueueEmpty>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	f43f af6f 	beq.w	800716a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800728c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800728e:	4618      	mov	r0, r3
 8007290:	3730      	adds	r7, #48	; 0x30
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	e000ed04 	.word	0xe000ed04

0800729c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08e      	sub	sp, #56	; 0x38
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80072a6:	2300      	movs	r3, #0
 80072a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80072ae:	2300      	movs	r3, #0
 80072b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10c      	bne.n	80072d2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	b672      	cpsid	i
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	b662      	cpsie	i
 80072cc:	623b      	str	r3, [r7, #32]
}
 80072ce:	bf00      	nop
 80072d0:	e7fe      	b.n	80072d0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80072d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00c      	beq.n	80072f4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	b672      	cpsid	i
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	b662      	cpsie	i
 80072ee:	61fb      	str	r3, [r7, #28]
}
 80072f0:	bf00      	nop
 80072f2:	e7fe      	b.n	80072f2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072f4:	f001 f8c4 	bl	8008480 <xTaskGetSchedulerState>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d102      	bne.n	8007304 <xQueueSemaphoreTake+0x68>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <xQueueSemaphoreTake+0x6c>
 8007304:	2301      	movs	r3, #1
 8007306:	e000      	b.n	800730a <xQueueSemaphoreTake+0x6e>
 8007308:	2300      	movs	r3, #0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10c      	bne.n	8007328 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	b672      	cpsid	i
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	b662      	cpsie	i
 8007322:	61bb      	str	r3, [r7, #24]
}
 8007324:	bf00      	nop
 8007326:	e7fe      	b.n	8007326 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007328:	f001 fbf8 	bl	8008b1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007334:	2b00      	cmp	r3, #0
 8007336:	d024      	beq.n	8007382 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	1e5a      	subs	r2, r3, #1
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d104      	bne.n	8007352 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007348:	f001 fa60 	bl	800880c <pvTaskIncrementMutexHeldCount>
 800734c:	4602      	mov	r2, r0
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00f      	beq.n	800737a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735c:	3310      	adds	r3, #16
 800735e:	4618      	mov	r0, r3
 8007360:	f000 fec6 	bl	80080f0 <xTaskRemoveFromEventList>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d007      	beq.n	800737a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800736a:	4b55      	ldr	r3, [pc, #340]	; (80074c0 <xQueueSemaphoreTake+0x224>)
 800736c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800737a:	f001 fc03 	bl	8008b84 <vPortExitCritical>
				return pdPASS;
 800737e:	2301      	movs	r3, #1
 8007380:	e099      	b.n	80074b6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d113      	bne.n	80073b0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00c      	beq.n	80073a8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	b672      	cpsid	i
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	b662      	cpsie	i
 80073a2:	617b      	str	r3, [r7, #20]
}
 80073a4:	bf00      	nop
 80073a6:	e7fe      	b.n	80073a6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80073a8:	f001 fbec 	bl	8008b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80073ac:	2300      	movs	r3, #0
 80073ae:	e082      	b.n	80074b6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073b6:	f107 030c 	add.w	r3, r7, #12
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fefc 	bl	80081b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073c0:	2301      	movs	r3, #1
 80073c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073c4:	f001 fbde 	bl	8008b84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073c8:	f000 fc80 	bl	8007ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073cc:	f001 fba6 	bl	8008b1c <vPortEnterCritical>
 80073d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073d6:	b25b      	sxtb	r3, r3
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073dc:	d103      	bne.n	80073e6 <xQueueSemaphoreTake+0x14a>
 80073de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ec:	b25b      	sxtb	r3, r3
 80073ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f2:	d103      	bne.n	80073fc <xQueueSemaphoreTake+0x160>
 80073f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073fc:	f001 fbc2 	bl	8008b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007400:	463a      	mov	r2, r7
 8007402:	f107 030c 	add.w	r3, r7, #12
 8007406:	4611      	mov	r1, r2
 8007408:	4618      	mov	r0, r3
 800740a:	f000 feeb 	bl	80081e4 <xTaskCheckForTimeOut>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d132      	bne.n	800747a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007416:	f000 f9d5 	bl	80077c4 <prvIsQueueEmpty>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d026      	beq.n	800746e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d109      	bne.n	800743c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007428:	f001 fb78 	bl	8008b1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800742c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	4618      	mov	r0, r3
 8007432:	f001 f843 	bl	80084bc <xTaskPriorityInherit>
 8007436:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007438:	f001 fba4 	bl	8008b84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743e:	3324      	adds	r3, #36	; 0x24
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	4611      	mov	r1, r2
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fe2d 	bl	80080a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800744a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800744c:	f000 f968 	bl	8007720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007450:	f000 fc4a 	bl	8007ce8 <xTaskResumeAll>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	f47f af66 	bne.w	8007328 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800745c:	4b18      	ldr	r3, [pc, #96]	; (80074c0 <xQueueSemaphoreTake+0x224>)
 800745e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	e75c      	b.n	8007328 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800746e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007470:	f000 f956 	bl	8007720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007474:	f000 fc38 	bl	8007ce8 <xTaskResumeAll>
 8007478:	e756      	b.n	8007328 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800747a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800747c:	f000 f950 	bl	8007720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007480:	f000 fc32 	bl	8007ce8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007486:	f000 f99d 	bl	80077c4 <prvIsQueueEmpty>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	f43f af4b 	beq.w	8007328 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00d      	beq.n	80074b4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007498:	f001 fb40 	bl	8008b1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800749c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800749e:	f000 f897 	bl	80075d0 <prvGetDisinheritPriorityAfterTimeout>
 80074a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80074a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074aa:	4618      	mov	r0, r3
 80074ac:	f001 f910 	bl	80086d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80074b0:	f001 fb68 	bl	8008b84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3738      	adds	r7, #56	; 0x38
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	e000ed04 	.word	0xe000ed04

080074c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08e      	sub	sp, #56	; 0x38
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10c      	bne.n	80074f4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80074da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074de:	b672      	cpsid	i
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	b662      	cpsie	i
 80074ee:	623b      	str	r3, [r7, #32]
}
 80074f0:	bf00      	nop
 80074f2:	e7fe      	b.n	80074f2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d103      	bne.n	8007502 <xQueueReceiveFromISR+0x3e>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <xQueueReceiveFromISR+0x42>
 8007502:	2301      	movs	r3, #1
 8007504:	e000      	b.n	8007508 <xQueueReceiveFromISR+0x44>
 8007506:	2300      	movs	r3, #0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10c      	bne.n	8007526 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	b672      	cpsid	i
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	b662      	cpsie	i
 8007520:	61fb      	str	r3, [r7, #28]
}
 8007522:	bf00      	nop
 8007524:	e7fe      	b.n	8007524 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007526:	f001 fbe1 	bl	8008cec <vPortValidateInterruptPriority>
	__asm volatile
 800752a:	f3ef 8211 	mrs	r2, BASEPRI
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	b672      	cpsid	i
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	b662      	cpsie	i
 8007542:	61ba      	str	r2, [r7, #24]
 8007544:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007546:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007548:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	2b00      	cmp	r3, #0
 8007554:	d02f      	beq.n	80075b6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800755c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007564:	f000 f8b6 	bl	80076d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	1e5a      	subs	r2, r3, #1
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007570:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007578:	d112      	bne.n	80075a0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d016      	beq.n	80075b0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	3310      	adds	r3, #16
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fdb2 	bl	80080f0 <xTaskRemoveFromEventList>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00e      	beq.n	80075b0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	e007      	b.n	80075b0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80075a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075a4:	3301      	adds	r3, #1
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	b25a      	sxtb	r2, r3
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80075b0:	2301      	movs	r3, #1
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
 80075b4:	e001      	b.n	80075ba <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f383 8811 	msr	BASEPRI, r3
}
 80075c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3738      	adds	r7, #56	; 0x38
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d006      	beq.n	80075ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f1c3 0307 	rsb	r3, r3, #7
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	e001      	b.n	80075f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80075f2:	68fb      	ldr	r3, [r7, #12]
	}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800760c:	2300      	movs	r3, #0
 800760e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007614:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10d      	bne.n	800763a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d14d      	bne.n	80076c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	4618      	mov	r0, r3
 800762c:	f000 ffc6 	bl	80085bc <xTaskPriorityDisinherit>
 8007630:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	609a      	str	r2, [r3, #8]
 8007638:	e043      	b.n	80076c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d119      	bne.n	8007674 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6858      	ldr	r0, [r3, #4]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	461a      	mov	r2, r3
 800764a:	68b9      	ldr	r1, [r7, #8]
 800764c:	f00b ff3d 	bl	80134ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007658:	441a      	add	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	429a      	cmp	r2, r3
 8007668:	d32b      	bcc.n	80076c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	605a      	str	r2, [r3, #4]
 8007672:	e026      	b.n	80076c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	68d8      	ldr	r0, [r3, #12]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767c:	461a      	mov	r2, r3
 800767e:	68b9      	ldr	r1, [r7, #8]
 8007680:	f00b ff23 	bl	80134ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768c:	425b      	negs	r3, r3
 800768e:	441a      	add	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	429a      	cmp	r2, r3
 800769e:	d207      	bcs.n	80076b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a8:	425b      	negs	r3, r3
 80076aa:	441a      	add	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d105      	bne.n	80076c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	3b01      	subs	r3, #1
 80076c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80076ca:	697b      	ldr	r3, [r7, #20]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d018      	beq.n	8007718 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	441a      	add	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d303      	bcc.n	8007708 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68d9      	ldr	r1, [r3, #12]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007710:	461a      	mov	r2, r3
 8007712:	6838      	ldr	r0, [r7, #0]
 8007714:	f00b fed9 	bl	80134ca <memcpy>
	}
}
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007728:	f001 f9f8 	bl	8008b1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007732:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007734:	e011      	b.n	800775a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	2b00      	cmp	r3, #0
 800773c:	d012      	beq.n	8007764 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3324      	adds	r3, #36	; 0x24
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fcd4 	bl	80080f0 <xTaskRemoveFromEventList>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800774e:	f000 fdaf 	bl	80082b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	3b01      	subs	r3, #1
 8007756:	b2db      	uxtb	r3, r3
 8007758:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800775a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800775e:	2b00      	cmp	r3, #0
 8007760:	dce9      	bgt.n	8007736 <prvUnlockQueue+0x16>
 8007762:	e000      	b.n	8007766 <prvUnlockQueue+0x46>
					break;
 8007764:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	22ff      	movs	r2, #255	; 0xff
 800776a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800776e:	f001 fa09 	bl	8008b84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007772:	f001 f9d3 	bl	8008b1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800777c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800777e:	e011      	b.n	80077a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d012      	beq.n	80077ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3310      	adds	r3, #16
 800778c:	4618      	mov	r0, r3
 800778e:	f000 fcaf 	bl	80080f0 <xTaskRemoveFromEventList>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007798:	f000 fd8a 	bl	80082b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	3b01      	subs	r3, #1
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	dce9      	bgt.n	8007780 <prvUnlockQueue+0x60>
 80077ac:	e000      	b.n	80077b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80077ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	22ff      	movs	r2, #255	; 0xff
 80077b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80077b8:	f001 f9e4 	bl	8008b84 <vPortExitCritical>
}
 80077bc:	bf00      	nop
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077cc:	f001 f9a6 	bl	8008b1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80077d8:	2301      	movs	r3, #1
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	e001      	b.n	80077e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077e2:	f001 f9cf 	bl	8008b84 <vPortExitCritical>

	return xReturn;
 80077e6:	68fb      	ldr	r3, [r7, #12]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077f8:	f001 f990 	bl	8008b1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007804:	429a      	cmp	r2, r3
 8007806:	d102      	bne.n	800780e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007808:	2301      	movs	r3, #1
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	e001      	b.n	8007812 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007812:	f001 f9b7 	bl	8008b84 <vPortExitCritical>

	return xReturn;
 8007816:	68fb      	ldr	r3, [r7, #12]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08e      	sub	sp, #56	; 0x38
 8007824:	af04      	add	r7, sp, #16
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800782e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10c      	bne.n	800784e <xTaskCreateStatic+0x2e>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	b672      	cpsid	i
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	b662      	cpsie	i
 8007848:	623b      	str	r3, [r7, #32]
}
 800784a:	bf00      	nop
 800784c:	e7fe      	b.n	800784c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10c      	bne.n	800786e <xTaskCreateStatic+0x4e>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	b672      	cpsid	i
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	b662      	cpsie	i
 8007868:	61fb      	str	r3, [r7, #28]
}
 800786a:	bf00      	nop
 800786c:	e7fe      	b.n	800786c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800786e:	23b4      	movs	r3, #180	; 0xb4
 8007870:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	2bb4      	cmp	r3, #180	; 0xb4
 8007876:	d00c      	beq.n	8007892 <xTaskCreateStatic+0x72>
	__asm volatile
 8007878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787c:	b672      	cpsid	i
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	b662      	cpsie	i
 800788c:	61bb      	str	r3, [r7, #24]
}
 800788e:	bf00      	nop
 8007890:	e7fe      	b.n	8007890 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007892:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007896:	2b00      	cmp	r3, #0
 8007898:	d01e      	beq.n	80078d8 <xTaskCreateStatic+0xb8>
 800789a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800789c:	2b00      	cmp	r3, #0
 800789e:	d01b      	beq.n	80078d8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	2202      	movs	r2, #2
 80078ae:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078b2:	2300      	movs	r3, #0
 80078b4:	9303      	str	r3, [sp, #12]
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	9302      	str	r3, [sp, #8]
 80078ba:	f107 0314 	add.w	r3, r7, #20
 80078be:	9301      	str	r3, [sp, #4]
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	68b9      	ldr	r1, [r7, #8]
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 f850 	bl	8007970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078d2:	f000 f8ed 	bl	8007ab0 <prvAddNewTaskToReadyList>
 80078d6:	e001      	b.n	80078dc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80078d8:	2300      	movs	r3, #0
 80078da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078dc:	697b      	ldr	r3, [r7, #20]
	}
 80078de:	4618      	mov	r0, r3
 80078e0:	3728      	adds	r7, #40	; 0x28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b08c      	sub	sp, #48	; 0x30
 80078ea:	af04      	add	r7, sp, #16
 80078ec:	60f8      	str	r0, [r7, #12]
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	603b      	str	r3, [r7, #0]
 80078f2:	4613      	mov	r3, r2
 80078f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f001 fa3a 	bl	8008d74 <pvPortMalloc>
 8007900:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00e      	beq.n	8007926 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007908:	20b4      	movs	r0, #180	; 0xb4
 800790a:	f001 fa33 	bl	8008d74 <pvPortMalloc>
 800790e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	631a      	str	r2, [r3, #48]	; 0x30
 800791c:	e005      	b.n	800792a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800791e:	6978      	ldr	r0, [r7, #20]
 8007920:	f001 faf2 	bl	8008f08 <vPortFree>
 8007924:	e001      	b.n	800792a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007926:	2300      	movs	r3, #0
 8007928:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d017      	beq.n	8007960 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007938:	88fa      	ldrh	r2, [r7, #6]
 800793a:	2300      	movs	r3, #0
 800793c:	9303      	str	r3, [sp, #12]
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	9302      	str	r3, [sp, #8]
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	9301      	str	r3, [sp, #4]
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68b9      	ldr	r1, [r7, #8]
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 f80e 	bl	8007970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007954:	69f8      	ldr	r0, [r7, #28]
 8007956:	f000 f8ab 	bl	8007ab0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800795a:	2301      	movs	r3, #1
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	e002      	b.n	8007966 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007960:	f04f 33ff 	mov.w	r3, #4294967295
 8007964:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007966:	69bb      	ldr	r3, [r7, #24]
	}
 8007968:	4618      	mov	r0, r3
 800796a:	3720      	adds	r7, #32
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b088      	sub	sp, #32
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007982:	6879      	ldr	r1, [r7, #4]
 8007984:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007988:	440b      	add	r3, r1
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f023 0307 	bic.w	r3, r3, #7
 8007996:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f003 0307 	and.w	r3, r3, #7
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00c      	beq.n	80079bc <prvInitialiseNewTask+0x4c>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	b672      	cpsid	i
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	b662      	cpsie	i
 80079b6:	617b      	str	r3, [r7, #20]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d01f      	beq.n	8007a02 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079c2:	2300      	movs	r3, #0
 80079c4:	61fb      	str	r3, [r7, #28]
 80079c6:	e012      	b.n	80079ee <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	4413      	add	r3, r2
 80079ce:	7819      	ldrb	r1, [r3, #0]
 80079d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	4413      	add	r3, r2
 80079d6:	3334      	adds	r3, #52	; 0x34
 80079d8:	460a      	mov	r2, r1
 80079da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	4413      	add	r3, r2
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d006      	beq.n	80079f6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	3301      	adds	r3, #1
 80079ec:	61fb      	str	r3, [r7, #28]
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	2b0f      	cmp	r3, #15
 80079f2:	d9e9      	bls.n	80079c8 <prvInitialiseNewTask+0x58>
 80079f4:	e000      	b.n	80079f8 <prvInitialiseNewTask+0x88>
			{
				break;
 80079f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a00:	e003      	b.n	8007a0a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0c:	2b06      	cmp	r3, #6
 8007a0e:	d901      	bls.n	8007a14 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a10:	2306      	movs	r3, #6
 8007a12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a1e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	2200      	movs	r2, #0
 8007a24:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fe fee6 	bl	80067fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	3318      	adds	r3, #24
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fe fee1 	bl	80067fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a42:	f1c3 0207 	rsb	r2, r3, #7
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	334c      	adds	r3, #76	; 0x4c
 8007a64:	2260      	movs	r2, #96	; 0x60
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f00b fd3c 	bl	80134e6 <memset>
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	4a0c      	ldr	r2, [pc, #48]	; (8007aa4 <prvInitialiseNewTask+0x134>)
 8007a72:	651a      	str	r2, [r3, #80]	; 0x50
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	4a0c      	ldr	r2, [pc, #48]	; (8007aa8 <prvInitialiseNewTask+0x138>)
 8007a78:	655a      	str	r2, [r3, #84]	; 0x54
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	4a0b      	ldr	r2, [pc, #44]	; (8007aac <prvInitialiseNewTask+0x13c>)
 8007a7e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	68f9      	ldr	r1, [r7, #12]
 8007a84:	69b8      	ldr	r0, [r7, #24]
 8007a86:	f000 ff3b 	bl	8008900 <pxPortInitialiseStack>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a9c:	bf00      	nop
 8007a9e:	3720      	adds	r7, #32
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	08017154 	.word	0x08017154
 8007aa8:	08017174 	.word	0x08017174
 8007aac:	08017134 	.word	0x08017134

08007ab0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ab8:	f001 f830 	bl	8008b1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007abc:	4b2a      	ldr	r3, [pc, #168]	; (8007b68 <prvAddNewTaskToReadyList+0xb8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	4a29      	ldr	r2, [pc, #164]	; (8007b68 <prvAddNewTaskToReadyList+0xb8>)
 8007ac4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ac6:	4b29      	ldr	r3, [pc, #164]	; (8007b6c <prvAddNewTaskToReadyList+0xbc>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d109      	bne.n	8007ae2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ace:	4a27      	ldr	r2, [pc, #156]	; (8007b6c <prvAddNewTaskToReadyList+0xbc>)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ad4:	4b24      	ldr	r3, [pc, #144]	; (8007b68 <prvAddNewTaskToReadyList+0xb8>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d110      	bne.n	8007afe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007adc:	f000 fc0c 	bl	80082f8 <prvInitialiseTaskLists>
 8007ae0:	e00d      	b.n	8007afe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ae2:	4b23      	ldr	r3, [pc, #140]	; (8007b70 <prvAddNewTaskToReadyList+0xc0>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d109      	bne.n	8007afe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007aea:	4b20      	ldr	r3, [pc, #128]	; (8007b6c <prvAddNewTaskToReadyList+0xbc>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d802      	bhi.n	8007afe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007af8:	4a1c      	ldr	r2, [pc, #112]	; (8007b6c <prvAddNewTaskToReadyList+0xbc>)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007afe:	4b1d      	ldr	r3, [pc, #116]	; (8007b74 <prvAddNewTaskToReadyList+0xc4>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	4a1b      	ldr	r2, [pc, #108]	; (8007b74 <prvAddNewTaskToReadyList+0xc4>)
 8007b06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	409a      	lsls	r2, r3
 8007b10:	4b19      	ldr	r3, [pc, #100]	; (8007b78 <prvAddNewTaskToReadyList+0xc8>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	4a18      	ldr	r2, [pc, #96]	; (8007b78 <prvAddNewTaskToReadyList+0xc8>)
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4a15      	ldr	r2, [pc, #84]	; (8007b7c <prvAddNewTaskToReadyList+0xcc>)
 8007b28:	441a      	add	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4610      	mov	r0, r2
 8007b32:	f7fe fe70 	bl	8006816 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b36:	f001 f825 	bl	8008b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b3a:	4b0d      	ldr	r3, [pc, #52]	; (8007b70 <prvAddNewTaskToReadyList+0xc0>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00e      	beq.n	8007b60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b42:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <prvAddNewTaskToReadyList+0xbc>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d207      	bcs.n	8007b60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b50:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <prvAddNewTaskToReadyList+0xd0>)
 8007b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b60:	bf00      	nop
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	20005674 	.word	0x20005674
 8007b6c:	20005574 	.word	0x20005574
 8007b70:	20005680 	.word	0x20005680
 8007b74:	20005690 	.word	0x20005690
 8007b78:	2000567c 	.word	0x2000567c
 8007b7c:	20005578 	.word	0x20005578
 8007b80:	e000ed04 	.word	0xe000ed04

08007b84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d019      	beq.n	8007bca <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b96:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <vTaskDelay+0x64>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00c      	beq.n	8007bb8 <vTaskDelay+0x34>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	b672      	cpsid	i
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	b662      	cpsie	i
 8007bb2:	60bb      	str	r3, [r7, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007bb8:	f000 f888 	bl	8007ccc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fe38 	bl	8008834 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bc4:	f000 f890 	bl	8007ce8 <xTaskResumeAll>
 8007bc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d107      	bne.n	8007be0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007bd0:	4b06      	ldr	r3, [pc, #24]	; (8007bec <vTaskDelay+0x68>)
 8007bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007be0:	bf00      	nop
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	2000569c 	.word	0x2000569c
 8007bec:	e000ed04 	.word	0xe000ed04

08007bf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08a      	sub	sp, #40	; 0x28
 8007bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bfe:	463a      	mov	r2, r7
 8007c00:	1d39      	adds	r1, r7, #4
 8007c02:	f107 0308 	add.w	r3, r7, #8
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7f8 fcd4 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	9202      	str	r2, [sp, #8]
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	2300      	movs	r3, #0
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	460a      	mov	r2, r1
 8007c1e:	4923      	ldr	r1, [pc, #140]	; (8007cac <vTaskStartScheduler+0xbc>)
 8007c20:	4823      	ldr	r0, [pc, #140]	; (8007cb0 <vTaskStartScheduler+0xc0>)
 8007c22:	f7ff fdfd 	bl	8007820 <xTaskCreateStatic>
 8007c26:	4603      	mov	r3, r0
 8007c28:	4a22      	ldr	r2, [pc, #136]	; (8007cb4 <vTaskStartScheduler+0xc4>)
 8007c2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c2c:	4b21      	ldr	r3, [pc, #132]	; (8007cb4 <vTaskStartScheduler+0xc4>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c34:	2301      	movs	r3, #1
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	e001      	b.n	8007c3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d11d      	bne.n	8007c80 <vTaskStartScheduler+0x90>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	b672      	cpsid	i
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	b662      	cpsie	i
 8007c58:	613b      	str	r3, [r7, #16]
}
 8007c5a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c5c:	4b16      	ldr	r3, [pc, #88]	; (8007cb8 <vTaskStartScheduler+0xc8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	334c      	adds	r3, #76	; 0x4c
 8007c62:	4a16      	ldr	r2, [pc, #88]	; (8007cbc <vTaskStartScheduler+0xcc>)
 8007c64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c66:	4b16      	ldr	r3, [pc, #88]	; (8007cc0 <vTaskStartScheduler+0xd0>)
 8007c68:	f04f 32ff 	mov.w	r2, #4294967295
 8007c6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c6e:	4b15      	ldr	r3, [pc, #84]	; (8007cc4 <vTaskStartScheduler+0xd4>)
 8007c70:	2201      	movs	r2, #1
 8007c72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c74:	4b14      	ldr	r3, [pc, #80]	; (8007cc8 <vTaskStartScheduler+0xd8>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c7a:	f000 fed1 	bl	8008a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c7e:	e010      	b.n	8007ca2 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c86:	d10c      	bne.n	8007ca2 <vTaskStartScheduler+0xb2>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	b672      	cpsid	i
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	b662      	cpsie	i
 8007c9c:	60fb      	str	r3, [r7, #12]
}
 8007c9e:	bf00      	nop
 8007ca0:	e7fe      	b.n	8007ca0 <vTaskStartScheduler+0xb0>
}
 8007ca2:	bf00      	nop
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	08014554 	.word	0x08014554
 8007cb0:	080082c9 	.word	0x080082c9
 8007cb4:	20005698 	.word	0x20005698
 8007cb8:	20005574 	.word	0x20005574
 8007cbc:	20000030 	.word	0x20000030
 8007cc0:	20005694 	.word	0x20005694
 8007cc4:	20005680 	.word	0x20005680
 8007cc8:	20005678 	.word	0x20005678

08007ccc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007cd0:	4b04      	ldr	r3, [pc, #16]	; (8007ce4 <vTaskSuspendAll+0x18>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	4a03      	ldr	r2, [pc, #12]	; (8007ce4 <vTaskSuspendAll+0x18>)
 8007cd8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007cda:	bf00      	nop
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	2000569c 	.word	0x2000569c

08007ce8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cf6:	4b42      	ldr	r3, [pc, #264]	; (8007e00 <xTaskResumeAll+0x118>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10c      	bne.n	8007d18 <xTaskResumeAll+0x30>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	b672      	cpsid	i
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	b662      	cpsie	i
 8007d12:	603b      	str	r3, [r7, #0]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d18:	f000 ff00 	bl	8008b1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d1c:	4b38      	ldr	r3, [pc, #224]	; (8007e00 <xTaskResumeAll+0x118>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	4a37      	ldr	r2, [pc, #220]	; (8007e00 <xTaskResumeAll+0x118>)
 8007d24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d26:	4b36      	ldr	r3, [pc, #216]	; (8007e00 <xTaskResumeAll+0x118>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d161      	bne.n	8007df2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d2e:	4b35      	ldr	r3, [pc, #212]	; (8007e04 <xTaskResumeAll+0x11c>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d05d      	beq.n	8007df2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d36:	e02e      	b.n	8007d96 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d38:	4b33      	ldr	r3, [pc, #204]	; (8007e08 <xTaskResumeAll+0x120>)
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3318      	adds	r3, #24
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fe fdc3 	bl	80068d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe fdbe 	bl	80068d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	2201      	movs	r2, #1
 8007d5a:	409a      	lsls	r2, r3
 8007d5c:	4b2b      	ldr	r3, [pc, #172]	; (8007e0c <xTaskResumeAll+0x124>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	4a2a      	ldr	r2, [pc, #168]	; (8007e0c <xTaskResumeAll+0x124>)
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4a27      	ldr	r2, [pc, #156]	; (8007e10 <xTaskResumeAll+0x128>)
 8007d74:	441a      	add	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f7fe fd4a 	bl	8006816 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d86:	4b23      	ldr	r3, [pc, #140]	; (8007e14 <xTaskResumeAll+0x12c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d302      	bcc.n	8007d96 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007d90:	4b21      	ldr	r3, [pc, #132]	; (8007e18 <xTaskResumeAll+0x130>)
 8007d92:	2201      	movs	r2, #1
 8007d94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d96:	4b1c      	ldr	r3, [pc, #112]	; (8007e08 <xTaskResumeAll+0x120>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1cc      	bne.n	8007d38 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007da4:	f000 fb4c 	bl	8008440 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007da8:	4b1c      	ldr	r3, [pc, #112]	; (8007e1c <xTaskResumeAll+0x134>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d010      	beq.n	8007dd6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007db4:	f000 f858 	bl	8007e68 <xTaskIncrementTick>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007dbe:	4b16      	ldr	r3, [pc, #88]	; (8007e18 <xTaskResumeAll+0x130>)
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1f1      	bne.n	8007db4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007dd0:	4b12      	ldr	r3, [pc, #72]	; (8007e1c <xTaskResumeAll+0x134>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007dd6:	4b10      	ldr	r3, [pc, #64]	; (8007e18 <xTaskResumeAll+0x130>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d009      	beq.n	8007df2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dde:	2301      	movs	r3, #1
 8007de0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007de2:	4b0f      	ldr	r3, [pc, #60]	; (8007e20 <xTaskResumeAll+0x138>)
 8007de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007df2:	f000 fec7 	bl	8008b84 <vPortExitCritical>

	return xAlreadyYielded;
 8007df6:	68bb      	ldr	r3, [r7, #8]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	2000569c 	.word	0x2000569c
 8007e04:	20005674 	.word	0x20005674
 8007e08:	20005634 	.word	0x20005634
 8007e0c:	2000567c 	.word	0x2000567c
 8007e10:	20005578 	.word	0x20005578
 8007e14:	20005574 	.word	0x20005574
 8007e18:	20005688 	.word	0x20005688
 8007e1c:	20005684 	.word	0x20005684
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e2a:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <xTaskGetTickCount+0x1c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e30:	687b      	ldr	r3, [r7, #4]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	20005678 	.word	0x20005678

08007e44 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e4a:	f000 ff4f 	bl	8008cec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007e4e:	2300      	movs	r3, #0
 8007e50:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007e52:	4b04      	ldr	r3, [pc, #16]	; (8007e64 <xTaskGetTickCountFromISR+0x20>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e58:	683b      	ldr	r3, [r7, #0]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20005678 	.word	0x20005678

08007e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e72:	4b4f      	ldr	r3, [pc, #316]	; (8007fb0 <xTaskIncrementTick+0x148>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f040 808a 	bne.w	8007f90 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e7c:	4b4d      	ldr	r3, [pc, #308]	; (8007fb4 <xTaskIncrementTick+0x14c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3301      	adds	r3, #1
 8007e82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e84:	4a4b      	ldr	r2, [pc, #300]	; (8007fb4 <xTaskIncrementTick+0x14c>)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d122      	bne.n	8007ed6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e90:	4b49      	ldr	r3, [pc, #292]	; (8007fb8 <xTaskIncrementTick+0x150>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00c      	beq.n	8007eb4 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	b672      	cpsid	i
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	b662      	cpsie	i
 8007eae:	603b      	str	r3, [r7, #0]
}
 8007eb0:	bf00      	nop
 8007eb2:	e7fe      	b.n	8007eb2 <xTaskIncrementTick+0x4a>
 8007eb4:	4b40      	ldr	r3, [pc, #256]	; (8007fb8 <xTaskIncrementTick+0x150>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	4b40      	ldr	r3, [pc, #256]	; (8007fbc <xTaskIncrementTick+0x154>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a3e      	ldr	r2, [pc, #248]	; (8007fb8 <xTaskIncrementTick+0x150>)
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	4a3e      	ldr	r2, [pc, #248]	; (8007fbc <xTaskIncrementTick+0x154>)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	4b3d      	ldr	r3, [pc, #244]	; (8007fc0 <xTaskIncrementTick+0x158>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	4a3c      	ldr	r2, [pc, #240]	; (8007fc0 <xTaskIncrementTick+0x158>)
 8007ed0:	6013      	str	r3, [r2, #0]
 8007ed2:	f000 fab5 	bl	8008440 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ed6:	4b3b      	ldr	r3, [pc, #236]	; (8007fc4 <xTaskIncrementTick+0x15c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d348      	bcc.n	8007f72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ee0:	4b35      	ldr	r3, [pc, #212]	; (8007fb8 <xTaskIncrementTick+0x150>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d104      	bne.n	8007ef4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eea:	4b36      	ldr	r3, [pc, #216]	; (8007fc4 <xTaskIncrementTick+0x15c>)
 8007eec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef0:	601a      	str	r2, [r3, #0]
					break;
 8007ef2:	e03e      	b.n	8007f72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef4:	4b30      	ldr	r3, [pc, #192]	; (8007fb8 <xTaskIncrementTick+0x150>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d203      	bcs.n	8007f14 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f0c:	4a2d      	ldr	r2, [pc, #180]	; (8007fc4 <xTaskIncrementTick+0x15c>)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f12:	e02e      	b.n	8007f72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	3304      	adds	r3, #4
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fe fcd9 	bl	80068d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d004      	beq.n	8007f30 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	3318      	adds	r3, #24
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fe fcd0 	bl	80068d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f34:	2201      	movs	r2, #1
 8007f36:	409a      	lsls	r2, r3
 8007f38:	4b23      	ldr	r3, [pc, #140]	; (8007fc8 <xTaskIncrementTick+0x160>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	4a22      	ldr	r2, [pc, #136]	; (8007fc8 <xTaskIncrementTick+0x160>)
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4a1f      	ldr	r2, [pc, #124]	; (8007fcc <xTaskIncrementTick+0x164>)
 8007f50:	441a      	add	r2, r3
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	3304      	adds	r3, #4
 8007f56:	4619      	mov	r1, r3
 8007f58:	4610      	mov	r0, r2
 8007f5a:	f7fe fc5c 	bl	8006816 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f62:	4b1b      	ldr	r3, [pc, #108]	; (8007fd0 <xTaskIncrementTick+0x168>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d3b9      	bcc.n	8007ee0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f70:	e7b6      	b.n	8007ee0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f72:	4b17      	ldr	r3, [pc, #92]	; (8007fd0 <xTaskIncrementTick+0x168>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f78:	4914      	ldr	r1, [pc, #80]	; (8007fcc <xTaskIncrementTick+0x164>)
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	440b      	add	r3, r1
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d907      	bls.n	8007f9a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	e004      	b.n	8007f9a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f90:	4b10      	ldr	r3, [pc, #64]	; (8007fd4 <xTaskIncrementTick+0x16c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3301      	adds	r3, #1
 8007f96:	4a0f      	ldr	r2, [pc, #60]	; (8007fd4 <xTaskIncrementTick+0x16c>)
 8007f98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007f9a:	4b0f      	ldr	r3, [pc, #60]	; (8007fd8 <xTaskIncrementTick+0x170>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007fa6:	697b      	ldr	r3, [r7, #20]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	2000569c 	.word	0x2000569c
 8007fb4:	20005678 	.word	0x20005678
 8007fb8:	2000562c 	.word	0x2000562c
 8007fbc:	20005630 	.word	0x20005630
 8007fc0:	2000568c 	.word	0x2000568c
 8007fc4:	20005694 	.word	0x20005694
 8007fc8:	2000567c 	.word	0x2000567c
 8007fcc:	20005578 	.word	0x20005578
 8007fd0:	20005574 	.word	0x20005574
 8007fd4:	20005684 	.word	0x20005684
 8007fd8:	20005688 	.word	0x20005688

08007fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fe2:	4b2a      	ldr	r3, [pc, #168]	; (800808c <vTaskSwitchContext+0xb0>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fea:	4b29      	ldr	r3, [pc, #164]	; (8008090 <vTaskSwitchContext+0xb4>)
 8007fec:	2201      	movs	r2, #1
 8007fee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ff0:	e046      	b.n	8008080 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007ff2:	4b27      	ldr	r3, [pc, #156]	; (8008090 <vTaskSwitchContext+0xb4>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff8:	4b26      	ldr	r3, [pc, #152]	; (8008094 <vTaskSwitchContext+0xb8>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	fab3 f383 	clz	r3, r3
 8008004:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008006:	7afb      	ldrb	r3, [r7, #11]
 8008008:	f1c3 031f 	rsb	r3, r3, #31
 800800c:	617b      	str	r3, [r7, #20]
 800800e:	4922      	ldr	r1, [pc, #136]	; (8008098 <vTaskSwitchContext+0xbc>)
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	440b      	add	r3, r1
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10c      	bne.n	800803c <vTaskSwitchContext+0x60>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	b672      	cpsid	i
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	b662      	cpsie	i
 8008036:	607b      	str	r3, [r7, #4]
}
 8008038:	bf00      	nop
 800803a:	e7fe      	b.n	800803a <vTaskSwitchContext+0x5e>
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4613      	mov	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4a14      	ldr	r2, [pc, #80]	; (8008098 <vTaskSwitchContext+0xbc>)
 8008048:	4413      	add	r3, r2
 800804a:	613b      	str	r3, [r7, #16]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	605a      	str	r2, [r3, #4]
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	3308      	adds	r3, #8
 800805e:	429a      	cmp	r2, r3
 8008060:	d104      	bne.n	800806c <vTaskSwitchContext+0x90>
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	605a      	str	r2, [r3, #4]
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	4a0a      	ldr	r2, [pc, #40]	; (800809c <vTaskSwitchContext+0xc0>)
 8008074:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008076:	4b09      	ldr	r3, [pc, #36]	; (800809c <vTaskSwitchContext+0xc0>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	334c      	adds	r3, #76	; 0x4c
 800807c:	4a08      	ldr	r2, [pc, #32]	; (80080a0 <vTaskSwitchContext+0xc4>)
 800807e:	6013      	str	r3, [r2, #0]
}
 8008080:	bf00      	nop
 8008082:	371c      	adds	r7, #28
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	2000569c 	.word	0x2000569c
 8008090:	20005688 	.word	0x20005688
 8008094:	2000567c 	.word	0x2000567c
 8008098:	20005578 	.word	0x20005578
 800809c:	20005574 	.word	0x20005574
 80080a0:	20000030 	.word	0x20000030

080080a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10c      	bne.n	80080ce <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	b672      	cpsid	i
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	b662      	cpsie	i
 80080c8:	60fb      	str	r3, [r7, #12]
}
 80080ca:	bf00      	nop
 80080cc:	e7fe      	b.n	80080cc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080ce:	4b07      	ldr	r3, [pc, #28]	; (80080ec <vTaskPlaceOnEventList+0x48>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3318      	adds	r3, #24
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fe fbc1 	bl	800685e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080dc:	2101      	movs	r1, #1
 80080de:	6838      	ldr	r0, [r7, #0]
 80080e0:	f000 fba8 	bl	8008834 <prvAddCurrentTaskToDelayedList>
}
 80080e4:	bf00      	nop
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	20005574 	.word	0x20005574

080080f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10c      	bne.n	8008120 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	b672      	cpsid	i
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	b662      	cpsie	i
 800811a:	60fb      	str	r3, [r7, #12]
}
 800811c:	bf00      	nop
 800811e:	e7fe      	b.n	800811e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	3318      	adds	r3, #24
 8008124:	4618      	mov	r0, r3
 8008126:	f7fe fbd3 	bl	80068d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800812a:	4b1d      	ldr	r3, [pc, #116]	; (80081a0 <xTaskRemoveFromEventList+0xb0>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d11c      	bne.n	800816c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	3304      	adds	r3, #4
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe fbca 	bl	80068d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	2201      	movs	r2, #1
 8008142:	409a      	lsls	r2, r3
 8008144:	4b17      	ldr	r3, [pc, #92]	; (80081a4 <xTaskRemoveFromEventList+0xb4>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4313      	orrs	r3, r2
 800814a:	4a16      	ldr	r2, [pc, #88]	; (80081a4 <xTaskRemoveFromEventList+0xb4>)
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008152:	4613      	mov	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4a13      	ldr	r2, [pc, #76]	; (80081a8 <xTaskRemoveFromEventList+0xb8>)
 800815c:	441a      	add	r2, r3
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	3304      	adds	r3, #4
 8008162:	4619      	mov	r1, r3
 8008164:	4610      	mov	r0, r2
 8008166:	f7fe fb56 	bl	8006816 <vListInsertEnd>
 800816a:	e005      	b.n	8008178 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	3318      	adds	r3, #24
 8008170:	4619      	mov	r1, r3
 8008172:	480e      	ldr	r0, [pc, #56]	; (80081ac <xTaskRemoveFromEventList+0xbc>)
 8008174:	f7fe fb4f 	bl	8006816 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817c:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <xTaskRemoveFromEventList+0xc0>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	429a      	cmp	r2, r3
 8008184:	d905      	bls.n	8008192 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008186:	2301      	movs	r3, #1
 8008188:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800818a:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <xTaskRemoveFromEventList+0xc4>)
 800818c:	2201      	movs	r2, #1
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	e001      	b.n	8008196 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008192:	2300      	movs	r3, #0
 8008194:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008196:	697b      	ldr	r3, [r7, #20]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3718      	adds	r7, #24
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	2000569c 	.word	0x2000569c
 80081a4:	2000567c 	.word	0x2000567c
 80081a8:	20005578 	.word	0x20005578
 80081ac:	20005634 	.word	0x20005634
 80081b0:	20005574 	.word	0x20005574
 80081b4:	20005688 	.word	0x20005688

080081b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081c0:	4b06      	ldr	r3, [pc, #24]	; (80081dc <vTaskInternalSetTimeOutState+0x24>)
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <vTaskInternalSetTimeOutState+0x28>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	605a      	str	r2, [r3, #4]
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	2000568c 	.word	0x2000568c
 80081e0:	20005678 	.word	0x20005678

080081e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10c      	bne.n	800820e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	b672      	cpsid	i
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	b662      	cpsie	i
 8008208:	613b      	str	r3, [r7, #16]
}
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10c      	bne.n	800822e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	b672      	cpsid	i
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	b662      	cpsie	i
 8008228:	60fb      	str	r3, [r7, #12]
}
 800822a:	bf00      	nop
 800822c:	e7fe      	b.n	800822c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800822e:	f000 fc75 	bl	8008b1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008232:	4b1d      	ldr	r3, [pc, #116]	; (80082a8 <xTaskCheckForTimeOut+0xc4>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	69ba      	ldr	r2, [r7, #24]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824a:	d102      	bne.n	8008252 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800824c:	2300      	movs	r3, #0
 800824e:	61fb      	str	r3, [r7, #28]
 8008250:	e023      	b.n	800829a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	4b15      	ldr	r3, [pc, #84]	; (80082ac <xTaskCheckForTimeOut+0xc8>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d007      	beq.n	800826e <xTaskCheckForTimeOut+0x8a>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	429a      	cmp	r2, r3
 8008266:	d302      	bcc.n	800826e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008268:	2301      	movs	r3, #1
 800826a:	61fb      	str	r3, [r7, #28]
 800826c:	e015      	b.n	800829a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	429a      	cmp	r2, r3
 8008276:	d20b      	bcs.n	8008290 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff ff97 	bl	80081b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800828a:	2300      	movs	r3, #0
 800828c:	61fb      	str	r3, [r7, #28]
 800828e:	e004      	b.n	800829a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008296:	2301      	movs	r3, #1
 8008298:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800829a:	f000 fc73 	bl	8008b84 <vPortExitCritical>

	return xReturn;
 800829e:	69fb      	ldr	r3, [r7, #28]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3720      	adds	r7, #32
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20005678 	.word	0x20005678
 80082ac:	2000568c 	.word	0x2000568c

080082b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082b4:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <vTaskMissedYield+0x14>)
 80082b6:	2201      	movs	r2, #1
 80082b8:	601a      	str	r2, [r3, #0]
}
 80082ba:	bf00      	nop
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	20005688 	.word	0x20005688

080082c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082d0:	f000 f852 	bl	8008378 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082d4:	4b06      	ldr	r3, [pc, #24]	; (80082f0 <prvIdleTask+0x28>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d9f9      	bls.n	80082d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082dc:	4b05      	ldr	r3, [pc, #20]	; (80082f4 <prvIdleTask+0x2c>)
 80082de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082ec:	e7f0      	b.n	80082d0 <prvIdleTask+0x8>
 80082ee:	bf00      	nop
 80082f0:	20005578 	.word	0x20005578
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082fe:	2300      	movs	r3, #0
 8008300:	607b      	str	r3, [r7, #4]
 8008302:	e00c      	b.n	800831e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4a12      	ldr	r2, [pc, #72]	; (8008358 <prvInitialiseTaskLists+0x60>)
 8008310:	4413      	add	r3, r2
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe fa52 	bl	80067bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	3301      	adds	r3, #1
 800831c:	607b      	str	r3, [r7, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b06      	cmp	r3, #6
 8008322:	d9ef      	bls.n	8008304 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008324:	480d      	ldr	r0, [pc, #52]	; (800835c <prvInitialiseTaskLists+0x64>)
 8008326:	f7fe fa49 	bl	80067bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800832a:	480d      	ldr	r0, [pc, #52]	; (8008360 <prvInitialiseTaskLists+0x68>)
 800832c:	f7fe fa46 	bl	80067bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008330:	480c      	ldr	r0, [pc, #48]	; (8008364 <prvInitialiseTaskLists+0x6c>)
 8008332:	f7fe fa43 	bl	80067bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008336:	480c      	ldr	r0, [pc, #48]	; (8008368 <prvInitialiseTaskLists+0x70>)
 8008338:	f7fe fa40 	bl	80067bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800833c:	480b      	ldr	r0, [pc, #44]	; (800836c <prvInitialiseTaskLists+0x74>)
 800833e:	f7fe fa3d 	bl	80067bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008342:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <prvInitialiseTaskLists+0x78>)
 8008344:	4a05      	ldr	r2, [pc, #20]	; (800835c <prvInitialiseTaskLists+0x64>)
 8008346:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008348:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <prvInitialiseTaskLists+0x7c>)
 800834a:	4a05      	ldr	r2, [pc, #20]	; (8008360 <prvInitialiseTaskLists+0x68>)
 800834c:	601a      	str	r2, [r3, #0]
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20005578 	.word	0x20005578
 800835c:	20005604 	.word	0x20005604
 8008360:	20005618 	.word	0x20005618
 8008364:	20005634 	.word	0x20005634
 8008368:	20005648 	.word	0x20005648
 800836c:	20005660 	.word	0x20005660
 8008370:	2000562c 	.word	0x2000562c
 8008374:	20005630 	.word	0x20005630

08008378 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800837e:	e019      	b.n	80083b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008380:	f000 fbcc 	bl	8008b1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008384:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <prvCheckTasksWaitingTermination+0x50>)
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	3304      	adds	r3, #4
 8008390:	4618      	mov	r0, r3
 8008392:	f7fe fa9d 	bl	80068d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008396:	4b0d      	ldr	r3, [pc, #52]	; (80083cc <prvCheckTasksWaitingTermination+0x54>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3b01      	subs	r3, #1
 800839c:	4a0b      	ldr	r2, [pc, #44]	; (80083cc <prvCheckTasksWaitingTermination+0x54>)
 800839e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083a0:	4b0b      	ldr	r3, [pc, #44]	; (80083d0 <prvCheckTasksWaitingTermination+0x58>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	4a0a      	ldr	r2, [pc, #40]	; (80083d0 <prvCheckTasksWaitingTermination+0x58>)
 80083a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083aa:	f000 fbeb 	bl	8008b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f810 	bl	80083d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083b4:	4b06      	ldr	r3, [pc, #24]	; (80083d0 <prvCheckTasksWaitingTermination+0x58>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e1      	bne.n	8008380 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083bc:	bf00      	nop
 80083be:	bf00      	nop
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20005648 	.word	0x20005648
 80083cc:	20005674 	.word	0x20005674
 80083d0:	2000565c 	.word	0x2000565c

080083d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	334c      	adds	r3, #76	; 0x4c
 80083e0:	4618      	mov	r0, r3
 80083e2:	f00b f981 	bl	80136e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d108      	bne.n	8008402 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 fd87 	bl	8008f08 <vPortFree>
				vPortFree( pxTCB );
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fd84 	bl	8008f08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008400:	e01a      	b.n	8008438 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008408:	2b01      	cmp	r3, #1
 800840a:	d103      	bne.n	8008414 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fd7b 	bl	8008f08 <vPortFree>
	}
 8008412:	e011      	b.n	8008438 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800841a:	2b02      	cmp	r3, #2
 800841c:	d00c      	beq.n	8008438 <prvDeleteTCB+0x64>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	b672      	cpsid	i
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	b662      	cpsie	i
 8008432:	60fb      	str	r3, [r7, #12]
}
 8008434:	bf00      	nop
 8008436:	e7fe      	b.n	8008436 <prvDeleteTCB+0x62>
	}
 8008438:	bf00      	nop
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008446:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <prvResetNextTaskUnblockTime+0x38>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d104      	bne.n	800845a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008450:	4b0a      	ldr	r3, [pc, #40]	; (800847c <prvResetNextTaskUnblockTime+0x3c>)
 8008452:	f04f 32ff 	mov.w	r2, #4294967295
 8008456:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008458:	e008      	b.n	800846c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800845a:	4b07      	ldr	r3, [pc, #28]	; (8008478 <prvResetNextTaskUnblockTime+0x38>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	4a04      	ldr	r2, [pc, #16]	; (800847c <prvResetNextTaskUnblockTime+0x3c>)
 800846a:	6013      	str	r3, [r2, #0]
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	2000562c 	.word	0x2000562c
 800847c:	20005694 	.word	0x20005694

08008480 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008486:	4b0b      	ldr	r3, [pc, #44]	; (80084b4 <xTaskGetSchedulerState+0x34>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d102      	bne.n	8008494 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800848e:	2301      	movs	r3, #1
 8008490:	607b      	str	r3, [r7, #4]
 8008492:	e008      	b.n	80084a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008494:	4b08      	ldr	r3, [pc, #32]	; (80084b8 <xTaskGetSchedulerState+0x38>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d102      	bne.n	80084a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800849c:	2302      	movs	r3, #2
 800849e:	607b      	str	r3, [r7, #4]
 80084a0:	e001      	b.n	80084a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084a2:	2300      	movs	r3, #0
 80084a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084a6:	687b      	ldr	r3, [r7, #4]
	}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	20005680 	.word	0x20005680
 80084b8:	2000569c 	.word	0x2000569c

080084bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d069      	beq.n	80085a6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d6:	4b36      	ldr	r3, [pc, #216]	; (80085b0 <xTaskPriorityInherit+0xf4>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	429a      	cmp	r2, r3
 80084de:	d259      	bcs.n	8008594 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	db06      	blt.n	80084f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084e8:	4b31      	ldr	r3, [pc, #196]	; (80085b0 <xTaskPriorityInherit+0xf4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	f1c3 0207 	rsb	r2, r3, #7
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	6959      	ldr	r1, [r3, #20]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fe:	4613      	mov	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4a2b      	ldr	r2, [pc, #172]	; (80085b4 <xTaskPriorityInherit+0xf8>)
 8008508:	4413      	add	r3, r2
 800850a:	4299      	cmp	r1, r3
 800850c:	d13a      	bne.n	8008584 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	3304      	adds	r3, #4
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe f9dc 	bl	80068d0 <uxListRemove>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d115      	bne.n	800854a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008522:	4924      	ldr	r1, [pc, #144]	; (80085b4 <xTaskPriorityInherit+0xf8>)
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	440b      	add	r3, r1
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10a      	bne.n	800854a <xTaskPriorityInherit+0x8e>
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008538:	2201      	movs	r2, #1
 800853a:	fa02 f303 	lsl.w	r3, r2, r3
 800853e:	43da      	mvns	r2, r3
 8008540:	4b1d      	ldr	r3, [pc, #116]	; (80085b8 <xTaskPriorityInherit+0xfc>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4013      	ands	r3, r2
 8008546:	4a1c      	ldr	r2, [pc, #112]	; (80085b8 <xTaskPriorityInherit+0xfc>)
 8008548:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800854a:	4b19      	ldr	r3, [pc, #100]	; (80085b0 <xTaskPriorityInherit+0xf4>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008558:	2201      	movs	r2, #1
 800855a:	409a      	lsls	r2, r3
 800855c:	4b16      	ldr	r3, [pc, #88]	; (80085b8 <xTaskPriorityInherit+0xfc>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4313      	orrs	r3, r2
 8008562:	4a15      	ldr	r2, [pc, #84]	; (80085b8 <xTaskPriorityInherit+0xfc>)
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4a10      	ldr	r2, [pc, #64]	; (80085b4 <xTaskPriorityInherit+0xf8>)
 8008574:	441a      	add	r2, r3
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	3304      	adds	r3, #4
 800857a:	4619      	mov	r1, r3
 800857c:	4610      	mov	r0, r2
 800857e:	f7fe f94a 	bl	8006816 <vListInsertEnd>
 8008582:	e004      	b.n	800858e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008584:	4b0a      	ldr	r3, [pc, #40]	; (80085b0 <xTaskPriorityInherit+0xf4>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800858e:	2301      	movs	r3, #1
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	e008      	b.n	80085a6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008598:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <xTaskPriorityInherit+0xf4>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859e:	429a      	cmp	r2, r3
 80085a0:	d201      	bcs.n	80085a6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80085a2:	2301      	movs	r3, #1
 80085a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085a6:	68fb      	ldr	r3, [r7, #12]
	}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	20005574 	.word	0x20005574
 80085b4:	20005578 	.word	0x20005578
 80085b8:	2000567c 	.word	0x2000567c

080085bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d072      	beq.n	80086b8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085d2:	4b3c      	ldr	r3, [pc, #240]	; (80086c4 <xTaskPriorityDisinherit+0x108>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d00c      	beq.n	80085f6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80085dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e0:	b672      	cpsid	i
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	b662      	cpsie	i
 80085f0:	60fb      	str	r3, [r7, #12]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10c      	bne.n	8008618 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	b672      	cpsid	i
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	b662      	cpsie	i
 8008612:	60bb      	str	r3, [r7, #8]
}
 8008614:	bf00      	nop
 8008616:	e7fe      	b.n	8008616 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800861c:	1e5a      	subs	r2, r3, #1
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862a:	429a      	cmp	r2, r3
 800862c:	d044      	beq.n	80086b8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008632:	2b00      	cmp	r3, #0
 8008634:	d140      	bne.n	80086b8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	3304      	adds	r3, #4
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe f948 	bl	80068d0 <uxListRemove>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d115      	bne.n	8008672 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800864a:	491f      	ldr	r1, [pc, #124]	; (80086c8 <xTaskPriorityDisinherit+0x10c>)
 800864c:	4613      	mov	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	440b      	add	r3, r1
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10a      	bne.n	8008672 <xTaskPriorityDisinherit+0xb6>
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	2201      	movs	r2, #1
 8008662:	fa02 f303 	lsl.w	r3, r2, r3
 8008666:	43da      	mvns	r2, r3
 8008668:	4b18      	ldr	r3, [pc, #96]	; (80086cc <xTaskPriorityDisinherit+0x110>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4013      	ands	r3, r2
 800866e:	4a17      	ldr	r2, [pc, #92]	; (80086cc <xTaskPriorityDisinherit+0x110>)
 8008670:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867e:	f1c3 0207 	rsb	r2, r3, #7
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868a:	2201      	movs	r2, #1
 800868c:	409a      	lsls	r2, r3
 800868e:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <xTaskPriorityDisinherit+0x110>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4313      	orrs	r3, r2
 8008694:	4a0d      	ldr	r2, [pc, #52]	; (80086cc <xTaskPriorityDisinherit+0x110>)
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800869c:	4613      	mov	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4a08      	ldr	r2, [pc, #32]	; (80086c8 <xTaskPriorityDisinherit+0x10c>)
 80086a6:	441a      	add	r2, r3
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	3304      	adds	r3, #4
 80086ac:	4619      	mov	r1, r3
 80086ae:	4610      	mov	r0, r2
 80086b0:	f7fe f8b1 	bl	8006816 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086b4:	2301      	movs	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086b8:	697b      	ldr	r3, [r7, #20]
	}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	20005574 	.word	0x20005574
 80086c8:	20005578 	.word	0x20005578
 80086cc:	2000567c 	.word	0x2000567c

080086d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b088      	sub	sp, #32
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80086de:	2301      	movs	r3, #1
 80086e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 8087 	beq.w	80087f8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10c      	bne.n	800870c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	b672      	cpsid	i
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	b662      	cpsie	i
 8008706:	60fb      	str	r3, [r7, #12]
}
 8008708:	bf00      	nop
 800870a:	e7fe      	b.n	800870a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	429a      	cmp	r2, r3
 8008714:	d902      	bls.n	800871c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	61fb      	str	r3, [r7, #28]
 800871a:	e002      	b.n	8008722 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008720:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008726:	69fa      	ldr	r2, [r7, #28]
 8008728:	429a      	cmp	r2, r3
 800872a:	d065      	beq.n	80087f8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	429a      	cmp	r2, r3
 8008734:	d160      	bne.n	80087f8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008736:	4b32      	ldr	r3, [pc, #200]	; (8008800 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	429a      	cmp	r2, r3
 800873e:	d10c      	bne.n	800875a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	b672      	cpsid	i
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	b662      	cpsie	i
 8008754:	60bb      	str	r3, [r7, #8]
}
 8008756:	bf00      	nop
 8008758:	e7fe      	b.n	8008758 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	69fa      	ldr	r2, [r7, #28]
 8008764:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	2b00      	cmp	r3, #0
 800876c:	db04      	blt.n	8008778 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	f1c3 0207 	rsb	r2, r3, #7
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	6959      	ldr	r1, [r3, #20]
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	4613      	mov	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4a1f      	ldr	r2, [pc, #124]	; (8008804 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008788:	4413      	add	r3, r2
 800878a:	4299      	cmp	r1, r3
 800878c:	d134      	bne.n	80087f8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	3304      	adds	r3, #4
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe f89c 	bl	80068d0 <uxListRemove>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d115      	bne.n	80087ca <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a2:	4918      	ldr	r1, [pc, #96]	; (8008804 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80087a4:	4613      	mov	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	440b      	add	r3, r1
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	2201      	movs	r2, #1
 80087ba:	fa02 f303 	lsl.w	r3, r2, r3
 80087be:	43da      	mvns	r2, r3
 80087c0:	4b11      	ldr	r3, [pc, #68]	; (8008808 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4013      	ands	r3, r2
 80087c6:	4a10      	ldr	r2, [pc, #64]	; (8008808 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80087c8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ce:	2201      	movs	r2, #1
 80087d0:	409a      	lsls	r2, r3
 80087d2:	4b0d      	ldr	r3, [pc, #52]	; (8008808 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	4a0b      	ldr	r2, [pc, #44]	; (8008808 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e0:	4613      	mov	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4a06      	ldr	r2, [pc, #24]	; (8008804 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80087ea:	441a      	add	r2, r3
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	3304      	adds	r3, #4
 80087f0:	4619      	mov	r1, r3
 80087f2:	4610      	mov	r0, r2
 80087f4:	f7fe f80f 	bl	8006816 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087f8:	bf00      	nop
 80087fa:	3720      	adds	r7, #32
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20005574 	.word	0x20005574
 8008804:	20005578 	.word	0x20005578
 8008808:	2000567c 	.word	0x2000567c

0800880c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800880c:	b480      	push	{r7}
 800880e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008810:	4b07      	ldr	r3, [pc, #28]	; (8008830 <pvTaskIncrementMutexHeldCount+0x24>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d004      	beq.n	8008822 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008818:	4b05      	ldr	r3, [pc, #20]	; (8008830 <pvTaskIncrementMutexHeldCount+0x24>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800881e:	3201      	adds	r2, #1
 8008820:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008822:	4b03      	ldr	r3, [pc, #12]	; (8008830 <pvTaskIncrementMutexHeldCount+0x24>)
 8008824:	681b      	ldr	r3, [r3, #0]
	}
 8008826:	4618      	mov	r0, r3
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	20005574 	.word	0x20005574

08008834 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800883e:	4b29      	ldr	r3, [pc, #164]	; (80088e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008844:	4b28      	ldr	r3, [pc, #160]	; (80088e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3304      	adds	r3, #4
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe f840 	bl	80068d0 <uxListRemove>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10b      	bne.n	800886e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008856:	4b24      	ldr	r3, [pc, #144]	; (80088e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885c:	2201      	movs	r2, #1
 800885e:	fa02 f303 	lsl.w	r3, r2, r3
 8008862:	43da      	mvns	r2, r3
 8008864:	4b21      	ldr	r3, [pc, #132]	; (80088ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4013      	ands	r3, r2
 800886a:	4a20      	ldr	r2, [pc, #128]	; (80088ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800886c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008874:	d10a      	bne.n	800888c <prvAddCurrentTaskToDelayedList+0x58>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d007      	beq.n	800888c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800887c:	4b1a      	ldr	r3, [pc, #104]	; (80088e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3304      	adds	r3, #4
 8008882:	4619      	mov	r1, r3
 8008884:	481a      	ldr	r0, [pc, #104]	; (80088f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008886:	f7fd ffc6 	bl	8006816 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800888a:	e026      	b.n	80088da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4413      	add	r3, r2
 8008892:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008894:	4b14      	ldr	r3, [pc, #80]	; (80088e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d209      	bcs.n	80088b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088a4:	4b13      	ldr	r3, [pc, #76]	; (80088f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	4b0f      	ldr	r3, [pc, #60]	; (80088e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3304      	adds	r3, #4
 80088ae:	4619      	mov	r1, r3
 80088b0:	4610      	mov	r0, r2
 80088b2:	f7fd ffd4 	bl	800685e <vListInsert>
}
 80088b6:	e010      	b.n	80088da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088b8:	4b0f      	ldr	r3, [pc, #60]	; (80088f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	4b0a      	ldr	r3, [pc, #40]	; (80088e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3304      	adds	r3, #4
 80088c2:	4619      	mov	r1, r3
 80088c4:	4610      	mov	r0, r2
 80088c6:	f7fd ffca 	bl	800685e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088ca:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d202      	bcs.n	80088da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80088d4:	4a09      	ldr	r2, [pc, #36]	; (80088fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	6013      	str	r3, [r2, #0]
}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	20005678 	.word	0x20005678
 80088e8:	20005574 	.word	0x20005574
 80088ec:	2000567c 	.word	0x2000567c
 80088f0:	20005660 	.word	0x20005660
 80088f4:	20005630 	.word	0x20005630
 80088f8:	2000562c 	.word	0x2000562c
 80088fc:	20005694 	.word	0x20005694

08008900 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3b04      	subs	r3, #4
 8008910:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008918:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3b04      	subs	r3, #4
 800891e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	f023 0201 	bic.w	r2, r3, #1
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3b04      	subs	r3, #4
 800892e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008930:	4a0c      	ldr	r2, [pc, #48]	; (8008964 <pxPortInitialiseStack+0x64>)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3b14      	subs	r3, #20
 800893a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3b04      	subs	r3, #4
 8008946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f06f 0202 	mvn.w	r2, #2
 800894e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3b20      	subs	r3, #32
 8008954:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008956:	68fb      	ldr	r3, [r7, #12]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3714      	adds	r7, #20
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr
 8008964:	08008969 	.word	0x08008969

08008968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008972:	4b14      	ldr	r3, [pc, #80]	; (80089c4 <prvTaskExitError+0x5c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897a:	d00c      	beq.n	8008996 <prvTaskExitError+0x2e>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	b672      	cpsid	i
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	b662      	cpsie	i
 8008990:	60fb      	str	r3, [r7, #12]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <prvTaskExitError+0x2c>
	__asm volatile
 8008996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899a:	b672      	cpsid	i
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	b662      	cpsie	i
 80089aa:	60bb      	str	r3, [r7, #8]
}
 80089ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089ae:	bf00      	nop
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0fc      	beq.n	80089b0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089b6:	bf00      	nop
 80089b8:	bf00      	nop
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	20000020 	.word	0x20000020
	...

080089d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089d0:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <pxCurrentTCBConst2>)
 80089d2:	6819      	ldr	r1, [r3, #0]
 80089d4:	6808      	ldr	r0, [r1, #0]
 80089d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089da:	f380 8809 	msr	PSP, r0
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f04f 0000 	mov.w	r0, #0
 80089e6:	f380 8811 	msr	BASEPRI, r0
 80089ea:	4770      	bx	lr
 80089ec:	f3af 8000 	nop.w

080089f0 <pxCurrentTCBConst2>:
 80089f0:	20005574 	.word	0x20005574
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop

080089f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089f8:	4808      	ldr	r0, [pc, #32]	; (8008a1c <prvPortStartFirstTask+0x24>)
 80089fa:	6800      	ldr	r0, [r0, #0]
 80089fc:	6800      	ldr	r0, [r0, #0]
 80089fe:	f380 8808 	msr	MSP, r0
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f380 8814 	msr	CONTROL, r0
 8008a0a:	b662      	cpsie	i
 8008a0c:	b661      	cpsie	f
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	df00      	svc	0
 8008a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a1a:	bf00      	nop
 8008a1c:	e000ed08 	.word	0xe000ed08

08008a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a26:	4b37      	ldr	r3, [pc, #220]	; (8008b04 <xPortStartScheduler+0xe4>)
 8008a28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	22ff      	movs	r2, #255	; 0xff
 8008a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	4b2f      	ldr	r3, [pc, #188]	; (8008b08 <xPortStartScheduler+0xe8>)
 8008a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a4e:	4b2f      	ldr	r3, [pc, #188]	; (8008b0c <xPortStartScheduler+0xec>)
 8008a50:	2207      	movs	r2, #7
 8008a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a54:	e009      	b.n	8008a6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a56:	4b2d      	ldr	r3, [pc, #180]	; (8008b0c <xPortStartScheduler+0xec>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	4a2b      	ldr	r2, [pc, #172]	; (8008b0c <xPortStartScheduler+0xec>)
 8008a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a60:	78fb      	ldrb	r3, [r7, #3]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a72:	2b80      	cmp	r3, #128	; 0x80
 8008a74:	d0ef      	beq.n	8008a56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a76:	4b25      	ldr	r3, [pc, #148]	; (8008b0c <xPortStartScheduler+0xec>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f1c3 0307 	rsb	r3, r3, #7
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d00c      	beq.n	8008a9c <xPortStartScheduler+0x7c>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	b672      	cpsid	i
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	b662      	cpsie	i
 8008a96:	60bb      	str	r3, [r7, #8]
}
 8008a98:	bf00      	nop
 8008a9a:	e7fe      	b.n	8008a9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a9c:	4b1b      	ldr	r3, [pc, #108]	; (8008b0c <xPortStartScheduler+0xec>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	021b      	lsls	r3, r3, #8
 8008aa2:	4a1a      	ldr	r2, [pc, #104]	; (8008b0c <xPortStartScheduler+0xec>)
 8008aa4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008aa6:	4b19      	ldr	r3, [pc, #100]	; (8008b0c <xPortStartScheduler+0xec>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008aae:	4a17      	ldr	r2, [pc, #92]	; (8008b0c <xPortStartScheduler+0xec>)
 8008ab0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008aba:	4b15      	ldr	r3, [pc, #84]	; (8008b10 <xPortStartScheduler+0xf0>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a14      	ldr	r2, [pc, #80]	; (8008b10 <xPortStartScheduler+0xf0>)
 8008ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ac4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ac6:	4b12      	ldr	r3, [pc, #72]	; (8008b10 <xPortStartScheduler+0xf0>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a11      	ldr	r2, [pc, #68]	; (8008b10 <xPortStartScheduler+0xf0>)
 8008acc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ad0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ad2:	f000 f8dd 	bl	8008c90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ad6:	4b0f      	ldr	r3, [pc, #60]	; (8008b14 <xPortStartScheduler+0xf4>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008adc:	f000 f8fc 	bl	8008cd8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ae0:	4b0d      	ldr	r3, [pc, #52]	; (8008b18 <xPortStartScheduler+0xf8>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a0c      	ldr	r2, [pc, #48]	; (8008b18 <xPortStartScheduler+0xf8>)
 8008ae6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008aea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008aec:	f7ff ff84 	bl	80089f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008af0:	f7ff fa74 	bl	8007fdc <vTaskSwitchContext>
	prvTaskExitError();
 8008af4:	f7ff ff38 	bl	8008968 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	e000e400 	.word	0xe000e400
 8008b08:	200056a0 	.word	0x200056a0
 8008b0c:	200056a4 	.word	0x200056a4
 8008b10:	e000ed20 	.word	0xe000ed20
 8008b14:	20000020 	.word	0x20000020
 8008b18:	e000ef34 	.word	0xe000ef34

08008b1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	b672      	cpsid	i
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	b662      	cpsie	i
 8008b36:	607b      	str	r3, [r7, #4]
}
 8008b38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b3a:	4b10      	ldr	r3, [pc, #64]	; (8008b7c <vPortEnterCritical+0x60>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	4a0e      	ldr	r2, [pc, #56]	; (8008b7c <vPortEnterCritical+0x60>)
 8008b42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b44:	4b0d      	ldr	r3, [pc, #52]	; (8008b7c <vPortEnterCritical+0x60>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d111      	bne.n	8008b70 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b4c:	4b0c      	ldr	r3, [pc, #48]	; (8008b80 <vPortEnterCritical+0x64>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00c      	beq.n	8008b70 <vPortEnterCritical+0x54>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5a:	b672      	cpsid	i
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	b662      	cpsie	i
 8008b6a:	603b      	str	r3, [r7, #0]
}
 8008b6c:	bf00      	nop
 8008b6e:	e7fe      	b.n	8008b6e <vPortEnterCritical+0x52>
	}
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	20000020 	.word	0x20000020
 8008b80:	e000ed04 	.word	0xe000ed04

08008b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b8a:	4b13      	ldr	r3, [pc, #76]	; (8008bd8 <vPortExitCritical+0x54>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10c      	bne.n	8008bac <vPortExitCritical+0x28>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	b672      	cpsid	i
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	b662      	cpsie	i
 8008ba6:	607b      	str	r3, [r7, #4]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008bac:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <vPortExitCritical+0x54>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	4a09      	ldr	r2, [pc, #36]	; (8008bd8 <vPortExitCritical+0x54>)
 8008bb4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bb6:	4b08      	ldr	r3, [pc, #32]	; (8008bd8 <vPortExitCritical+0x54>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d105      	bne.n	8008bca <vPortExitCritical+0x46>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	f383 8811 	msr	BASEPRI, r3
}
 8008bc8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	20000020 	.word	0x20000020
 8008bdc:	00000000 	.word	0x00000000

08008be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008be0:	f3ef 8009 	mrs	r0, PSP
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <pxCurrentTCBConst>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	f01e 0f10 	tst.w	lr, #16
 8008bf0:	bf08      	it	eq
 8008bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfa:	6010      	str	r0, [r2, #0]
 8008bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c04:	b672      	cpsid	i
 8008c06:	f380 8811 	msr	BASEPRI, r0
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	b662      	cpsie	i
 8008c14:	f7ff f9e2 	bl	8007fdc <vTaskSwitchContext>
 8008c18:	f04f 0000 	mov.w	r0, #0
 8008c1c:	f380 8811 	msr	BASEPRI, r0
 8008c20:	bc09      	pop	{r0, r3}
 8008c22:	6819      	ldr	r1, [r3, #0]
 8008c24:	6808      	ldr	r0, [r1, #0]
 8008c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2a:	f01e 0f10 	tst.w	lr, #16
 8008c2e:	bf08      	it	eq
 8008c30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c34:	f380 8809 	msr	PSP, r0
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop

08008c40 <pxCurrentTCBConst>:
 8008c40:	20005574 	.word	0x20005574
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop

08008c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	b672      	cpsid	i
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	b662      	cpsie	i
 8008c62:	607b      	str	r3, [r7, #4]
}
 8008c64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c66:	f7ff f8ff 	bl	8007e68 <xTaskIncrementTick>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d003      	beq.n	8008c78 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c70:	4b06      	ldr	r3, [pc, #24]	; (8008c8c <SysTick_Handler+0x44>)
 8008c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	f383 8811 	msr	BASEPRI, r3
}
 8008c82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	e000ed04 	.word	0xe000ed04

08008c90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c94:	4b0b      	ldr	r3, [pc, #44]	; (8008cc4 <vPortSetupTimerInterrupt+0x34>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c9a:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <vPortSetupTimerInterrupt+0x38>)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ca0:	4b0a      	ldr	r3, [pc, #40]	; (8008ccc <vPortSetupTimerInterrupt+0x3c>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a0a      	ldr	r2, [pc, #40]	; (8008cd0 <vPortSetupTimerInterrupt+0x40>)
 8008ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8008caa:	099b      	lsrs	r3, r3, #6
 8008cac:	4a09      	ldr	r2, [pc, #36]	; (8008cd4 <vPortSetupTimerInterrupt+0x44>)
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cb2:	4b04      	ldr	r3, [pc, #16]	; (8008cc4 <vPortSetupTimerInterrupt+0x34>)
 8008cb4:	2207      	movs	r2, #7
 8008cb6:	601a      	str	r2, [r3, #0]
}
 8008cb8:	bf00      	nop
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	e000e010 	.word	0xe000e010
 8008cc8:	e000e018 	.word	0xe000e018
 8008ccc:	20000000 	.word	0x20000000
 8008cd0:	10624dd3 	.word	0x10624dd3
 8008cd4:	e000e014 	.word	0xe000e014

08008cd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008cd8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ce8 <vPortEnableVFP+0x10>
 8008cdc:	6801      	ldr	r1, [r0, #0]
 8008cde:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008ce2:	6001      	str	r1, [r0, #0]
 8008ce4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ce6:	bf00      	nop
 8008ce8:	e000ed88 	.word	0xe000ed88

08008cec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cf2:	f3ef 8305 	mrs	r3, IPSR
 8008cf6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2b0f      	cmp	r3, #15
 8008cfc:	d916      	bls.n	8008d2c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cfe:	4a19      	ldr	r2, [pc, #100]	; (8008d64 <vPortValidateInterruptPriority+0x78>)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4413      	add	r3, r2
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d08:	4b17      	ldr	r3, [pc, #92]	; (8008d68 <vPortValidateInterruptPriority+0x7c>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	7afa      	ldrb	r2, [r7, #11]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d20c      	bcs.n	8008d2c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	b672      	cpsid	i
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	b662      	cpsie	i
 8008d26:	607b      	str	r3, [r7, #4]
}
 8008d28:	bf00      	nop
 8008d2a:	e7fe      	b.n	8008d2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d2c:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <vPortValidateInterruptPriority+0x80>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d34:	4b0e      	ldr	r3, [pc, #56]	; (8008d70 <vPortValidateInterruptPriority+0x84>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d90c      	bls.n	8008d56 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d40:	b672      	cpsid	i
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	b662      	cpsie	i
 8008d50:	603b      	str	r3, [r7, #0]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <vPortValidateInterruptPriority+0x68>
	}
 8008d56:	bf00      	nop
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	e000e3f0 	.word	0xe000e3f0
 8008d68:	200056a0 	.word	0x200056a0
 8008d6c:	e000ed0c 	.word	0xe000ed0c
 8008d70:	200056a4 	.word	0x200056a4

08008d74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08a      	sub	sp, #40	; 0x28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d80:	f7fe ffa4 	bl	8007ccc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d84:	4b5b      	ldr	r3, [pc, #364]	; (8008ef4 <pvPortMalloc+0x180>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d8c:	f000 f91a 	bl	8008fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d90:	4b59      	ldr	r3, [pc, #356]	; (8008ef8 <pvPortMalloc+0x184>)
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4013      	ands	r3, r2
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f040 8092 	bne.w	8008ec2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01f      	beq.n	8008de4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008da4:	2208      	movs	r2, #8
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4413      	add	r3, r2
 8008daa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f003 0307 	and.w	r3, r3, #7
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d016      	beq.n	8008de4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f023 0307 	bic.w	r3, r3, #7
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00c      	beq.n	8008de4 <pvPortMalloc+0x70>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dce:	b672      	cpsid	i
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	b662      	cpsie	i
 8008dde:	617b      	str	r3, [r7, #20]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d06b      	beq.n	8008ec2 <pvPortMalloc+0x14e>
 8008dea:	4b44      	ldr	r3, [pc, #272]	; (8008efc <pvPortMalloc+0x188>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d866      	bhi.n	8008ec2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008df4:	4b42      	ldr	r3, [pc, #264]	; (8008f00 <pvPortMalloc+0x18c>)
 8008df6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008df8:	4b41      	ldr	r3, [pc, #260]	; (8008f00 <pvPortMalloc+0x18c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dfe:	e004      	b.n	8008e0a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d903      	bls.n	8008e1c <pvPortMalloc+0xa8>
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1f1      	bne.n	8008e00 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e1c:	4b35      	ldr	r3, [pc, #212]	; (8008ef4 <pvPortMalloc+0x180>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d04d      	beq.n	8008ec2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2208      	movs	r2, #8
 8008e2c:	4413      	add	r3, r2
 8008e2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	1ad2      	subs	r2, r2, r3
 8008e40:	2308      	movs	r3, #8
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d921      	bls.n	8008e8c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	f003 0307 	and.w	r3, r3, #7
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00c      	beq.n	8008e74 <pvPortMalloc+0x100>
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5e:	b672      	cpsid	i
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	b662      	cpsie	i
 8008e6e:	613b      	str	r3, [r7, #16]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	1ad2      	subs	r2, r2, r3
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e86:	69b8      	ldr	r0, [r7, #24]
 8008e88:	f000 f8fe 	bl	8009088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e8c:	4b1b      	ldr	r3, [pc, #108]	; (8008efc <pvPortMalloc+0x188>)
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	4a19      	ldr	r2, [pc, #100]	; (8008efc <pvPortMalloc+0x188>)
 8008e98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e9a:	4b18      	ldr	r3, [pc, #96]	; (8008efc <pvPortMalloc+0x188>)
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	4b19      	ldr	r3, [pc, #100]	; (8008f04 <pvPortMalloc+0x190>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d203      	bcs.n	8008eae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ea6:	4b15      	ldr	r3, [pc, #84]	; (8008efc <pvPortMalloc+0x188>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a16      	ldr	r2, [pc, #88]	; (8008f04 <pvPortMalloc+0x190>)
 8008eac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	4b11      	ldr	r3, [pc, #68]	; (8008ef8 <pvPortMalloc+0x184>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ec2:	f7fe ff11 	bl	8007ce8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00c      	beq.n	8008eea <pvPortMalloc+0x176>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	b672      	cpsid	i
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	b662      	cpsie	i
 8008ee4:	60fb      	str	r3, [r7, #12]
}
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <pvPortMalloc+0x174>
	return pvReturn;
 8008eea:	69fb      	ldr	r3, [r7, #28]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3728      	adds	r7, #40	; 0x28
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	200092b0 	.word	0x200092b0
 8008ef8:	200092bc 	.word	0x200092bc
 8008efc:	200092b4 	.word	0x200092b4
 8008f00:	200092a8 	.word	0x200092a8
 8008f04:	200092b8 	.word	0x200092b8

08008f08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d04c      	beq.n	8008fb4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f1a:	2308      	movs	r3, #8
 8008f1c:	425b      	negs	r3, r3
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	4413      	add	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	4b23      	ldr	r3, [pc, #140]	; (8008fbc <vPortFree+0xb4>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4013      	ands	r3, r2
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10c      	bne.n	8008f50 <vPortFree+0x48>
	__asm volatile
 8008f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3a:	b672      	cpsid	i
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	b662      	cpsie	i
 8008f4a:	60fb      	str	r3, [r7, #12]
}
 8008f4c:	bf00      	nop
 8008f4e:	e7fe      	b.n	8008f4e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00c      	beq.n	8008f72 <vPortFree+0x6a>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	b672      	cpsid	i
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	b662      	cpsie	i
 8008f6c:	60bb      	str	r3, [r7, #8]
}
 8008f6e:	bf00      	nop
 8008f70:	e7fe      	b.n	8008f70 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	4b11      	ldr	r3, [pc, #68]	; (8008fbc <vPortFree+0xb4>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d019      	beq.n	8008fb4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d115      	bne.n	8008fb4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	4b0b      	ldr	r3, [pc, #44]	; (8008fbc <vPortFree+0xb4>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	43db      	mvns	r3, r3
 8008f92:	401a      	ands	r2, r3
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f98:	f7fe fe98 	bl	8007ccc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <vPortFree+0xb8>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	4a06      	ldr	r2, [pc, #24]	; (8008fc0 <vPortFree+0xb8>)
 8008fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008faa:	6938      	ldr	r0, [r7, #16]
 8008fac:	f000 f86c 	bl	8009088 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008fb0:	f7fe fe9a 	bl	8007ce8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fb4:	bf00      	nop
 8008fb6:	3718      	adds	r7, #24
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	200092bc 	.word	0x200092bc
 8008fc0:	200092b4 	.word	0x200092b4

08008fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fd0:	4b27      	ldr	r3, [pc, #156]	; (8009070 <prvHeapInit+0xac>)
 8008fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00c      	beq.n	8008ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3307      	adds	r3, #7
 8008fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	4a1f      	ldr	r2, [pc, #124]	; (8009070 <prvHeapInit+0xac>)
 8008ff4:	4413      	add	r3, r2
 8008ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ffc:	4a1d      	ldr	r2, [pc, #116]	; (8009074 <prvHeapInit+0xb0>)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009002:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <prvHeapInit+0xb0>)
 8009004:	2200      	movs	r2, #0
 8009006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	4413      	add	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009010:	2208      	movs	r2, #8
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 0307 	bic.w	r3, r3, #7
 800901e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4a15      	ldr	r2, [pc, #84]	; (8009078 <prvHeapInit+0xb4>)
 8009024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <prvHeapInit+0xb4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2200      	movs	r2, #0
 800902c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800902e:	4b12      	ldr	r3, [pc, #72]	; (8009078 <prvHeapInit+0xb4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	1ad2      	subs	r2, r2, r3
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009044:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <prvHeapInit+0xb4>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	4a0a      	ldr	r2, [pc, #40]	; (800907c <prvHeapInit+0xb8>)
 8009052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	4a09      	ldr	r2, [pc, #36]	; (8009080 <prvHeapInit+0xbc>)
 800905a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800905c:	4b09      	ldr	r3, [pc, #36]	; (8009084 <prvHeapInit+0xc0>)
 800905e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009062:	601a      	str	r2, [r3, #0]
}
 8009064:	bf00      	nop
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	200056a8 	.word	0x200056a8
 8009074:	200092a8 	.word	0x200092a8
 8009078:	200092b0 	.word	0x200092b0
 800907c:	200092b8 	.word	0x200092b8
 8009080:	200092b4 	.word	0x200092b4
 8009084:	200092bc 	.word	0x200092bc

08009088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009090:	4b28      	ldr	r3, [pc, #160]	; (8009134 <prvInsertBlockIntoFreeList+0xac>)
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	e002      	b.n	800909c <prvInsertBlockIntoFreeList+0x14>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d8f7      	bhi.n	8009096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	4413      	add	r3, r2
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d108      	bne.n	80090ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	441a      	add	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	441a      	add	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d118      	bne.n	8009110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4b15      	ldr	r3, [pc, #84]	; (8009138 <prvInsertBlockIntoFreeList+0xb0>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d00d      	beq.n	8009106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	441a      	add	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	e008      	b.n	8009118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvInsertBlockIntoFreeList+0xb0>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	e003      	b.n	8009118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	429a      	cmp	r2, r3
 800911e:	d002      	beq.n	8009126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009126:	bf00      	nop
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	200092a8 	.word	0x200092a8
 8009138:	200092b0 	.word	0x200092b0

0800913c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009146:	f007 fac5 	bl	80106d4 <sys_timeouts_sleeptime>
 800914a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009152:	d10b      	bne.n	800916c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009154:	4813      	ldr	r0, [pc, #76]	; (80091a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009156:	f00a f83a 	bl	80131ce <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800915a:	2200      	movs	r2, #0
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f009 ffac 	bl	80130bc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009164:	480f      	ldr	r0, [pc, #60]	; (80091a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009166:	f00a f823 	bl	80131b0 <sys_mutex_lock>
    return;
 800916a:	e018      	b.n	800919e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d102      	bne.n	8009178 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009172:	f007 fa75 	bl	8010660 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009176:	e7e6      	b.n	8009146 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009178:	480a      	ldr	r0, [pc, #40]	; (80091a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800917a:	f00a f828 	bl	80131ce <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f009 ff9a 	bl	80130bc <sys_arch_mbox_fetch>
 8009188:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800918a:	4806      	ldr	r0, [pc, #24]	; (80091a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800918c:	f00a f810 	bl	80131b0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009196:	d102      	bne.n	800919e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009198:	f007 fa62 	bl	8010660 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800919c:	e7d3      	b.n	8009146 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	200092cc 	.word	0x200092cc

080091a8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80091b0:	4810      	ldr	r0, [pc, #64]	; (80091f4 <tcpip_thread+0x4c>)
 80091b2:	f009 fffd 	bl	80131b0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80091b6:	4b10      	ldr	r3, [pc, #64]	; (80091f8 <tcpip_thread+0x50>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d005      	beq.n	80091ca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80091be:	4b0e      	ldr	r3, [pc, #56]	; (80091f8 <tcpip_thread+0x50>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a0e      	ldr	r2, [pc, #56]	; (80091fc <tcpip_thread+0x54>)
 80091c4:	6812      	ldr	r2, [r2, #0]
 80091c6:	4610      	mov	r0, r2
 80091c8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80091ca:	f107 030c 	add.w	r3, r7, #12
 80091ce:	4619      	mov	r1, r3
 80091d0:	480b      	ldr	r0, [pc, #44]	; (8009200 <tcpip_thread+0x58>)
 80091d2:	f7ff ffb3 	bl	800913c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d106      	bne.n	80091ea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80091dc:	4b09      	ldr	r3, [pc, #36]	; (8009204 <tcpip_thread+0x5c>)
 80091de:	2291      	movs	r2, #145	; 0x91
 80091e0:	4909      	ldr	r1, [pc, #36]	; (8009208 <tcpip_thread+0x60>)
 80091e2:	480a      	ldr	r0, [pc, #40]	; (800920c <tcpip_thread+0x64>)
 80091e4:	f00a fa1c 	bl	8013620 <iprintf>
      continue;
 80091e8:	e003      	b.n	80091f2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 f80f 	bl	8009210 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80091f2:	e7ea      	b.n	80091ca <tcpip_thread+0x22>
 80091f4:	200092cc 	.word	0x200092cc
 80091f8:	200092c0 	.word	0x200092c0
 80091fc:	200092c4 	.word	0x200092c4
 8009200:	200092c8 	.word	0x200092c8
 8009204:	0801455c 	.word	0x0801455c
 8009208:	0801458c 	.word	0x0801458c
 800920c:	080145ac 	.word	0x080145ac

08009210 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	2b02      	cmp	r3, #2
 800921e:	d026      	beq.n	800926e <tcpip_thread_handle_msg+0x5e>
 8009220:	2b02      	cmp	r3, #2
 8009222:	dc2b      	bgt.n	800927c <tcpip_thread_handle_msg+0x6c>
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <tcpip_thread_handle_msg+0x1e>
 8009228:	2b01      	cmp	r3, #1
 800922a:	d015      	beq.n	8009258 <tcpip_thread_handle_msg+0x48>
 800922c:	e026      	b.n	800927c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	6850      	ldr	r0, [r2, #4]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	6892      	ldr	r2, [r2, #8]
 800923a:	4611      	mov	r1, r2
 800923c:	4798      	blx	r3
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d004      	beq.n	800924e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	4618      	mov	r0, r3
 800924a:	f001 fd0b 	bl	800ac64 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	2009      	movs	r0, #9
 8009252:	f000 fe63 	bl	8009f1c <memp_free>
      break;
 8009256:	e018      	b.n	800928a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	6892      	ldr	r2, [r2, #8]
 8009260:	4610      	mov	r0, r2
 8009262:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	2008      	movs	r0, #8
 8009268:	f000 fe58 	bl	8009f1c <memp_free>
      break;
 800926c:	e00d      	b.n	800928a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	6892      	ldr	r2, [r2, #8]
 8009276:	4610      	mov	r0, r2
 8009278:	4798      	blx	r3
      break;
 800927a:	e006      	b.n	800928a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800927c:	4b05      	ldr	r3, [pc, #20]	; (8009294 <tcpip_thread_handle_msg+0x84>)
 800927e:	22cf      	movs	r2, #207	; 0xcf
 8009280:	4905      	ldr	r1, [pc, #20]	; (8009298 <tcpip_thread_handle_msg+0x88>)
 8009282:	4806      	ldr	r0, [pc, #24]	; (800929c <tcpip_thread_handle_msg+0x8c>)
 8009284:	f00a f9cc 	bl	8013620 <iprintf>
      break;
 8009288:	bf00      	nop
  }
}
 800928a:	bf00      	nop
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	0801455c 	.word	0x0801455c
 8009298:	0801458c 	.word	0x0801458c
 800929c:	080145ac 	.word	0x080145ac

080092a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80092ac:	481a      	ldr	r0, [pc, #104]	; (8009318 <tcpip_inpkt+0x78>)
 80092ae:	f009 ff44 	bl	801313a <sys_mbox_valid>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d105      	bne.n	80092c4 <tcpip_inpkt+0x24>
 80092b8:	4b18      	ldr	r3, [pc, #96]	; (800931c <tcpip_inpkt+0x7c>)
 80092ba:	22fc      	movs	r2, #252	; 0xfc
 80092bc:	4918      	ldr	r1, [pc, #96]	; (8009320 <tcpip_inpkt+0x80>)
 80092be:	4819      	ldr	r0, [pc, #100]	; (8009324 <tcpip_inpkt+0x84>)
 80092c0:	f00a f9ae 	bl	8013620 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80092c4:	2009      	movs	r0, #9
 80092c6:	f000 fdb3 	bl	8009e30 <memp_malloc>
 80092ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d102      	bne.n	80092d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80092d2:	f04f 33ff 	mov.w	r3, #4294967295
 80092d6:	e01a      	b.n	800930e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	2200      	movs	r2, #0
 80092dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80092f0:	6979      	ldr	r1, [r7, #20]
 80092f2:	4809      	ldr	r0, [pc, #36]	; (8009318 <tcpip_inpkt+0x78>)
 80092f4:	f009 fec8 	bl	8013088 <sys_mbox_trypost>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d006      	beq.n	800930c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80092fe:	6979      	ldr	r1, [r7, #20]
 8009300:	2009      	movs	r0, #9
 8009302:	f000 fe0b 	bl	8009f1c <memp_free>
    return ERR_MEM;
 8009306:	f04f 33ff 	mov.w	r3, #4294967295
 800930a:	e000      	b.n	800930e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800930c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	200092c8 	.word	0x200092c8
 800931c:	0801455c 	.word	0x0801455c
 8009320:	080145d4 	.word	0x080145d4
 8009324:	080145ac 	.word	0x080145ac

08009328 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009338:	f003 0318 	and.w	r3, r3, #24
 800933c:	2b00      	cmp	r3, #0
 800933e:	d006      	beq.n	800934e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009340:	4a08      	ldr	r2, [pc, #32]	; (8009364 <tcpip_input+0x3c>)
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff ffab 	bl	80092a0 <tcpip_inpkt>
 800934a:	4603      	mov	r3, r0
 800934c:	e005      	b.n	800935a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800934e:	4a06      	ldr	r2, [pc, #24]	; (8009368 <tcpip_input+0x40>)
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff ffa4 	bl	80092a0 <tcpip_inpkt>
 8009358:	4603      	mov	r3, r0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	08012e99 	.word	0x08012e99
 8009368:	08011da1 	.word	0x08011da1

0800936c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009376:	4819      	ldr	r0, [pc, #100]	; (80093dc <tcpip_try_callback+0x70>)
 8009378:	f009 fedf 	bl	801313a <sys_mbox_valid>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d106      	bne.n	8009390 <tcpip_try_callback+0x24>
 8009382:	4b17      	ldr	r3, [pc, #92]	; (80093e0 <tcpip_try_callback+0x74>)
 8009384:	f240 125d 	movw	r2, #349	; 0x15d
 8009388:	4916      	ldr	r1, [pc, #88]	; (80093e4 <tcpip_try_callback+0x78>)
 800938a:	4817      	ldr	r0, [pc, #92]	; (80093e8 <tcpip_try_callback+0x7c>)
 800938c:	f00a f948 	bl	8013620 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009390:	2008      	movs	r0, #8
 8009392:	f000 fd4d 	bl	8009e30 <memp_malloc>
 8009396:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d102      	bne.n	80093a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800939e:	f04f 33ff 	mov.w	r3, #4294967295
 80093a2:	e017      	b.n	80093d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2201      	movs	r2, #1
 80093a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80093b6:	68f9      	ldr	r1, [r7, #12]
 80093b8:	4808      	ldr	r0, [pc, #32]	; (80093dc <tcpip_try_callback+0x70>)
 80093ba:	f009 fe65 	bl	8013088 <sys_mbox_trypost>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d006      	beq.n	80093d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80093c4:	68f9      	ldr	r1, [r7, #12]
 80093c6:	2008      	movs	r0, #8
 80093c8:	f000 fda8 	bl	8009f1c <memp_free>
    return ERR_MEM;
 80093cc:	f04f 33ff 	mov.w	r3, #4294967295
 80093d0:	e000      	b.n	80093d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	200092c8 	.word	0x200092c8
 80093e0:	0801455c 	.word	0x0801455c
 80093e4:	080145d4 	.word	0x080145d4
 80093e8:	080145ac 	.word	0x080145ac

080093ec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af02      	add	r7, sp, #8
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80093f6:	f000 f871 	bl	80094dc <lwip_init>

  tcpip_init_done = initfunc;
 80093fa:	4a17      	ldr	r2, [pc, #92]	; (8009458 <tcpip_init+0x6c>)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009400:	4a16      	ldr	r2, [pc, #88]	; (800945c <tcpip_init+0x70>)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009406:	2106      	movs	r1, #6
 8009408:	4815      	ldr	r0, [pc, #84]	; (8009460 <tcpip_init+0x74>)
 800940a:	f009 fe1b 	bl	8013044 <sys_mbox_new>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d006      	beq.n	8009422 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009414:	4b13      	ldr	r3, [pc, #76]	; (8009464 <tcpip_init+0x78>)
 8009416:	f240 2261 	movw	r2, #609	; 0x261
 800941a:	4913      	ldr	r1, [pc, #76]	; (8009468 <tcpip_init+0x7c>)
 800941c:	4813      	ldr	r0, [pc, #76]	; (800946c <tcpip_init+0x80>)
 800941e:	f00a f8ff 	bl	8013620 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009422:	4813      	ldr	r0, [pc, #76]	; (8009470 <tcpip_init+0x84>)
 8009424:	f009 fea8 	bl	8013178 <sys_mutex_new>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d006      	beq.n	800943c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800942e:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <tcpip_init+0x78>)
 8009430:	f240 2265 	movw	r2, #613	; 0x265
 8009434:	490f      	ldr	r1, [pc, #60]	; (8009474 <tcpip_init+0x88>)
 8009436:	480d      	ldr	r0, [pc, #52]	; (800946c <tcpip_init+0x80>)
 8009438:	f00a f8f2 	bl	8013620 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800943c:	2300      	movs	r3, #0
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009444:	2200      	movs	r2, #0
 8009446:	490c      	ldr	r1, [pc, #48]	; (8009478 <tcpip_init+0x8c>)
 8009448:	480c      	ldr	r0, [pc, #48]	; (800947c <tcpip_init+0x90>)
 800944a:	f009 fecd 	bl	80131e8 <sys_thread_new>
}
 800944e:	bf00      	nop
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	200092c0 	.word	0x200092c0
 800945c:	200092c4 	.word	0x200092c4
 8009460:	200092c8 	.word	0x200092c8
 8009464:	0801455c 	.word	0x0801455c
 8009468:	080145e4 	.word	0x080145e4
 800946c:	080145ac 	.word	0x080145ac
 8009470:	200092cc 	.word	0x200092cc
 8009474:	08014608 	.word	0x08014608
 8009478:	080091a9 	.word	0x080091a9
 800947c:	0801462c 	.word	0x0801462c

08009480 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800948a:	88fb      	ldrh	r3, [r7, #6]
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	b21a      	sxth	r2, r3
 8009490:	88fb      	ldrh	r3, [r7, #6]
 8009492:	0a1b      	lsrs	r3, r3, #8
 8009494:	b29b      	uxth	r3, r3
 8009496:	b21b      	sxth	r3, r3
 8009498:	4313      	orrs	r3, r2
 800949a:	b21b      	sxth	r3, r3
 800949c:	b29b      	uxth	r3, r3
}
 800949e:	4618      	mov	r0, r3
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	061a      	lsls	r2, r3, #24
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	021b      	lsls	r3, r3, #8
 80094ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094be:	431a      	orrs	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	0a1b      	lsrs	r3, r3, #8
 80094c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	0e1b      	lsrs	r3, r3, #24
 80094ce:	4313      	orrs	r3, r2
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80094e2:	2300      	movs	r3, #0
 80094e4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80094e6:	f009 fe39 	bl	801315c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80094ea:	f000 f8d5 	bl	8009698 <mem_init>
  memp_init();
 80094ee:	f000 fc31 	bl	8009d54 <memp_init>
  pbuf_init();
  netif_init();
 80094f2:	f000 fd3d 	bl	8009f70 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80094f6:	f007 f925 	bl	8010744 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80094fa:	f001 fe4d 	bl	800b198 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80094fe:	f007 f867 	bl	80105d0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009502:	bf00      	nop
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009516:	4b05      	ldr	r3, [pc, #20]	; (800952c <ptr_to_mem+0x20>)
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	88fb      	ldrh	r3, [r7, #6]
 800951c:	4413      	add	r3, r2
}
 800951e:	4618      	mov	r0, r3
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	2000993c 	.word	0x2000993c

08009530 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009538:	4b05      	ldr	r3, [pc, #20]	; (8009550 <mem_to_ptr+0x20>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	b29b      	uxth	r3, r3
}
 8009542:	4618      	mov	r0, r3
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	2000993c 	.word	0x2000993c

08009554 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009554:	b590      	push	{r4, r7, lr}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800955c:	4b45      	ldr	r3, [pc, #276]	; (8009674 <plug_holes+0x120>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	429a      	cmp	r2, r3
 8009564:	d206      	bcs.n	8009574 <plug_holes+0x20>
 8009566:	4b44      	ldr	r3, [pc, #272]	; (8009678 <plug_holes+0x124>)
 8009568:	f240 12df 	movw	r2, #479	; 0x1df
 800956c:	4943      	ldr	r1, [pc, #268]	; (800967c <plug_holes+0x128>)
 800956e:	4844      	ldr	r0, [pc, #272]	; (8009680 <plug_holes+0x12c>)
 8009570:	f00a f856 	bl	8013620 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009574:	4b43      	ldr	r3, [pc, #268]	; (8009684 <plug_holes+0x130>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	429a      	cmp	r2, r3
 800957c:	d306      	bcc.n	800958c <plug_holes+0x38>
 800957e:	4b3e      	ldr	r3, [pc, #248]	; (8009678 <plug_holes+0x124>)
 8009580:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009584:	4940      	ldr	r1, [pc, #256]	; (8009688 <plug_holes+0x134>)
 8009586:	483e      	ldr	r0, [pc, #248]	; (8009680 <plug_holes+0x12c>)
 8009588:	f00a f84a 	bl	8013620 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	791b      	ldrb	r3, [r3, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d006      	beq.n	80095a2 <plug_holes+0x4e>
 8009594:	4b38      	ldr	r3, [pc, #224]	; (8009678 <plug_holes+0x124>)
 8009596:	f240 12e1 	movw	r2, #481	; 0x1e1
 800959a:	493c      	ldr	r1, [pc, #240]	; (800968c <plug_holes+0x138>)
 800959c:	4838      	ldr	r0, [pc, #224]	; (8009680 <plug_holes+0x12c>)
 800959e:	f00a f83f 	bl	8013620 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80095aa:	d906      	bls.n	80095ba <plug_holes+0x66>
 80095ac:	4b32      	ldr	r3, [pc, #200]	; (8009678 <plug_holes+0x124>)
 80095ae:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80095b2:	4937      	ldr	r1, [pc, #220]	; (8009690 <plug_holes+0x13c>)
 80095b4:	4832      	ldr	r0, [pc, #200]	; (8009680 <plug_holes+0x12c>)
 80095b6:	f00a f833 	bl	8013620 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	881b      	ldrh	r3, [r3, #0]
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff ffa4 	bl	800950c <ptr_to_mem>
 80095c4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d024      	beq.n	8009618 <plug_holes+0xc4>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	791b      	ldrb	r3, [r3, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d120      	bne.n	8009618 <plug_holes+0xc4>
 80095d6:	4b2b      	ldr	r3, [pc, #172]	; (8009684 <plug_holes+0x130>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d01b      	beq.n	8009618 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80095e0:	4b2c      	ldr	r3, [pc, #176]	; (8009694 <plug_holes+0x140>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d102      	bne.n	80095f0 <plug_holes+0x9c>
      lfree = mem;
 80095ea:	4a2a      	ldr	r2, [pc, #168]	; (8009694 <plug_holes+0x140>)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	881a      	ldrh	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009600:	d00a      	beq.n	8009618 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff ff80 	bl	800950c <ptr_to_mem>
 800960c:	4604      	mov	r4, r0
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7ff ff8e 	bl	8009530 <mem_to_ptr>
 8009614:	4603      	mov	r3, r0
 8009616:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	885b      	ldrh	r3, [r3, #2]
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff ff75 	bl	800950c <ptr_to_mem>
 8009622:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	429a      	cmp	r2, r3
 800962a:	d01f      	beq.n	800966c <plug_holes+0x118>
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	791b      	ldrb	r3, [r3, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d11b      	bne.n	800966c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009634:	4b17      	ldr	r3, [pc, #92]	; (8009694 <plug_holes+0x140>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	429a      	cmp	r2, r3
 800963c:	d102      	bne.n	8009644 <plug_holes+0xf0>
      lfree = pmem;
 800963e:	4a15      	ldr	r2, [pc, #84]	; (8009694 <plug_holes+0x140>)
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	881a      	ldrh	r2, [r3, #0]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	881b      	ldrh	r3, [r3, #0]
 8009650:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009654:	d00a      	beq.n	800966c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff ff56 	bl	800950c <ptr_to_mem>
 8009660:	4604      	mov	r4, r0
 8009662:	68b8      	ldr	r0, [r7, #8]
 8009664:	f7ff ff64 	bl	8009530 <mem_to_ptr>
 8009668:	4603      	mov	r3, r0
 800966a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800966c:	bf00      	nop
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	bd90      	pop	{r4, r7, pc}
 8009674:	2000993c 	.word	0x2000993c
 8009678:	0801463c 	.word	0x0801463c
 800967c:	0801466c 	.word	0x0801466c
 8009680:	08014684 	.word	0x08014684
 8009684:	20009940 	.word	0x20009940
 8009688:	080146ac 	.word	0x080146ac
 800968c:	080146c8 	.word	0x080146c8
 8009690:	080146e4 	.word	0x080146e4
 8009694:	20009948 	.word	0x20009948

08009698 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800969e:	4b1f      	ldr	r3, [pc, #124]	; (800971c <mem_init+0x84>)
 80096a0:	3303      	adds	r3, #3
 80096a2:	f023 0303 	bic.w	r3, r3, #3
 80096a6:	461a      	mov	r2, r3
 80096a8:	4b1d      	ldr	r3, [pc, #116]	; (8009720 <mem_init+0x88>)
 80096aa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80096ac:	4b1c      	ldr	r3, [pc, #112]	; (8009720 <mem_init+0x88>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80096b8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80096c6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80096ca:	f7ff ff1f 	bl	800950c <ptr_to_mem>
 80096ce:	4603      	mov	r3, r0
 80096d0:	4a14      	ldr	r2, [pc, #80]	; (8009724 <mem_init+0x8c>)
 80096d2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80096d4:	4b13      	ldr	r3, [pc, #76]	; (8009724 <mem_init+0x8c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2201      	movs	r2, #1
 80096da:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80096dc:	4b11      	ldr	r3, [pc, #68]	; (8009724 <mem_init+0x8c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80096e4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80096e6:	4b0f      	ldr	r3, [pc, #60]	; (8009724 <mem_init+0x8c>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80096ee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80096f0:	4b0b      	ldr	r3, [pc, #44]	; (8009720 <mem_init+0x88>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a0c      	ldr	r2, [pc, #48]	; (8009728 <mem_init+0x90>)
 80096f6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80096f8:	480c      	ldr	r0, [pc, #48]	; (800972c <mem_init+0x94>)
 80096fa:	f009 fd3d 	bl	8013178 <sys_mutex_new>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d006      	beq.n	8009712 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009704:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <mem_init+0x98>)
 8009706:	f240 221f 	movw	r2, #543	; 0x21f
 800970a:	490a      	ldr	r1, [pc, #40]	; (8009734 <mem_init+0x9c>)
 800970c:	480a      	ldr	r0, [pc, #40]	; (8009738 <mem_init+0xa0>)
 800970e:	f009 ff87 	bl	8013620 <iprintf>
  }
}
 8009712:	bf00      	nop
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	200092e8 	.word	0x200092e8
 8009720:	2000993c 	.word	0x2000993c
 8009724:	20009940 	.word	0x20009940
 8009728:	20009948 	.word	0x20009948
 800972c:	20009944 	.word	0x20009944
 8009730:	0801463c 	.word	0x0801463c
 8009734:	08014710 	.word	0x08014710
 8009738:	08014684 	.word	0x08014684

0800973c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7ff fef3 	bl	8009530 <mem_to_ptr>
 800974a:	4603      	mov	r3, r0
 800974c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff feda 	bl	800950c <ptr_to_mem>
 8009758:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	885b      	ldrh	r3, [r3, #2]
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff fed4 	bl	800950c <ptr_to_mem>
 8009764:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800976e:	d818      	bhi.n	80097a2 <mem_link_valid+0x66>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	885b      	ldrh	r3, [r3, #2]
 8009774:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009778:	d813      	bhi.n	80097a2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800977e:	8afa      	ldrh	r2, [r7, #22]
 8009780:	429a      	cmp	r2, r3
 8009782:	d004      	beq.n	800978e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	8afa      	ldrh	r2, [r7, #22]
 800978a:	429a      	cmp	r2, r3
 800978c:	d109      	bne.n	80097a2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800978e:	4b08      	ldr	r3, [pc, #32]	; (80097b0 <mem_link_valid+0x74>)
 8009790:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	429a      	cmp	r2, r3
 8009796:	d006      	beq.n	80097a6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	885b      	ldrh	r3, [r3, #2]
 800979c:	8afa      	ldrh	r2, [r7, #22]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d001      	beq.n	80097a6 <mem_link_valid+0x6a>
    return 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	e000      	b.n	80097a8 <mem_link_valid+0x6c>
  }
  return 1;
 80097a6:	2301      	movs	r3, #1
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3718      	adds	r7, #24
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	20009940 	.word	0x20009940

080097b4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b088      	sub	sp, #32
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d070      	beq.n	80098a4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f003 0303 	and.w	r3, r3, #3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00d      	beq.n	80097e8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80097cc:	4b37      	ldr	r3, [pc, #220]	; (80098ac <mem_free+0xf8>)
 80097ce:	f240 2273 	movw	r2, #627	; 0x273
 80097d2:	4937      	ldr	r1, [pc, #220]	; (80098b0 <mem_free+0xfc>)
 80097d4:	4837      	ldr	r0, [pc, #220]	; (80098b4 <mem_free+0x100>)
 80097d6:	f009 ff23 	bl	8013620 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80097da:	f009 fd2b 	bl	8013234 <sys_arch_protect>
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f009 fd35 	bl	8013250 <sys_arch_unprotect>
    return;
 80097e6:	e05e      	b.n	80098a6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3b08      	subs	r3, #8
 80097ec:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80097ee:	4b32      	ldr	r3, [pc, #200]	; (80098b8 <mem_free+0x104>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	69fa      	ldr	r2, [r7, #28]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d306      	bcc.n	8009806 <mem_free+0x52>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f103 020c 	add.w	r2, r3, #12
 80097fe:	4b2f      	ldr	r3, [pc, #188]	; (80098bc <mem_free+0x108>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	429a      	cmp	r2, r3
 8009804:	d90d      	bls.n	8009822 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009806:	4b29      	ldr	r3, [pc, #164]	; (80098ac <mem_free+0xf8>)
 8009808:	f240 227f 	movw	r2, #639	; 0x27f
 800980c:	492c      	ldr	r1, [pc, #176]	; (80098c0 <mem_free+0x10c>)
 800980e:	4829      	ldr	r0, [pc, #164]	; (80098b4 <mem_free+0x100>)
 8009810:	f009 ff06 	bl	8013620 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009814:	f009 fd0e 	bl	8013234 <sys_arch_protect>
 8009818:	6138      	str	r0, [r7, #16]
 800981a:	6938      	ldr	r0, [r7, #16]
 800981c:	f009 fd18 	bl	8013250 <sys_arch_unprotect>
    return;
 8009820:	e041      	b.n	80098a6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009822:	4828      	ldr	r0, [pc, #160]	; (80098c4 <mem_free+0x110>)
 8009824:	f009 fcc4 	bl	80131b0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	791b      	ldrb	r3, [r3, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d110      	bne.n	8009852 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009830:	4b1e      	ldr	r3, [pc, #120]	; (80098ac <mem_free+0xf8>)
 8009832:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009836:	4924      	ldr	r1, [pc, #144]	; (80098c8 <mem_free+0x114>)
 8009838:	481e      	ldr	r0, [pc, #120]	; (80098b4 <mem_free+0x100>)
 800983a:	f009 fef1 	bl	8013620 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800983e:	4821      	ldr	r0, [pc, #132]	; (80098c4 <mem_free+0x110>)
 8009840:	f009 fcc5 	bl	80131ce <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009844:	f009 fcf6 	bl	8013234 <sys_arch_protect>
 8009848:	6178      	str	r0, [r7, #20]
 800984a:	6978      	ldr	r0, [r7, #20]
 800984c:	f009 fd00 	bl	8013250 <sys_arch_unprotect>
    return;
 8009850:	e029      	b.n	80098a6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8009852:	69f8      	ldr	r0, [r7, #28]
 8009854:	f7ff ff72 	bl	800973c <mem_link_valid>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d110      	bne.n	8009880 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800985e:	4b13      	ldr	r3, [pc, #76]	; (80098ac <mem_free+0xf8>)
 8009860:	f240 2295 	movw	r2, #661	; 0x295
 8009864:	4919      	ldr	r1, [pc, #100]	; (80098cc <mem_free+0x118>)
 8009866:	4813      	ldr	r0, [pc, #76]	; (80098b4 <mem_free+0x100>)
 8009868:	f009 feda 	bl	8013620 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800986c:	4815      	ldr	r0, [pc, #84]	; (80098c4 <mem_free+0x110>)
 800986e:	f009 fcae 	bl	80131ce <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009872:	f009 fcdf 	bl	8013234 <sys_arch_protect>
 8009876:	61b8      	str	r0, [r7, #24]
 8009878:	69b8      	ldr	r0, [r7, #24]
 800987a:	f009 fce9 	bl	8013250 <sys_arch_unprotect>
    return;
 800987e:	e012      	b.n	80098a6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	2200      	movs	r2, #0
 8009884:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009886:	4b12      	ldr	r3, [pc, #72]	; (80098d0 <mem_free+0x11c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	69fa      	ldr	r2, [r7, #28]
 800988c:	429a      	cmp	r2, r3
 800988e:	d202      	bcs.n	8009896 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009890:	4a0f      	ldr	r2, [pc, #60]	; (80098d0 <mem_free+0x11c>)
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009896:	69f8      	ldr	r0, [r7, #28]
 8009898:	f7ff fe5c 	bl	8009554 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800989c:	4809      	ldr	r0, [pc, #36]	; (80098c4 <mem_free+0x110>)
 800989e:	f009 fc96 	bl	80131ce <sys_mutex_unlock>
 80098a2:	e000      	b.n	80098a6 <mem_free+0xf2>
    return;
 80098a4:	bf00      	nop
}
 80098a6:	3720      	adds	r7, #32
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	0801463c 	.word	0x0801463c
 80098b0:	0801472c 	.word	0x0801472c
 80098b4:	08014684 	.word	0x08014684
 80098b8:	2000993c 	.word	0x2000993c
 80098bc:	20009940 	.word	0x20009940
 80098c0:	08014750 	.word	0x08014750
 80098c4:	20009944 	.word	0x20009944
 80098c8:	0801476c 	.word	0x0801476c
 80098cc:	08014794 	.word	0x08014794
 80098d0:	20009948 	.word	0x20009948

080098d4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80098e0:	887b      	ldrh	r3, [r7, #2]
 80098e2:	3303      	adds	r3, #3
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	f023 0303 	bic.w	r3, r3, #3
 80098ea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80098ec:	8bfb      	ldrh	r3, [r7, #30]
 80098ee:	2b0b      	cmp	r3, #11
 80098f0:	d801      	bhi.n	80098f6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80098f2:	230c      	movs	r3, #12
 80098f4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80098f6:	8bfb      	ldrh	r3, [r7, #30]
 80098f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80098fc:	d803      	bhi.n	8009906 <mem_trim+0x32>
 80098fe:	8bfa      	ldrh	r2, [r7, #30]
 8009900:	887b      	ldrh	r3, [r7, #2]
 8009902:	429a      	cmp	r2, r3
 8009904:	d201      	bcs.n	800990a <mem_trim+0x36>
    return NULL;
 8009906:	2300      	movs	r3, #0
 8009908:	e0d8      	b.n	8009abc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800990a:	4b6e      	ldr	r3, [pc, #440]	; (8009ac4 <mem_trim+0x1f0>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	429a      	cmp	r2, r3
 8009912:	d304      	bcc.n	800991e <mem_trim+0x4a>
 8009914:	4b6c      	ldr	r3, [pc, #432]	; (8009ac8 <mem_trim+0x1f4>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	429a      	cmp	r2, r3
 800991c:	d306      	bcc.n	800992c <mem_trim+0x58>
 800991e:	4b6b      	ldr	r3, [pc, #428]	; (8009acc <mem_trim+0x1f8>)
 8009920:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009924:	496a      	ldr	r1, [pc, #424]	; (8009ad0 <mem_trim+0x1fc>)
 8009926:	486b      	ldr	r0, [pc, #428]	; (8009ad4 <mem_trim+0x200>)
 8009928:	f009 fe7a 	bl	8013620 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800992c:	4b65      	ldr	r3, [pc, #404]	; (8009ac4 <mem_trim+0x1f0>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	429a      	cmp	r2, r3
 8009934:	d304      	bcc.n	8009940 <mem_trim+0x6c>
 8009936:	4b64      	ldr	r3, [pc, #400]	; (8009ac8 <mem_trim+0x1f4>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	429a      	cmp	r2, r3
 800993e:	d307      	bcc.n	8009950 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009940:	f009 fc78 	bl	8013234 <sys_arch_protect>
 8009944:	60b8      	str	r0, [r7, #8]
 8009946:	68b8      	ldr	r0, [r7, #8]
 8009948:	f009 fc82 	bl	8013250 <sys_arch_unprotect>
    return rmem;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	e0b5      	b.n	8009abc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	3b08      	subs	r3, #8
 8009954:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009956:	69b8      	ldr	r0, [r7, #24]
 8009958:	f7ff fdea 	bl	8009530 <mem_to_ptr>
 800995c:	4603      	mov	r3, r0
 800995e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	881a      	ldrh	r2, [r3, #0]
 8009964:	8afb      	ldrh	r3, [r7, #22]
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	b29b      	uxth	r3, r3
 800996a:	3b08      	subs	r3, #8
 800996c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800996e:	8bfa      	ldrh	r2, [r7, #30]
 8009970:	8abb      	ldrh	r3, [r7, #20]
 8009972:	429a      	cmp	r2, r3
 8009974:	d906      	bls.n	8009984 <mem_trim+0xb0>
 8009976:	4b55      	ldr	r3, [pc, #340]	; (8009acc <mem_trim+0x1f8>)
 8009978:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800997c:	4956      	ldr	r1, [pc, #344]	; (8009ad8 <mem_trim+0x204>)
 800997e:	4855      	ldr	r0, [pc, #340]	; (8009ad4 <mem_trim+0x200>)
 8009980:	f009 fe4e 	bl	8013620 <iprintf>
  if (newsize > size) {
 8009984:	8bfa      	ldrh	r2, [r7, #30]
 8009986:	8abb      	ldrh	r3, [r7, #20]
 8009988:	429a      	cmp	r2, r3
 800998a:	d901      	bls.n	8009990 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800998c:	2300      	movs	r3, #0
 800998e:	e095      	b.n	8009abc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009990:	8bfa      	ldrh	r2, [r7, #30]
 8009992:	8abb      	ldrh	r3, [r7, #20]
 8009994:	429a      	cmp	r2, r3
 8009996:	d101      	bne.n	800999c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	e08f      	b.n	8009abc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800999c:	484f      	ldr	r0, [pc, #316]	; (8009adc <mem_trim+0x208>)
 800999e:	f009 fc07 	bl	80131b0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff fdb0 	bl	800950c <ptr_to_mem>
 80099ac:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	791b      	ldrb	r3, [r3, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d13f      	bne.n	8009a36 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80099be:	d106      	bne.n	80099ce <mem_trim+0xfa>
 80099c0:	4b42      	ldr	r3, [pc, #264]	; (8009acc <mem_trim+0x1f8>)
 80099c2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80099c6:	4946      	ldr	r1, [pc, #280]	; (8009ae0 <mem_trim+0x20c>)
 80099c8:	4842      	ldr	r0, [pc, #264]	; (8009ad4 <mem_trim+0x200>)
 80099ca:	f009 fe29 	bl	8013620 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80099d4:	8afa      	ldrh	r2, [r7, #22]
 80099d6:	8bfb      	ldrh	r3, [r7, #30]
 80099d8:	4413      	add	r3, r2
 80099da:	b29b      	uxth	r3, r3
 80099dc:	3308      	adds	r3, #8
 80099de:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80099e0:	4b40      	ldr	r3, [pc, #256]	; (8009ae4 <mem_trim+0x210>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d106      	bne.n	80099f8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80099ea:	89fb      	ldrh	r3, [r7, #14]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff fd8d 	bl	800950c <ptr_to_mem>
 80099f2:	4603      	mov	r3, r0
 80099f4:	4a3b      	ldr	r2, [pc, #236]	; (8009ae4 <mem_trim+0x210>)
 80099f6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80099f8:	89fb      	ldrh	r3, [r7, #14]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7ff fd86 	bl	800950c <ptr_to_mem>
 8009a00:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	2200      	movs	r2, #0
 8009a06:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	89ba      	ldrh	r2, [r7, #12]
 8009a0c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	8afa      	ldrh	r2, [r7, #22]
 8009a12:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	89fa      	ldrh	r2, [r7, #14]
 8009a18:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	881b      	ldrh	r3, [r3, #0]
 8009a1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a22:	d047      	beq.n	8009ab4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff fd6f 	bl	800950c <ptr_to_mem>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	89fb      	ldrh	r3, [r7, #14]
 8009a32:	8053      	strh	r3, [r2, #2]
 8009a34:	e03e      	b.n	8009ab4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009a36:	8bfb      	ldrh	r3, [r7, #30]
 8009a38:	f103 0214 	add.w	r2, r3, #20
 8009a3c:	8abb      	ldrh	r3, [r7, #20]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d838      	bhi.n	8009ab4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009a42:	8afa      	ldrh	r2, [r7, #22]
 8009a44:	8bfb      	ldrh	r3, [r7, #30]
 8009a46:	4413      	add	r3, r2
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	3308      	adds	r3, #8
 8009a4c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	881b      	ldrh	r3, [r3, #0]
 8009a52:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a56:	d106      	bne.n	8009a66 <mem_trim+0x192>
 8009a58:	4b1c      	ldr	r3, [pc, #112]	; (8009acc <mem_trim+0x1f8>)
 8009a5a:	f240 3216 	movw	r2, #790	; 0x316
 8009a5e:	4920      	ldr	r1, [pc, #128]	; (8009ae0 <mem_trim+0x20c>)
 8009a60:	481c      	ldr	r0, [pc, #112]	; (8009ad4 <mem_trim+0x200>)
 8009a62:	f009 fddd 	bl	8013620 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009a66:	89fb      	ldrh	r3, [r7, #14]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7ff fd4f 	bl	800950c <ptr_to_mem>
 8009a6e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009a70:	4b1c      	ldr	r3, [pc, #112]	; (8009ae4 <mem_trim+0x210>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d202      	bcs.n	8009a80 <mem_trim+0x1ac>
      lfree = mem2;
 8009a7a:	4a1a      	ldr	r2, [pc, #104]	; (8009ae4 <mem_trim+0x210>)
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	2200      	movs	r2, #0
 8009a84:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	881a      	ldrh	r2, [r3, #0]
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	8afa      	ldrh	r2, [r7, #22]
 8009a92:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	89fa      	ldrh	r2, [r7, #14]
 8009a98:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009aa2:	d007      	beq.n	8009ab4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	881b      	ldrh	r3, [r3, #0]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7ff fd2f 	bl	800950c <ptr_to_mem>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	89fb      	ldrh	r3, [r7, #14]
 8009ab2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009ab4:	4809      	ldr	r0, [pc, #36]	; (8009adc <mem_trim+0x208>)
 8009ab6:	f009 fb8a 	bl	80131ce <sys_mutex_unlock>
  return rmem;
 8009aba:	687b      	ldr	r3, [r7, #4]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3720      	adds	r7, #32
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	2000993c 	.word	0x2000993c
 8009ac8:	20009940 	.word	0x20009940
 8009acc:	0801463c 	.word	0x0801463c
 8009ad0:	080147c8 	.word	0x080147c8
 8009ad4:	08014684 	.word	0x08014684
 8009ad8:	080147e0 	.word	0x080147e0
 8009adc:	20009944 	.word	0x20009944
 8009ae0:	08014800 	.word	0x08014800
 8009ae4:	20009948 	.word	0x20009948

08009ae8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b088      	sub	sp, #32
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4603      	mov	r3, r0
 8009af0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009af2:	88fb      	ldrh	r3, [r7, #6]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d101      	bne.n	8009afc <mem_malloc+0x14>
    return NULL;
 8009af8:	2300      	movs	r3, #0
 8009afa:	e0e2      	b.n	8009cc2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009afc:	88fb      	ldrh	r3, [r7, #6]
 8009afe:	3303      	adds	r3, #3
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	f023 0303 	bic.w	r3, r3, #3
 8009b06:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009b08:	8bbb      	ldrh	r3, [r7, #28]
 8009b0a:	2b0b      	cmp	r3, #11
 8009b0c:	d801      	bhi.n	8009b12 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009b0e:	230c      	movs	r3, #12
 8009b10:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009b12:	8bbb      	ldrh	r3, [r7, #28]
 8009b14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b18:	d803      	bhi.n	8009b22 <mem_malloc+0x3a>
 8009b1a:	8bba      	ldrh	r2, [r7, #28]
 8009b1c:	88fb      	ldrh	r3, [r7, #6]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d201      	bcs.n	8009b26 <mem_malloc+0x3e>
    return NULL;
 8009b22:	2300      	movs	r3, #0
 8009b24:	e0cd      	b.n	8009cc2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009b26:	4869      	ldr	r0, [pc, #420]	; (8009ccc <mem_malloc+0x1e4>)
 8009b28:	f009 fb42 	bl	80131b0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009b2c:	4b68      	ldr	r3, [pc, #416]	; (8009cd0 <mem_malloc+0x1e8>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7ff fcfd 	bl	8009530 <mem_to_ptr>
 8009b36:	4603      	mov	r3, r0
 8009b38:	83fb      	strh	r3, [r7, #30]
 8009b3a:	e0b7      	b.n	8009cac <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009b3c:	8bfb      	ldrh	r3, [r7, #30]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7ff fce4 	bl	800950c <ptr_to_mem>
 8009b44:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	791b      	ldrb	r3, [r3, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f040 80a7 	bne.w	8009c9e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	461a      	mov	r2, r3
 8009b56:	8bfb      	ldrh	r3, [r7, #30]
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	f1a3 0208 	sub.w	r2, r3, #8
 8009b5e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009b60:	429a      	cmp	r2, r3
 8009b62:	f0c0 809c 	bcc.w	8009c9e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	881b      	ldrh	r3, [r3, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	8bfb      	ldrh	r3, [r7, #30]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	f1a3 0208 	sub.w	r2, r3, #8
 8009b74:	8bbb      	ldrh	r3, [r7, #28]
 8009b76:	3314      	adds	r3, #20
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d333      	bcc.n	8009be4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009b7c:	8bfa      	ldrh	r2, [r7, #30]
 8009b7e:	8bbb      	ldrh	r3, [r7, #28]
 8009b80:	4413      	add	r3, r2
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	3308      	adds	r3, #8
 8009b86:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009b88:	8a7b      	ldrh	r3, [r7, #18]
 8009b8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b8e:	d106      	bne.n	8009b9e <mem_malloc+0xb6>
 8009b90:	4b50      	ldr	r3, [pc, #320]	; (8009cd4 <mem_malloc+0x1ec>)
 8009b92:	f240 3287 	movw	r2, #903	; 0x387
 8009b96:	4950      	ldr	r1, [pc, #320]	; (8009cd8 <mem_malloc+0x1f0>)
 8009b98:	4850      	ldr	r0, [pc, #320]	; (8009cdc <mem_malloc+0x1f4>)
 8009b9a:	f009 fd41 	bl	8013620 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009b9e:	8a7b      	ldrh	r3, [r7, #18]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7ff fcb3 	bl	800950c <ptr_to_mem>
 8009ba6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	881a      	ldrh	r2, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8bfa      	ldrh	r2, [r7, #30]
 8009bba:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	8a7a      	ldrh	r2, [r7, #18]
 8009bc0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009bd0:	d00b      	beq.n	8009bea <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7ff fc98 	bl	800950c <ptr_to_mem>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	8a7b      	ldrh	r3, [r7, #18]
 8009be0:	8053      	strh	r3, [r2, #2]
 8009be2:	e002      	b.n	8009bea <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	2201      	movs	r2, #1
 8009be8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009bea:	4b39      	ldr	r3, [pc, #228]	; (8009cd0 <mem_malloc+0x1e8>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d127      	bne.n	8009c44 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8009bf4:	4b36      	ldr	r3, [pc, #216]	; (8009cd0 <mem_malloc+0x1e8>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009bfa:	e005      	b.n	8009c08 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	881b      	ldrh	r3, [r3, #0]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7ff fc83 	bl	800950c <ptr_to_mem>
 8009c06:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	791b      	ldrb	r3, [r3, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d004      	beq.n	8009c1a <mem_malloc+0x132>
 8009c10:	4b33      	ldr	r3, [pc, #204]	; (8009ce0 <mem_malloc+0x1f8>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d1f0      	bne.n	8009bfc <mem_malloc+0x114>
          }
          lfree = cur;
 8009c1a:	4a2d      	ldr	r2, [pc, #180]	; (8009cd0 <mem_malloc+0x1e8>)
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009c20:	4b2b      	ldr	r3, [pc, #172]	; (8009cd0 <mem_malloc+0x1e8>)
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	4b2e      	ldr	r3, [pc, #184]	; (8009ce0 <mem_malloc+0x1f8>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d00b      	beq.n	8009c44 <mem_malloc+0x15c>
 8009c2c:	4b28      	ldr	r3, [pc, #160]	; (8009cd0 <mem_malloc+0x1e8>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	791b      	ldrb	r3, [r3, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d006      	beq.n	8009c44 <mem_malloc+0x15c>
 8009c36:	4b27      	ldr	r3, [pc, #156]	; (8009cd4 <mem_malloc+0x1ec>)
 8009c38:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009c3c:	4929      	ldr	r1, [pc, #164]	; (8009ce4 <mem_malloc+0x1fc>)
 8009c3e:	4827      	ldr	r0, [pc, #156]	; (8009cdc <mem_malloc+0x1f4>)
 8009c40:	f009 fcee 	bl	8013620 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009c44:	4821      	ldr	r0, [pc, #132]	; (8009ccc <mem_malloc+0x1e4>)
 8009c46:	f009 fac2 	bl	80131ce <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009c4a:	8bba      	ldrh	r2, [r7, #28]
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	4413      	add	r3, r2
 8009c50:	3308      	adds	r3, #8
 8009c52:	4a23      	ldr	r2, [pc, #140]	; (8009ce0 <mem_malloc+0x1f8>)
 8009c54:	6812      	ldr	r2, [r2, #0]
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d906      	bls.n	8009c68 <mem_malloc+0x180>
 8009c5a:	4b1e      	ldr	r3, [pc, #120]	; (8009cd4 <mem_malloc+0x1ec>)
 8009c5c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009c60:	4921      	ldr	r1, [pc, #132]	; (8009ce8 <mem_malloc+0x200>)
 8009c62:	481e      	ldr	r0, [pc, #120]	; (8009cdc <mem_malloc+0x1f4>)
 8009c64:	f009 fcdc 	bl	8013620 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	f003 0303 	and.w	r3, r3, #3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d006      	beq.n	8009c80 <mem_malloc+0x198>
 8009c72:	4b18      	ldr	r3, [pc, #96]	; (8009cd4 <mem_malloc+0x1ec>)
 8009c74:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009c78:	491c      	ldr	r1, [pc, #112]	; (8009cec <mem_malloc+0x204>)
 8009c7a:	4818      	ldr	r0, [pc, #96]	; (8009cdc <mem_malloc+0x1f4>)
 8009c7c:	f009 fcd0 	bl	8013620 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f003 0303 	and.w	r3, r3, #3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d006      	beq.n	8009c98 <mem_malloc+0x1b0>
 8009c8a:	4b12      	ldr	r3, [pc, #72]	; (8009cd4 <mem_malloc+0x1ec>)
 8009c8c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009c90:	4917      	ldr	r1, [pc, #92]	; (8009cf0 <mem_malloc+0x208>)
 8009c92:	4812      	ldr	r0, [pc, #72]	; (8009cdc <mem_malloc+0x1f4>)
 8009c94:	f009 fcc4 	bl	8013620 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	3308      	adds	r3, #8
 8009c9c:	e011      	b.n	8009cc2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8009c9e:	8bfb      	ldrh	r3, [r7, #30]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7ff fc33 	bl	800950c <ptr_to_mem>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	881b      	ldrh	r3, [r3, #0]
 8009caa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009cac:	8bfa      	ldrh	r2, [r7, #30]
 8009cae:	8bbb      	ldrh	r3, [r7, #28]
 8009cb0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	f4ff af41 	bcc.w	8009b3c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009cba:	4804      	ldr	r0, [pc, #16]	; (8009ccc <mem_malloc+0x1e4>)
 8009cbc:	f009 fa87 	bl	80131ce <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3720      	adds	r7, #32
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20009944 	.word	0x20009944
 8009cd0:	20009948 	.word	0x20009948
 8009cd4:	0801463c 	.word	0x0801463c
 8009cd8:	08014800 	.word	0x08014800
 8009cdc:	08014684 	.word	0x08014684
 8009ce0:	20009940 	.word	0x20009940
 8009ce4:	08014814 	.word	0x08014814
 8009ce8:	08014830 	.word	0x08014830
 8009cec:	08014860 	.word	0x08014860
 8009cf0:	08014890 	.word	0x08014890

08009cf4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	3303      	adds	r3, #3
 8009d0a:	f023 0303 	bic.w	r3, r3, #3
 8009d0e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009d10:	2300      	movs	r3, #0
 8009d12:	60fb      	str	r3, [r7, #12]
 8009d14:	e011      	b.n	8009d3a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	4413      	add	r3, r2
 8009d32:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	3301      	adds	r3, #1
 8009d38:	60fb      	str	r3, [r7, #12]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	885b      	ldrh	r3, [r3, #2]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4293      	cmp	r3, r2
 8009d44:	dbe7      	blt.n	8009d16 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009d46:	bf00      	nop
 8009d48:	bf00      	nop
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	80fb      	strh	r3, [r7, #6]
 8009d5e:	e009      	b.n	8009d74 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009d60:	88fb      	ldrh	r3, [r7, #6]
 8009d62:	4a08      	ldr	r2, [pc, #32]	; (8009d84 <memp_init+0x30>)
 8009d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7ff ffc3 	bl	8009cf4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009d6e:	88fb      	ldrh	r3, [r7, #6]
 8009d70:	3301      	adds	r3, #1
 8009d72:	80fb      	strh	r3, [r7, #6]
 8009d74:	88fb      	ldrh	r3, [r7, #6]
 8009d76:	2b0c      	cmp	r3, #12
 8009d78:	d9f2      	bls.n	8009d60 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009d7a:	bf00      	nop
 8009d7c:	bf00      	nop
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	080170a4 	.word	0x080170a4

08009d88 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009d90:	f009 fa50 	bl	8013234 <sys_arch_protect>
 8009d94:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d015      	beq.n	8009dd0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	6812      	ldr	r2, [r2, #0]
 8009dac:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	f003 0303 	and.w	r3, r3, #3
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d006      	beq.n	8009dc6 <do_memp_malloc_pool+0x3e>
 8009db8:	4b09      	ldr	r3, [pc, #36]	; (8009de0 <do_memp_malloc_pool+0x58>)
 8009dba:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009dbe:	4909      	ldr	r1, [pc, #36]	; (8009de4 <do_memp_malloc_pool+0x5c>)
 8009dc0:	4809      	ldr	r0, [pc, #36]	; (8009de8 <do_memp_malloc_pool+0x60>)
 8009dc2:	f009 fc2d 	bl	8013620 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f009 fa42 	bl	8013250 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	e003      	b.n	8009dd8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f009 fa3d 	bl	8013250 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	080148b4 	.word	0x080148b4
 8009de4:	080148e4 	.word	0x080148e4
 8009de8:	08014908 	.word	0x08014908

08009dec <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d106      	bne.n	8009e08 <memp_malloc_pool+0x1c>
 8009dfa:	4b0a      	ldr	r3, [pc, #40]	; (8009e24 <memp_malloc_pool+0x38>)
 8009dfc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009e00:	4909      	ldr	r1, [pc, #36]	; (8009e28 <memp_malloc_pool+0x3c>)
 8009e02:	480a      	ldr	r0, [pc, #40]	; (8009e2c <memp_malloc_pool+0x40>)
 8009e04:	f009 fc0c 	bl	8013620 <iprintf>
  if (desc == NULL) {
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <memp_malloc_pool+0x26>
    return NULL;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	e003      	b.n	8009e1a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7ff ffb8 	bl	8009d88 <do_memp_malloc_pool>
 8009e18:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	080148b4 	.word	0x080148b4
 8009e28:	08014930 	.word	0x08014930
 8009e2c:	08014908 	.word	0x08014908

08009e30 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	4603      	mov	r3, r0
 8009e38:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009e3a:	79fb      	ldrb	r3, [r7, #7]
 8009e3c:	2b0c      	cmp	r3, #12
 8009e3e:	d908      	bls.n	8009e52 <memp_malloc+0x22>
 8009e40:	4b0a      	ldr	r3, [pc, #40]	; (8009e6c <memp_malloc+0x3c>)
 8009e42:	f240 1257 	movw	r2, #343	; 0x157
 8009e46:	490a      	ldr	r1, [pc, #40]	; (8009e70 <memp_malloc+0x40>)
 8009e48:	480a      	ldr	r0, [pc, #40]	; (8009e74 <memp_malloc+0x44>)
 8009e4a:	f009 fbe9 	bl	8013620 <iprintf>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e008      	b.n	8009e64 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009e52:	79fb      	ldrb	r3, [r7, #7]
 8009e54:	4a08      	ldr	r2, [pc, #32]	; (8009e78 <memp_malloc+0x48>)
 8009e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7ff ff94 	bl	8009d88 <do_memp_malloc_pool>
 8009e60:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009e62:	68fb      	ldr	r3, [r7, #12]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	080148b4 	.word	0x080148b4
 8009e70:	08014944 	.word	0x08014944
 8009e74:	08014908 	.word	0x08014908
 8009e78:	080170a4 	.word	0x080170a4

08009e7c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	f003 0303 	and.w	r3, r3, #3
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d006      	beq.n	8009e9e <do_memp_free_pool+0x22>
 8009e90:	4b0d      	ldr	r3, [pc, #52]	; (8009ec8 <do_memp_free_pool+0x4c>)
 8009e92:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009e96:	490d      	ldr	r1, [pc, #52]	; (8009ecc <do_memp_free_pool+0x50>)
 8009e98:	480d      	ldr	r0, [pc, #52]	; (8009ed0 <do_memp_free_pool+0x54>)
 8009e9a:	f009 fbc1 	bl	8013620 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009ea2:	f009 f9c7 	bl	8013234 <sys_arch_protect>
 8009ea6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8009eba:	68b8      	ldr	r0, [r7, #8]
 8009ebc:	f009 f9c8 	bl	8013250 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009ec0:	bf00      	nop
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	080148b4 	.word	0x080148b4
 8009ecc:	08014964 	.word	0x08014964
 8009ed0:	08014908 	.word	0x08014908

08009ed4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d106      	bne.n	8009ef2 <memp_free_pool+0x1e>
 8009ee4:	4b0a      	ldr	r3, [pc, #40]	; (8009f10 <memp_free_pool+0x3c>)
 8009ee6:	f240 1295 	movw	r2, #405	; 0x195
 8009eea:	490a      	ldr	r1, [pc, #40]	; (8009f14 <memp_free_pool+0x40>)
 8009eec:	480a      	ldr	r0, [pc, #40]	; (8009f18 <memp_free_pool+0x44>)
 8009eee:	f009 fb97 	bl	8013620 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d007      	beq.n	8009f08 <memp_free_pool+0x34>
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d004      	beq.n	8009f08 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f7ff ffbb 	bl	8009e7c <do_memp_free_pool>
 8009f06:	e000      	b.n	8009f0a <memp_free_pool+0x36>
    return;
 8009f08:	bf00      	nop
}
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	080148b4 	.word	0x080148b4
 8009f14:	08014930 	.word	0x08014930
 8009f18:	08014908 	.word	0x08014908

08009f1c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	4603      	mov	r3, r0
 8009f24:	6039      	str	r1, [r7, #0]
 8009f26:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009f28:	79fb      	ldrb	r3, [r7, #7]
 8009f2a:	2b0c      	cmp	r3, #12
 8009f2c:	d907      	bls.n	8009f3e <memp_free+0x22>
 8009f2e:	4b0c      	ldr	r3, [pc, #48]	; (8009f60 <memp_free+0x44>)
 8009f30:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009f34:	490b      	ldr	r1, [pc, #44]	; (8009f64 <memp_free+0x48>)
 8009f36:	480c      	ldr	r0, [pc, #48]	; (8009f68 <memp_free+0x4c>)
 8009f38:	f009 fb72 	bl	8013620 <iprintf>
 8009f3c:	e00c      	b.n	8009f58 <memp_free+0x3c>

  if (mem == NULL) {
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d008      	beq.n	8009f56 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009f44:	79fb      	ldrb	r3, [r7, #7]
 8009f46:	4a09      	ldr	r2, [pc, #36]	; (8009f6c <memp_free+0x50>)
 8009f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7ff ff94 	bl	8009e7c <do_memp_free_pool>
 8009f54:	e000      	b.n	8009f58 <memp_free+0x3c>
    return;
 8009f56:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	080148b4 	.word	0x080148b4
 8009f64:	08014984 	.word	0x08014984
 8009f68:	08014908 	.word	0x08014908
 8009f6c:	080170a4 	.word	0x080170a4

08009f70 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009f70:	b480      	push	{r7}
 8009f72:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009f74:	bf00      	nop
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
	...

08009f80 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
 8009f8c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d108      	bne.n	8009fa6 <netif_add+0x26>
 8009f94:	4b57      	ldr	r3, [pc, #348]	; (800a0f4 <netif_add+0x174>)
 8009f96:	f240 1227 	movw	r2, #295	; 0x127
 8009f9a:	4957      	ldr	r1, [pc, #348]	; (800a0f8 <netif_add+0x178>)
 8009f9c:	4857      	ldr	r0, [pc, #348]	; (800a0fc <netif_add+0x17c>)
 8009f9e:	f009 fb3f 	bl	8013620 <iprintf>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	e0a2      	b.n	800a0ec <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d108      	bne.n	8009fbe <netif_add+0x3e>
 8009fac:	4b51      	ldr	r3, [pc, #324]	; (800a0f4 <netif_add+0x174>)
 8009fae:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009fb2:	4953      	ldr	r1, [pc, #332]	; (800a100 <netif_add+0x180>)
 8009fb4:	4851      	ldr	r0, [pc, #324]	; (800a0fc <netif_add+0x17c>)
 8009fb6:	f009 fb33 	bl	8013620 <iprintf>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	e096      	b.n	800a0ec <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d101      	bne.n	8009fc8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009fc4:	4b4f      	ldr	r3, [pc, #316]	; (800a104 <netif_add+0x184>)
 8009fc6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009fce:	4b4d      	ldr	r3, [pc, #308]	; (800a104 <netif_add+0x184>)
 8009fd0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009fd8:	4b4a      	ldr	r3, [pc, #296]	; (800a104 <netif_add+0x184>)
 8009fda:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	4a45      	ldr	r2, [pc, #276]	; (800a108 <netif_add+0x188>)
 8009ff2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2200      	movs	r2, #0
 800a006:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6a3a      	ldr	r2, [r7, #32]
 800a00c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a00e:	4b3f      	ldr	r3, [pc, #252]	; (800a10c <netif_add+0x18c>)
 800a010:	781a      	ldrb	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a01c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	68b9      	ldr	r1, [r7, #8]
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f000 f913 	bl	800a250 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	4798      	blx	r3
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <netif_add+0xba>
    return NULL;
 800a036:	2300      	movs	r3, #0
 800a038:	e058      	b.n	800a0ec <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a040:	2bff      	cmp	r3, #255	; 0xff
 800a042:	d103      	bne.n	800a04c <netif_add+0xcc>
        netif->num = 0;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a04c:	2300      	movs	r3, #0
 800a04e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a050:	4b2f      	ldr	r3, [pc, #188]	; (800a110 <netif_add+0x190>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	617b      	str	r3, [r7, #20]
 800a056:	e02b      	b.n	800a0b0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d106      	bne.n	800a06e <netif_add+0xee>
 800a060:	4b24      	ldr	r3, [pc, #144]	; (800a0f4 <netif_add+0x174>)
 800a062:	f240 128b 	movw	r2, #395	; 0x18b
 800a066:	492b      	ldr	r1, [pc, #172]	; (800a114 <netif_add+0x194>)
 800a068:	4824      	ldr	r0, [pc, #144]	; (800a0fc <netif_add+0x17c>)
 800a06a:	f009 fad9 	bl	8013620 <iprintf>
        num_netifs++;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	3301      	adds	r3, #1
 800a072:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	2bff      	cmp	r3, #255	; 0xff
 800a078:	dd06      	ble.n	800a088 <netif_add+0x108>
 800a07a:	4b1e      	ldr	r3, [pc, #120]	; (800a0f4 <netif_add+0x174>)
 800a07c:	f240 128d 	movw	r2, #397	; 0x18d
 800a080:	4925      	ldr	r1, [pc, #148]	; (800a118 <netif_add+0x198>)
 800a082:	481e      	ldr	r0, [pc, #120]	; (800a0fc <netif_add+0x17c>)
 800a084:	f009 facc 	bl	8013620 <iprintf>
        if (netif2->num == netif->num) {
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a094:	429a      	cmp	r2, r3
 800a096:	d108      	bne.n	800a0aa <netif_add+0x12a>
          netif->num++;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a09e:	3301      	adds	r3, #1
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800a0a8:	e005      	b.n	800a0b6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	617b      	str	r3, [r7, #20]
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1d0      	bne.n	800a058 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1be      	bne.n	800a03a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0c2:	2bfe      	cmp	r3, #254	; 0xfe
 800a0c4:	d103      	bne.n	800a0ce <netif_add+0x14e>
    netif_num = 0;
 800a0c6:	4b11      	ldr	r3, [pc, #68]	; (800a10c <netif_add+0x18c>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	701a      	strb	r2, [r3, #0]
 800a0cc:	e006      	b.n	800a0dc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	; (800a10c <netif_add+0x18c>)
 800a0da:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a0dc:	4b0c      	ldr	r3, [pc, #48]	; (800a110 <netif_add+0x190>)
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a0e4:	4a0a      	ldr	r2, [pc, #40]	; (800a110 <netif_add+0x190>)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3718      	adds	r7, #24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	080149a0 	.word	0x080149a0
 800a0f8:	08014a34 	.word	0x08014a34
 800a0fc:	080149f0 	.word	0x080149f0
 800a100:	08014a50 	.word	0x08014a50
 800a104:	08017118 	.word	0x08017118
 800a108:	0800a52b 	.word	0x0800a52b
 800a10c:	2000ca20 	.word	0x2000ca20
 800a110:	2000ca18 	.word	0x2000ca18
 800a114:	08014a74 	.word	0x08014a74
 800a118:	08014a88 	.word	0x08014a88

0800a11c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a126:	6839      	ldr	r1, [r7, #0]
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f002 fb7d 	bl	800c828 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f006 fc91 	bl	8010a58 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a136:	bf00      	nop
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
	...

0800a140 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d106      	bne.n	800a160 <netif_do_set_ipaddr+0x20>
 800a152:	4b1d      	ldr	r3, [pc, #116]	; (800a1c8 <netif_do_set_ipaddr+0x88>)
 800a154:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a158:	491c      	ldr	r1, [pc, #112]	; (800a1cc <netif_do_set_ipaddr+0x8c>)
 800a15a:	481d      	ldr	r0, [pc, #116]	; (800a1d0 <netif_do_set_ipaddr+0x90>)
 800a15c:	f009 fa60 	bl	8013620 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <netif_do_set_ipaddr+0x34>
 800a166:	4b18      	ldr	r3, [pc, #96]	; (800a1c8 <netif_do_set_ipaddr+0x88>)
 800a168:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a16c:	4917      	ldr	r1, [pc, #92]	; (800a1cc <netif_do_set_ipaddr+0x8c>)
 800a16e:	4818      	ldr	r0, [pc, #96]	; (800a1d0 <netif_do_set_ipaddr+0x90>)
 800a170:	f009 fa56 	bl	8013620 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	3304      	adds	r3, #4
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d01c      	beq.n	800a1bc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3304      	adds	r3, #4
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a192:	f107 0314 	add.w	r3, r7, #20
 800a196:	4619      	mov	r1, r3
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7ff ffbf 	bl	800a11c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <netif_do_set_ipaddr+0x6a>
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	e000      	b.n	800a1ac <netif_do_set_ipaddr+0x6c>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 f8d2 	bl	800a35c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e000      	b.n	800a1be <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3718      	adds	r7, #24
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	080149a0 	.word	0x080149a0
 800a1cc:	08014ab8 	.word	0x08014ab8
 800a1d0:	080149f0 	.word	0x080149f0

0800a1d4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d00a      	beq.n	800a204 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <netif_do_set_netmask+0x26>
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	e000      	b.n	800a1fc <netif_do_set_netmask+0x28>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a200:	2301      	movs	r3, #1
 800a202:	e000      	b.n	800a206 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a212:	b480      	push	{r7}
 800a214:	b085      	sub	sp, #20
 800a216:	af00      	add	r7, sp, #0
 800a218:	60f8      	str	r0, [r7, #12]
 800a21a:	60b9      	str	r1, [r7, #8]
 800a21c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	330c      	adds	r3, #12
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d00a      	beq.n	800a242 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d002      	beq.n	800a238 <netif_do_set_gw+0x26>
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	e000      	b.n	800a23a <netif_do_set_gw+0x28>
 800a238:	2300      	movs	r3, #0
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a23e:	2301      	movs	r3, #1
 800a240:	e000      	b.n	800a244 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3714      	adds	r7, #20
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a25e:	2300      	movs	r3, #0
 800a260:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a26c:	4b1c      	ldr	r3, [pc, #112]	; (800a2e0 <netif_set_addr+0x90>)
 800a26e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d101      	bne.n	800a27a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a276:	4b1a      	ldr	r3, [pc, #104]	; (800a2e0 <netif_set_addr+0x90>)
 800a278:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a280:	4b17      	ldr	r3, [pc, #92]	; (800a2e0 <netif_set_addr+0x90>)
 800a282:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <netif_set_addr+0x42>
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <netif_set_addr+0x46>
 800a292:	2301      	movs	r3, #1
 800a294:	e000      	b.n	800a298 <netif_set_addr+0x48>
 800a296:	2300      	movs	r3, #0
 800a298:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d006      	beq.n	800a2ae <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a2a0:	f107 0310 	add.w	r3, r7, #16
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	68b9      	ldr	r1, [r7, #8]
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7ff ff49 	bl	800a140 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a2ae:	69fa      	ldr	r2, [r7, #28]
 800a2b0:	6879      	ldr	r1, [r7, #4]
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f7ff ff8e 	bl	800a1d4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a2b8:	69ba      	ldr	r2, [r7, #24]
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f7ff ffa8 	bl	800a212 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d106      	bne.n	800a2d6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a2c8:	f107 0310 	add.w	r3, r7, #16
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	68b9      	ldr	r1, [r7, #8]
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f7ff ff35 	bl	800a140 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a2d6:	bf00      	nop
 800a2d8:	3720      	adds	r7, #32
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	08017118 	.word	0x08017118

0800a2e4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a2ec:	4a04      	ldr	r2, [pc, #16]	; (800a300 <netif_set_default+0x1c>)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a2f2:	bf00      	nop
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	2000ca1c 	.word	0x2000ca1c

0800a304 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d107      	bne.n	800a322 <netif_set_up+0x1e>
 800a312:	4b0f      	ldr	r3, [pc, #60]	; (800a350 <netif_set_up+0x4c>)
 800a314:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a318:	490e      	ldr	r1, [pc, #56]	; (800a354 <netif_set_up+0x50>)
 800a31a:	480f      	ldr	r0, [pc, #60]	; (800a358 <netif_set_up+0x54>)
 800a31c:	f009 f980 	bl	8013620 <iprintf>
 800a320:	e013      	b.n	800a34a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a328:	f003 0301 	and.w	r3, r3, #1
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10c      	bne.n	800a34a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a336:	f043 0301 	orr.w	r3, r3, #1
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a342:	2103      	movs	r1, #3
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f809 	bl	800a35c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	080149a0 	.word	0x080149a0
 800a354:	08014b28 	.word	0x08014b28
 800a358:	080149f0 	.word	0x080149f0

0800a35c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	460b      	mov	r3, r1
 800a366:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d106      	bne.n	800a37c <netif_issue_reports+0x20>
 800a36e:	4b18      	ldr	r3, [pc, #96]	; (800a3d0 <netif_issue_reports+0x74>)
 800a370:	f240 326d 	movw	r2, #877	; 0x36d
 800a374:	4917      	ldr	r1, [pc, #92]	; (800a3d4 <netif_issue_reports+0x78>)
 800a376:	4818      	ldr	r0, [pc, #96]	; (800a3d8 <netif_issue_reports+0x7c>)
 800a378:	f009 f952 	bl	8013620 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a382:	f003 0304 	and.w	r3, r3, #4
 800a386:	2b00      	cmp	r3, #0
 800a388:	d01e      	beq.n	800a3c8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a390:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a394:	2b00      	cmp	r3, #0
 800a396:	d017      	beq.n	800a3c8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a398:	78fb      	ldrb	r3, [r7, #3]
 800a39a:	f003 0301 	and.w	r3, r3, #1
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d013      	beq.n	800a3ca <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00e      	beq.n	800a3ca <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3b2:	f003 0308 	and.w	r3, r3, #8
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d007      	beq.n	800a3ca <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	3304      	adds	r3, #4
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f007 fab3 	bl	801192c <etharp_request>
 800a3c6:	e000      	b.n	800a3ca <netif_issue_reports+0x6e>
    return;
 800a3c8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	080149a0 	.word	0x080149a0
 800a3d4:	08014b44 	.word	0x08014b44
 800a3d8:	080149f0 	.word	0x080149f0

0800a3dc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d107      	bne.n	800a3fa <netif_set_down+0x1e>
 800a3ea:	4b12      	ldr	r3, [pc, #72]	; (800a434 <netif_set_down+0x58>)
 800a3ec:	f240 329b 	movw	r2, #923	; 0x39b
 800a3f0:	4911      	ldr	r1, [pc, #68]	; (800a438 <netif_set_down+0x5c>)
 800a3f2:	4812      	ldr	r0, [pc, #72]	; (800a43c <netif_set_down+0x60>)
 800a3f4:	f009 f914 	bl	8013620 <iprintf>
 800a3f8:	e019      	b.n	800a42e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a400:	f003 0301 	and.w	r3, r3, #1
 800a404:	2b00      	cmp	r3, #0
 800a406:	d012      	beq.n	800a42e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a40e:	f023 0301 	bic.w	r3, r3, #1
 800a412:	b2da      	uxtb	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a420:	f003 0308 	and.w	r3, r3, #8
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f006 fe3d 	bl	80110a8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	080149a0 	.word	0x080149a0
 800a438:	08014b68 	.word	0x08014b68
 800a43c:	080149f0 	.word	0x080149f0

0800a440 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d107      	bne.n	800a45e <netif_set_link_up+0x1e>
 800a44e:	4b13      	ldr	r3, [pc, #76]	; (800a49c <netif_set_link_up+0x5c>)
 800a450:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a454:	4912      	ldr	r1, [pc, #72]	; (800a4a0 <netif_set_link_up+0x60>)
 800a456:	4813      	ldr	r0, [pc, #76]	; (800a4a4 <netif_set_link_up+0x64>)
 800a458:	f009 f8e2 	bl	8013620 <iprintf>
 800a45c:	e01b      	b.n	800a496 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d114      	bne.n	800a496 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a472:	f043 0304 	orr.w	r3, r3, #4
 800a476:	b2da      	uxtb	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a47e:	2103      	movs	r1, #3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7ff ff6b 	bl	800a35c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d003      	beq.n	800a496 <netif_set_link_up+0x56>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	080149a0 	.word	0x080149a0
 800a4a0:	08014b88 	.word	0x08014b88
 800a4a4:	080149f0 	.word	0x080149f0

0800a4a8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d107      	bne.n	800a4c6 <netif_set_link_down+0x1e>
 800a4b6:	4b11      	ldr	r3, [pc, #68]	; (800a4fc <netif_set_link_down+0x54>)
 800a4b8:	f240 4206 	movw	r2, #1030	; 0x406
 800a4bc:	4910      	ldr	r1, [pc, #64]	; (800a500 <netif_set_link_down+0x58>)
 800a4be:	4811      	ldr	r0, [pc, #68]	; (800a504 <netif_set_link_down+0x5c>)
 800a4c0:	f009 f8ae 	bl	8013620 <iprintf>
 800a4c4:	e017      	b.n	800a4f6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a4cc:	f003 0304 	and.w	r3, r3, #4
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d010      	beq.n	800a4f6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a4da:	f023 0304 	bic.w	r3, r3, #4
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <netif_set_link_down+0x4e>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	080149a0 	.word	0x080149a0
 800a500:	08014bac 	.word	0x08014bac
 800a504:	080149f0 	.word	0x080149f0

0800a508 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d002      	beq.n	800a51e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	61da      	str	r2, [r3, #28]
  }
}
 800a51e:	bf00      	nop
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a52a:	b480      	push	{r7}
 800a52c:	b085      	sub	sp, #20
 800a52e:	af00      	add	r7, sp, #0
 800a530:	60f8      	str	r0, [r7, #12]
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a536:	f06f 030b 	mvn.w	r3, #11
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
	...

0800a548 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	4603      	mov	r3, r0
 800a550:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a552:	79fb      	ldrb	r3, [r7, #7]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d013      	beq.n	800a580 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a558:	4b0d      	ldr	r3, [pc, #52]	; (800a590 <netif_get_by_index+0x48>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	60fb      	str	r3, [r7, #12]
 800a55e:	e00c      	b.n	800a57a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a566:	3301      	adds	r3, #1
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	79fa      	ldrb	r2, [r7, #7]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d101      	bne.n	800a574 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	e006      	b.n	800a582 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	60fb      	str	r3, [r7, #12]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1ef      	bne.n	800a560 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	2000ca18 	.word	0x2000ca18

0800a594 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a59a:	f008 fe4b 	bl	8013234 <sys_arch_protect>
 800a59e:	6038      	str	r0, [r7, #0]
 800a5a0:	4b0d      	ldr	r3, [pc, #52]	; (800a5d8 <pbuf_free_ooseq+0x44>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	701a      	strb	r2, [r3, #0]
 800a5a6:	6838      	ldr	r0, [r7, #0]
 800a5a8:	f008 fe52 	bl	8013250 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a5ac:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <pbuf_free_ooseq+0x48>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	607b      	str	r3, [r7, #4]
 800a5b2:	e00a      	b.n	800a5ca <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d003      	beq.n	800a5c4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f002 f971 	bl	800c8a4 <tcp_free_ooseq>
      return;
 800a5c2:	e005      	b.n	800a5d0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	607b      	str	r3, [r7, #4]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1f1      	bne.n	800a5b4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	2000ca21 	.word	0x2000ca21
 800a5dc:	2000ca30 	.word	0x2000ca30

0800a5e0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a5e8:	f7ff ffd4 	bl	800a594 <pbuf_free_ooseq>
}
 800a5ec:	bf00      	nop
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a5fa:	f008 fe1b 	bl	8013234 <sys_arch_protect>
 800a5fe:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a600:	4b0f      	ldr	r3, [pc, #60]	; (800a640 <pbuf_pool_is_empty+0x4c>)
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a606:	4b0e      	ldr	r3, [pc, #56]	; (800a640 <pbuf_pool_is_empty+0x4c>)
 800a608:	2201      	movs	r2, #1
 800a60a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f008 fe1f 	bl	8013250 <sys_arch_unprotect>

  if (!queued) {
 800a612:	78fb      	ldrb	r3, [r7, #3]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10f      	bne.n	800a638 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a618:	2100      	movs	r1, #0
 800a61a:	480a      	ldr	r0, [pc, #40]	; (800a644 <pbuf_pool_is_empty+0x50>)
 800a61c:	f7fe fea6 	bl	800936c <tcpip_try_callback>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d008      	beq.n	800a638 <pbuf_pool_is_empty+0x44>
 800a626:	f008 fe05 	bl	8013234 <sys_arch_protect>
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	4b04      	ldr	r3, [pc, #16]	; (800a640 <pbuf_pool_is_empty+0x4c>)
 800a62e:	2200      	movs	r2, #0
 800a630:	701a      	strb	r2, [r3, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f008 fe0c 	bl	8013250 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a638:	bf00      	nop
 800a63a:	3708      	adds	r7, #8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	2000ca21 	.word	0x2000ca21
 800a644:	0800a5e1 	.word	0x0800a5e1

0800a648 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	4611      	mov	r1, r2
 800a654:	461a      	mov	r2, r3
 800a656:	460b      	mov	r3, r1
 800a658:	80fb      	strh	r3, [r7, #6]
 800a65a:	4613      	mov	r3, r2
 800a65c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	68ba      	ldr	r2, [r7, #8]
 800a668:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	88fa      	ldrh	r2, [r7, #6]
 800a66e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	88ba      	ldrh	r2, [r7, #4]
 800a674:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a676:	8b3b      	ldrh	r3, [r7, #24]
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	7f3a      	ldrb	r2, [r7, #28]
 800a682:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2201      	movs	r2, #1
 800a688:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	73da      	strb	r2, [r3, #15]
}
 800a690:	bf00      	nop
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b08c      	sub	sp, #48	; 0x30
 800a6a0:	af02      	add	r7, sp, #8
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	71fb      	strb	r3, [r7, #7]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	80bb      	strh	r3, [r7, #4]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a6ae:	79fb      	ldrb	r3, [r7, #7]
 800a6b0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a6b2:	887b      	ldrh	r3, [r7, #2]
 800a6b4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a6b8:	d07f      	beq.n	800a7ba <pbuf_alloc+0x11e>
 800a6ba:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a6be:	f300 80c8 	bgt.w	800a852 <pbuf_alloc+0x1b6>
 800a6c2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a6c6:	d010      	beq.n	800a6ea <pbuf_alloc+0x4e>
 800a6c8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a6cc:	f300 80c1 	bgt.w	800a852 <pbuf_alloc+0x1b6>
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d002      	beq.n	800a6da <pbuf_alloc+0x3e>
 800a6d4:	2b41      	cmp	r3, #65	; 0x41
 800a6d6:	f040 80bc 	bne.w	800a852 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a6da:	887a      	ldrh	r2, [r7, #2]
 800a6dc:	88bb      	ldrh	r3, [r7, #4]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	f000 f8d1 	bl	800a888 <pbuf_alloc_reference>
 800a6e6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a6e8:	e0bd      	b.n	800a866 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a6f2:	88bb      	ldrh	r3, [r7, #4]
 800a6f4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a6f6:	200c      	movs	r0, #12
 800a6f8:	f7ff fb9a 	bl	8009e30 <memp_malloc>
 800a6fc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d109      	bne.n	800a718 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a704:	f7ff ff76 	bl	800a5f4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d002      	beq.n	800a714 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a70e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a710:	f000 faa8 	bl	800ac64 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a714:	2300      	movs	r3, #0
 800a716:	e0a7      	b.n	800a868 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a718:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a71a:	3303      	adds	r3, #3
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	f023 0303 	bic.w	r3, r3, #3
 800a722:	b29b      	uxth	r3, r3
 800a724:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a728:	b29b      	uxth	r3, r3
 800a72a:	8b7a      	ldrh	r2, [r7, #26]
 800a72c:	4293      	cmp	r3, r2
 800a72e:	bf28      	it	cs
 800a730:	4613      	movcs	r3, r2
 800a732:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a734:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a736:	3310      	adds	r3, #16
 800a738:	693a      	ldr	r2, [r7, #16]
 800a73a:	4413      	add	r3, r2
 800a73c:	3303      	adds	r3, #3
 800a73e:	f023 0303 	bic.w	r3, r3, #3
 800a742:	4618      	mov	r0, r3
 800a744:	89f9      	ldrh	r1, [r7, #14]
 800a746:	8b7a      	ldrh	r2, [r7, #26]
 800a748:	2300      	movs	r3, #0
 800a74a:	9301      	str	r3, [sp, #4]
 800a74c:	887b      	ldrh	r3, [r7, #2]
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	460b      	mov	r3, r1
 800a752:	4601      	mov	r1, r0
 800a754:	6938      	ldr	r0, [r7, #16]
 800a756:	f7ff ff77 	bl	800a648 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f003 0303 	and.w	r3, r3, #3
 800a762:	2b00      	cmp	r3, #0
 800a764:	d006      	beq.n	800a774 <pbuf_alloc+0xd8>
 800a766:	4b42      	ldr	r3, [pc, #264]	; (800a870 <pbuf_alloc+0x1d4>)
 800a768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a76c:	4941      	ldr	r1, [pc, #260]	; (800a874 <pbuf_alloc+0x1d8>)
 800a76e:	4842      	ldr	r0, [pc, #264]	; (800a878 <pbuf_alloc+0x1dc>)
 800a770:	f008 ff56 	bl	8013620 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a774:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a776:	3303      	adds	r3, #3
 800a778:	f023 0303 	bic.w	r3, r3, #3
 800a77c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a780:	d106      	bne.n	800a790 <pbuf_alloc+0xf4>
 800a782:	4b3b      	ldr	r3, [pc, #236]	; (800a870 <pbuf_alloc+0x1d4>)
 800a784:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a788:	493c      	ldr	r1, [pc, #240]	; (800a87c <pbuf_alloc+0x1e0>)
 800a78a:	483b      	ldr	r0, [pc, #236]	; (800a878 <pbuf_alloc+0x1dc>)
 800a78c:	f008 ff48 	bl	8013620 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	2b00      	cmp	r3, #0
 800a794:	d102      	bne.n	800a79c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	627b      	str	r3, [r7, #36]	; 0x24
 800a79a:	e002      	b.n	800a7a2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a7a6:	8b7a      	ldrh	r2, [r7, #26]
 800a7a8:	89fb      	ldrh	r3, [r7, #14]
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a7b2:	8b7b      	ldrh	r3, [r7, #26]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d19e      	bne.n	800a6f6 <pbuf_alloc+0x5a>
      break;
 800a7b8:	e055      	b.n	800a866 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a7ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7bc:	3303      	adds	r3, #3
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	f023 0303 	bic.w	r3, r3, #3
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	88bb      	ldrh	r3, [r7, #4]
 800a7c8:	3303      	adds	r3, #3
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	f023 0303 	bic.w	r3, r3, #3
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	4413      	add	r3, r2
 800a7d4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a7d6:	8b3b      	ldrh	r3, [r7, #24]
 800a7d8:	3310      	adds	r3, #16
 800a7da:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a7dc:	8b3a      	ldrh	r2, [r7, #24]
 800a7de:	88bb      	ldrh	r3, [r7, #4]
 800a7e0:	3303      	adds	r3, #3
 800a7e2:	f023 0303 	bic.w	r3, r3, #3
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d306      	bcc.n	800a7f8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a7ea:	8afa      	ldrh	r2, [r7, #22]
 800a7ec:	88bb      	ldrh	r3, [r7, #4]
 800a7ee:	3303      	adds	r3, #3
 800a7f0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d201      	bcs.n	800a7fc <pbuf_alloc+0x160>
        return NULL;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	e035      	b.n	800a868 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a7fc:	8afb      	ldrh	r3, [r7, #22]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7ff f972 	bl	8009ae8 <mem_malloc>
 800a804:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d101      	bne.n	800a810 <pbuf_alloc+0x174>
        return NULL;
 800a80c:	2300      	movs	r3, #0
 800a80e:	e02b      	b.n	800a868 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a812:	3310      	adds	r3, #16
 800a814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a816:	4413      	add	r3, r2
 800a818:	3303      	adds	r3, #3
 800a81a:	f023 0303 	bic.w	r3, r3, #3
 800a81e:	4618      	mov	r0, r3
 800a820:	88b9      	ldrh	r1, [r7, #4]
 800a822:	88ba      	ldrh	r2, [r7, #4]
 800a824:	2300      	movs	r3, #0
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	887b      	ldrh	r3, [r7, #2]
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	460b      	mov	r3, r1
 800a82e:	4601      	mov	r1, r0
 800a830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a832:	f7ff ff09 	bl	800a648 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f003 0303 	and.w	r3, r3, #3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d010      	beq.n	800a864 <pbuf_alloc+0x1c8>
 800a842:	4b0b      	ldr	r3, [pc, #44]	; (800a870 <pbuf_alloc+0x1d4>)
 800a844:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a848:	490d      	ldr	r1, [pc, #52]	; (800a880 <pbuf_alloc+0x1e4>)
 800a84a:	480b      	ldr	r0, [pc, #44]	; (800a878 <pbuf_alloc+0x1dc>)
 800a84c:	f008 fee8 	bl	8013620 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a850:	e008      	b.n	800a864 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a852:	4b07      	ldr	r3, [pc, #28]	; (800a870 <pbuf_alloc+0x1d4>)
 800a854:	f240 1227 	movw	r2, #295	; 0x127
 800a858:	490a      	ldr	r1, [pc, #40]	; (800a884 <pbuf_alloc+0x1e8>)
 800a85a:	4807      	ldr	r0, [pc, #28]	; (800a878 <pbuf_alloc+0x1dc>)
 800a85c:	f008 fee0 	bl	8013620 <iprintf>
      return NULL;
 800a860:	2300      	movs	r3, #0
 800a862:	e001      	b.n	800a868 <pbuf_alloc+0x1cc>
      break;
 800a864:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3728      	adds	r7, #40	; 0x28
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	08014bd0 	.word	0x08014bd0
 800a874:	08014c00 	.word	0x08014c00
 800a878:	08014c30 	.word	0x08014c30
 800a87c:	08014c58 	.word	0x08014c58
 800a880:	08014c8c 	.word	0x08014c8c
 800a884:	08014cb8 	.word	0x08014cb8

0800a888 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b086      	sub	sp, #24
 800a88c:	af02      	add	r7, sp, #8
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	807b      	strh	r3, [r7, #2]
 800a894:	4613      	mov	r3, r2
 800a896:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a898:	883b      	ldrh	r3, [r7, #0]
 800a89a:	2b41      	cmp	r3, #65	; 0x41
 800a89c:	d009      	beq.n	800a8b2 <pbuf_alloc_reference+0x2a>
 800a89e:	883b      	ldrh	r3, [r7, #0]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d006      	beq.n	800a8b2 <pbuf_alloc_reference+0x2a>
 800a8a4:	4b0f      	ldr	r3, [pc, #60]	; (800a8e4 <pbuf_alloc_reference+0x5c>)
 800a8a6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a8aa:	490f      	ldr	r1, [pc, #60]	; (800a8e8 <pbuf_alloc_reference+0x60>)
 800a8ac:	480f      	ldr	r0, [pc, #60]	; (800a8ec <pbuf_alloc_reference+0x64>)
 800a8ae:	f008 feb7 	bl	8013620 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a8b2:	200b      	movs	r0, #11
 800a8b4:	f7ff fabc 	bl	8009e30 <memp_malloc>
 800a8b8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	e00b      	b.n	800a8dc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a8c4:	8879      	ldrh	r1, [r7, #2]
 800a8c6:	887a      	ldrh	r2, [r7, #2]
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	9301      	str	r3, [sp, #4]
 800a8cc:	883b      	ldrh	r3, [r7, #0]
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	6879      	ldr	r1, [r7, #4]
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f7ff feb7 	bl	800a648 <pbuf_init_alloced_pbuf>
  return p;
 800a8da:	68fb      	ldr	r3, [r7, #12]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	08014bd0 	.word	0x08014bd0
 800a8e8:	08014cd4 	.word	0x08014cd4
 800a8ec:	08014c30 	.word	0x08014c30

0800a8f0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b088      	sub	sp, #32
 800a8f4:	af02      	add	r7, sp, #8
 800a8f6:	607b      	str	r3, [r7, #4]
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	73fb      	strb	r3, [r7, #15]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	81bb      	strh	r3, [r7, #12]
 800a900:	4613      	mov	r3, r2
 800a902:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a904:	7bfb      	ldrb	r3, [r7, #15]
 800a906:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a908:	8a7b      	ldrh	r3, [r7, #18]
 800a90a:	3303      	adds	r3, #3
 800a90c:	f023 0203 	bic.w	r2, r3, #3
 800a910:	89bb      	ldrh	r3, [r7, #12]
 800a912:	441a      	add	r2, r3
 800a914:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a916:	429a      	cmp	r2, r3
 800a918:	d901      	bls.n	800a91e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	e018      	b.n	800a950 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a91e:	6a3b      	ldr	r3, [r7, #32]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d007      	beq.n	800a934 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a924:	8a7b      	ldrh	r3, [r7, #18]
 800a926:	3303      	adds	r3, #3
 800a928:	f023 0303 	bic.w	r3, r3, #3
 800a92c:	6a3a      	ldr	r2, [r7, #32]
 800a92e:	4413      	add	r3, r2
 800a930:	617b      	str	r3, [r7, #20]
 800a932:	e001      	b.n	800a938 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a934:	2300      	movs	r3, #0
 800a936:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	89b9      	ldrh	r1, [r7, #12]
 800a93c:	89ba      	ldrh	r2, [r7, #12]
 800a93e:	2302      	movs	r3, #2
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	897b      	ldrh	r3, [r7, #10]
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	460b      	mov	r3, r1
 800a948:	6979      	ldr	r1, [r7, #20]
 800a94a:	f7ff fe7d 	bl	800a648 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a94e:	687b      	ldr	r3, [r7, #4]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3718      	adds	r7, #24
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	460b      	mov	r3, r1
 800a962:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d106      	bne.n	800a978 <pbuf_realloc+0x20>
 800a96a:	4b3a      	ldr	r3, [pc, #232]	; (800aa54 <pbuf_realloc+0xfc>)
 800a96c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a970:	4939      	ldr	r1, [pc, #228]	; (800aa58 <pbuf_realloc+0x100>)
 800a972:	483a      	ldr	r0, [pc, #232]	; (800aa5c <pbuf_realloc+0x104>)
 800a974:	f008 fe54 	bl	8013620 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	891b      	ldrh	r3, [r3, #8]
 800a97c:	887a      	ldrh	r2, [r7, #2]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d263      	bcs.n	800aa4a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	891a      	ldrh	r2, [r3, #8]
 800a986:	887b      	ldrh	r3, [r7, #2]
 800a988:	1ad3      	subs	r3, r2, r3
 800a98a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a98c:	887b      	ldrh	r3, [r7, #2]
 800a98e:	817b      	strh	r3, [r7, #10]
  q = p;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a994:	e018      	b.n	800a9c8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	895b      	ldrh	r3, [r3, #10]
 800a99a:	897a      	ldrh	r2, [r7, #10]
 800a99c:	1ad3      	subs	r3, r2, r3
 800a99e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	891a      	ldrh	r2, [r3, #8]
 800a9a4:	893b      	ldrh	r3, [r7, #8]
 800a9a6:	1ad3      	subs	r3, r2, r3
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d106      	bne.n	800a9c8 <pbuf_realloc+0x70>
 800a9ba:	4b26      	ldr	r3, [pc, #152]	; (800aa54 <pbuf_realloc+0xfc>)
 800a9bc:	f240 12af 	movw	r2, #431	; 0x1af
 800a9c0:	4927      	ldr	r1, [pc, #156]	; (800aa60 <pbuf_realloc+0x108>)
 800a9c2:	4826      	ldr	r0, [pc, #152]	; (800aa5c <pbuf_realloc+0x104>)
 800a9c4:	f008 fe2c 	bl	8013620 <iprintf>
  while (rem_len > q->len) {
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	895b      	ldrh	r3, [r3, #10]
 800a9cc:	897a      	ldrh	r2, [r7, #10]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d8e1      	bhi.n	800a996 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	7b1b      	ldrb	r3, [r3, #12]
 800a9d6:	f003 030f 	and.w	r3, r3, #15
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d121      	bne.n	800aa22 <pbuf_realloc+0xca>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	895b      	ldrh	r3, [r3, #10]
 800a9e2:	897a      	ldrh	r2, [r7, #10]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d01c      	beq.n	800aa22 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	7b5b      	ldrb	r3, [r3, #13]
 800a9ec:	f003 0302 	and.w	r3, r3, #2
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d116      	bne.n	800aa22 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	685a      	ldr	r2, [r3, #4]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	897b      	ldrh	r3, [r7, #10]
 800aa00:	4413      	add	r3, r2
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	4619      	mov	r1, r3
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f7fe ff64 	bl	80098d4 <mem_trim>
 800aa0c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d106      	bne.n	800aa22 <pbuf_realloc+0xca>
 800aa14:	4b0f      	ldr	r3, [pc, #60]	; (800aa54 <pbuf_realloc+0xfc>)
 800aa16:	f240 12bd 	movw	r2, #445	; 0x1bd
 800aa1a:	4912      	ldr	r1, [pc, #72]	; (800aa64 <pbuf_realloc+0x10c>)
 800aa1c:	480f      	ldr	r0, [pc, #60]	; (800aa5c <pbuf_realloc+0x104>)
 800aa1e:	f008 fdff 	bl	8013620 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	897a      	ldrh	r2, [r7, #10]
 800aa26:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	895a      	ldrh	r2, [r3, #10]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d004      	beq.n	800aa42 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 f911 	bl	800ac64 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	601a      	str	r2, [r3, #0]
 800aa48:	e000      	b.n	800aa4c <pbuf_realloc+0xf4>
    return;
 800aa4a:	bf00      	nop

}
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	08014bd0 	.word	0x08014bd0
 800aa58:	08014ce8 	.word	0x08014ce8
 800aa5c:	08014c30 	.word	0x08014c30
 800aa60:	08014d00 	.word	0x08014d00
 800aa64:	08014d18 	.word	0x08014d18

0800aa68 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b086      	sub	sp, #24
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	4613      	mov	r3, r2
 800aa74:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d106      	bne.n	800aa8a <pbuf_add_header_impl+0x22>
 800aa7c:	4b2b      	ldr	r3, [pc, #172]	; (800ab2c <pbuf_add_header_impl+0xc4>)
 800aa7e:	f240 12df 	movw	r2, #479	; 0x1df
 800aa82:	492b      	ldr	r1, [pc, #172]	; (800ab30 <pbuf_add_header_impl+0xc8>)
 800aa84:	482b      	ldr	r0, [pc, #172]	; (800ab34 <pbuf_add_header_impl+0xcc>)
 800aa86:	f008 fdcb 	bl	8013620 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d003      	beq.n	800aa98 <pbuf_add_header_impl+0x30>
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa96:	d301      	bcc.n	800aa9c <pbuf_add_header_impl+0x34>
    return 1;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e043      	b.n	800ab24 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <pbuf_add_header_impl+0x3e>
    return 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	e03e      	b.n	800ab24 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	891a      	ldrh	r2, [r3, #8]
 800aaae:	8a7b      	ldrh	r3, [r7, #18]
 800aab0:	4413      	add	r3, r2
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	8a7a      	ldrh	r2, [r7, #18]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d901      	bls.n	800aabe <pbuf_add_header_impl+0x56>
    return 1;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e032      	b.n	800ab24 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	7b1b      	ldrb	r3, [r3, #12]
 800aac2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800aac4:	8a3b      	ldrh	r3, [r7, #16]
 800aac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00c      	beq.n	800aae8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	685a      	ldr	r2, [r3, #4]
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	425b      	negs	r3, r3
 800aad6:	4413      	add	r3, r2
 800aad8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3310      	adds	r3, #16
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d20d      	bcs.n	800ab00 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800aae4:	2301      	movs	r3, #1
 800aae6:	e01d      	b.n	800ab24 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800aae8:	79fb      	ldrb	r3, [r7, #7]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d006      	beq.n	800aafc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	425b      	negs	r3, r3
 800aaf6:	4413      	add	r3, r2
 800aaf8:	617b      	str	r3, [r7, #20]
 800aafa:	e001      	b.n	800ab00 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800aafc:	2301      	movs	r3, #1
 800aafe:	e011      	b.n	800ab24 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	895a      	ldrh	r2, [r3, #10]
 800ab0a:	8a7b      	ldrh	r3, [r7, #18]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	891a      	ldrh	r2, [r3, #8]
 800ab18:	8a7b      	ldrh	r3, [r7, #18]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	811a      	strh	r2, [r3, #8]


  return 0;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	08014bd0 	.word	0x08014bd0
 800ab30:	08014d34 	.word	0x08014d34
 800ab34:	08014c30 	.word	0x08014c30

0800ab38 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ab42:	2200      	movs	r2, #0
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7ff ff8e 	bl	800aa68 <pbuf_add_header_impl>
 800ab4c:	4603      	mov	r3, r0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
	...

0800ab58 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d106      	bne.n	800ab76 <pbuf_remove_header+0x1e>
 800ab68:	4b20      	ldr	r3, [pc, #128]	; (800abec <pbuf_remove_header+0x94>)
 800ab6a:	f240 224b 	movw	r2, #587	; 0x24b
 800ab6e:	4920      	ldr	r1, [pc, #128]	; (800abf0 <pbuf_remove_header+0x98>)
 800ab70:	4820      	ldr	r0, [pc, #128]	; (800abf4 <pbuf_remove_header+0x9c>)
 800ab72:	f008 fd55 	bl	8013620 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d003      	beq.n	800ab84 <pbuf_remove_header+0x2c>
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab82:	d301      	bcc.n	800ab88 <pbuf_remove_header+0x30>
    return 1;
 800ab84:	2301      	movs	r3, #1
 800ab86:	e02c      	b.n	800abe2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <pbuf_remove_header+0x3a>
    return 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	e027      	b.n	800abe2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	895b      	ldrh	r3, [r3, #10]
 800ab9a:	89fa      	ldrh	r2, [r7, #14]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d908      	bls.n	800abb2 <pbuf_remove_header+0x5a>
 800aba0:	4b12      	ldr	r3, [pc, #72]	; (800abec <pbuf_remove_header+0x94>)
 800aba2:	f240 2255 	movw	r2, #597	; 0x255
 800aba6:	4914      	ldr	r1, [pc, #80]	; (800abf8 <pbuf_remove_header+0xa0>)
 800aba8:	4812      	ldr	r0, [pc, #72]	; (800abf4 <pbuf_remove_header+0x9c>)
 800abaa:	f008 fd39 	bl	8013620 <iprintf>
 800abae:	2301      	movs	r3, #1
 800abb0:	e017      	b.n	800abe2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	441a      	add	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	895a      	ldrh	r2, [r3, #10]
 800abc8:	89fb      	ldrh	r3, [r7, #14]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	b29a      	uxth	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	891a      	ldrh	r2, [r3, #8]
 800abd6:	89fb      	ldrh	r3, [r7, #14]
 800abd8:	1ad3      	subs	r3, r2, r3
 800abda:	b29a      	uxth	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	08014bd0 	.word	0x08014bd0
 800abf0:	08014d34 	.word	0x08014d34
 800abf4:	08014c30 	.word	0x08014c30
 800abf8:	08014d40 	.word	0x08014d40

0800abfc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	460b      	mov	r3, r1
 800ac06:	807b      	strh	r3, [r7, #2]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ac0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	da08      	bge.n	800ac26 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ac14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac18:	425b      	negs	r3, r3
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7ff ff9b 	bl	800ab58 <pbuf_remove_header>
 800ac22:	4603      	mov	r3, r0
 800ac24:	e007      	b.n	800ac36 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ac26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac2a:	787a      	ldrb	r2, [r7, #1]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7ff ff1a 	bl	800aa68 <pbuf_add_header_impl>
 800ac34:	4603      	mov	r3, r0
  }
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b082      	sub	sp, #8
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	460b      	mov	r3, r1
 800ac48:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ac4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7ff ffd2 	bl	800abfc <pbuf_header_impl>
 800ac58:	4603      	mov	r3, r0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3708      	adds	r7, #8
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
	...

0800ac64 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d10b      	bne.n	800ac8a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d106      	bne.n	800ac86 <pbuf_free+0x22>
 800ac78:	4b3b      	ldr	r3, [pc, #236]	; (800ad68 <pbuf_free+0x104>)
 800ac7a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ac7e:	493b      	ldr	r1, [pc, #236]	; (800ad6c <pbuf_free+0x108>)
 800ac80:	483b      	ldr	r0, [pc, #236]	; (800ad70 <pbuf_free+0x10c>)
 800ac82:	f008 fccd 	bl	8013620 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ac86:	2300      	movs	r3, #0
 800ac88:	e069      	b.n	800ad5e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ac8e:	e062      	b.n	800ad56 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ac90:	f008 fad0 	bl	8013234 <sys_arch_protect>
 800ac94:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	7b9b      	ldrb	r3, [r3, #14]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d106      	bne.n	800acac <pbuf_free+0x48>
 800ac9e:	4b32      	ldr	r3, [pc, #200]	; (800ad68 <pbuf_free+0x104>)
 800aca0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800aca4:	4933      	ldr	r1, [pc, #204]	; (800ad74 <pbuf_free+0x110>)
 800aca6:	4832      	ldr	r0, [pc, #200]	; (800ad70 <pbuf_free+0x10c>)
 800aca8:	f008 fcba 	bl	8013620 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	7b9b      	ldrb	r3, [r3, #14]
 800acb0:	3b01      	subs	r3, #1
 800acb2:	b2da      	uxtb	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	739a      	strb	r2, [r3, #14]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	7b9b      	ldrb	r3, [r3, #14]
 800acbc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800acbe:	69b8      	ldr	r0, [r7, #24]
 800acc0:	f008 fac6 	bl	8013250 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800acc4:	7dfb      	ldrb	r3, [r7, #23]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d143      	bne.n	800ad52 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	7b1b      	ldrb	r3, [r3, #12]
 800acd4:	f003 030f 	and.w	r3, r3, #15
 800acd8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	7b5b      	ldrb	r3, [r3, #13]
 800acde:	f003 0302 	and.w	r3, r3, #2
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d011      	beq.n	800ad0a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d106      	bne.n	800ad00 <pbuf_free+0x9c>
 800acf2:	4b1d      	ldr	r3, [pc, #116]	; (800ad68 <pbuf_free+0x104>)
 800acf4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800acf8:	491f      	ldr	r1, [pc, #124]	; (800ad78 <pbuf_free+0x114>)
 800acfa:	481d      	ldr	r0, [pc, #116]	; (800ad70 <pbuf_free+0x10c>)
 800acfc:	f008 fc90 	bl	8013620 <iprintf>
        pc->custom_free_function(p);
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	4798      	blx	r3
 800ad08:	e01d      	b.n	800ad46 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ad0a:	7bfb      	ldrb	r3, [r7, #15]
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d104      	bne.n	800ad1a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ad10:	6879      	ldr	r1, [r7, #4]
 800ad12:	200c      	movs	r0, #12
 800ad14:	f7ff f902 	bl	8009f1c <memp_free>
 800ad18:	e015      	b.n	800ad46 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ad1a:	7bfb      	ldrb	r3, [r7, #15]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d104      	bne.n	800ad2a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ad20:	6879      	ldr	r1, [r7, #4]
 800ad22:	200b      	movs	r0, #11
 800ad24:	f7ff f8fa 	bl	8009f1c <memp_free>
 800ad28:	e00d      	b.n	800ad46 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d103      	bne.n	800ad38 <pbuf_free+0xd4>
          mem_free(p);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7fe fd3f 	bl	80097b4 <mem_free>
 800ad36:	e006      	b.n	800ad46 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ad38:	4b0b      	ldr	r3, [pc, #44]	; (800ad68 <pbuf_free+0x104>)
 800ad3a:	f240 320f 	movw	r2, #783	; 0x30f
 800ad3e:	490f      	ldr	r1, [pc, #60]	; (800ad7c <pbuf_free+0x118>)
 800ad40:	480b      	ldr	r0, [pc, #44]	; (800ad70 <pbuf_free+0x10c>)
 800ad42:	f008 fc6d 	bl	8013620 <iprintf>
        }
      }
      count++;
 800ad46:	7ffb      	ldrb	r3, [r7, #31]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	607b      	str	r3, [r7, #4]
 800ad50:	e001      	b.n	800ad56 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d199      	bne.n	800ac90 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ad5c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3720      	adds	r7, #32
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	08014bd0 	.word	0x08014bd0
 800ad6c:	08014d34 	.word	0x08014d34
 800ad70:	08014c30 	.word	0x08014c30
 800ad74:	08014d60 	.word	0x08014d60
 800ad78:	08014d78 	.word	0x08014d78
 800ad7c:	08014d9c 	.word	0x08014d9c

0800ad80 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ad8c:	e005      	b.n	800ad9a <pbuf_clen+0x1a>
    ++len;
 800ad8e:	89fb      	ldrh	r3, [r7, #14]
 800ad90:	3301      	adds	r3, #1
 800ad92:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1f6      	bne.n	800ad8e <pbuf_clen+0xe>
  }
  return len;
 800ada0:	89fb      	ldrh	r3, [r7, #14]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
	...

0800adb0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d016      	beq.n	800adec <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800adbe:	f008 fa39 	bl	8013234 <sys_arch_protect>
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	7b9b      	ldrb	r3, [r3, #14]
 800adc8:	3301      	adds	r3, #1
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	739a      	strb	r2, [r3, #14]
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f008 fa3d 	bl	8013250 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	7b9b      	ldrb	r3, [r3, #14]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d106      	bne.n	800adec <pbuf_ref+0x3c>
 800adde:	4b05      	ldr	r3, [pc, #20]	; (800adf4 <pbuf_ref+0x44>)
 800ade0:	f240 3242 	movw	r2, #834	; 0x342
 800ade4:	4904      	ldr	r1, [pc, #16]	; (800adf8 <pbuf_ref+0x48>)
 800ade6:	4805      	ldr	r0, [pc, #20]	; (800adfc <pbuf_ref+0x4c>)
 800ade8:	f008 fc1a 	bl	8013620 <iprintf>
  }
}
 800adec:	bf00      	nop
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	08014bd0 	.word	0x08014bd0
 800adf8:	08014db0 	.word	0x08014db0
 800adfc:	08014c30 	.word	0x08014c30

0800ae00 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d002      	beq.n	800ae16 <pbuf_cat+0x16>
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d107      	bne.n	800ae26 <pbuf_cat+0x26>
 800ae16:	4b20      	ldr	r3, [pc, #128]	; (800ae98 <pbuf_cat+0x98>)
 800ae18:	f240 3259 	movw	r2, #857	; 0x359
 800ae1c:	491f      	ldr	r1, [pc, #124]	; (800ae9c <pbuf_cat+0x9c>)
 800ae1e:	4820      	ldr	r0, [pc, #128]	; (800aea0 <pbuf_cat+0xa0>)
 800ae20:	f008 fbfe 	bl	8013620 <iprintf>
 800ae24:	e034      	b.n	800ae90 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	60fb      	str	r3, [r7, #12]
 800ae2a:	e00a      	b.n	800ae42 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	891a      	ldrh	r2, [r3, #8]
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	891b      	ldrh	r3, [r3, #8]
 800ae34:	4413      	add	r3, r2
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	60fb      	str	r3, [r7, #12]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1f0      	bne.n	800ae2c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	891a      	ldrh	r2, [r3, #8]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	895b      	ldrh	r3, [r3, #10]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d006      	beq.n	800ae64 <pbuf_cat+0x64>
 800ae56:	4b10      	ldr	r3, [pc, #64]	; (800ae98 <pbuf_cat+0x98>)
 800ae58:	f240 3262 	movw	r2, #866	; 0x362
 800ae5c:	4911      	ldr	r1, [pc, #68]	; (800aea4 <pbuf_cat+0xa4>)
 800ae5e:	4810      	ldr	r0, [pc, #64]	; (800aea0 <pbuf_cat+0xa0>)
 800ae60:	f008 fbde 	bl	8013620 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d006      	beq.n	800ae7a <pbuf_cat+0x7a>
 800ae6c:	4b0a      	ldr	r3, [pc, #40]	; (800ae98 <pbuf_cat+0x98>)
 800ae6e:	f240 3263 	movw	r2, #867	; 0x363
 800ae72:	490d      	ldr	r1, [pc, #52]	; (800aea8 <pbuf_cat+0xa8>)
 800ae74:	480a      	ldr	r0, [pc, #40]	; (800aea0 <pbuf_cat+0xa0>)
 800ae76:	f008 fbd3 	bl	8013620 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	891a      	ldrh	r2, [r3, #8]
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	891b      	ldrh	r3, [r3, #8]
 800ae82:	4413      	add	r3, r2
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	08014bd0 	.word	0x08014bd0
 800ae9c:	08014dc4 	.word	0x08014dc4
 800aea0:	08014c30 	.word	0x08014c30
 800aea4:	08014dfc 	.word	0x08014dfc
 800aea8:	08014e2c 	.word	0x08014e2c

0800aeac <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	617b      	str	r3, [r7, #20]
 800aeba:	2300      	movs	r3, #0
 800aebc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d008      	beq.n	800aed6 <pbuf_copy+0x2a>
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d005      	beq.n	800aed6 <pbuf_copy+0x2a>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	891a      	ldrh	r2, [r3, #8]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	891b      	ldrh	r3, [r3, #8]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d209      	bcs.n	800aeea <pbuf_copy+0x3e>
 800aed6:	4b57      	ldr	r3, [pc, #348]	; (800b034 <pbuf_copy+0x188>)
 800aed8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800aedc:	4956      	ldr	r1, [pc, #344]	; (800b038 <pbuf_copy+0x18c>)
 800aede:	4857      	ldr	r0, [pc, #348]	; (800b03c <pbuf_copy+0x190>)
 800aee0:	f008 fb9e 	bl	8013620 <iprintf>
 800aee4:	f06f 030f 	mvn.w	r3, #15
 800aee8:	e09f      	b.n	800b02a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	895b      	ldrh	r3, [r3, #10]
 800aeee:	461a      	mov	r2, r3
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	1ad2      	subs	r2, r2, r3
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	895b      	ldrh	r3, [r3, #10]
 800aef8:	4619      	mov	r1, r3
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	1acb      	subs	r3, r1, r3
 800aefe:	429a      	cmp	r2, r3
 800af00:	d306      	bcc.n	800af10 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	895b      	ldrh	r3, [r3, #10]
 800af06:	461a      	mov	r2, r3
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	60fb      	str	r3, [r7, #12]
 800af0e:	e005      	b.n	800af1c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	895b      	ldrh	r3, [r3, #10]
 800af14:	461a      	mov	r2, r3
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685a      	ldr	r2, [r3, #4]
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	18d0      	adds	r0, r2, r3
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	685a      	ldr	r2, [r3, #4]
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	4413      	add	r3, r2
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	4619      	mov	r1, r3
 800af30:	f008 facb 	bl	80134ca <memcpy>
    offset_to += len;
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	4413      	add	r3, r2
 800af3a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	4413      	add	r3, r2
 800af42:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	895b      	ldrh	r3, [r3, #10]
 800af48:	461a      	mov	r2, r3
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d906      	bls.n	800af5e <pbuf_copy+0xb2>
 800af50:	4b38      	ldr	r3, [pc, #224]	; (800b034 <pbuf_copy+0x188>)
 800af52:	f240 32d9 	movw	r2, #985	; 0x3d9
 800af56:	493a      	ldr	r1, [pc, #232]	; (800b040 <pbuf_copy+0x194>)
 800af58:	4838      	ldr	r0, [pc, #224]	; (800b03c <pbuf_copy+0x190>)
 800af5a:	f008 fb61 	bl	8013620 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	895b      	ldrh	r3, [r3, #10]
 800af62:	461a      	mov	r2, r3
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	4293      	cmp	r3, r2
 800af68:	d906      	bls.n	800af78 <pbuf_copy+0xcc>
 800af6a:	4b32      	ldr	r3, [pc, #200]	; (800b034 <pbuf_copy+0x188>)
 800af6c:	f240 32da 	movw	r2, #986	; 0x3da
 800af70:	4934      	ldr	r1, [pc, #208]	; (800b044 <pbuf_copy+0x198>)
 800af72:	4832      	ldr	r0, [pc, #200]	; (800b03c <pbuf_copy+0x190>)
 800af74:	f008 fb54 	bl	8013620 <iprintf>
    if (offset_from >= p_from->len) {
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	895b      	ldrh	r3, [r3, #10]
 800af7c:	461a      	mov	r2, r3
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	4293      	cmp	r3, r2
 800af82:	d304      	bcc.n	800af8e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	895b      	ldrh	r3, [r3, #10]
 800af92:	461a      	mov	r2, r3
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	4293      	cmp	r3, r2
 800af98:	d114      	bne.n	800afc4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10c      	bne.n	800afc4 <pbuf_copy+0x118>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d009      	beq.n	800afc4 <pbuf_copy+0x118>
 800afb0:	4b20      	ldr	r3, [pc, #128]	; (800b034 <pbuf_copy+0x188>)
 800afb2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800afb6:	4924      	ldr	r1, [pc, #144]	; (800b048 <pbuf_copy+0x19c>)
 800afb8:	4820      	ldr	r0, [pc, #128]	; (800b03c <pbuf_copy+0x190>)
 800afba:	f008 fb31 	bl	8013620 <iprintf>
 800afbe:	f06f 030f 	mvn.w	r3, #15
 800afc2:	e032      	b.n	800b02a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d013      	beq.n	800aff2 <pbuf_copy+0x146>
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	895a      	ldrh	r2, [r3, #10]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	891b      	ldrh	r3, [r3, #8]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d10d      	bne.n	800aff2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d009      	beq.n	800aff2 <pbuf_copy+0x146>
 800afde:	4b15      	ldr	r3, [pc, #84]	; (800b034 <pbuf_copy+0x188>)
 800afe0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800afe4:	4919      	ldr	r1, [pc, #100]	; (800b04c <pbuf_copy+0x1a0>)
 800afe6:	4815      	ldr	r0, [pc, #84]	; (800b03c <pbuf_copy+0x190>)
 800afe8:	f008 fb1a 	bl	8013620 <iprintf>
 800afec:	f06f 0305 	mvn.w	r3, #5
 800aff0:	e01b      	b.n	800b02a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d013      	beq.n	800b020 <pbuf_copy+0x174>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	895a      	ldrh	r2, [r3, #10]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	891b      	ldrh	r3, [r3, #8]
 800b000:	429a      	cmp	r2, r3
 800b002:	d10d      	bne.n	800b020 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d009      	beq.n	800b020 <pbuf_copy+0x174>
 800b00c:	4b09      	ldr	r3, [pc, #36]	; (800b034 <pbuf_copy+0x188>)
 800b00e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b012:	490e      	ldr	r1, [pc, #56]	; (800b04c <pbuf_copy+0x1a0>)
 800b014:	4809      	ldr	r0, [pc, #36]	; (800b03c <pbuf_copy+0x190>)
 800b016:	f008 fb03 	bl	8013620 <iprintf>
 800b01a:	f06f 0305 	mvn.w	r3, #5
 800b01e:	e004      	b.n	800b02a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	f47f af61 	bne.w	800aeea <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	08014bd0 	.word	0x08014bd0
 800b038:	08014e78 	.word	0x08014e78
 800b03c:	08014c30 	.word	0x08014c30
 800b040:	08014ea8 	.word	0x08014ea8
 800b044:	08014ec0 	.word	0x08014ec0
 800b048:	08014edc 	.word	0x08014edc
 800b04c:	08014eec 	.word	0x08014eec

0800b050 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b088      	sub	sp, #32
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	4611      	mov	r1, r2
 800b05c:	461a      	mov	r2, r3
 800b05e:	460b      	mov	r3, r1
 800b060:	80fb      	strh	r3, [r7, #6]
 800b062:	4613      	mov	r3, r2
 800b064:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b066:	2300      	movs	r3, #0
 800b068:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b06a:	2300      	movs	r3, #0
 800b06c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d108      	bne.n	800b086 <pbuf_copy_partial+0x36>
 800b074:	4b2b      	ldr	r3, [pc, #172]	; (800b124 <pbuf_copy_partial+0xd4>)
 800b076:	f240 420a 	movw	r2, #1034	; 0x40a
 800b07a:	492b      	ldr	r1, [pc, #172]	; (800b128 <pbuf_copy_partial+0xd8>)
 800b07c:	482b      	ldr	r0, [pc, #172]	; (800b12c <pbuf_copy_partial+0xdc>)
 800b07e:	f008 facf 	bl	8013620 <iprintf>
 800b082:	2300      	movs	r3, #0
 800b084:	e04a      	b.n	800b11c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d108      	bne.n	800b09e <pbuf_copy_partial+0x4e>
 800b08c:	4b25      	ldr	r3, [pc, #148]	; (800b124 <pbuf_copy_partial+0xd4>)
 800b08e:	f240 420b 	movw	r2, #1035	; 0x40b
 800b092:	4927      	ldr	r1, [pc, #156]	; (800b130 <pbuf_copy_partial+0xe0>)
 800b094:	4825      	ldr	r0, [pc, #148]	; (800b12c <pbuf_copy_partial+0xdc>)
 800b096:	f008 fac3 	bl	8013620 <iprintf>
 800b09a:	2300      	movs	r3, #0
 800b09c:	e03e      	b.n	800b11c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	61fb      	str	r3, [r7, #28]
 800b0a2:	e034      	b.n	800b10e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b0a4:	88bb      	ldrh	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00a      	beq.n	800b0c0 <pbuf_copy_partial+0x70>
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	895b      	ldrh	r3, [r3, #10]
 800b0ae:	88ba      	ldrh	r2, [r7, #4]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d305      	bcc.n	800b0c0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	895b      	ldrh	r3, [r3, #10]
 800b0b8:	88ba      	ldrh	r2, [r7, #4]
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	80bb      	strh	r3, [r7, #4]
 800b0be:	e023      	b.n	800b108 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	895a      	ldrh	r2, [r3, #10]
 800b0c4:	88bb      	ldrh	r3, [r7, #4]
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b0ca:	8b3a      	ldrh	r2, [r7, #24]
 800b0cc:	88fb      	ldrh	r3, [r7, #6]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d901      	bls.n	800b0d6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b0d2:	88fb      	ldrh	r3, [r7, #6]
 800b0d4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b0d6:	8b7b      	ldrh	r3, [r7, #26]
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	18d0      	adds	r0, r2, r3
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	685a      	ldr	r2, [r3, #4]
 800b0e0:	88bb      	ldrh	r3, [r7, #4]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	8b3a      	ldrh	r2, [r7, #24]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	f008 f9ef 	bl	80134ca <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b0ec:	8afa      	ldrh	r2, [r7, #22]
 800b0ee:	8b3b      	ldrh	r3, [r7, #24]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b0f4:	8b7a      	ldrh	r2, [r7, #26]
 800b0f6:	8b3b      	ldrh	r3, [r7, #24]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b0fc:	88fa      	ldrh	r2, [r7, #6]
 800b0fe:	8b3b      	ldrh	r3, [r7, #24]
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b104:	2300      	movs	r3, #0
 800b106:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	61fb      	str	r3, [r7, #28]
 800b10e:	88fb      	ldrh	r3, [r7, #6]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d002      	beq.n	800b11a <pbuf_copy_partial+0xca>
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1c4      	bne.n	800b0a4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b11a:	8afb      	ldrh	r3, [r7, #22]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3720      	adds	r7, #32
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	08014bd0 	.word	0x08014bd0
 800b128:	08014f18 	.word	0x08014f18
 800b12c:	08014c30 	.word	0x08014c30
 800b130:	08014f38 	.word	0x08014f38

0800b134 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	4603      	mov	r3, r0
 800b13c:	603a      	str	r2, [r7, #0]
 800b13e:	71fb      	strb	r3, [r7, #7]
 800b140:	460b      	mov	r3, r1
 800b142:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	8919      	ldrh	r1, [r3, #8]
 800b148:	88ba      	ldrh	r2, [r7, #4]
 800b14a:	79fb      	ldrb	r3, [r7, #7]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7ff faa5 	bl	800a69c <pbuf_alloc>
 800b152:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d101      	bne.n	800b15e <pbuf_clone+0x2a>
    return NULL;
 800b15a:	2300      	movs	r3, #0
 800b15c:	e011      	b.n	800b182 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b15e:	6839      	ldr	r1, [r7, #0]
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f7ff fea3 	bl	800aeac <pbuf_copy>
 800b166:	4603      	mov	r3, r0
 800b168:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b16a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d006      	beq.n	800b180 <pbuf_clone+0x4c>
 800b172:	4b06      	ldr	r3, [pc, #24]	; (800b18c <pbuf_clone+0x58>)
 800b174:	f240 5224 	movw	r2, #1316	; 0x524
 800b178:	4905      	ldr	r1, [pc, #20]	; (800b190 <pbuf_clone+0x5c>)
 800b17a:	4806      	ldr	r0, [pc, #24]	; (800b194 <pbuf_clone+0x60>)
 800b17c:	f008 fa50 	bl	8013620 <iprintf>
  return q;
 800b180:	68fb      	ldr	r3, [r7, #12]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	08014bd0 	.word	0x08014bd0
 800b190:	08015044 	.word	0x08015044
 800b194:	08014c30 	.word	0x08014c30

0800b198 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b19c:	f008 fa58 	bl	8013650 <rand>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	4b01      	ldr	r3, [pc, #4]	; (800b1b8 <tcp_init+0x20>)
 800b1b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b1b4:	bf00      	nop
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	20000024 	.word	0x20000024

0800b1bc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	7d1b      	ldrb	r3, [r3, #20]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d105      	bne.n	800b1d8 <tcp_free+0x1c>
 800b1cc:	4b06      	ldr	r3, [pc, #24]	; (800b1e8 <tcp_free+0x2c>)
 800b1ce:	22d4      	movs	r2, #212	; 0xd4
 800b1d0:	4906      	ldr	r1, [pc, #24]	; (800b1ec <tcp_free+0x30>)
 800b1d2:	4807      	ldr	r0, [pc, #28]	; (800b1f0 <tcp_free+0x34>)
 800b1d4:	f008 fa24 	bl	8013620 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b1d8:	6879      	ldr	r1, [r7, #4]
 800b1da:	2001      	movs	r0, #1
 800b1dc:	f7fe fe9e 	bl	8009f1c <memp_free>
}
 800b1e0:	bf00      	nop
 800b1e2:	3708      	adds	r7, #8
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	080150d0 	.word	0x080150d0
 800b1ec:	08015100 	.word	0x08015100
 800b1f0:	08015114 	.word	0x08015114

0800b1f4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	7d1b      	ldrb	r3, [r3, #20]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d105      	bne.n	800b210 <tcp_free_listen+0x1c>
 800b204:	4b06      	ldr	r3, [pc, #24]	; (800b220 <tcp_free_listen+0x2c>)
 800b206:	22df      	movs	r2, #223	; 0xdf
 800b208:	4906      	ldr	r1, [pc, #24]	; (800b224 <tcp_free_listen+0x30>)
 800b20a:	4807      	ldr	r0, [pc, #28]	; (800b228 <tcp_free_listen+0x34>)
 800b20c:	f008 fa08 	bl	8013620 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b210:	6879      	ldr	r1, [r7, #4]
 800b212:	2002      	movs	r0, #2
 800b214:	f7fe fe82 	bl	8009f1c <memp_free>
}
 800b218:	bf00      	nop
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	080150d0 	.word	0x080150d0
 800b224:	0801513c 	.word	0x0801513c
 800b228:	08015114 	.word	0x08015114

0800b22c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b230:	f000 fea2 	bl	800bf78 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b234:	4b07      	ldr	r3, [pc, #28]	; (800b254 <tcp_tmr+0x28>)
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	3301      	adds	r3, #1
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	4b05      	ldr	r3, [pc, #20]	; (800b254 <tcp_tmr+0x28>)
 800b23e:	701a      	strb	r2, [r3, #0]
 800b240:	4b04      	ldr	r3, [pc, #16]	; (800b254 <tcp_tmr+0x28>)
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	f003 0301 	and.w	r3, r3, #1
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b24c:	f000 fb54 	bl	800b8f8 <tcp_slowtmr>
  }
}
 800b250:	bf00      	nop
 800b252:	bd80      	pop	{r7, pc}
 800b254:	2000ca39 	.word	0x2000ca39

0800b258 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d105      	bne.n	800b274 <tcp_remove_listener+0x1c>
 800b268:	4b0d      	ldr	r3, [pc, #52]	; (800b2a0 <tcp_remove_listener+0x48>)
 800b26a:	22ff      	movs	r2, #255	; 0xff
 800b26c:	490d      	ldr	r1, [pc, #52]	; (800b2a4 <tcp_remove_listener+0x4c>)
 800b26e:	480e      	ldr	r0, [pc, #56]	; (800b2a8 <tcp_remove_listener+0x50>)
 800b270:	f008 f9d6 	bl	8013620 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	60fb      	str	r3, [r7, #12]
 800b278:	e00a      	b.n	800b290 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	429a      	cmp	r2, r3
 800b282:	d102      	bne.n	800b28a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2200      	movs	r2, #0
 800b288:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	60fb      	str	r3, [r7, #12]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1f1      	bne.n	800b27a <tcp_remove_listener+0x22>
    }
  }
}
 800b296:	bf00      	nop
 800b298:	bf00      	nop
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	080150d0 	.word	0x080150d0
 800b2a4:	08015158 	.word	0x08015158
 800b2a8:	08015114 	.word	0x08015114

0800b2ac <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d106      	bne.n	800b2c8 <tcp_listen_closed+0x1c>
 800b2ba:	4b14      	ldr	r3, [pc, #80]	; (800b30c <tcp_listen_closed+0x60>)
 800b2bc:	f240 1211 	movw	r2, #273	; 0x111
 800b2c0:	4913      	ldr	r1, [pc, #76]	; (800b310 <tcp_listen_closed+0x64>)
 800b2c2:	4814      	ldr	r0, [pc, #80]	; (800b314 <tcp_listen_closed+0x68>)
 800b2c4:	f008 f9ac 	bl	8013620 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	7d1b      	ldrb	r3, [r3, #20]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d006      	beq.n	800b2de <tcp_listen_closed+0x32>
 800b2d0:	4b0e      	ldr	r3, [pc, #56]	; (800b30c <tcp_listen_closed+0x60>)
 800b2d2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b2d6:	4910      	ldr	r1, [pc, #64]	; (800b318 <tcp_listen_closed+0x6c>)
 800b2d8:	480e      	ldr	r0, [pc, #56]	; (800b314 <tcp_listen_closed+0x68>)
 800b2da:	f008 f9a1 	bl	8013620 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b2de:	2301      	movs	r3, #1
 800b2e0:	60fb      	str	r3, [r7, #12]
 800b2e2:	e00b      	b.n	800b2fc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b2e4:	4a0d      	ldr	r2, [pc, #52]	; (800b31c <tcp_listen_closed+0x70>)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	6879      	ldr	r1, [r7, #4]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7ff ffb1 	bl	800b258 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2b03      	cmp	r3, #3
 800b300:	d9f0      	bls.n	800b2e4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b302:	bf00      	nop
 800b304:	bf00      	nop
 800b306:	3710      	adds	r7, #16
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	080150d0 	.word	0x080150d0
 800b310:	08015180 	.word	0x08015180
 800b314:	08015114 	.word	0x08015114
 800b318:	0801518c 	.word	0x0801518c
 800b31c:	080170f0 	.word	0x080170f0

0800b320 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b320:	b5b0      	push	{r4, r5, r7, lr}
 800b322:	b088      	sub	sp, #32
 800b324:	af04      	add	r7, sp, #16
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	460b      	mov	r3, r1
 800b32a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d106      	bne.n	800b340 <tcp_close_shutdown+0x20>
 800b332:	4b63      	ldr	r3, [pc, #396]	; (800b4c0 <tcp_close_shutdown+0x1a0>)
 800b334:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b338:	4962      	ldr	r1, [pc, #392]	; (800b4c4 <tcp_close_shutdown+0x1a4>)
 800b33a:	4863      	ldr	r0, [pc, #396]	; (800b4c8 <tcp_close_shutdown+0x1a8>)
 800b33c:	f008 f970 	bl	8013620 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b340:	78fb      	ldrb	r3, [r7, #3]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d066      	beq.n	800b414 <tcp_close_shutdown+0xf4>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	7d1b      	ldrb	r3, [r3, #20]
 800b34a:	2b04      	cmp	r3, #4
 800b34c:	d003      	beq.n	800b356 <tcp_close_shutdown+0x36>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	7d1b      	ldrb	r3, [r3, #20]
 800b352:	2b07      	cmp	r3, #7
 800b354:	d15e      	bne.n	800b414 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d104      	bne.n	800b368 <tcp_close_shutdown+0x48>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b362:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b366:	d055      	beq.n	800b414 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	8b5b      	ldrh	r3, [r3, #26]
 800b36c:	f003 0310 	and.w	r3, r3, #16
 800b370:	2b00      	cmp	r3, #0
 800b372:	d106      	bne.n	800b382 <tcp_close_shutdown+0x62>
 800b374:	4b52      	ldr	r3, [pc, #328]	; (800b4c0 <tcp_close_shutdown+0x1a0>)
 800b376:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b37a:	4954      	ldr	r1, [pc, #336]	; (800b4cc <tcp_close_shutdown+0x1ac>)
 800b37c:	4852      	ldr	r0, [pc, #328]	; (800b4c8 <tcp_close_shutdown+0x1a8>)
 800b37e:	f008 f94f 	bl	8013620 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b38a:	687d      	ldr	r5, [r7, #4]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	3304      	adds	r3, #4
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	8ad2      	ldrh	r2, [r2, #22]
 800b394:	6879      	ldr	r1, [r7, #4]
 800b396:	8b09      	ldrh	r1, [r1, #24]
 800b398:	9102      	str	r1, [sp, #8]
 800b39a:	9201      	str	r2, [sp, #4]
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	462b      	mov	r3, r5
 800b3a0:	4622      	mov	r2, r4
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f004 fe91 	bl	80100cc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f001 f8c6 	bl	800c53c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b3b0:	4b47      	ldr	r3, [pc, #284]	; (800b4d0 <tcp_close_shutdown+0x1b0>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d105      	bne.n	800b3c6 <tcp_close_shutdown+0xa6>
 800b3ba:	4b45      	ldr	r3, [pc, #276]	; (800b4d0 <tcp_close_shutdown+0x1b0>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	4a43      	ldr	r2, [pc, #268]	; (800b4d0 <tcp_close_shutdown+0x1b0>)
 800b3c2:	6013      	str	r3, [r2, #0]
 800b3c4:	e013      	b.n	800b3ee <tcp_close_shutdown+0xce>
 800b3c6:	4b42      	ldr	r3, [pc, #264]	; (800b4d0 <tcp_close_shutdown+0x1b0>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	60fb      	str	r3, [r7, #12]
 800b3cc:	e00c      	b.n	800b3e8 <tcp_close_shutdown+0xc8>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d104      	bne.n	800b3e2 <tcp_close_shutdown+0xc2>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68da      	ldr	r2, [r3, #12]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	60da      	str	r2, [r3, #12]
 800b3e0:	e005      	b.n	800b3ee <tcp_close_shutdown+0xce>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1ef      	bne.n	800b3ce <tcp_close_shutdown+0xae>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	60da      	str	r2, [r3, #12]
 800b3f4:	4b37      	ldr	r3, [pc, #220]	; (800b4d4 <tcp_close_shutdown+0x1b4>)
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b3fa:	4b37      	ldr	r3, [pc, #220]	; (800b4d8 <tcp_close_shutdown+0x1b8>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	429a      	cmp	r2, r3
 800b402:	d102      	bne.n	800b40a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b404:	f003 fd5e 	bl	800eec4 <tcp_trigger_input_pcb_close>
 800b408:	e002      	b.n	800b410 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f7ff fed6 	bl	800b1bc <tcp_free>
      }
      return ERR_OK;
 800b410:	2300      	movs	r3, #0
 800b412:	e050      	b.n	800b4b6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	7d1b      	ldrb	r3, [r3, #20]
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d03b      	beq.n	800b494 <tcp_close_shutdown+0x174>
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	dc44      	bgt.n	800b4aa <tcp_close_shutdown+0x18a>
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <tcp_close_shutdown+0x10a>
 800b424:	2b01      	cmp	r3, #1
 800b426:	d02a      	beq.n	800b47e <tcp_close_shutdown+0x15e>
 800b428:	e03f      	b.n	800b4aa <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	8adb      	ldrh	r3, [r3, #22]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d021      	beq.n	800b476 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b432:	4b2a      	ldr	r3, [pc, #168]	; (800b4dc <tcp_close_shutdown+0x1bc>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d105      	bne.n	800b448 <tcp_close_shutdown+0x128>
 800b43c:	4b27      	ldr	r3, [pc, #156]	; (800b4dc <tcp_close_shutdown+0x1bc>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	4a26      	ldr	r2, [pc, #152]	; (800b4dc <tcp_close_shutdown+0x1bc>)
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	e013      	b.n	800b470 <tcp_close_shutdown+0x150>
 800b448:	4b24      	ldr	r3, [pc, #144]	; (800b4dc <tcp_close_shutdown+0x1bc>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	60bb      	str	r3, [r7, #8]
 800b44e:	e00c      	b.n	800b46a <tcp_close_shutdown+0x14a>
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	429a      	cmp	r2, r3
 800b458:	d104      	bne.n	800b464 <tcp_close_shutdown+0x144>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	68da      	ldr	r2, [r3, #12]
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	60da      	str	r2, [r3, #12]
 800b462:	e005      	b.n	800b470 <tcp_close_shutdown+0x150>
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	60bb      	str	r3, [r7, #8]
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1ef      	bne.n	800b450 <tcp_close_shutdown+0x130>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7ff fea0 	bl	800b1bc <tcp_free>
      break;
 800b47c:	e01a      	b.n	800b4b4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7ff ff14 	bl	800b2ac <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b484:	6879      	ldr	r1, [r7, #4]
 800b486:	4816      	ldr	r0, [pc, #88]	; (800b4e0 <tcp_close_shutdown+0x1c0>)
 800b488:	f001 f8a8 	bl	800c5dc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7ff feb1 	bl	800b1f4 <tcp_free_listen>
      break;
 800b492:	e00f      	b.n	800b4b4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b494:	6879      	ldr	r1, [r7, #4]
 800b496:	480e      	ldr	r0, [pc, #56]	; (800b4d0 <tcp_close_shutdown+0x1b0>)
 800b498:	f001 f8a0 	bl	800c5dc <tcp_pcb_remove>
 800b49c:	4b0d      	ldr	r3, [pc, #52]	; (800b4d4 <tcp_close_shutdown+0x1b4>)
 800b49e:	2201      	movs	r2, #1
 800b4a0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff fe8a 	bl	800b1bc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b4a8:	e004      	b.n	800b4b4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 f81a 	bl	800b4e4 <tcp_close_shutdown_fin>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	e000      	b.n	800b4b6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bdb0      	pop	{r4, r5, r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	080150d0 	.word	0x080150d0
 800b4c4:	080151a4 	.word	0x080151a4
 800b4c8:	08015114 	.word	0x08015114
 800b4cc:	080151c4 	.word	0x080151c4
 800b4d0:	2000ca30 	.word	0x2000ca30
 800b4d4:	2000ca38 	.word	0x2000ca38
 800b4d8:	2000ca70 	.word	0x2000ca70
 800b4dc:	2000ca28 	.word	0x2000ca28
 800b4e0:	2000ca2c 	.word	0x2000ca2c

0800b4e4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d106      	bne.n	800b500 <tcp_close_shutdown_fin+0x1c>
 800b4f2:	4b2e      	ldr	r3, [pc, #184]	; (800b5ac <tcp_close_shutdown_fin+0xc8>)
 800b4f4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b4f8:	492d      	ldr	r1, [pc, #180]	; (800b5b0 <tcp_close_shutdown_fin+0xcc>)
 800b4fa:	482e      	ldr	r0, [pc, #184]	; (800b5b4 <tcp_close_shutdown_fin+0xd0>)
 800b4fc:	f008 f890 	bl	8013620 <iprintf>

  switch (pcb->state) {
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	7d1b      	ldrb	r3, [r3, #20]
 800b504:	2b07      	cmp	r3, #7
 800b506:	d020      	beq.n	800b54a <tcp_close_shutdown_fin+0x66>
 800b508:	2b07      	cmp	r3, #7
 800b50a:	dc2b      	bgt.n	800b564 <tcp_close_shutdown_fin+0x80>
 800b50c:	2b03      	cmp	r3, #3
 800b50e:	d002      	beq.n	800b516 <tcp_close_shutdown_fin+0x32>
 800b510:	2b04      	cmp	r3, #4
 800b512:	d00d      	beq.n	800b530 <tcp_close_shutdown_fin+0x4c>
 800b514:	e026      	b.n	800b564 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f003 fee6 	bl	800f2e8 <tcp_send_fin>
 800b51c:	4603      	mov	r3, r0
 800b51e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d11f      	bne.n	800b568 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2205      	movs	r2, #5
 800b52c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b52e:	e01b      	b.n	800b568 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f003 fed9 	bl	800f2e8 <tcp_send_fin>
 800b536:	4603      	mov	r3, r0
 800b538:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b53a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d114      	bne.n	800b56c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2205      	movs	r2, #5
 800b546:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b548:	e010      	b.n	800b56c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f003 fecc 	bl	800f2e8 <tcp_send_fin>
 800b550:	4603      	mov	r3, r0
 800b552:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d109      	bne.n	800b570 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2209      	movs	r2, #9
 800b560:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b562:	e005      	b.n	800b570 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b564:	2300      	movs	r3, #0
 800b566:	e01c      	b.n	800b5a2 <tcp_close_shutdown_fin+0xbe>
      break;
 800b568:	bf00      	nop
 800b56a:	e002      	b.n	800b572 <tcp_close_shutdown_fin+0x8e>
      break;
 800b56c:	bf00      	nop
 800b56e:	e000      	b.n	800b572 <tcp_close_shutdown_fin+0x8e>
      break;
 800b570:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d103      	bne.n	800b582 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f003 fff2 	bl	800f564 <tcp_output>
 800b580:	e00d      	b.n	800b59e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58a:	d108      	bne.n	800b59e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	8b5b      	ldrh	r3, [r3, #26]
 800b590:	f043 0308 	orr.w	r3, r3, #8
 800b594:	b29a      	uxth	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b59a:	2300      	movs	r3, #0
 800b59c:	e001      	b.n	800b5a2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	080150d0 	.word	0x080150d0
 800b5b0:	08015180 	.word	0x08015180
 800b5b4:	08015114 	.word	0x08015114

0800b5b8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d109      	bne.n	800b5da <tcp_close+0x22>
 800b5c6:	4b0f      	ldr	r3, [pc, #60]	; (800b604 <tcp_close+0x4c>)
 800b5c8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b5cc:	490e      	ldr	r1, [pc, #56]	; (800b608 <tcp_close+0x50>)
 800b5ce:	480f      	ldr	r0, [pc, #60]	; (800b60c <tcp_close+0x54>)
 800b5d0:	f008 f826 	bl	8013620 <iprintf>
 800b5d4:	f06f 030f 	mvn.w	r3, #15
 800b5d8:	e00f      	b.n	800b5fa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	7d1b      	ldrb	r3, [r3, #20]
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d006      	beq.n	800b5f0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	8b5b      	ldrh	r3, [r3, #26]
 800b5e6:	f043 0310 	orr.w	r3, r3, #16
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7ff fe94 	bl	800b320 <tcp_close_shutdown>
 800b5f8:	4603      	mov	r3, r0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	080150d0 	.word	0x080150d0
 800b608:	080151e0 	.word	0x080151e0
 800b60c:	08015114 	.word	0x08015114

0800b610 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b08e      	sub	sp, #56	; 0x38
 800b614:	af04      	add	r7, sp, #16
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d107      	bne.n	800b630 <tcp_abandon+0x20>
 800b620:	4b52      	ldr	r3, [pc, #328]	; (800b76c <tcp_abandon+0x15c>)
 800b622:	f240 223d 	movw	r2, #573	; 0x23d
 800b626:	4952      	ldr	r1, [pc, #328]	; (800b770 <tcp_abandon+0x160>)
 800b628:	4852      	ldr	r0, [pc, #328]	; (800b774 <tcp_abandon+0x164>)
 800b62a:	f007 fff9 	bl	8013620 <iprintf>
 800b62e:	e099      	b.n	800b764 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	7d1b      	ldrb	r3, [r3, #20]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d106      	bne.n	800b646 <tcp_abandon+0x36>
 800b638:	4b4c      	ldr	r3, [pc, #304]	; (800b76c <tcp_abandon+0x15c>)
 800b63a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b63e:	494e      	ldr	r1, [pc, #312]	; (800b778 <tcp_abandon+0x168>)
 800b640:	484c      	ldr	r0, [pc, #304]	; (800b774 <tcp_abandon+0x164>)
 800b642:	f007 ffed 	bl	8013620 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	7d1b      	ldrb	r3, [r3, #20]
 800b64a:	2b0a      	cmp	r3, #10
 800b64c:	d107      	bne.n	800b65e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b64e:	6879      	ldr	r1, [r7, #4]
 800b650:	484a      	ldr	r0, [pc, #296]	; (800b77c <tcp_abandon+0x16c>)
 800b652:	f000 ffc3 	bl	800c5dc <tcp_pcb_remove>
    tcp_free(pcb);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f7ff fdb0 	bl	800b1bc <tcp_free>
 800b65c:	e082      	b.n	800b764 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b662:	2300      	movs	r3, #0
 800b664:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b678:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	7d1b      	ldrb	r3, [r3, #20]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d126      	bne.n	800b6d6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	8adb      	ldrh	r3, [r3, #22]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d02e      	beq.n	800b6ee <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b690:	4b3b      	ldr	r3, [pc, #236]	; (800b780 <tcp_abandon+0x170>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	429a      	cmp	r2, r3
 800b698:	d105      	bne.n	800b6a6 <tcp_abandon+0x96>
 800b69a:	4b39      	ldr	r3, [pc, #228]	; (800b780 <tcp_abandon+0x170>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	4a37      	ldr	r2, [pc, #220]	; (800b780 <tcp_abandon+0x170>)
 800b6a2:	6013      	str	r3, [r2, #0]
 800b6a4:	e013      	b.n	800b6ce <tcp_abandon+0xbe>
 800b6a6:	4b36      	ldr	r3, [pc, #216]	; (800b780 <tcp_abandon+0x170>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	61fb      	str	r3, [r7, #28]
 800b6ac:	e00c      	b.n	800b6c8 <tcp_abandon+0xb8>
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d104      	bne.n	800b6c2 <tcp_abandon+0xb2>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	68da      	ldr	r2, [r3, #12]
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	60da      	str	r2, [r3, #12]
 800b6c0:	e005      	b.n	800b6ce <tcp_abandon+0xbe>
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	61fb      	str	r3, [r7, #28]
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1ef      	bne.n	800b6ae <tcp_abandon+0x9e>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	60da      	str	r2, [r3, #12]
 800b6d4:	e00b      	b.n	800b6ee <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	8adb      	ldrh	r3, [r3, #22]
 800b6de:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b6e0:	6879      	ldr	r1, [r7, #4]
 800b6e2:	4828      	ldr	r0, [pc, #160]	; (800b784 <tcp_abandon+0x174>)
 800b6e4:	f000 ff7a 	bl	800c5dc <tcp_pcb_remove>
 800b6e8:	4b27      	ldr	r3, [pc, #156]	; (800b788 <tcp_abandon+0x178>)
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d004      	beq.n	800b700 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f000 fd1c 	bl	800c138 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b704:	2b00      	cmp	r3, #0
 800b706:	d004      	beq.n	800b712 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 fd13 	bl	800c138 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b716:	2b00      	cmp	r3, #0
 800b718:	d004      	beq.n	800b724 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b71e:	4618      	mov	r0, r3
 800b720:	f000 fd0a 	bl	800c138 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00e      	beq.n	800b748 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b72a:	6879      	ldr	r1, [r7, #4]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	3304      	adds	r3, #4
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	8b12      	ldrh	r2, [r2, #24]
 800b734:	9202      	str	r2, [sp, #8]
 800b736:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b738:	9201      	str	r2, [sp, #4]
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	460b      	mov	r3, r1
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	69b9      	ldr	r1, [r7, #24]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f004 fcc2 	bl	80100cc <tcp_rst>
    }
    last_state = pcb->state;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	7d1b      	ldrb	r3, [r3, #20]
 800b74c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f7ff fd34 	bl	800b1bc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d004      	beq.n	800b764 <tcp_abandon+0x154>
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	f06f 010c 	mvn.w	r1, #12
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	4798      	blx	r3
  }
}
 800b764:	3728      	adds	r7, #40	; 0x28
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	080150d0 	.word	0x080150d0
 800b770:	08015214 	.word	0x08015214
 800b774:	08015114 	.word	0x08015114
 800b778:	08015230 	.word	0x08015230
 800b77c:	2000ca34 	.word	0x2000ca34
 800b780:	2000ca28 	.word	0x2000ca28
 800b784:	2000ca30 	.word	0x2000ca30
 800b788:	2000ca38 	.word	0x2000ca38

0800b78c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b794:	2101      	movs	r1, #1
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f7ff ff3a 	bl	800b610 <tcp_abandon>
}
 800b79c:	bf00      	nop
 800b79e:	3708      	adds	r7, #8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d106      	bne.n	800b7c0 <tcp_update_rcv_ann_wnd+0x1c>
 800b7b2:	4b25      	ldr	r3, [pc, #148]	; (800b848 <tcp_update_rcv_ann_wnd+0xa4>)
 800b7b4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b7b8:	4924      	ldr	r1, [pc, #144]	; (800b84c <tcp_update_rcv_ann_wnd+0xa8>)
 800b7ba:	4825      	ldr	r0, [pc, #148]	; (800b850 <tcp_update_rcv_ann_wnd+0xac>)
 800b7bc:	f007 ff30 	bl	8013620 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b7c8:	4413      	add	r3, r2
 800b7ca:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b7d4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b7d8:	bf28      	it	cs
 800b7da:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b7de:	b292      	uxth	r2, r2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	db08      	blt.n	800b7fc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	e020      	b.n	800b83e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b804:	1ad3      	subs	r3, r2, r3
 800b806:	2b00      	cmp	r3, #0
 800b808:	dd03      	ble.n	800b812 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b810:	e014      	b.n	800b83c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b824:	d306      	bcc.n	800b834 <tcp_update_rcv_ann_wnd+0x90>
 800b826:	4b08      	ldr	r3, [pc, #32]	; (800b848 <tcp_update_rcv_ann_wnd+0xa4>)
 800b828:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b82c:	4909      	ldr	r1, [pc, #36]	; (800b854 <tcp_update_rcv_ann_wnd+0xb0>)
 800b82e:	4808      	ldr	r0, [pc, #32]	; (800b850 <tcp_update_rcv_ann_wnd+0xac>)
 800b830:	f007 fef6 	bl	8013620 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	b29a      	uxth	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b83c:	2300      	movs	r3, #0
  }
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	080150d0 	.word	0x080150d0
 800b84c:	0801532c 	.word	0x0801532c
 800b850:	08015114 	.word	0x08015114
 800b854:	08015350 	.word	0x08015350

0800b858 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	460b      	mov	r3, r1
 800b862:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d107      	bne.n	800b87a <tcp_recved+0x22>
 800b86a:	4b1f      	ldr	r3, [pc, #124]	; (800b8e8 <tcp_recved+0x90>)
 800b86c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b870:	491e      	ldr	r1, [pc, #120]	; (800b8ec <tcp_recved+0x94>)
 800b872:	481f      	ldr	r0, [pc, #124]	; (800b8f0 <tcp_recved+0x98>)
 800b874:	f007 fed4 	bl	8013620 <iprintf>
 800b878:	e032      	b.n	800b8e0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	7d1b      	ldrb	r3, [r3, #20]
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d106      	bne.n	800b890 <tcp_recved+0x38>
 800b882:	4b19      	ldr	r3, [pc, #100]	; (800b8e8 <tcp_recved+0x90>)
 800b884:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b888:	491a      	ldr	r1, [pc, #104]	; (800b8f4 <tcp_recved+0x9c>)
 800b88a:	4819      	ldr	r0, [pc, #100]	; (800b8f0 <tcp_recved+0x98>)
 800b88c:	f007 fec8 	bl	8013620 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b894:	887b      	ldrh	r3, [r7, #2]
 800b896:	4413      	add	r3, r2
 800b898:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b89a:	89fb      	ldrh	r3, [r7, #14]
 800b89c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b8a0:	d804      	bhi.n	800b8ac <tcp_recved+0x54>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8a6:	89fa      	ldrh	r2, [r7, #14]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d204      	bcs.n	800b8b6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b8b2:	851a      	strh	r2, [r3, #40]	; 0x28
 800b8b4:	e002      	b.n	800b8bc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	89fa      	ldrh	r2, [r7, #14]
 800b8ba:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7ff ff71 	bl	800b7a4 <tcp_update_rcv_ann_wnd>
 800b8c2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b8ca:	d309      	bcc.n	800b8e0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	8b5b      	ldrh	r3, [r3, #26]
 800b8d0:	f043 0302 	orr.w	r3, r3, #2
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f003 fe42 	bl	800f564 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	080150d0 	.word	0x080150d0
 800b8ec:	0801536c 	.word	0x0801536c
 800b8f0:	08015114 	.word	0x08015114
 800b8f4:	08015384 	.word	0x08015384

0800b8f8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b8f8:	b5b0      	push	{r4, r5, r7, lr}
 800b8fa:	b090      	sub	sp, #64	; 0x40
 800b8fc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b904:	4b94      	ldr	r3, [pc, #592]	; (800bb58 <tcp_slowtmr+0x260>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	3301      	adds	r3, #1
 800b90a:	4a93      	ldr	r2, [pc, #588]	; (800bb58 <tcp_slowtmr+0x260>)
 800b90c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b90e:	4b93      	ldr	r3, [pc, #588]	; (800bb5c <tcp_slowtmr+0x264>)
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	3301      	adds	r3, #1
 800b914:	b2da      	uxtb	r2, r3
 800b916:	4b91      	ldr	r3, [pc, #580]	; (800bb5c <tcp_slowtmr+0x264>)
 800b918:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b91a:	2300      	movs	r3, #0
 800b91c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b91e:	4b90      	ldr	r3, [pc, #576]	; (800bb60 <tcp_slowtmr+0x268>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b924:	e29d      	b.n	800be62 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b928:	7d1b      	ldrb	r3, [r3, #20]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d106      	bne.n	800b93c <tcp_slowtmr+0x44>
 800b92e:	4b8d      	ldr	r3, [pc, #564]	; (800bb64 <tcp_slowtmr+0x26c>)
 800b930:	f240 42be 	movw	r2, #1214	; 0x4be
 800b934:	498c      	ldr	r1, [pc, #560]	; (800bb68 <tcp_slowtmr+0x270>)
 800b936:	488d      	ldr	r0, [pc, #564]	; (800bb6c <tcp_slowtmr+0x274>)
 800b938:	f007 fe72 	bl	8013620 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93e:	7d1b      	ldrb	r3, [r3, #20]
 800b940:	2b01      	cmp	r3, #1
 800b942:	d106      	bne.n	800b952 <tcp_slowtmr+0x5a>
 800b944:	4b87      	ldr	r3, [pc, #540]	; (800bb64 <tcp_slowtmr+0x26c>)
 800b946:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b94a:	4989      	ldr	r1, [pc, #548]	; (800bb70 <tcp_slowtmr+0x278>)
 800b94c:	4887      	ldr	r0, [pc, #540]	; (800bb6c <tcp_slowtmr+0x274>)
 800b94e:	f007 fe67 	bl	8013620 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b954:	7d1b      	ldrb	r3, [r3, #20]
 800b956:	2b0a      	cmp	r3, #10
 800b958:	d106      	bne.n	800b968 <tcp_slowtmr+0x70>
 800b95a:	4b82      	ldr	r3, [pc, #520]	; (800bb64 <tcp_slowtmr+0x26c>)
 800b95c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b960:	4984      	ldr	r1, [pc, #528]	; (800bb74 <tcp_slowtmr+0x27c>)
 800b962:	4882      	ldr	r0, [pc, #520]	; (800bb6c <tcp_slowtmr+0x274>)
 800b964:	f007 fe5c 	bl	8013620 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96a:	7f9a      	ldrb	r2, [r3, #30]
 800b96c:	4b7b      	ldr	r3, [pc, #492]	; (800bb5c <tcp_slowtmr+0x264>)
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	429a      	cmp	r2, r3
 800b972:	d105      	bne.n	800b980 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b976:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b97e:	e270      	b.n	800be62 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b980:	4b76      	ldr	r3, [pc, #472]	; (800bb5c <tcp_slowtmr+0x264>)
 800b982:	781a      	ldrb	r2, [r3, #0]
 800b984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b986:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b988:	2300      	movs	r3, #0
 800b98a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b98e:	2300      	movs	r3, #0
 800b990:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b996:	7d1b      	ldrb	r3, [r3, #20]
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d10a      	bne.n	800b9b2 <tcp_slowtmr+0xba>
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b9a2:	2b05      	cmp	r3, #5
 800b9a4:	d905      	bls.n	800b9b2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b9a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9b0:	e11e      	b.n	800bbf0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b9b8:	2b0b      	cmp	r3, #11
 800b9ba:	d905      	bls.n	800b9c8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9c6:	e113      	b.n	800bbf0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d075      	beq.n	800babe <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d006      	beq.n	800b9e8 <tcp_slowtmr+0xf0>
 800b9da:	4b62      	ldr	r3, [pc, #392]	; (800bb64 <tcp_slowtmr+0x26c>)
 800b9dc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b9e0:	4965      	ldr	r1, [pc, #404]	; (800bb78 <tcp_slowtmr+0x280>)
 800b9e2:	4862      	ldr	r0, [pc, #392]	; (800bb6c <tcp_slowtmr+0x274>)
 800b9e4:	f007 fe1c 	bl	8013620 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d106      	bne.n	800b9fe <tcp_slowtmr+0x106>
 800b9f0:	4b5c      	ldr	r3, [pc, #368]	; (800bb64 <tcp_slowtmr+0x26c>)
 800b9f2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b9f6:	4961      	ldr	r1, [pc, #388]	; (800bb7c <tcp_slowtmr+0x284>)
 800b9f8:	485c      	ldr	r0, [pc, #368]	; (800bb6c <tcp_slowtmr+0x274>)
 800b9fa:	f007 fe11 	bl	8013620 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba00:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ba04:	2b0b      	cmp	r3, #11
 800ba06:	d905      	bls.n	800ba14 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ba08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba12:	e0ed      	b.n	800bbf0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ba14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba16:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	4a58      	ldr	r2, [pc, #352]	; (800bb80 <tcp_slowtmr+0x288>)
 800ba1e:	5cd3      	ldrb	r3, [r2, r3]
 800ba20:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ba22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ba28:	7c7a      	ldrb	r2, [r7, #17]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d907      	bls.n	800ba3e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ba2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba30:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ba34:	3301      	adds	r3, #1
 800ba36:	b2da      	uxtb	r2, r3
 800ba38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ba3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ba44:	7c7a      	ldrb	r2, [r7, #17]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	f200 80d2 	bhi.w	800bbf0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ba50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d108      	bne.n	800ba6c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ba5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba5c:	f004 fc2a 	bl	80102b4 <tcp_zero_window_probe>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d014      	beq.n	800ba90 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ba66:	2300      	movs	r3, #0
 800ba68:	623b      	str	r3, [r7, #32]
 800ba6a:	e011      	b.n	800ba90 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ba6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba72:	4619      	mov	r1, r3
 800ba74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba76:	f003 faef 	bl	800f058 <tcp_split_unsent_seg>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d107      	bne.n	800ba90 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ba80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba82:	f003 fd6f 	bl	800f564 <tcp_output>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d101      	bne.n	800ba90 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ba90:	6a3b      	ldr	r3, [r7, #32]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	f000 80ac 	beq.w	800bbf0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ba98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800baa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800baa6:	2b06      	cmp	r3, #6
 800baa8:	f200 80a2 	bhi.w	800bbf0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800baac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bab2:	3301      	adds	r3, #1
 800bab4:	b2da      	uxtb	r2, r3
 800bab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800babc:	e098      	b.n	800bbf0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800babe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	db0f      	blt.n	800bae8 <tcp_slowtmr+0x1f0>
 800bac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bace:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d008      	beq.n	800bae8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800bad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800badc:	b29b      	uxth	r3, r3
 800bade:	3301      	adds	r3, #1
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	b21a      	sxth	r2, r3
 800bae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800bae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baea:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800baee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800baf4:	429a      	cmp	r2, r3
 800baf6:	db7b      	blt.n	800bbf0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800baf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bafa:	f004 f825 	bl	800fb48 <tcp_rexmit_rto_prepare>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d007      	beq.n	800bb14 <tcp_slowtmr+0x21c>
 800bb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d171      	bne.n	800bbf0 <tcp_slowtmr+0x2f8>
 800bb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d06d      	beq.n	800bbf0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800bb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb16:	7d1b      	ldrb	r3, [r3, #20]
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d03a      	beq.n	800bb92 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800bb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bb22:	2b0c      	cmp	r3, #12
 800bb24:	bf28      	it	cs
 800bb26:	230c      	movcs	r3, #12
 800bb28:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bb30:	10db      	asrs	r3, r3, #3
 800bb32:	b21b      	sxth	r3, r3
 800bb34:	461a      	mov	r2, r3
 800bb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bb3c:	4413      	add	r3, r2
 800bb3e:	7efa      	ldrb	r2, [r7, #27]
 800bb40:	4910      	ldr	r1, [pc, #64]	; (800bb84 <tcp_slowtmr+0x28c>)
 800bb42:	5c8a      	ldrb	r2, [r1, r2]
 800bb44:	4093      	lsls	r3, r2
 800bb46:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	dc1a      	bgt.n	800bb88 <tcp_slowtmr+0x290>
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	b21a      	sxth	r2, r3
 800bb56:	e019      	b.n	800bb8c <tcp_slowtmr+0x294>
 800bb58:	2000ca24 	.word	0x2000ca24
 800bb5c:	2000ca3a 	.word	0x2000ca3a
 800bb60:	2000ca30 	.word	0x2000ca30
 800bb64:	080150d0 	.word	0x080150d0
 800bb68:	08015414 	.word	0x08015414
 800bb6c:	08015114 	.word	0x08015114
 800bb70:	08015440 	.word	0x08015440
 800bb74:	0801546c 	.word	0x0801546c
 800bb78:	0801549c 	.word	0x0801549c
 800bb7c:	080154d0 	.word	0x080154d0
 800bb80:	080170e8 	.word	0x080170e8
 800bb84:	080170d8 	.word	0x080170d8
 800bb88:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800bb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb94:	2200      	movs	r2, #0
 800bb96:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bba4:	4293      	cmp	r3, r2
 800bba6:	bf28      	it	cs
 800bba8:	4613      	movcs	r3, r2
 800bbaa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800bbac:	8a7b      	ldrh	r3, [r7, #18]
 800bbae:	085b      	lsrs	r3, r3, #1
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbc2:	005b      	lsls	r3, r3, #1
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d206      	bcs.n	800bbd8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800bbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbce:	005b      	lsls	r3, r3, #1
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800bbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbda:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800bbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800bbea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbec:	f004 f81c 	bl	800fc28 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800bbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf2:	7d1b      	ldrb	r3, [r3, #20]
 800bbf4:	2b06      	cmp	r3, #6
 800bbf6:	d111      	bne.n	800bc1c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	8b5b      	ldrh	r3, [r3, #26]
 800bbfc:	f003 0310 	and.w	r3, r3, #16
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00b      	beq.n	800bc1c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bc04:	4b9c      	ldr	r3, [pc, #624]	; (800be78 <tcp_slowtmr+0x580>)
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0a:	6a1b      	ldr	r3, [r3, #32]
 800bc0c:	1ad3      	subs	r3, r2, r3
 800bc0e:	2b28      	cmp	r3, #40	; 0x28
 800bc10:	d904      	bls.n	800bc1c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800bc12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc16:	3301      	adds	r3, #1
 800bc18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1e:	7a5b      	ldrb	r3, [r3, #9]
 800bc20:	f003 0308 	and.w	r3, r3, #8
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d04a      	beq.n	800bcbe <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800bc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bc2c:	2b04      	cmp	r3, #4
 800bc2e:	d003      	beq.n	800bc38 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800bc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc32:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800bc34:	2b07      	cmp	r3, #7
 800bc36:	d142      	bne.n	800bcbe <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bc38:	4b8f      	ldr	r3, [pc, #572]	; (800be78 <tcp_slowtmr+0x580>)
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3e:	6a1b      	ldr	r3, [r3, #32]
 800bc40:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800bc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc44:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bc48:	4b8c      	ldr	r3, [pc, #560]	; (800be7c <tcp_slowtmr+0x584>)
 800bc4a:	440b      	add	r3, r1
 800bc4c:	498c      	ldr	r1, [pc, #560]	; (800be80 <tcp_slowtmr+0x588>)
 800bc4e:	fba1 1303 	umull	r1, r3, r1, r3
 800bc52:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d90a      	bls.n	800bc6e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800bc58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800bc62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc66:	3301      	adds	r3, #1
 800bc68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bc6c:	e027      	b.n	800bcbe <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bc6e:	4b82      	ldr	r3, [pc, #520]	; (800be78 <tcp_slowtmr+0x580>)
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc80:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bc84:	4618      	mov	r0, r3
 800bc86:	4b7f      	ldr	r3, [pc, #508]	; (800be84 <tcp_slowtmr+0x58c>)
 800bc88:	fb00 f303 	mul.w	r3, r0, r3
 800bc8c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bc8e:	497c      	ldr	r1, [pc, #496]	; (800be80 <tcp_slowtmr+0x588>)
 800bc90:	fba1 1303 	umull	r1, r3, r1, r3
 800bc94:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d911      	bls.n	800bcbe <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800bc9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc9c:	f004 faca 	bl	8010234 <tcp_keepalive>
 800bca0:	4603      	mov	r3, r0
 800bca2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800bca6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d107      	bne.n	800bcbe <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800bcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	b2da      	uxtb	r2, r3
 800bcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcba:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800bcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d011      	beq.n	800bcea <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800bcc6:	4b6c      	ldr	r3, [pc, #432]	; (800be78 <tcp_slowtmr+0x580>)
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bccc:	6a1b      	ldr	r3, [r3, #32]
 800bcce:	1ad2      	subs	r2, r2, r3
 800bcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	460b      	mov	r3, r1
 800bcda:	005b      	lsls	r3, r3, #1
 800bcdc:	440b      	add	r3, r1
 800bcde:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d302      	bcc.n	800bcea <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800bce4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bce6:	f000 fddd 	bl	800c8a4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800bcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcec:	7d1b      	ldrb	r3, [r3, #20]
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d10b      	bne.n	800bd0a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bcf2:	4b61      	ldr	r3, [pc, #388]	; (800be78 <tcp_slowtmr+0x580>)
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf8:	6a1b      	ldr	r3, [r3, #32]
 800bcfa:	1ad3      	subs	r3, r2, r3
 800bcfc:	2b28      	cmp	r3, #40	; 0x28
 800bcfe:	d904      	bls.n	800bd0a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800bd00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd04:	3301      	adds	r3, #1
 800bd06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800bd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0c:	7d1b      	ldrb	r3, [r3, #20]
 800bd0e:	2b09      	cmp	r3, #9
 800bd10:	d10b      	bne.n	800bd2a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bd12:	4b59      	ldr	r3, [pc, #356]	; (800be78 <tcp_slowtmr+0x580>)
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd18:	6a1b      	ldr	r3, [r3, #32]
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	2bf0      	cmp	r3, #240	; 0xf0
 800bd1e:	d904      	bls.n	800bd2a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800bd20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd24:	3301      	adds	r3, #1
 800bd26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bd2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d060      	beq.n	800bdf4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800bd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd38:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800bd3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd3c:	f000 fbfe 	bl	800c53c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d010      	beq.n	800bd68 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bd46:	4b50      	ldr	r3, [pc, #320]	; (800be88 <tcp_slowtmr+0x590>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d106      	bne.n	800bd5e <tcp_slowtmr+0x466>
 800bd50:	4b4e      	ldr	r3, [pc, #312]	; (800be8c <tcp_slowtmr+0x594>)
 800bd52:	f240 526d 	movw	r2, #1389	; 0x56d
 800bd56:	494e      	ldr	r1, [pc, #312]	; (800be90 <tcp_slowtmr+0x598>)
 800bd58:	484e      	ldr	r0, [pc, #312]	; (800be94 <tcp_slowtmr+0x59c>)
 800bd5a:	f007 fc61 	bl	8013620 <iprintf>
        prev->next = pcb->next;
 800bd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd60:	68da      	ldr	r2, [r3, #12]
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	60da      	str	r2, [r3, #12]
 800bd66:	e00f      	b.n	800bd88 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bd68:	4b47      	ldr	r3, [pc, #284]	; (800be88 <tcp_slowtmr+0x590>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d006      	beq.n	800bd80 <tcp_slowtmr+0x488>
 800bd72:	4b46      	ldr	r3, [pc, #280]	; (800be8c <tcp_slowtmr+0x594>)
 800bd74:	f240 5271 	movw	r2, #1393	; 0x571
 800bd78:	4947      	ldr	r1, [pc, #284]	; (800be98 <tcp_slowtmr+0x5a0>)
 800bd7a:	4846      	ldr	r0, [pc, #280]	; (800be94 <tcp_slowtmr+0x59c>)
 800bd7c:	f007 fc50 	bl	8013620 <iprintf>
        tcp_active_pcbs = pcb->next;
 800bd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	4a40      	ldr	r2, [pc, #256]	; (800be88 <tcp_slowtmr+0x590>)
 800bd86:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800bd88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d013      	beq.n	800bdb8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd92:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd96:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bd98:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800bd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bda0:	8ad2      	ldrh	r2, [r2, #22]
 800bda2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bda4:	8b09      	ldrh	r1, [r1, #24]
 800bda6:	9102      	str	r1, [sp, #8]
 800bda8:	9201      	str	r2, [sp, #4]
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	462b      	mov	r3, r5
 800bdae:	4622      	mov	r2, r4
 800bdb0:	4601      	mov	r1, r0
 800bdb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdb4:	f004 f98a 	bl	80100cc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800bdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdba:	691b      	ldr	r3, [r3, #16]
 800bdbc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800bdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc0:	7d1b      	ldrb	r3, [r3, #20]
 800bdc2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800bdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800bdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bdce:	6838      	ldr	r0, [r7, #0]
 800bdd0:	f7ff f9f4 	bl	800b1bc <tcp_free>

      tcp_active_pcbs_changed = 0;
 800bdd4:	4b31      	ldr	r3, [pc, #196]	; (800be9c <tcp_slowtmr+0x5a4>)
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d004      	beq.n	800bdea <tcp_slowtmr+0x4f2>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f06f 010c 	mvn.w	r1, #12
 800bde6:	68b8      	ldr	r0, [r7, #8]
 800bde8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800bdea:	4b2c      	ldr	r3, [pc, #176]	; (800be9c <tcp_slowtmr+0x5a4>)
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d037      	beq.n	800be62 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800bdf2:	e592      	b.n	800b91a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800bdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be00:	7f1b      	ldrb	r3, [r3, #28]
 800be02:	3301      	adds	r3, #1
 800be04:	b2da      	uxtb	r2, r3
 800be06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be08:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800be0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0c:	7f1a      	ldrb	r2, [r3, #28]
 800be0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be10:	7f5b      	ldrb	r3, [r3, #29]
 800be12:	429a      	cmp	r2, r3
 800be14:	d325      	bcc.n	800be62 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800be16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be18:	2200      	movs	r2, #0
 800be1a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800be1c:	4b1f      	ldr	r3, [pc, #124]	; (800be9c <tcp_slowtmr+0x5a4>)
 800be1e:	2200      	movs	r2, #0
 800be20:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800be22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00b      	beq.n	800be44 <tcp_slowtmr+0x54c>
 800be2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be34:	6912      	ldr	r2, [r2, #16]
 800be36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be38:	4610      	mov	r0, r2
 800be3a:	4798      	blx	r3
 800be3c:	4603      	mov	r3, r0
 800be3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800be42:	e002      	b.n	800be4a <tcp_slowtmr+0x552>
 800be44:	2300      	movs	r3, #0
 800be46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800be4a:	4b14      	ldr	r3, [pc, #80]	; (800be9c <tcp_slowtmr+0x5a4>)
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d000      	beq.n	800be54 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800be52:	e562      	b.n	800b91a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800be54:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d102      	bne.n	800be62 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800be5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be5e:	f003 fb81 	bl	800f564 <tcp_output>
  while (pcb != NULL) {
 800be62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be64:	2b00      	cmp	r3, #0
 800be66:	f47f ad5e 	bne.w	800b926 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800be6e:	4b0c      	ldr	r3, [pc, #48]	; (800bea0 <tcp_slowtmr+0x5a8>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800be74:	e069      	b.n	800bf4a <tcp_slowtmr+0x652>
 800be76:	bf00      	nop
 800be78:	2000ca24 	.word	0x2000ca24
 800be7c:	000a4cb8 	.word	0x000a4cb8
 800be80:	10624dd3 	.word	0x10624dd3
 800be84:	000124f8 	.word	0x000124f8
 800be88:	2000ca30 	.word	0x2000ca30
 800be8c:	080150d0 	.word	0x080150d0
 800be90:	08015508 	.word	0x08015508
 800be94:	08015114 	.word	0x08015114
 800be98:	08015534 	.word	0x08015534
 800be9c:	2000ca38 	.word	0x2000ca38
 800bea0:	2000ca34 	.word	0x2000ca34
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea6:	7d1b      	ldrb	r3, [r3, #20]
 800bea8:	2b0a      	cmp	r3, #10
 800beaa:	d006      	beq.n	800beba <tcp_slowtmr+0x5c2>
 800beac:	4b2b      	ldr	r3, [pc, #172]	; (800bf5c <tcp_slowtmr+0x664>)
 800beae:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800beb2:	492b      	ldr	r1, [pc, #172]	; (800bf60 <tcp_slowtmr+0x668>)
 800beb4:	482b      	ldr	r0, [pc, #172]	; (800bf64 <tcp_slowtmr+0x66c>)
 800beb6:	f007 fbb3 	bl	8013620 <iprintf>
    pcb_remove = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bec0:	4b29      	ldr	r3, [pc, #164]	; (800bf68 <tcp_slowtmr+0x670>)
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec6:	6a1b      	ldr	r3, [r3, #32]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	2bf0      	cmp	r3, #240	; 0xf0
 800becc:	d904      	bls.n	800bed8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800bece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bed2:	3301      	adds	r3, #1
 800bed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d02f      	beq.n	800bf40 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800bee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bee2:	f000 fb2b 	bl	800c53c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800bee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d010      	beq.n	800bf0e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800beec:	4b1f      	ldr	r3, [pc, #124]	; (800bf6c <tcp_slowtmr+0x674>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d106      	bne.n	800bf04 <tcp_slowtmr+0x60c>
 800bef6:	4b19      	ldr	r3, [pc, #100]	; (800bf5c <tcp_slowtmr+0x664>)
 800bef8:	f240 52af 	movw	r2, #1455	; 0x5af
 800befc:	491c      	ldr	r1, [pc, #112]	; (800bf70 <tcp_slowtmr+0x678>)
 800befe:	4819      	ldr	r0, [pc, #100]	; (800bf64 <tcp_slowtmr+0x66c>)
 800bf00:	f007 fb8e 	bl	8013620 <iprintf>
        prev->next = pcb->next;
 800bf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf06:	68da      	ldr	r2, [r3, #12]
 800bf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0a:	60da      	str	r2, [r3, #12]
 800bf0c:	e00f      	b.n	800bf2e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800bf0e:	4b17      	ldr	r3, [pc, #92]	; (800bf6c <tcp_slowtmr+0x674>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d006      	beq.n	800bf26 <tcp_slowtmr+0x62e>
 800bf18:	4b10      	ldr	r3, [pc, #64]	; (800bf5c <tcp_slowtmr+0x664>)
 800bf1a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800bf1e:	4915      	ldr	r1, [pc, #84]	; (800bf74 <tcp_slowtmr+0x67c>)
 800bf20:	4810      	ldr	r0, [pc, #64]	; (800bf64 <tcp_slowtmr+0x66c>)
 800bf22:	f007 fb7d 	bl	8013620 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800bf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	4a10      	ldr	r2, [pc, #64]	; (800bf6c <tcp_slowtmr+0x674>)
 800bf2c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800bf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf30:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800bf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bf38:	69f8      	ldr	r0, [r7, #28]
 800bf3a:	f7ff f93f 	bl	800b1bc <tcp_free>
 800bf3e:	e004      	b.n	800bf4a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800bf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf42:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1a9      	bne.n	800bea4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800bf50:	bf00      	nop
 800bf52:	bf00      	nop
 800bf54:	3730      	adds	r7, #48	; 0x30
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bdb0      	pop	{r4, r5, r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	080150d0 	.word	0x080150d0
 800bf60:	08015560 	.word	0x08015560
 800bf64:	08015114 	.word	0x08015114
 800bf68:	2000ca24 	.word	0x2000ca24
 800bf6c:	2000ca34 	.word	0x2000ca34
 800bf70:	08015590 	.word	0x08015590
 800bf74:	080155b8 	.word	0x080155b8

0800bf78 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800bf7e:	4b2d      	ldr	r3, [pc, #180]	; (800c034 <tcp_fasttmr+0xbc>)
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	3301      	adds	r3, #1
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	4b2b      	ldr	r3, [pc, #172]	; (800c034 <tcp_fasttmr+0xbc>)
 800bf88:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bf8a:	4b2b      	ldr	r3, [pc, #172]	; (800c038 <tcp_fasttmr+0xc0>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bf90:	e048      	b.n	800c024 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	7f9a      	ldrb	r2, [r3, #30]
 800bf96:	4b27      	ldr	r3, [pc, #156]	; (800c034 <tcp_fasttmr+0xbc>)
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d03f      	beq.n	800c01e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bf9e:	4b25      	ldr	r3, [pc, #148]	; (800c034 <tcp_fasttmr+0xbc>)
 800bfa0:	781a      	ldrb	r2, [r3, #0]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	8b5b      	ldrh	r3, [r3, #26]
 800bfaa:	f003 0301 	and.w	r3, r3, #1
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d010      	beq.n	800bfd4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	8b5b      	ldrh	r3, [r3, #26]
 800bfb6:	f043 0302 	orr.w	r3, r3, #2
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f003 facf 	bl	800f564 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	8b5b      	ldrh	r3, [r3, #26]
 800bfca:	f023 0303 	bic.w	r3, r3, #3
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	8b5b      	ldrh	r3, [r3, #26]
 800bfd8:	f003 0308 	and.w	r3, r3, #8
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d009      	beq.n	800bff4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	8b5b      	ldrh	r3, [r3, #26]
 800bfe4:	f023 0308 	bic.w	r3, r3, #8
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7ff fa78 	bl	800b4e4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00a      	beq.n	800c018 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c002:	4b0e      	ldr	r3, [pc, #56]	; (800c03c <tcp_fasttmr+0xc4>)
 800c004:	2200      	movs	r2, #0
 800c006:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 f819 	bl	800c040 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c00e:	4b0b      	ldr	r3, [pc, #44]	; (800c03c <tcp_fasttmr+0xc4>)
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d000      	beq.n	800c018 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c016:	e7b8      	b.n	800bf8a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	607b      	str	r3, [r7, #4]
 800c01c:	e002      	b.n	800c024 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1b3      	bne.n	800bf92 <tcp_fasttmr+0x1a>
    }
  }
}
 800c02a:	bf00      	nop
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	2000ca3a 	.word	0x2000ca3a
 800c038:	2000ca30 	.word	0x2000ca30
 800c03c:	2000ca38 	.word	0x2000ca38

0800c040 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c040:	b590      	push	{r4, r7, lr}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d109      	bne.n	800c062 <tcp_process_refused_data+0x22>
 800c04e:	4b37      	ldr	r3, [pc, #220]	; (800c12c <tcp_process_refused_data+0xec>)
 800c050:	f240 6209 	movw	r2, #1545	; 0x609
 800c054:	4936      	ldr	r1, [pc, #216]	; (800c130 <tcp_process_refused_data+0xf0>)
 800c056:	4837      	ldr	r0, [pc, #220]	; (800c134 <tcp_process_refused_data+0xf4>)
 800c058:	f007 fae2 	bl	8013620 <iprintf>
 800c05c:	f06f 030f 	mvn.w	r3, #15
 800c060:	e060      	b.n	800c124 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c066:	7b5b      	ldrb	r3, [r3, #13]
 800c068:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c06e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00b      	beq.n	800c098 <tcp_process_refused_data+0x58>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6918      	ldr	r0, [r3, #16]
 800c08a:	2300      	movs	r3, #0
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	6879      	ldr	r1, [r7, #4]
 800c090:	47a0      	blx	r4
 800c092:	4603      	mov	r3, r0
 800c094:	73fb      	strb	r3, [r7, #15]
 800c096:	e007      	b.n	800c0a8 <tcp_process_refused_data+0x68>
 800c098:	2300      	movs	r3, #0
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	2000      	movs	r0, #0
 800c0a0:	f000 f8a4 	bl	800c1ec <tcp_recv_null>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c0a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d12a      	bne.n	800c106 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c0b0:	7bbb      	ldrb	r3, [r7, #14]
 800c0b2:	f003 0320 	and.w	r3, r3, #32
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d033      	beq.n	800c122 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c0c2:	d005      	beq.n	800c0d0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00b      	beq.n	800c0f2 <tcp_process_refused_data+0xb2>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6918      	ldr	r0, [r3, #16]
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	6879      	ldr	r1, [r7, #4]
 800c0ea:	47a0      	blx	r4
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	73fb      	strb	r3, [r7, #15]
 800c0f0:	e001      	b.n	800c0f6 <tcp_process_refused_data+0xb6>
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c0f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0fa:	f113 0f0d 	cmn.w	r3, #13
 800c0fe:	d110      	bne.n	800c122 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c100:	f06f 030c 	mvn.w	r3, #12
 800c104:	e00e      	b.n	800c124 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c10a:	f113 0f0d 	cmn.w	r3, #13
 800c10e:	d102      	bne.n	800c116 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c110:	f06f 030c 	mvn.w	r3, #12
 800c114:	e006      	b.n	800c124 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68ba      	ldr	r2, [r7, #8]
 800c11a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c11c:	f06f 0304 	mvn.w	r3, #4
 800c120:	e000      	b.n	800c124 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3714      	adds	r7, #20
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd90      	pop	{r4, r7, pc}
 800c12c:	080150d0 	.word	0x080150d0
 800c130:	080155e0 	.word	0x080155e0
 800c134:	08015114 	.word	0x08015114

0800c138 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c140:	e007      	b.n	800c152 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 f80a 	bl	800c162 <tcp_seg_free>
    seg = next;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1f4      	bne.n	800c142 <tcp_segs_free+0xa>
  }
}
 800c158:	bf00      	nop
 800c15a:	bf00      	nop
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b082      	sub	sp, #8
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00c      	beq.n	800c18a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d004      	beq.n	800c182 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7fe fd71 	bl	800ac64 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c182:	6879      	ldr	r1, [r7, #4]
 800c184:	2003      	movs	r0, #3
 800c186:	f7fd fec9 	bl	8009f1c <memp_free>
  }
}
 800c18a:	bf00      	nop
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
	...

0800c194 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d106      	bne.n	800c1b0 <tcp_seg_copy+0x1c>
 800c1a2:	4b0f      	ldr	r3, [pc, #60]	; (800c1e0 <tcp_seg_copy+0x4c>)
 800c1a4:	f240 6282 	movw	r2, #1666	; 0x682
 800c1a8:	490e      	ldr	r1, [pc, #56]	; (800c1e4 <tcp_seg_copy+0x50>)
 800c1aa:	480f      	ldr	r0, [pc, #60]	; (800c1e8 <tcp_seg_copy+0x54>)
 800c1ac:	f007 fa38 	bl	8013620 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c1b0:	2003      	movs	r0, #3
 800c1b2:	f7fd fe3d 	bl	8009e30 <memp_malloc>
 800c1b6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <tcp_seg_copy+0x2e>
    return NULL;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	e00a      	b.n	800c1d8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c1c2:	2210      	movs	r2, #16
 800c1c4:	6879      	ldr	r1, [r7, #4]
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	f007 f97f 	bl	80134ca <memcpy>
  pbuf_ref(cseg->p);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fe fded 	bl	800adb0 <pbuf_ref>
  return cseg;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	080150d0 	.word	0x080150d0
 800c1e4:	08015624 	.word	0x08015624
 800c1e8:	08015114 	.word	0x08015114

0800c1ec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d109      	bne.n	800c214 <tcp_recv_null+0x28>
 800c200:	4b12      	ldr	r3, [pc, #72]	; (800c24c <tcp_recv_null+0x60>)
 800c202:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c206:	4912      	ldr	r1, [pc, #72]	; (800c250 <tcp_recv_null+0x64>)
 800c208:	4812      	ldr	r0, [pc, #72]	; (800c254 <tcp_recv_null+0x68>)
 800c20a:	f007 fa09 	bl	8013620 <iprintf>
 800c20e:	f06f 030f 	mvn.w	r3, #15
 800c212:	e016      	b.n	800c242 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d009      	beq.n	800c22e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	891b      	ldrh	r3, [r3, #8]
 800c21e:	4619      	mov	r1, r3
 800c220:	68b8      	ldr	r0, [r7, #8]
 800c222:	f7ff fb19 	bl	800b858 <tcp_recved>
    pbuf_free(p);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7fe fd1c 	bl	800ac64 <pbuf_free>
 800c22c:	e008      	b.n	800c240 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c22e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d104      	bne.n	800c240 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c236:	68b8      	ldr	r0, [r7, #8]
 800c238:	f7ff f9be 	bl	800b5b8 <tcp_close>
 800c23c:	4603      	mov	r3, r0
 800c23e:	e000      	b.n	800c242 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	080150d0 	.word	0x080150d0
 800c250:	08015640 	.word	0x08015640
 800c254:	08015114 	.word	0x08015114

0800c258 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	4603      	mov	r3, r0
 800c260:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c266:	2b00      	cmp	r3, #0
 800c268:	db01      	blt.n	800c26e <tcp_kill_prio+0x16>
 800c26a:	79fb      	ldrb	r3, [r7, #7]
 800c26c:	e000      	b.n	800c270 <tcp_kill_prio+0x18>
 800c26e:	237f      	movs	r3, #127	; 0x7f
 800c270:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c272:	7afb      	ldrb	r3, [r7, #11]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d034      	beq.n	800c2e2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c278:	7afb      	ldrb	r3, [r7, #11]
 800c27a:	3b01      	subs	r3, #1
 800c27c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c27e:	2300      	movs	r3, #0
 800c280:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c282:	2300      	movs	r3, #0
 800c284:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c286:	4b19      	ldr	r3, [pc, #100]	; (800c2ec <tcp_kill_prio+0x94>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	617b      	str	r3, [r7, #20]
 800c28c:	e01f      	b.n	800c2ce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	7d5b      	ldrb	r3, [r3, #21]
 800c292:	7afa      	ldrb	r2, [r7, #11]
 800c294:	429a      	cmp	r2, r3
 800c296:	d80c      	bhi.n	800c2b2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c29c:	7afa      	ldrb	r2, [r7, #11]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d112      	bne.n	800c2c8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c2a2:	4b13      	ldr	r3, [pc, #76]	; (800c2f0 <tcp_kill_prio+0x98>)
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	6a1b      	ldr	r3, [r3, #32]
 800c2aa:	1ad3      	subs	r3, r2, r3
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d80a      	bhi.n	800c2c8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c2b2:	4b0f      	ldr	r3, [pc, #60]	; (800c2f0 <tcp_kill_prio+0x98>)
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	6a1b      	ldr	r3, [r3, #32]
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	7d5b      	ldrb	r3, [r3, #21]
 800c2c6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	617b      	str	r3, [r7, #20]
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1dc      	bne.n	800c28e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d004      	beq.n	800c2e4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c2da:	6938      	ldr	r0, [r7, #16]
 800c2dc:	f7ff fa56 	bl	800b78c <tcp_abort>
 800c2e0:	e000      	b.n	800c2e4 <tcp_kill_prio+0x8c>
    return;
 800c2e2:	bf00      	nop
  }
}
 800c2e4:	3718      	adds	r7, #24
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	2000ca30 	.word	0x2000ca30
 800c2f0:	2000ca24 	.word	0x2000ca24

0800c2f4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c2fe:	79fb      	ldrb	r3, [r7, #7]
 800c300:	2b08      	cmp	r3, #8
 800c302:	d009      	beq.n	800c318 <tcp_kill_state+0x24>
 800c304:	79fb      	ldrb	r3, [r7, #7]
 800c306:	2b09      	cmp	r3, #9
 800c308:	d006      	beq.n	800c318 <tcp_kill_state+0x24>
 800c30a:	4b1a      	ldr	r3, [pc, #104]	; (800c374 <tcp_kill_state+0x80>)
 800c30c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c310:	4919      	ldr	r1, [pc, #100]	; (800c378 <tcp_kill_state+0x84>)
 800c312:	481a      	ldr	r0, [pc, #104]	; (800c37c <tcp_kill_state+0x88>)
 800c314:	f007 f984 	bl	8013620 <iprintf>

  inactivity = 0;
 800c318:	2300      	movs	r3, #0
 800c31a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c31c:	2300      	movs	r3, #0
 800c31e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c320:	4b17      	ldr	r3, [pc, #92]	; (800c380 <tcp_kill_state+0x8c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	617b      	str	r3, [r7, #20]
 800c326:	e017      	b.n	800c358 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	7d1b      	ldrb	r3, [r3, #20]
 800c32c:	79fa      	ldrb	r2, [r7, #7]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d10f      	bne.n	800c352 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c332:	4b14      	ldr	r3, [pc, #80]	; (800c384 <tcp_kill_state+0x90>)
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	1ad3      	subs	r3, r2, r3
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d807      	bhi.n	800c352 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c342:	4b10      	ldr	r3, [pc, #64]	; (800c384 <tcp_kill_state+0x90>)
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	6a1b      	ldr	r3, [r3, #32]
 800c34a:	1ad3      	subs	r3, r2, r3
 800c34c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	617b      	str	r3, [r7, #20]
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1e4      	bne.n	800c328 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d003      	beq.n	800c36c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c364:	2100      	movs	r1, #0
 800c366:	6938      	ldr	r0, [r7, #16]
 800c368:	f7ff f952 	bl	800b610 <tcp_abandon>
  }
}
 800c36c:	bf00      	nop
 800c36e:	3718      	adds	r7, #24
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	080150d0 	.word	0x080150d0
 800c378:	0801565c 	.word	0x0801565c
 800c37c:	08015114 	.word	0x08015114
 800c380:	2000ca30 	.word	0x2000ca30
 800c384:	2000ca24 	.word	0x2000ca24

0800c388 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c392:	2300      	movs	r3, #0
 800c394:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c396:	4b12      	ldr	r3, [pc, #72]	; (800c3e0 <tcp_kill_timewait+0x58>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	60fb      	str	r3, [r7, #12]
 800c39c:	e012      	b.n	800c3c4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c39e:	4b11      	ldr	r3, [pc, #68]	; (800c3e4 <tcp_kill_timewait+0x5c>)
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	1ad3      	subs	r3, r2, r3
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d807      	bhi.n	800c3be <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c3ae:	4b0d      	ldr	r3, [pc, #52]	; (800c3e4 <tcp_kill_timewait+0x5c>)
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6a1b      	ldr	r3, [r3, #32]
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	60fb      	str	r3, [r7, #12]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1e9      	bne.n	800c39e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d002      	beq.n	800c3d6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c3d0:	68b8      	ldr	r0, [r7, #8]
 800c3d2:	f7ff f9db 	bl	800b78c <tcp_abort>
  }
}
 800c3d6:	bf00      	nop
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	2000ca34 	.word	0x2000ca34
 800c3e4:	2000ca24 	.word	0x2000ca24

0800c3e8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c3ee:	4b10      	ldr	r3, [pc, #64]	; (800c430 <tcp_handle_closepend+0x48>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c3f4:	e014      	b.n	800c420 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	8b5b      	ldrh	r3, [r3, #26]
 800c400:	f003 0308 	and.w	r3, r3, #8
 800c404:	2b00      	cmp	r3, #0
 800c406:	d009      	beq.n	800c41c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	8b5b      	ldrh	r3, [r3, #26]
 800c40c:	f023 0308 	bic.w	r3, r3, #8
 800c410:	b29a      	uxth	r2, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f7ff f864 	bl	800b4e4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1e7      	bne.n	800c3f6 <tcp_handle_closepend+0xe>
  }
}
 800c426:	bf00      	nop
 800c428:	bf00      	nop
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	2000ca30 	.word	0x2000ca30

0800c434 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	4603      	mov	r3, r0
 800c43c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c43e:	2001      	movs	r0, #1
 800c440:	f7fd fcf6 	bl	8009e30 <memp_malloc>
 800c444:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d126      	bne.n	800c49a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c44c:	f7ff ffcc 	bl	800c3e8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c450:	f7ff ff9a 	bl	800c388 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c454:	2001      	movs	r0, #1
 800c456:	f7fd fceb 	bl	8009e30 <memp_malloc>
 800c45a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d11b      	bne.n	800c49a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c462:	2009      	movs	r0, #9
 800c464:	f7ff ff46 	bl	800c2f4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c468:	2001      	movs	r0, #1
 800c46a:	f7fd fce1 	bl	8009e30 <memp_malloc>
 800c46e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d111      	bne.n	800c49a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c476:	2008      	movs	r0, #8
 800c478:	f7ff ff3c 	bl	800c2f4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c47c:	2001      	movs	r0, #1
 800c47e:	f7fd fcd7 	bl	8009e30 <memp_malloc>
 800c482:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d107      	bne.n	800c49a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c48a:	79fb      	ldrb	r3, [r7, #7]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7ff fee3 	bl	800c258 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c492:	2001      	movs	r0, #1
 800c494:	f7fd fccc 	bl	8009e30 <memp_malloc>
 800c498:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d03f      	beq.n	800c520 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c4a0:	229c      	movs	r2, #156	; 0x9c
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f007 f81e 	bl	80134e6 <memset>
    pcb->prio = prio;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	79fa      	ldrb	r2, [r7, #7]
 800c4ae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c4b6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c4c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	22ff      	movs	r2, #255	; 0xff
 800c4ce:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c4d6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2206      	movs	r2, #6
 800c4dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2206      	movs	r2, #6
 800c4e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4ec:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c4f6:	4b0d      	ldr	r3, [pc, #52]	; (800c52c <tcp_alloc+0xf8>)
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c4fe:	4b0c      	ldr	r3, [pc, #48]	; (800c530 <tcp_alloc+0xfc>)
 800c500:	781a      	ldrb	r2, [r3, #0]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c50c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	4a08      	ldr	r2, [pc, #32]	; (800c534 <tcp_alloc+0x100>)
 800c514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	4a07      	ldr	r2, [pc, #28]	; (800c538 <tcp_alloc+0x104>)
 800c51c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c520:	68fb      	ldr	r3, [r7, #12]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	2000ca24 	.word	0x2000ca24
 800c530:	2000ca3a 	.word	0x2000ca3a
 800c534:	0800c1ed 	.word	0x0800c1ed
 800c538:	006ddd00 	.word	0x006ddd00

0800c53c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d107      	bne.n	800c55a <tcp_pcb_purge+0x1e>
 800c54a:	4b21      	ldr	r3, [pc, #132]	; (800c5d0 <tcp_pcb_purge+0x94>)
 800c54c:	f640 0251 	movw	r2, #2129	; 0x851
 800c550:	4920      	ldr	r1, [pc, #128]	; (800c5d4 <tcp_pcb_purge+0x98>)
 800c552:	4821      	ldr	r0, [pc, #132]	; (800c5d8 <tcp_pcb_purge+0x9c>)
 800c554:	f007 f864 	bl	8013620 <iprintf>
 800c558:	e037      	b.n	800c5ca <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	7d1b      	ldrb	r3, [r3, #20]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d033      	beq.n	800c5ca <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c566:	2b0a      	cmp	r3, #10
 800c568:	d02f      	beq.n	800c5ca <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d02b      	beq.n	800c5ca <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c576:	2b00      	cmp	r3, #0
 800c578:	d007      	beq.n	800c58a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c57e:	4618      	mov	r0, r3
 800c580:	f7fe fb70 	bl	800ac64 <pbuf_free>
      pcb->refused_data = NULL;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d002      	beq.n	800c598 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 f986 	bl	800c8a4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c59e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7ff fdc7 	bl	800c138 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7ff fdc2 	bl	800c138 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	66da      	str	r2, [r3, #108]	; 0x6c
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c5ca:	3708      	adds	r7, #8
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	080150d0 	.word	0x080150d0
 800c5d4:	0801571c 	.word	0x0801571c
 800c5d8:	08015114 	.word	0x08015114

0800c5dc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d106      	bne.n	800c5fa <tcp_pcb_remove+0x1e>
 800c5ec:	4b3e      	ldr	r3, [pc, #248]	; (800c6e8 <tcp_pcb_remove+0x10c>)
 800c5ee:	f640 0283 	movw	r2, #2179	; 0x883
 800c5f2:	493e      	ldr	r1, [pc, #248]	; (800c6ec <tcp_pcb_remove+0x110>)
 800c5f4:	483e      	ldr	r0, [pc, #248]	; (800c6f0 <tcp_pcb_remove+0x114>)
 800c5f6:	f007 f813 	bl	8013620 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d106      	bne.n	800c60e <tcp_pcb_remove+0x32>
 800c600:	4b39      	ldr	r3, [pc, #228]	; (800c6e8 <tcp_pcb_remove+0x10c>)
 800c602:	f640 0284 	movw	r2, #2180	; 0x884
 800c606:	493b      	ldr	r1, [pc, #236]	; (800c6f4 <tcp_pcb_remove+0x118>)
 800c608:	4839      	ldr	r0, [pc, #228]	; (800c6f0 <tcp_pcb_remove+0x114>)
 800c60a:	f007 f809 	bl	8013620 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	683a      	ldr	r2, [r7, #0]
 800c614:	429a      	cmp	r2, r3
 800c616:	d105      	bne.n	800c624 <tcp_pcb_remove+0x48>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68da      	ldr	r2, [r3, #12]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	601a      	str	r2, [r3, #0]
 800c622:	e013      	b.n	800c64c <tcp_pcb_remove+0x70>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	60fb      	str	r3, [r7, #12]
 800c62a:	e00c      	b.n	800c646 <tcp_pcb_remove+0x6a>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	683a      	ldr	r2, [r7, #0]
 800c632:	429a      	cmp	r2, r3
 800c634:	d104      	bne.n	800c640 <tcp_pcb_remove+0x64>
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	68da      	ldr	r2, [r3, #12]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	60da      	str	r2, [r3, #12]
 800c63e:	e005      	b.n	800c64c <tcp_pcb_remove+0x70>
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	60fb      	str	r3, [r7, #12]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d1ef      	bne.n	800c62c <tcp_pcb_remove+0x50>
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	2200      	movs	r2, #0
 800c650:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c652:	6838      	ldr	r0, [r7, #0]
 800c654:	f7ff ff72 	bl	800c53c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	7d1b      	ldrb	r3, [r3, #20]
 800c65c:	2b0a      	cmp	r3, #10
 800c65e:	d013      	beq.n	800c688 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c664:	2b01      	cmp	r3, #1
 800c666:	d00f      	beq.n	800c688 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	8b5b      	ldrh	r3, [r3, #26]
 800c66c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c670:	2b00      	cmp	r3, #0
 800c672:	d009      	beq.n	800c688 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	8b5b      	ldrh	r3, [r3, #26]
 800c678:	f043 0302 	orr.w	r3, r3, #2
 800c67c:	b29a      	uxth	r2, r3
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c682:	6838      	ldr	r0, [r7, #0]
 800c684:	f002 ff6e 	bl	800f564 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	7d1b      	ldrb	r3, [r3, #20]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d020      	beq.n	800c6d2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c694:	2b00      	cmp	r3, #0
 800c696:	d006      	beq.n	800c6a6 <tcp_pcb_remove+0xca>
 800c698:	4b13      	ldr	r3, [pc, #76]	; (800c6e8 <tcp_pcb_remove+0x10c>)
 800c69a:	f640 0293 	movw	r2, #2195	; 0x893
 800c69e:	4916      	ldr	r1, [pc, #88]	; (800c6f8 <tcp_pcb_remove+0x11c>)
 800c6a0:	4813      	ldr	r0, [pc, #76]	; (800c6f0 <tcp_pcb_remove+0x114>)
 800c6a2:	f006 ffbd 	bl	8013620 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d006      	beq.n	800c6bc <tcp_pcb_remove+0xe0>
 800c6ae:	4b0e      	ldr	r3, [pc, #56]	; (800c6e8 <tcp_pcb_remove+0x10c>)
 800c6b0:	f640 0294 	movw	r2, #2196	; 0x894
 800c6b4:	4911      	ldr	r1, [pc, #68]	; (800c6fc <tcp_pcb_remove+0x120>)
 800c6b6:	480e      	ldr	r0, [pc, #56]	; (800c6f0 <tcp_pcb_remove+0x114>)
 800c6b8:	f006 ffb2 	bl	8013620 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d006      	beq.n	800c6d2 <tcp_pcb_remove+0xf6>
 800c6c4:	4b08      	ldr	r3, [pc, #32]	; (800c6e8 <tcp_pcb_remove+0x10c>)
 800c6c6:	f640 0296 	movw	r2, #2198	; 0x896
 800c6ca:	490d      	ldr	r1, [pc, #52]	; (800c700 <tcp_pcb_remove+0x124>)
 800c6cc:	4808      	ldr	r0, [pc, #32]	; (800c6f0 <tcp_pcb_remove+0x114>)
 800c6ce:	f006 ffa7 	bl	8013620 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c6de:	bf00      	nop
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	080150d0 	.word	0x080150d0
 800c6ec:	08015738 	.word	0x08015738
 800c6f0:	08015114 	.word	0x08015114
 800c6f4:	08015754 	.word	0x08015754
 800c6f8:	08015774 	.word	0x08015774
 800c6fc:	0801578c 	.word	0x0801578c
 800c700:	080157a8 	.word	0x080157a8

0800c704 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d106      	bne.n	800c720 <tcp_next_iss+0x1c>
 800c712:	4b0a      	ldr	r3, [pc, #40]	; (800c73c <tcp_next_iss+0x38>)
 800c714:	f640 02af 	movw	r2, #2223	; 0x8af
 800c718:	4909      	ldr	r1, [pc, #36]	; (800c740 <tcp_next_iss+0x3c>)
 800c71a:	480a      	ldr	r0, [pc, #40]	; (800c744 <tcp_next_iss+0x40>)
 800c71c:	f006 ff80 	bl	8013620 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c720:	4b09      	ldr	r3, [pc, #36]	; (800c748 <tcp_next_iss+0x44>)
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	4b09      	ldr	r3, [pc, #36]	; (800c74c <tcp_next_iss+0x48>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4413      	add	r3, r2
 800c72a:	4a07      	ldr	r2, [pc, #28]	; (800c748 <tcp_next_iss+0x44>)
 800c72c:	6013      	str	r3, [r2, #0]
  return iss;
 800c72e:	4b06      	ldr	r3, [pc, #24]	; (800c748 <tcp_next_iss+0x44>)
 800c730:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c732:	4618      	mov	r0, r3
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	080150d0 	.word	0x080150d0
 800c740:	080157c0 	.word	0x080157c0
 800c744:	08015114 	.word	0x08015114
 800c748:	20000028 	.word	0x20000028
 800c74c:	2000ca24 	.word	0x2000ca24

0800c750 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b086      	sub	sp, #24
 800c754:	af00      	add	r7, sp, #0
 800c756:	4603      	mov	r3, r0
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
 800c75c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d106      	bne.n	800c772 <tcp_eff_send_mss_netif+0x22>
 800c764:	4b14      	ldr	r3, [pc, #80]	; (800c7b8 <tcp_eff_send_mss_netif+0x68>)
 800c766:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c76a:	4914      	ldr	r1, [pc, #80]	; (800c7bc <tcp_eff_send_mss_netif+0x6c>)
 800c76c:	4814      	ldr	r0, [pc, #80]	; (800c7c0 <tcp_eff_send_mss_netif+0x70>)
 800c76e:	f006 ff57 	bl	8013620 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d101      	bne.n	800c77c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c778:	89fb      	ldrh	r3, [r7, #14]
 800c77a:	e019      	b.n	800c7b0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c780:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c782:	8afb      	ldrh	r3, [r7, #22]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d012      	beq.n	800c7ae <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c788:	2328      	movs	r3, #40	; 0x28
 800c78a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c78c:	8afa      	ldrh	r2, [r7, #22]
 800c78e:	8abb      	ldrh	r3, [r7, #20]
 800c790:	429a      	cmp	r2, r3
 800c792:	d904      	bls.n	800c79e <tcp_eff_send_mss_netif+0x4e>
 800c794:	8afa      	ldrh	r2, [r7, #22]
 800c796:	8abb      	ldrh	r3, [r7, #20]
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	e000      	b.n	800c7a0 <tcp_eff_send_mss_netif+0x50>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c7a2:	8a7a      	ldrh	r2, [r7, #18]
 800c7a4:	89fb      	ldrh	r3, [r7, #14]
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	bf28      	it	cs
 800c7aa:	4613      	movcs	r3, r2
 800c7ac:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c7ae:	89fb      	ldrh	r3, [r7, #14]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3718      	adds	r7, #24
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	080150d0 	.word	0x080150d0
 800c7bc:	080157dc 	.word	0x080157dc
 800c7c0:	08015114 	.word	0x08015114

0800c7c4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d119      	bne.n	800c80c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c7d8:	4b10      	ldr	r3, [pc, #64]	; (800c81c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c7da:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c7de:	4910      	ldr	r1, [pc, #64]	; (800c820 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c7e0:	4810      	ldr	r0, [pc, #64]	; (800c824 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c7e2:	f006 ff1d 	bl	8013620 <iprintf>

  while (pcb != NULL) {
 800c7e6:	e011      	b.n	800c80c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d108      	bne.n	800c806 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f7fe ffc6 	bl	800b78c <tcp_abort>
      pcb = next;
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	e002      	b.n	800c80c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1ea      	bne.n	800c7e8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c812:	bf00      	nop
 800c814:	bf00      	nop
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	080150d0 	.word	0x080150d0
 800c820:	08015804 	.word	0x08015804
 800c824:	08015114 	.word	0x08015114

0800c828 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d02a      	beq.n	800c88e <tcp_netif_ip_addr_changed+0x66>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d026      	beq.n	800c88e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c840:	4b15      	ldr	r3, [pc, #84]	; (800c898 <tcp_netif_ip_addr_changed+0x70>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4619      	mov	r1, r3
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7ff ffbc 	bl	800c7c4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c84c:	4b13      	ldr	r3, [pc, #76]	; (800c89c <tcp_netif_ip_addr_changed+0x74>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7ff ffb6 	bl	800c7c4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d017      	beq.n	800c88e <tcp_netif_ip_addr_changed+0x66>
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d013      	beq.n	800c88e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c866:	4b0e      	ldr	r3, [pc, #56]	; (800c8a0 <tcp_netif_ip_addr_changed+0x78>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	60fb      	str	r3, [r7, #12]
 800c86c:	e00c      	b.n	800c888 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	429a      	cmp	r2, r3
 800c878:	d103      	bne.n	800c882 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1ef      	bne.n	800c86e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c88e:	bf00      	nop
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	2000ca30 	.word	0x2000ca30
 800c89c:	2000ca28 	.word	0x2000ca28
 800c8a0:	2000ca2c 	.word	0x2000ca2c

0800c8a4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d007      	beq.n	800c8c4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7ff fc3d 	bl	800c138 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c8c4:	bf00      	nop
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c8cc:	b590      	push	{r4, r7, lr}
 800c8ce:	b08d      	sub	sp, #52	; 0x34
 800c8d0:	af04      	add	r7, sp, #16
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d105      	bne.n	800c8e8 <tcp_input+0x1c>
 800c8dc:	4b9b      	ldr	r3, [pc, #620]	; (800cb4c <tcp_input+0x280>)
 800c8de:	2283      	movs	r2, #131	; 0x83
 800c8e0:	499b      	ldr	r1, [pc, #620]	; (800cb50 <tcp_input+0x284>)
 800c8e2:	489c      	ldr	r0, [pc, #624]	; (800cb54 <tcp_input+0x288>)
 800c8e4:	f006 fe9c 	bl	8013620 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	4a9a      	ldr	r2, [pc, #616]	; (800cb58 <tcp_input+0x28c>)
 800c8ee:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	895b      	ldrh	r3, [r3, #10]
 800c8f4:	2b13      	cmp	r3, #19
 800c8f6:	f240 83d1 	bls.w	800d09c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c8fa:	4b98      	ldr	r3, [pc, #608]	; (800cb5c <tcp_input+0x290>)
 800c8fc:	695b      	ldr	r3, [r3, #20]
 800c8fe:	4a97      	ldr	r2, [pc, #604]	; (800cb5c <tcp_input+0x290>)
 800c900:	6812      	ldr	r2, [r2, #0]
 800c902:	4611      	mov	r1, r2
 800c904:	4618      	mov	r0, r3
 800c906:	f005 fc47 	bl	8012198 <ip4_addr_isbroadcast_u32>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f040 83c7 	bne.w	800d0a0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c912:	4b92      	ldr	r3, [pc, #584]	; (800cb5c <tcp_input+0x290>)
 800c914:	695b      	ldr	r3, [r3, #20]
 800c916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c91a:	2be0      	cmp	r3, #224	; 0xe0
 800c91c:	f000 83c0 	beq.w	800d0a0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c920:	4b8d      	ldr	r3, [pc, #564]	; (800cb58 <tcp_input+0x28c>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	899b      	ldrh	r3, [r3, #12]
 800c926:	b29b      	uxth	r3, r3
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fc fda9 	bl	8009480 <lwip_htons>
 800c92e:	4603      	mov	r3, r0
 800c930:	0b1b      	lsrs	r3, r3, #12
 800c932:	b29b      	uxth	r3, r3
 800c934:	b2db      	uxtb	r3, r3
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c93a:	7cbb      	ldrb	r3, [r7, #18]
 800c93c:	2b13      	cmp	r3, #19
 800c93e:	f240 83b1 	bls.w	800d0a4 <tcp_input+0x7d8>
 800c942:	7cbb      	ldrb	r3, [r7, #18]
 800c944:	b29a      	uxth	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	891b      	ldrh	r3, [r3, #8]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	f200 83aa 	bhi.w	800d0a4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c950:	7cbb      	ldrb	r3, [r7, #18]
 800c952:	b29b      	uxth	r3, r3
 800c954:	3b14      	subs	r3, #20
 800c956:	b29a      	uxth	r2, r3
 800c958:	4b81      	ldr	r3, [pc, #516]	; (800cb60 <tcp_input+0x294>)
 800c95a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c95c:	4b81      	ldr	r3, [pc, #516]	; (800cb64 <tcp_input+0x298>)
 800c95e:	2200      	movs	r2, #0
 800c960:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	895a      	ldrh	r2, [r3, #10]
 800c966:	7cbb      	ldrb	r3, [r7, #18]
 800c968:	b29b      	uxth	r3, r3
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d309      	bcc.n	800c982 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c96e:	4b7c      	ldr	r3, [pc, #496]	; (800cb60 <tcp_input+0x294>)
 800c970:	881a      	ldrh	r2, [r3, #0]
 800c972:	4b7d      	ldr	r3, [pc, #500]	; (800cb68 <tcp_input+0x29c>)
 800c974:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c976:	7cbb      	ldrb	r3, [r7, #18]
 800c978:	4619      	mov	r1, r3
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f7fe f8ec 	bl	800ab58 <pbuf_remove_header>
 800c980:	e04e      	b.n	800ca20 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d105      	bne.n	800c996 <tcp_input+0xca>
 800c98a:	4b70      	ldr	r3, [pc, #448]	; (800cb4c <tcp_input+0x280>)
 800c98c:	22c2      	movs	r2, #194	; 0xc2
 800c98e:	4977      	ldr	r1, [pc, #476]	; (800cb6c <tcp_input+0x2a0>)
 800c990:	4870      	ldr	r0, [pc, #448]	; (800cb54 <tcp_input+0x288>)
 800c992:	f006 fe45 	bl	8013620 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c996:	2114      	movs	r1, #20
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f7fe f8dd 	bl	800ab58 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	895a      	ldrh	r2, [r3, #10]
 800c9a2:	4b71      	ldr	r3, [pc, #452]	; (800cb68 <tcp_input+0x29c>)
 800c9a4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c9a6:	4b6e      	ldr	r3, [pc, #440]	; (800cb60 <tcp_input+0x294>)
 800c9a8:	881a      	ldrh	r2, [r3, #0]
 800c9aa:	4b6f      	ldr	r3, [pc, #444]	; (800cb68 <tcp_input+0x29c>)
 800c9ac:	881b      	ldrh	r3, [r3, #0]
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c9b2:	4b6d      	ldr	r3, [pc, #436]	; (800cb68 <tcp_input+0x29c>)
 800c9b4:	881b      	ldrh	r3, [r3, #0]
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f7fe f8cd 	bl	800ab58 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	895b      	ldrh	r3, [r3, #10]
 800c9c4:	8a3a      	ldrh	r2, [r7, #16]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	f200 836e 	bhi.w	800d0a8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	4a64      	ldr	r2, [pc, #400]	; (800cb64 <tcp_input+0x298>)
 800c9d4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	8a3a      	ldrh	r2, [r7, #16]
 800c9dc:	4611      	mov	r1, r2
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fe f8ba 	bl	800ab58 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	891a      	ldrh	r2, [r3, #8]
 800c9e8:	8a3b      	ldrh	r3, [r7, #16]
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	895b      	ldrh	r3, [r3, #10]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d005      	beq.n	800ca06 <tcp_input+0x13a>
 800c9fa:	4b54      	ldr	r3, [pc, #336]	; (800cb4c <tcp_input+0x280>)
 800c9fc:	22df      	movs	r2, #223	; 0xdf
 800c9fe:	495c      	ldr	r1, [pc, #368]	; (800cb70 <tcp_input+0x2a4>)
 800ca00:	4854      	ldr	r0, [pc, #336]	; (800cb54 <tcp_input+0x288>)
 800ca02:	f006 fe0d 	bl	8013620 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	891a      	ldrh	r2, [r3, #8]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	891b      	ldrh	r3, [r3, #8]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d005      	beq.n	800ca20 <tcp_input+0x154>
 800ca14:	4b4d      	ldr	r3, [pc, #308]	; (800cb4c <tcp_input+0x280>)
 800ca16:	22e0      	movs	r2, #224	; 0xe0
 800ca18:	4956      	ldr	r1, [pc, #344]	; (800cb74 <tcp_input+0x2a8>)
 800ca1a:	484e      	ldr	r0, [pc, #312]	; (800cb54 <tcp_input+0x288>)
 800ca1c:	f006 fe00 	bl	8013620 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ca20:	4b4d      	ldr	r3, [pc, #308]	; (800cb58 <tcp_input+0x28c>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	881b      	ldrh	r3, [r3, #0]
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	4a4b      	ldr	r2, [pc, #300]	; (800cb58 <tcp_input+0x28c>)
 800ca2a:	6814      	ldr	r4, [r2, #0]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7fc fd27 	bl	8009480 <lwip_htons>
 800ca32:	4603      	mov	r3, r0
 800ca34:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ca36:	4b48      	ldr	r3, [pc, #288]	; (800cb58 <tcp_input+0x28c>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	885b      	ldrh	r3, [r3, #2]
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	4a46      	ldr	r2, [pc, #280]	; (800cb58 <tcp_input+0x28c>)
 800ca40:	6814      	ldr	r4, [r2, #0]
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fc fd1c 	bl	8009480 <lwip_htons>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ca4c:	4b42      	ldr	r3, [pc, #264]	; (800cb58 <tcp_input+0x28c>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	4a41      	ldr	r2, [pc, #260]	; (800cb58 <tcp_input+0x28c>)
 800ca54:	6814      	ldr	r4, [r2, #0]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fc fd27 	bl	80094aa <lwip_htonl>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	6063      	str	r3, [r4, #4]
 800ca60:	6863      	ldr	r3, [r4, #4]
 800ca62:	4a45      	ldr	r2, [pc, #276]	; (800cb78 <tcp_input+0x2ac>)
 800ca64:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ca66:	4b3c      	ldr	r3, [pc, #240]	; (800cb58 <tcp_input+0x28c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	4a3a      	ldr	r2, [pc, #232]	; (800cb58 <tcp_input+0x28c>)
 800ca6e:	6814      	ldr	r4, [r2, #0]
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fc fd1a 	bl	80094aa <lwip_htonl>
 800ca76:	4603      	mov	r3, r0
 800ca78:	60a3      	str	r3, [r4, #8]
 800ca7a:	68a3      	ldr	r3, [r4, #8]
 800ca7c:	4a3f      	ldr	r2, [pc, #252]	; (800cb7c <tcp_input+0x2b0>)
 800ca7e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ca80:	4b35      	ldr	r3, [pc, #212]	; (800cb58 <tcp_input+0x28c>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	89db      	ldrh	r3, [r3, #14]
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	4a33      	ldr	r2, [pc, #204]	; (800cb58 <tcp_input+0x28c>)
 800ca8a:	6814      	ldr	r4, [r2, #0]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7fc fcf7 	bl	8009480 <lwip_htons>
 800ca92:	4603      	mov	r3, r0
 800ca94:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ca96:	4b30      	ldr	r3, [pc, #192]	; (800cb58 <tcp_input+0x28c>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	899b      	ldrh	r3, [r3, #12]
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fc fcee 	bl	8009480 <lwip_htons>
 800caa4:	4603      	mov	r3, r0
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800caac:	b2da      	uxtb	r2, r3
 800caae:	4b34      	ldr	r3, [pc, #208]	; (800cb80 <tcp_input+0x2b4>)
 800cab0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	891a      	ldrh	r2, [r3, #8]
 800cab6:	4b33      	ldr	r3, [pc, #204]	; (800cb84 <tcp_input+0x2b8>)
 800cab8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800caba:	4b31      	ldr	r3, [pc, #196]	; (800cb80 <tcp_input+0x2b4>)
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	f003 0303 	and.w	r3, r3, #3
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00c      	beq.n	800cae0 <tcp_input+0x214>
    tcplen++;
 800cac6:	4b2f      	ldr	r3, [pc, #188]	; (800cb84 <tcp_input+0x2b8>)
 800cac8:	881b      	ldrh	r3, [r3, #0]
 800caca:	3301      	adds	r3, #1
 800cacc:	b29a      	uxth	r2, r3
 800cace:	4b2d      	ldr	r3, [pc, #180]	; (800cb84 <tcp_input+0x2b8>)
 800cad0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	891a      	ldrh	r2, [r3, #8]
 800cad6:	4b2b      	ldr	r3, [pc, #172]	; (800cb84 <tcp_input+0x2b8>)
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	429a      	cmp	r2, r3
 800cadc:	f200 82e6 	bhi.w	800d0ac <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800cae0:	2300      	movs	r3, #0
 800cae2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cae4:	4b28      	ldr	r3, [pc, #160]	; (800cb88 <tcp_input+0x2bc>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	61fb      	str	r3, [r7, #28]
 800caea:	e09d      	b.n	800cc28 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	7d1b      	ldrb	r3, [r3, #20]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d105      	bne.n	800cb00 <tcp_input+0x234>
 800caf4:	4b15      	ldr	r3, [pc, #84]	; (800cb4c <tcp_input+0x280>)
 800caf6:	22fb      	movs	r2, #251	; 0xfb
 800caf8:	4924      	ldr	r1, [pc, #144]	; (800cb8c <tcp_input+0x2c0>)
 800cafa:	4816      	ldr	r0, [pc, #88]	; (800cb54 <tcp_input+0x288>)
 800cafc:	f006 fd90 	bl	8013620 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	7d1b      	ldrb	r3, [r3, #20]
 800cb04:	2b0a      	cmp	r3, #10
 800cb06:	d105      	bne.n	800cb14 <tcp_input+0x248>
 800cb08:	4b10      	ldr	r3, [pc, #64]	; (800cb4c <tcp_input+0x280>)
 800cb0a:	22fc      	movs	r2, #252	; 0xfc
 800cb0c:	4920      	ldr	r1, [pc, #128]	; (800cb90 <tcp_input+0x2c4>)
 800cb0e:	4811      	ldr	r0, [pc, #68]	; (800cb54 <tcp_input+0x288>)
 800cb10:	f006 fd86 	bl	8013620 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	7d1b      	ldrb	r3, [r3, #20]
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d105      	bne.n	800cb28 <tcp_input+0x25c>
 800cb1c:	4b0b      	ldr	r3, [pc, #44]	; (800cb4c <tcp_input+0x280>)
 800cb1e:	22fd      	movs	r2, #253	; 0xfd
 800cb20:	491c      	ldr	r1, [pc, #112]	; (800cb94 <tcp_input+0x2c8>)
 800cb22:	480c      	ldr	r0, [pc, #48]	; (800cb54 <tcp_input+0x288>)
 800cb24:	f006 fd7c 	bl	8013620 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	7a1b      	ldrb	r3, [r3, #8]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d033      	beq.n	800cb98 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	7a1a      	ldrb	r2, [r3, #8]
 800cb34:	4b09      	ldr	r3, [pc, #36]	; (800cb5c <tcp_input+0x290>)
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d029      	beq.n	800cb98 <tcp_input+0x2cc>
      prev = pcb;
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	61bb      	str	r3, [r7, #24]
      continue;
 800cb48:	e06b      	b.n	800cc22 <tcp_input+0x356>
 800cb4a:	bf00      	nop
 800cb4c:	08015838 	.word	0x08015838
 800cb50:	0801586c 	.word	0x0801586c
 800cb54:	08015884 	.word	0x08015884
 800cb58:	2000ca4c 	.word	0x2000ca4c
 800cb5c:	200092d0 	.word	0x200092d0
 800cb60:	2000ca50 	.word	0x2000ca50
 800cb64:	2000ca54 	.word	0x2000ca54
 800cb68:	2000ca52 	.word	0x2000ca52
 800cb6c:	080158ac 	.word	0x080158ac
 800cb70:	080158bc 	.word	0x080158bc
 800cb74:	080158c8 	.word	0x080158c8
 800cb78:	2000ca5c 	.word	0x2000ca5c
 800cb7c:	2000ca60 	.word	0x2000ca60
 800cb80:	2000ca68 	.word	0x2000ca68
 800cb84:	2000ca66 	.word	0x2000ca66
 800cb88:	2000ca30 	.word	0x2000ca30
 800cb8c:	080158e8 	.word	0x080158e8
 800cb90:	08015910 	.word	0x08015910
 800cb94:	0801593c 	.word	0x0801593c
    }

    if (pcb->remote_port == tcphdr->src &&
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	8b1a      	ldrh	r2, [r3, #24]
 800cb9c:	4b72      	ldr	r3, [pc, #456]	; (800cd68 <tcp_input+0x49c>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	881b      	ldrh	r3, [r3, #0]
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d13a      	bne.n	800cc1e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	8ada      	ldrh	r2, [r3, #22]
 800cbac:	4b6e      	ldr	r3, [pc, #440]	; (800cd68 <tcp_input+0x49c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	885b      	ldrh	r3, [r3, #2]
 800cbb2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d132      	bne.n	800cc1e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	685a      	ldr	r2, [r3, #4]
 800cbbc:	4b6b      	ldr	r3, [pc, #428]	; (800cd6c <tcp_input+0x4a0>)
 800cbbe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d12c      	bne.n	800cc1e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	681a      	ldr	r2, [r3, #0]
 800cbc8:	4b68      	ldr	r3, [pc, #416]	; (800cd6c <tcp_input+0x4a0>)
 800cbca:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d126      	bne.n	800cc1e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	69fa      	ldr	r2, [r7, #28]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d106      	bne.n	800cbe8 <tcp_input+0x31c>
 800cbda:	4b65      	ldr	r3, [pc, #404]	; (800cd70 <tcp_input+0x4a4>)
 800cbdc:	f240 120d 	movw	r2, #269	; 0x10d
 800cbe0:	4964      	ldr	r1, [pc, #400]	; (800cd74 <tcp_input+0x4a8>)
 800cbe2:	4865      	ldr	r0, [pc, #404]	; (800cd78 <tcp_input+0x4ac>)
 800cbe4:	f006 fd1c 	bl	8013620 <iprintf>
      if (prev != NULL) {
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00a      	beq.n	800cc04 <tcp_input+0x338>
        prev->next = pcb->next;
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	68da      	ldr	r2, [r3, #12]
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800cbf6:	4b61      	ldr	r3, [pc, #388]	; (800cd7c <tcp_input+0x4b0>)
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800cbfe:	4a5f      	ldr	r2, [pc, #380]	; (800cd7c <tcp_input+0x4b0>)
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	69fa      	ldr	r2, [r7, #28]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d111      	bne.n	800cc32 <tcp_input+0x366>
 800cc0e:	4b58      	ldr	r3, [pc, #352]	; (800cd70 <tcp_input+0x4a4>)
 800cc10:	f240 1215 	movw	r2, #277	; 0x115
 800cc14:	495a      	ldr	r1, [pc, #360]	; (800cd80 <tcp_input+0x4b4>)
 800cc16:	4858      	ldr	r0, [pc, #352]	; (800cd78 <tcp_input+0x4ac>)
 800cc18:	f006 fd02 	bl	8013620 <iprintf>
      break;
 800cc1c:	e009      	b.n	800cc32 <tcp_input+0x366>
    }
    prev = pcb;
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	61fb      	str	r3, [r7, #28]
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	f47f af5e 	bne.w	800caec <tcp_input+0x220>
 800cc30:	e000      	b.n	800cc34 <tcp_input+0x368>
      break;
 800cc32:	bf00      	nop
  }

  if (pcb == NULL) {
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f040 80aa 	bne.w	800cd90 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc3c:	4b51      	ldr	r3, [pc, #324]	; (800cd84 <tcp_input+0x4b8>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	61fb      	str	r3, [r7, #28]
 800cc42:	e03f      	b.n	800ccc4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	7d1b      	ldrb	r3, [r3, #20]
 800cc48:	2b0a      	cmp	r3, #10
 800cc4a:	d006      	beq.n	800cc5a <tcp_input+0x38e>
 800cc4c:	4b48      	ldr	r3, [pc, #288]	; (800cd70 <tcp_input+0x4a4>)
 800cc4e:	f240 121f 	movw	r2, #287	; 0x11f
 800cc52:	494d      	ldr	r1, [pc, #308]	; (800cd88 <tcp_input+0x4bc>)
 800cc54:	4848      	ldr	r0, [pc, #288]	; (800cd78 <tcp_input+0x4ac>)
 800cc56:	f006 fce3 	bl	8013620 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	7a1b      	ldrb	r3, [r3, #8]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d009      	beq.n	800cc76 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	7a1a      	ldrb	r2, [r3, #8]
 800cc66:	4b41      	ldr	r3, [pc, #260]	; (800cd6c <tcp_input+0x4a0>)
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc6e:	3301      	adds	r3, #1
 800cc70:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d122      	bne.n	800ccbc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	8b1a      	ldrh	r2, [r3, #24]
 800cc7a:	4b3b      	ldr	r3, [pc, #236]	; (800cd68 <tcp_input+0x49c>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	881b      	ldrh	r3, [r3, #0]
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d11b      	bne.n	800ccbe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	8ada      	ldrh	r2, [r3, #22]
 800cc8a:	4b37      	ldr	r3, [pc, #220]	; (800cd68 <tcp_input+0x49c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	885b      	ldrh	r3, [r3, #2]
 800cc90:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d113      	bne.n	800ccbe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cc96:	69fb      	ldr	r3, [r7, #28]
 800cc98:	685a      	ldr	r2, [r3, #4]
 800cc9a:	4b34      	ldr	r3, [pc, #208]	; (800cd6c <tcp_input+0x4a0>)
 800cc9c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d10d      	bne.n	800ccbe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	4b31      	ldr	r3, [pc, #196]	; (800cd6c <tcp_input+0x4a0>)
 800cca8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d107      	bne.n	800ccbe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ccae:	69f8      	ldr	r0, [r7, #28]
 800ccb0:	f000 fb56 	bl	800d360 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f7fd ffd5 	bl	800ac64 <pbuf_free>
        return;
 800ccba:	e1fd      	b.n	800d0b8 <tcp_input+0x7ec>
        continue;
 800ccbc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	61fb      	str	r3, [r7, #28]
 800ccc4:	69fb      	ldr	r3, [r7, #28]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1bc      	bne.n	800cc44 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ccca:	2300      	movs	r3, #0
 800cccc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ccce:	4b2f      	ldr	r3, [pc, #188]	; (800cd8c <tcp_input+0x4c0>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	617b      	str	r3, [r7, #20]
 800ccd4:	e02a      	b.n	800cd2c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	7a1b      	ldrb	r3, [r3, #8]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00c      	beq.n	800ccf8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	7a1a      	ldrb	r2, [r3, #8]
 800cce2:	4b22      	ldr	r3, [pc, #136]	; (800cd6c <tcp_input+0x4a0>)
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ccea:	3301      	adds	r3, #1
 800ccec:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d002      	beq.n	800ccf8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	61bb      	str	r3, [r7, #24]
        continue;
 800ccf6:	e016      	b.n	800cd26 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	8ada      	ldrh	r2, [r3, #22]
 800ccfc:	4b1a      	ldr	r3, [pc, #104]	; (800cd68 <tcp_input+0x49c>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	885b      	ldrh	r3, [r3, #2]
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d10c      	bne.n	800cd22 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	4b17      	ldr	r3, [pc, #92]	; (800cd6c <tcp_input+0x4a0>)
 800cd0e:	695b      	ldr	r3, [r3, #20]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d00f      	beq.n	800cd34 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00d      	beq.n	800cd36 <tcp_input+0x46a>
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d009      	beq.n	800cd36 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	617b      	str	r3, [r7, #20]
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d1d1      	bne.n	800ccd6 <tcp_input+0x40a>
 800cd32:	e000      	b.n	800cd36 <tcp_input+0x46a>
            break;
 800cd34:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d029      	beq.n	800cd90 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800cd3c:	69bb      	ldr	r3, [r7, #24]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d00a      	beq.n	800cd58 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	68da      	ldr	r2, [r3, #12]
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cd4a:	4b10      	ldr	r3, [pc, #64]	; (800cd8c <tcp_input+0x4c0>)
 800cd4c:	681a      	ldr	r2, [r3, #0]
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cd52:	4a0e      	ldr	r2, [pc, #56]	; (800cd8c <tcp_input+0x4c0>)
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800cd58:	6978      	ldr	r0, [r7, #20]
 800cd5a:	f000 fa03 	bl	800d164 <tcp_listen_input>
      }
      pbuf_free(p);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7fd ff80 	bl	800ac64 <pbuf_free>
      return;
 800cd64:	e1a8      	b.n	800d0b8 <tcp_input+0x7ec>
 800cd66:	bf00      	nop
 800cd68:	2000ca4c 	.word	0x2000ca4c
 800cd6c:	200092d0 	.word	0x200092d0
 800cd70:	08015838 	.word	0x08015838
 800cd74:	08015964 	.word	0x08015964
 800cd78:	08015884 	.word	0x08015884
 800cd7c:	2000ca30 	.word	0x2000ca30
 800cd80:	08015990 	.word	0x08015990
 800cd84:	2000ca34 	.word	0x2000ca34
 800cd88:	080159bc 	.word	0x080159bc
 800cd8c:	2000ca2c 	.word	0x2000ca2c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f000 8158 	beq.w	800d048 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800cd98:	4b95      	ldr	r3, [pc, #596]	; (800cff0 <tcp_input+0x724>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	891a      	ldrh	r2, [r3, #8]
 800cda2:	4b93      	ldr	r3, [pc, #588]	; (800cff0 <tcp_input+0x724>)
 800cda4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800cda6:	4a92      	ldr	r2, [pc, #584]	; (800cff0 <tcp_input+0x724>)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800cdac:	4b91      	ldr	r3, [pc, #580]	; (800cff4 <tcp_input+0x728>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a8f      	ldr	r2, [pc, #572]	; (800cff0 <tcp_input+0x724>)
 800cdb2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800cdb4:	4b90      	ldr	r3, [pc, #576]	; (800cff8 <tcp_input+0x72c>)
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800cdba:	4b90      	ldr	r3, [pc, #576]	; (800cffc <tcp_input+0x730>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800cdc0:	4b8f      	ldr	r3, [pc, #572]	; (800d000 <tcp_input+0x734>)
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800cdc6:	4b8f      	ldr	r3, [pc, #572]	; (800d004 <tcp_input+0x738>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	f003 0308 	and.w	r3, r3, #8
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d006      	beq.n	800cde0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	7b5b      	ldrb	r3, [r3, #13]
 800cdd6:	f043 0301 	orr.w	r3, r3, #1
 800cdda:	b2da      	uxtb	r2, r3
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d017      	beq.n	800ce18 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cde8:	69f8      	ldr	r0, [r7, #28]
 800cdea:	f7ff f929 	bl	800c040 <tcp_process_refused_data>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	f113 0f0d 	cmn.w	r3, #13
 800cdf4:	d007      	beq.n	800ce06 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00c      	beq.n	800ce18 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cdfe:	4b82      	ldr	r3, [pc, #520]	; (800d008 <tcp_input+0x73c>)
 800ce00:	881b      	ldrh	r3, [r3, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d008      	beq.n	800ce18 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	f040 80e3 	bne.w	800cfd6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ce10:	69f8      	ldr	r0, [r7, #28]
 800ce12:	f003 f9ad 	bl	8010170 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ce16:	e0de      	b.n	800cfd6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800ce18:	4a7c      	ldr	r2, [pc, #496]	; (800d00c <tcp_input+0x740>)
 800ce1a:	69fb      	ldr	r3, [r7, #28]
 800ce1c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ce1e:	69f8      	ldr	r0, [r7, #28]
 800ce20:	f000 fb18 	bl	800d454 <tcp_process>
 800ce24:	4603      	mov	r3, r0
 800ce26:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ce28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce2c:	f113 0f0d 	cmn.w	r3, #13
 800ce30:	f000 80d3 	beq.w	800cfda <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ce34:	4b71      	ldr	r3, [pc, #452]	; (800cffc <tcp_input+0x730>)
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	f003 0308 	and.w	r3, r3, #8
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d015      	beq.n	800ce6c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d008      	beq.n	800ce5c <tcp_input+0x590>
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce50:	69fa      	ldr	r2, [r7, #28]
 800ce52:	6912      	ldr	r2, [r2, #16]
 800ce54:	f06f 010d 	mvn.w	r1, #13
 800ce58:	4610      	mov	r0, r2
 800ce5a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ce5c:	69f9      	ldr	r1, [r7, #28]
 800ce5e:	486c      	ldr	r0, [pc, #432]	; (800d010 <tcp_input+0x744>)
 800ce60:	f7ff fbbc 	bl	800c5dc <tcp_pcb_remove>
        tcp_free(pcb);
 800ce64:	69f8      	ldr	r0, [r7, #28]
 800ce66:	f7fe f9a9 	bl	800b1bc <tcp_free>
 800ce6a:	e0da      	b.n	800d022 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ce70:	4b63      	ldr	r3, [pc, #396]	; (800d000 <tcp_input+0x734>)
 800ce72:	881b      	ldrh	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d01d      	beq.n	800ceb4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ce78:	4b61      	ldr	r3, [pc, #388]	; (800d000 <tcp_input+0x734>)
 800ce7a:	881b      	ldrh	r3, [r3, #0]
 800ce7c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00a      	beq.n	800ce9e <tcp_input+0x5d2>
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce8e:	69fa      	ldr	r2, [r7, #28]
 800ce90:	6910      	ldr	r0, [r2, #16]
 800ce92:	89fa      	ldrh	r2, [r7, #14]
 800ce94:	69f9      	ldr	r1, [r7, #28]
 800ce96:	4798      	blx	r3
 800ce98:	4603      	mov	r3, r0
 800ce9a:	74fb      	strb	r3, [r7, #19]
 800ce9c:	e001      	b.n	800cea2 <tcp_input+0x5d6>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cea2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cea6:	f113 0f0d 	cmn.w	r3, #13
 800ceaa:	f000 8098 	beq.w	800cfde <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ceae:	4b54      	ldr	r3, [pc, #336]	; (800d000 <tcp_input+0x734>)
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ceb4:	69f8      	ldr	r0, [r7, #28]
 800ceb6:	f000 f915 	bl	800d0e4 <tcp_input_delayed_close>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f040 8090 	bne.w	800cfe2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800cec2:	4b4d      	ldr	r3, [pc, #308]	; (800cff8 <tcp_input+0x72c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d041      	beq.n	800cf4e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d006      	beq.n	800cee0 <tcp_input+0x614>
 800ced2:	4b50      	ldr	r3, [pc, #320]	; (800d014 <tcp_input+0x748>)
 800ced4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ced8:	494f      	ldr	r1, [pc, #316]	; (800d018 <tcp_input+0x74c>)
 800ceda:	4850      	ldr	r0, [pc, #320]	; (800d01c <tcp_input+0x750>)
 800cedc:	f006 fba0 	bl	8013620 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	8b5b      	ldrh	r3, [r3, #26]
 800cee4:	f003 0310 	and.w	r3, r3, #16
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d008      	beq.n	800cefe <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ceec:	4b42      	ldr	r3, [pc, #264]	; (800cff8 <tcp_input+0x72c>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7fd feb7 	bl	800ac64 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800cef6:	69f8      	ldr	r0, [r7, #28]
 800cef8:	f7fe fc48 	bl	800b78c <tcp_abort>
            goto aborted;
 800cefc:	e091      	b.n	800d022 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00c      	beq.n	800cf22 <tcp_input+0x656>
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	6918      	ldr	r0, [r3, #16]
 800cf12:	4b39      	ldr	r3, [pc, #228]	; (800cff8 <tcp_input+0x72c>)
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	2300      	movs	r3, #0
 800cf18:	69f9      	ldr	r1, [r7, #28]
 800cf1a:	47a0      	blx	r4
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	74fb      	strb	r3, [r7, #19]
 800cf20:	e008      	b.n	800cf34 <tcp_input+0x668>
 800cf22:	4b35      	ldr	r3, [pc, #212]	; (800cff8 <tcp_input+0x72c>)
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	2300      	movs	r3, #0
 800cf28:	69f9      	ldr	r1, [r7, #28]
 800cf2a:	2000      	movs	r0, #0
 800cf2c:	f7ff f95e 	bl	800c1ec <tcp_recv_null>
 800cf30:	4603      	mov	r3, r0
 800cf32:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800cf34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cf38:	f113 0f0d 	cmn.w	r3, #13
 800cf3c:	d053      	beq.n	800cfe6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800cf3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d003      	beq.n	800cf4e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cf46:	4b2c      	ldr	r3, [pc, #176]	; (800cff8 <tcp_input+0x72c>)
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800cf4e:	4b2b      	ldr	r3, [pc, #172]	; (800cffc <tcp_input+0x730>)
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	f003 0320 	and.w	r3, r3, #32
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d030      	beq.n	800cfbc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d009      	beq.n	800cf76 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf66:	7b5a      	ldrb	r2, [r3, #13]
 800cf68:	69fb      	ldr	r3, [r7, #28]
 800cf6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf6c:	f042 0220 	orr.w	r2, r2, #32
 800cf70:	b2d2      	uxtb	r2, r2
 800cf72:	735a      	strb	r2, [r3, #13]
 800cf74:	e022      	b.n	800cfbc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf7a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cf7e:	d005      	beq.n	800cf8c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf84:	3301      	adds	r3, #1
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00b      	beq.n	800cfae <tcp_input+0x6e2>
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	6918      	ldr	r0, [r3, #16]
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	69f9      	ldr	r1, [r7, #28]
 800cfa6:	47a0      	blx	r4
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	74fb      	strb	r3, [r7, #19]
 800cfac:	e001      	b.n	800cfb2 <tcp_input+0x6e6>
 800cfae:	2300      	movs	r3, #0
 800cfb0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cfb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cfb6:	f113 0f0d 	cmn.w	r3, #13
 800cfba:	d016      	beq.n	800cfea <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cfbc:	4b13      	ldr	r3, [pc, #76]	; (800d00c <tcp_input+0x740>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cfc2:	69f8      	ldr	r0, [r7, #28]
 800cfc4:	f000 f88e 	bl	800d0e4 <tcp_input_delayed_close>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d128      	bne.n	800d020 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800cfce:	69f8      	ldr	r0, [r7, #28]
 800cfd0:	f002 fac8 	bl	800f564 <tcp_output>
 800cfd4:	e025      	b.n	800d022 <tcp_input+0x756>
        goto aborted;
 800cfd6:	bf00      	nop
 800cfd8:	e023      	b.n	800d022 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cfda:	bf00      	nop
 800cfdc:	e021      	b.n	800d022 <tcp_input+0x756>
              goto aborted;
 800cfde:	bf00      	nop
 800cfe0:	e01f      	b.n	800d022 <tcp_input+0x756>
          goto aborted;
 800cfe2:	bf00      	nop
 800cfe4:	e01d      	b.n	800d022 <tcp_input+0x756>
            goto aborted;
 800cfe6:	bf00      	nop
 800cfe8:	e01b      	b.n	800d022 <tcp_input+0x756>
              goto aborted;
 800cfea:	bf00      	nop
 800cfec:	e019      	b.n	800d022 <tcp_input+0x756>
 800cfee:	bf00      	nop
 800cff0:	2000ca3c 	.word	0x2000ca3c
 800cff4:	2000ca4c 	.word	0x2000ca4c
 800cff8:	2000ca6c 	.word	0x2000ca6c
 800cffc:	2000ca69 	.word	0x2000ca69
 800d000:	2000ca64 	.word	0x2000ca64
 800d004:	2000ca68 	.word	0x2000ca68
 800d008:	2000ca66 	.word	0x2000ca66
 800d00c:	2000ca70 	.word	0x2000ca70
 800d010:	2000ca30 	.word	0x2000ca30
 800d014:	08015838 	.word	0x08015838
 800d018:	080159ec 	.word	0x080159ec
 800d01c:	08015884 	.word	0x08015884
          goto aborted;
 800d020:	bf00      	nop
    tcp_input_pcb = NULL;
 800d022:	4b27      	ldr	r3, [pc, #156]	; (800d0c0 <tcp_input+0x7f4>)
 800d024:	2200      	movs	r2, #0
 800d026:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d028:	4b26      	ldr	r3, [pc, #152]	; (800d0c4 <tcp_input+0x7f8>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d02e:	4b26      	ldr	r3, [pc, #152]	; (800d0c8 <tcp_input+0x7fc>)
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d03f      	beq.n	800d0b6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800d036:	4b24      	ldr	r3, [pc, #144]	; (800d0c8 <tcp_input+0x7fc>)
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fd fe12 	bl	800ac64 <pbuf_free>
      inseg.p = NULL;
 800d040:	4b21      	ldr	r3, [pc, #132]	; (800d0c8 <tcp_input+0x7fc>)
 800d042:	2200      	movs	r2, #0
 800d044:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d046:	e036      	b.n	800d0b6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d048:	4b20      	ldr	r3, [pc, #128]	; (800d0cc <tcp_input+0x800>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	899b      	ldrh	r3, [r3, #12]
 800d04e:	b29b      	uxth	r3, r3
 800d050:	4618      	mov	r0, r3
 800d052:	f7fc fa15 	bl	8009480 <lwip_htons>
 800d056:	4603      	mov	r3, r0
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	f003 0304 	and.w	r3, r3, #4
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d118      	bne.n	800d094 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d062:	4b1b      	ldr	r3, [pc, #108]	; (800d0d0 <tcp_input+0x804>)
 800d064:	6819      	ldr	r1, [r3, #0]
 800d066:	4b1b      	ldr	r3, [pc, #108]	; (800d0d4 <tcp_input+0x808>)
 800d068:	881b      	ldrh	r3, [r3, #0]
 800d06a:	461a      	mov	r2, r3
 800d06c:	4b1a      	ldr	r3, [pc, #104]	; (800d0d8 <tcp_input+0x80c>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d072:	4b16      	ldr	r3, [pc, #88]	; (800d0cc <tcp_input+0x800>)
 800d074:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d076:	885b      	ldrh	r3, [r3, #2]
 800d078:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d07a:	4a14      	ldr	r2, [pc, #80]	; (800d0cc <tcp_input+0x800>)
 800d07c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d07e:	8812      	ldrh	r2, [r2, #0]
 800d080:	b292      	uxth	r2, r2
 800d082:	9202      	str	r2, [sp, #8]
 800d084:	9301      	str	r3, [sp, #4]
 800d086:	4b15      	ldr	r3, [pc, #84]	; (800d0dc <tcp_input+0x810>)
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	4b15      	ldr	r3, [pc, #84]	; (800d0e0 <tcp_input+0x814>)
 800d08c:	4602      	mov	r2, r0
 800d08e:	2000      	movs	r0, #0
 800d090:	f003 f81c 	bl	80100cc <tcp_rst>
    pbuf_free(p);
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f7fd fde5 	bl	800ac64 <pbuf_free>
  return;
 800d09a:	e00c      	b.n	800d0b6 <tcp_input+0x7ea>
    goto dropped;
 800d09c:	bf00      	nop
 800d09e:	e006      	b.n	800d0ae <tcp_input+0x7e2>
    goto dropped;
 800d0a0:	bf00      	nop
 800d0a2:	e004      	b.n	800d0ae <tcp_input+0x7e2>
    goto dropped;
 800d0a4:	bf00      	nop
 800d0a6:	e002      	b.n	800d0ae <tcp_input+0x7e2>
      goto dropped;
 800d0a8:	bf00      	nop
 800d0aa:	e000      	b.n	800d0ae <tcp_input+0x7e2>
      goto dropped;
 800d0ac:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7fd fdd8 	bl	800ac64 <pbuf_free>
 800d0b4:	e000      	b.n	800d0b8 <tcp_input+0x7ec>
  return;
 800d0b6:	bf00      	nop
}
 800d0b8:	3724      	adds	r7, #36	; 0x24
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd90      	pop	{r4, r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	2000ca70 	.word	0x2000ca70
 800d0c4:	2000ca6c 	.word	0x2000ca6c
 800d0c8:	2000ca3c 	.word	0x2000ca3c
 800d0cc:	2000ca4c 	.word	0x2000ca4c
 800d0d0:	2000ca60 	.word	0x2000ca60
 800d0d4:	2000ca66 	.word	0x2000ca66
 800d0d8:	2000ca5c 	.word	0x2000ca5c
 800d0dc:	200092e0 	.word	0x200092e0
 800d0e0:	200092e4 	.word	0x200092e4

0800d0e4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d106      	bne.n	800d100 <tcp_input_delayed_close+0x1c>
 800d0f2:	4b17      	ldr	r3, [pc, #92]	; (800d150 <tcp_input_delayed_close+0x6c>)
 800d0f4:	f240 225a 	movw	r2, #602	; 0x25a
 800d0f8:	4916      	ldr	r1, [pc, #88]	; (800d154 <tcp_input_delayed_close+0x70>)
 800d0fa:	4817      	ldr	r0, [pc, #92]	; (800d158 <tcp_input_delayed_close+0x74>)
 800d0fc:	f006 fa90 	bl	8013620 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d100:	4b16      	ldr	r3, [pc, #88]	; (800d15c <tcp_input_delayed_close+0x78>)
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	f003 0310 	and.w	r3, r3, #16
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d01c      	beq.n	800d146 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	8b5b      	ldrh	r3, [r3, #26]
 800d110:	f003 0310 	and.w	r3, r3, #16
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10d      	bne.n	800d134 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d008      	beq.n	800d134 <tcp_input_delayed_close+0x50>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	6912      	ldr	r2, [r2, #16]
 800d12c:	f06f 010e 	mvn.w	r1, #14
 800d130:	4610      	mov	r0, r2
 800d132:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d134:	6879      	ldr	r1, [r7, #4]
 800d136:	480a      	ldr	r0, [pc, #40]	; (800d160 <tcp_input_delayed_close+0x7c>)
 800d138:	f7ff fa50 	bl	800c5dc <tcp_pcb_remove>
    tcp_free(pcb);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f7fe f83d 	bl	800b1bc <tcp_free>
    return 1;
 800d142:	2301      	movs	r3, #1
 800d144:	e000      	b.n	800d148 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	08015838 	.word	0x08015838
 800d154:	08015a08 	.word	0x08015a08
 800d158:	08015884 	.word	0x08015884
 800d15c:	2000ca69 	.word	0x2000ca69
 800d160:	2000ca30 	.word	0x2000ca30

0800d164 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d164:	b590      	push	{r4, r7, lr}
 800d166:	b08b      	sub	sp, #44	; 0x2c
 800d168:	af04      	add	r7, sp, #16
 800d16a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d16c:	4b6f      	ldr	r3, [pc, #444]	; (800d32c <tcp_listen_input+0x1c8>)
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	f003 0304 	and.w	r3, r3, #4
 800d174:	2b00      	cmp	r3, #0
 800d176:	f040 80d2 	bne.w	800d31e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d106      	bne.n	800d18e <tcp_listen_input+0x2a>
 800d180:	4b6b      	ldr	r3, [pc, #428]	; (800d330 <tcp_listen_input+0x1cc>)
 800d182:	f240 2281 	movw	r2, #641	; 0x281
 800d186:	496b      	ldr	r1, [pc, #428]	; (800d334 <tcp_listen_input+0x1d0>)
 800d188:	486b      	ldr	r0, [pc, #428]	; (800d338 <tcp_listen_input+0x1d4>)
 800d18a:	f006 fa49 	bl	8013620 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d18e:	4b67      	ldr	r3, [pc, #412]	; (800d32c <tcp_listen_input+0x1c8>)
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	f003 0310 	and.w	r3, r3, #16
 800d196:	2b00      	cmp	r3, #0
 800d198:	d019      	beq.n	800d1ce <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d19a:	4b68      	ldr	r3, [pc, #416]	; (800d33c <tcp_listen_input+0x1d8>)
 800d19c:	6819      	ldr	r1, [r3, #0]
 800d19e:	4b68      	ldr	r3, [pc, #416]	; (800d340 <tcp_listen_input+0x1dc>)
 800d1a0:	881b      	ldrh	r3, [r3, #0]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	4b67      	ldr	r3, [pc, #412]	; (800d344 <tcp_listen_input+0x1e0>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d1aa:	4b67      	ldr	r3, [pc, #412]	; (800d348 <tcp_listen_input+0x1e4>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d1ae:	885b      	ldrh	r3, [r3, #2]
 800d1b0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d1b2:	4a65      	ldr	r2, [pc, #404]	; (800d348 <tcp_listen_input+0x1e4>)
 800d1b4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d1b6:	8812      	ldrh	r2, [r2, #0]
 800d1b8:	b292      	uxth	r2, r2
 800d1ba:	9202      	str	r2, [sp, #8]
 800d1bc:	9301      	str	r3, [sp, #4]
 800d1be:	4b63      	ldr	r3, [pc, #396]	; (800d34c <tcp_listen_input+0x1e8>)
 800d1c0:	9300      	str	r3, [sp, #0]
 800d1c2:	4b63      	ldr	r3, [pc, #396]	; (800d350 <tcp_listen_input+0x1ec>)
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f002 ff80 	bl	80100cc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d1cc:	e0a9      	b.n	800d322 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d1ce:	4b57      	ldr	r3, [pc, #348]	; (800d32c <tcp_listen_input+0x1c8>)
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	f003 0302 	and.w	r3, r3, #2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f000 80a3 	beq.w	800d322 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	7d5b      	ldrb	r3, [r3, #21]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7ff f927 	bl	800c434 <tcp_alloc>
 800d1e6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d111      	bne.n	800d212 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	699b      	ldr	r3, [r3, #24]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00a      	beq.n	800d20c <tcp_listen_input+0xa8>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	699b      	ldr	r3, [r3, #24]
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	6910      	ldr	r0, [r2, #16]
 800d1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d202:	2100      	movs	r1, #0
 800d204:	4798      	blx	r3
 800d206:	4603      	mov	r3, r0
 800d208:	73bb      	strb	r3, [r7, #14]
      return;
 800d20a:	e08b      	b.n	800d324 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d20c:	23f0      	movs	r3, #240	; 0xf0
 800d20e:	73bb      	strb	r3, [r7, #14]
      return;
 800d210:	e088      	b.n	800d324 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d212:	4b50      	ldr	r3, [pc, #320]	; (800d354 <tcp_listen_input+0x1f0>)
 800d214:	695a      	ldr	r2, [r3, #20]
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d21a:	4b4e      	ldr	r3, [pc, #312]	; (800d354 <tcp_listen_input+0x1f0>)
 800d21c:	691a      	ldr	r2, [r3, #16]
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	8ada      	ldrh	r2, [r3, #22]
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d22a:	4b47      	ldr	r3, [pc, #284]	; (800d348 <tcp_listen_input+0x1e4>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	881b      	ldrh	r3, [r3, #0]
 800d230:	b29a      	uxth	r2, r3
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	2203      	movs	r2, #3
 800d23a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d23c:	4b41      	ldr	r3, [pc, #260]	; (800d344 <tcp_listen_input+0x1e0>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	1c5a      	adds	r2, r3, #1
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d24e:	6978      	ldr	r0, [r7, #20]
 800d250:	f7ff fa58 	bl	800c704 <tcp_next_iss>
 800d254:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	693a      	ldr	r2, [r7, #16]
 800d25a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	693a      	ldr	r2, [r7, #16]
 800d260:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	693a      	ldr	r2, [r7, #16]
 800d266:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	693a      	ldr	r2, [r7, #16]
 800d26c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d26e:	4b35      	ldr	r3, [pc, #212]	; (800d344 <tcp_listen_input+0x1e0>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	1e5a      	subs	r2, r3, #1
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	691a      	ldr	r2, [r3, #16]
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	7a5b      	ldrb	r3, [r3, #9]
 800d28a:	f003 030c 	and.w	r3, r3, #12
 800d28e:	b2da      	uxtb	r2, r3
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	7a1a      	ldrb	r2, [r3, #8]
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d29c:	4b2e      	ldr	r3, [pc, #184]	; (800d358 <tcp_listen_input+0x1f4>)
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	60da      	str	r2, [r3, #12]
 800d2a4:	4a2c      	ldr	r2, [pc, #176]	; (800d358 <tcp_listen_input+0x1f4>)
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	6013      	str	r3, [r2, #0]
 800d2aa:	f003 f8d1 	bl	8010450 <tcp_timer_needed>
 800d2ae:	4b2b      	ldr	r3, [pc, #172]	; (800d35c <tcp_listen_input+0x1f8>)
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d2b4:	6978      	ldr	r0, [r7, #20]
 800d2b6:	f001 fd8f 	bl	800edd8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d2ba:	4b23      	ldr	r3, [pc, #140]	; (800d348 <tcp_listen_input+0x1e4>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	89db      	ldrh	r3, [r3, #14]
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	3304      	adds	r3, #4
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f004 fcc5 	bl	8011c6c <ip4_route>
 800d2e2:	4601      	mov	r1, r0
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	3304      	adds	r3, #4
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	f7ff fa30 	bl	800c750 <tcp_eff_send_mss_netif>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d2f8:	2112      	movs	r1, #18
 800d2fa:	6978      	ldr	r0, [r7, #20]
 800d2fc:	f002 f844 	bl	800f388 <tcp_enqueue_flags>
 800d300:	4603      	mov	r3, r0
 800d302:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d004      	beq.n	800d316 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d30c:	2100      	movs	r1, #0
 800d30e:	6978      	ldr	r0, [r7, #20]
 800d310:	f7fe f97e 	bl	800b610 <tcp_abandon>
      return;
 800d314:	e006      	b.n	800d324 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d316:	6978      	ldr	r0, [r7, #20]
 800d318:	f002 f924 	bl	800f564 <tcp_output>
  return;
 800d31c:	e001      	b.n	800d322 <tcp_listen_input+0x1be>
    return;
 800d31e:	bf00      	nop
 800d320:	e000      	b.n	800d324 <tcp_listen_input+0x1c0>
  return;
 800d322:	bf00      	nop
}
 800d324:	371c      	adds	r7, #28
 800d326:	46bd      	mov	sp, r7
 800d328:	bd90      	pop	{r4, r7, pc}
 800d32a:	bf00      	nop
 800d32c:	2000ca68 	.word	0x2000ca68
 800d330:	08015838 	.word	0x08015838
 800d334:	08015a30 	.word	0x08015a30
 800d338:	08015884 	.word	0x08015884
 800d33c:	2000ca60 	.word	0x2000ca60
 800d340:	2000ca66 	.word	0x2000ca66
 800d344:	2000ca5c 	.word	0x2000ca5c
 800d348:	2000ca4c 	.word	0x2000ca4c
 800d34c:	200092e0 	.word	0x200092e0
 800d350:	200092e4 	.word	0x200092e4
 800d354:	200092d0 	.word	0x200092d0
 800d358:	2000ca30 	.word	0x2000ca30
 800d35c:	2000ca38 	.word	0x2000ca38

0800d360 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af04      	add	r7, sp, #16
 800d366:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d368:	4b2f      	ldr	r3, [pc, #188]	; (800d428 <tcp_timewait_input+0xc8>)
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	f003 0304 	and.w	r3, r3, #4
 800d370:	2b00      	cmp	r3, #0
 800d372:	d153      	bne.n	800d41c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d106      	bne.n	800d388 <tcp_timewait_input+0x28>
 800d37a:	4b2c      	ldr	r3, [pc, #176]	; (800d42c <tcp_timewait_input+0xcc>)
 800d37c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d380:	492b      	ldr	r1, [pc, #172]	; (800d430 <tcp_timewait_input+0xd0>)
 800d382:	482c      	ldr	r0, [pc, #176]	; (800d434 <tcp_timewait_input+0xd4>)
 800d384:	f006 f94c 	bl	8013620 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d388:	4b27      	ldr	r3, [pc, #156]	; (800d428 <tcp_timewait_input+0xc8>)
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	f003 0302 	and.w	r3, r3, #2
 800d390:	2b00      	cmp	r3, #0
 800d392:	d02a      	beq.n	800d3ea <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d394:	4b28      	ldr	r3, [pc, #160]	; (800d438 <tcp_timewait_input+0xd8>)
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39c:	1ad3      	subs	r3, r2, r3
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	db2d      	blt.n	800d3fe <tcp_timewait_input+0x9e>
 800d3a2:	4b25      	ldr	r3, [pc, #148]	; (800d438 <tcp_timewait_input+0xd8>)
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3aa:	6879      	ldr	r1, [r7, #4]
 800d3ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d3ae:	440b      	add	r3, r1
 800d3b0:	1ad3      	subs	r3, r2, r3
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	dc23      	bgt.n	800d3fe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3b6:	4b21      	ldr	r3, [pc, #132]	; (800d43c <tcp_timewait_input+0xdc>)
 800d3b8:	6819      	ldr	r1, [r3, #0]
 800d3ba:	4b21      	ldr	r3, [pc, #132]	; (800d440 <tcp_timewait_input+0xe0>)
 800d3bc:	881b      	ldrh	r3, [r3, #0]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	4b1d      	ldr	r3, [pc, #116]	; (800d438 <tcp_timewait_input+0xd8>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3c6:	4b1f      	ldr	r3, [pc, #124]	; (800d444 <tcp_timewait_input+0xe4>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3ca:	885b      	ldrh	r3, [r3, #2]
 800d3cc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3ce:	4a1d      	ldr	r2, [pc, #116]	; (800d444 <tcp_timewait_input+0xe4>)
 800d3d0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3d2:	8812      	ldrh	r2, [r2, #0]
 800d3d4:	b292      	uxth	r2, r2
 800d3d6:	9202      	str	r2, [sp, #8]
 800d3d8:	9301      	str	r3, [sp, #4]
 800d3da:	4b1b      	ldr	r3, [pc, #108]	; (800d448 <tcp_timewait_input+0xe8>)
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	4b1b      	ldr	r3, [pc, #108]	; (800d44c <tcp_timewait_input+0xec>)
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f002 fe72 	bl	80100cc <tcp_rst>
      return;
 800d3e8:	e01b      	b.n	800d422 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d3ea:	4b0f      	ldr	r3, [pc, #60]	; (800d428 <tcp_timewait_input+0xc8>)
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	f003 0301 	and.w	r3, r3, #1
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d003      	beq.n	800d3fe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d3f6:	4b16      	ldr	r3, [pc, #88]	; (800d450 <tcp_timewait_input+0xf0>)
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d3fe:	4b10      	ldr	r3, [pc, #64]	; (800d440 <tcp_timewait_input+0xe0>)
 800d400:	881b      	ldrh	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00c      	beq.n	800d420 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	8b5b      	ldrh	r3, [r3, #26]
 800d40a:	f043 0302 	orr.w	r3, r3, #2
 800d40e:	b29a      	uxth	r2, r3
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f002 f8a5 	bl	800f564 <tcp_output>
  }
  return;
 800d41a:	e001      	b.n	800d420 <tcp_timewait_input+0xc0>
    return;
 800d41c:	bf00      	nop
 800d41e:	e000      	b.n	800d422 <tcp_timewait_input+0xc2>
  return;
 800d420:	bf00      	nop
}
 800d422:	3708      	adds	r7, #8
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	2000ca68 	.word	0x2000ca68
 800d42c:	08015838 	.word	0x08015838
 800d430:	08015a50 	.word	0x08015a50
 800d434:	08015884 	.word	0x08015884
 800d438:	2000ca5c 	.word	0x2000ca5c
 800d43c:	2000ca60 	.word	0x2000ca60
 800d440:	2000ca66 	.word	0x2000ca66
 800d444:	2000ca4c 	.word	0x2000ca4c
 800d448:	200092e0 	.word	0x200092e0
 800d44c:	200092e4 	.word	0x200092e4
 800d450:	2000ca24 	.word	0x2000ca24

0800d454 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d454:	b590      	push	{r4, r7, lr}
 800d456:	b08d      	sub	sp, #52	; 0x34
 800d458:	af04      	add	r7, sp, #16
 800d45a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d45c:	2300      	movs	r3, #0
 800d45e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d460:	2300      	movs	r3, #0
 800d462:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d106      	bne.n	800d478 <tcp_process+0x24>
 800d46a:	4b9d      	ldr	r3, [pc, #628]	; (800d6e0 <tcp_process+0x28c>)
 800d46c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d470:	499c      	ldr	r1, [pc, #624]	; (800d6e4 <tcp_process+0x290>)
 800d472:	489d      	ldr	r0, [pc, #628]	; (800d6e8 <tcp_process+0x294>)
 800d474:	f006 f8d4 	bl	8013620 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d478:	4b9c      	ldr	r3, [pc, #624]	; (800d6ec <tcp_process+0x298>)
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	f003 0304 	and.w	r3, r3, #4
 800d480:	2b00      	cmp	r3, #0
 800d482:	d04e      	beq.n	800d522 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	7d1b      	ldrb	r3, [r3, #20]
 800d488:	2b02      	cmp	r3, #2
 800d48a:	d108      	bne.n	800d49e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d490:	4b97      	ldr	r3, [pc, #604]	; (800d6f0 <tcp_process+0x29c>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	429a      	cmp	r2, r3
 800d496:	d123      	bne.n	800d4e0 <tcp_process+0x8c>
        acceptable = 1;
 800d498:	2301      	movs	r3, #1
 800d49a:	76fb      	strb	r3, [r7, #27]
 800d49c:	e020      	b.n	800d4e0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4a2:	4b94      	ldr	r3, [pc, #592]	; (800d6f4 <tcp_process+0x2a0>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d102      	bne.n	800d4b0 <tcp_process+0x5c>
        acceptable = 1;
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	76fb      	strb	r3, [r7, #27]
 800d4ae:	e017      	b.n	800d4e0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d4b0:	4b90      	ldr	r3, [pc, #576]	; (800d6f4 <tcp_process+0x2a0>)
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b8:	1ad3      	subs	r3, r2, r3
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	db10      	blt.n	800d4e0 <tcp_process+0x8c>
 800d4be:	4b8d      	ldr	r3, [pc, #564]	; (800d6f4 <tcp_process+0x2a0>)
 800d4c0:	681a      	ldr	r2, [r3, #0]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c6:	6879      	ldr	r1, [r7, #4]
 800d4c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d4ca:	440b      	add	r3, r1
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	dc06      	bgt.n	800d4e0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	8b5b      	ldrh	r3, [r3, #26]
 800d4d6:	f043 0302 	orr.w	r3, r3, #2
 800d4da:	b29a      	uxth	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d4e0:	7efb      	ldrb	r3, [r7, #27]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d01b      	beq.n	800d51e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	7d1b      	ldrb	r3, [r3, #20]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d106      	bne.n	800d4fc <tcp_process+0xa8>
 800d4ee:	4b7c      	ldr	r3, [pc, #496]	; (800d6e0 <tcp_process+0x28c>)
 800d4f0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d4f4:	4980      	ldr	r1, [pc, #512]	; (800d6f8 <tcp_process+0x2a4>)
 800d4f6:	487c      	ldr	r0, [pc, #496]	; (800d6e8 <tcp_process+0x294>)
 800d4f8:	f006 f892 	bl	8013620 <iprintf>
      recv_flags |= TF_RESET;
 800d4fc:	4b7f      	ldr	r3, [pc, #508]	; (800d6fc <tcp_process+0x2a8>)
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	f043 0308 	orr.w	r3, r3, #8
 800d504:	b2da      	uxtb	r2, r3
 800d506:	4b7d      	ldr	r3, [pc, #500]	; (800d6fc <tcp_process+0x2a8>)
 800d508:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	8b5b      	ldrh	r3, [r3, #26]
 800d50e:	f023 0301 	bic.w	r3, r3, #1
 800d512:	b29a      	uxth	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d518:	f06f 030d 	mvn.w	r3, #13
 800d51c:	e37a      	b.n	800dc14 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d51e:	2300      	movs	r3, #0
 800d520:	e378      	b.n	800dc14 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d522:	4b72      	ldr	r3, [pc, #456]	; (800d6ec <tcp_process+0x298>)
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	f003 0302 	and.w	r3, r3, #2
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d010      	beq.n	800d550 <tcp_process+0xfc>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	7d1b      	ldrb	r3, [r3, #20]
 800d532:	2b02      	cmp	r3, #2
 800d534:	d00c      	beq.n	800d550 <tcp_process+0xfc>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	7d1b      	ldrb	r3, [r3, #20]
 800d53a:	2b03      	cmp	r3, #3
 800d53c:	d008      	beq.n	800d550 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	8b5b      	ldrh	r3, [r3, #26]
 800d542:	f043 0302 	orr.w	r3, r3, #2
 800d546:	b29a      	uxth	r2, r3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d54c:	2300      	movs	r3, #0
 800d54e:	e361      	b.n	800dc14 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	8b5b      	ldrh	r3, [r3, #26]
 800d554:	f003 0310 	and.w	r3, r3, #16
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d103      	bne.n	800d564 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d55c:	4b68      	ldr	r3, [pc, #416]	; (800d700 <tcp_process+0x2ac>)
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f001 fc2f 	bl	800edd8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	7d1b      	ldrb	r3, [r3, #20]
 800d57e:	3b02      	subs	r3, #2
 800d580:	2b07      	cmp	r3, #7
 800d582:	f200 8337 	bhi.w	800dbf4 <tcp_process+0x7a0>
 800d586:	a201      	add	r2, pc, #4	; (adr r2, 800d58c <tcp_process+0x138>)
 800d588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d58c:	0800d5ad 	.word	0x0800d5ad
 800d590:	0800d7dd 	.word	0x0800d7dd
 800d594:	0800d955 	.word	0x0800d955
 800d598:	0800d97f 	.word	0x0800d97f
 800d59c:	0800daa3 	.word	0x0800daa3
 800d5a0:	0800d955 	.word	0x0800d955
 800d5a4:	0800db2f 	.word	0x0800db2f
 800d5a8:	0800dbbf 	.word	0x0800dbbf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d5ac:	4b4f      	ldr	r3, [pc, #316]	; (800d6ec <tcp_process+0x298>)
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	f003 0310 	and.w	r3, r3, #16
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 80e4 	beq.w	800d782 <tcp_process+0x32e>
 800d5ba:	4b4c      	ldr	r3, [pc, #304]	; (800d6ec <tcp_process+0x298>)
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	f003 0302 	and.w	r3, r3, #2
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	f000 80dd 	beq.w	800d782 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5cc:	1c5a      	adds	r2, r3, #1
 800d5ce:	4b48      	ldr	r3, [pc, #288]	; (800d6f0 <tcp_process+0x29c>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	f040 80d5 	bne.w	800d782 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d5d8:	4b46      	ldr	r3, [pc, #280]	; (800d6f4 <tcp_process+0x2a0>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	1c5a      	adds	r2, r3, #1
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d5ea:	4b41      	ldr	r3, [pc, #260]	; (800d6f0 <tcp_process+0x29c>)
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d5f2:	4b44      	ldr	r3, [pc, #272]	; (800d704 <tcp_process+0x2b0>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	89db      	ldrh	r3, [r3, #14]
 800d5f8:	b29a      	uxth	r2, r3
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d60c:	4b39      	ldr	r3, [pc, #228]	; (800d6f4 <tcp_process+0x2a0>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	1e5a      	subs	r2, r3, #1
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2204      	movs	r2, #4
 800d61a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	3304      	adds	r3, #4
 800d624:	4618      	mov	r0, r3
 800d626:	f004 fb21 	bl	8011c6c <ip4_route>
 800d62a:	4601      	mov	r1, r0
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	3304      	adds	r3, #4
 800d630:	461a      	mov	r2, r3
 800d632:	4620      	mov	r0, r4
 800d634:	f7ff f88c 	bl	800c750 <tcp_eff_send_mss_netif>
 800d638:	4603      	mov	r3, r0
 800d63a:	461a      	mov	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d644:	009a      	lsls	r2, r3, #2
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d64a:	005b      	lsls	r3, r3, #1
 800d64c:	f241 111c 	movw	r1, #4380	; 0x111c
 800d650:	428b      	cmp	r3, r1
 800d652:	bf38      	it	cc
 800d654:	460b      	movcc	r3, r1
 800d656:	429a      	cmp	r2, r3
 800d658:	d204      	bcs.n	800d664 <tcp_process+0x210>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	b29b      	uxth	r3, r3
 800d662:	e00d      	b.n	800d680 <tcp_process+0x22c>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d668:	005b      	lsls	r3, r3, #1
 800d66a:	f241 121c 	movw	r2, #4380	; 0x111c
 800d66e:	4293      	cmp	r3, r2
 800d670:	d904      	bls.n	800d67c <tcp_process+0x228>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	b29b      	uxth	r3, r3
 800d67a:	e001      	b.n	800d680 <tcp_process+0x22c>
 800d67c:	f241 131c 	movw	r3, #4380	; 0x111c
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d106      	bne.n	800d69e <tcp_process+0x24a>
 800d690:	4b13      	ldr	r3, [pc, #76]	; (800d6e0 <tcp_process+0x28c>)
 800d692:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d696:	491c      	ldr	r1, [pc, #112]	; (800d708 <tcp_process+0x2b4>)
 800d698:	4813      	ldr	r0, [pc, #76]	; (800d6e8 <tcp_process+0x294>)
 800d69a:	f005 ffc1 	bl	8013620 <iprintf>
        --pcb->snd_queuelen;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d6a4:	3b01      	subs	r3, #1
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6b2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d12a      	bne.n	800d710 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6be:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d106      	bne.n	800d6d4 <tcp_process+0x280>
 800d6c6:	4b06      	ldr	r3, [pc, #24]	; (800d6e0 <tcp_process+0x28c>)
 800d6c8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d6cc:	490f      	ldr	r1, [pc, #60]	; (800d70c <tcp_process+0x2b8>)
 800d6ce:	4806      	ldr	r0, [pc, #24]	; (800d6e8 <tcp_process+0x294>)
 800d6d0:	f005 ffa6 	bl	8013620 <iprintf>
          pcb->unsent = rseg->next;
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	66da      	str	r2, [r3, #108]	; 0x6c
 800d6dc:	e01c      	b.n	800d718 <tcp_process+0x2c4>
 800d6de:	bf00      	nop
 800d6e0:	08015838 	.word	0x08015838
 800d6e4:	08015a70 	.word	0x08015a70
 800d6e8:	08015884 	.word	0x08015884
 800d6ec:	2000ca68 	.word	0x2000ca68
 800d6f0:	2000ca60 	.word	0x2000ca60
 800d6f4:	2000ca5c 	.word	0x2000ca5c
 800d6f8:	08015a8c 	.word	0x08015a8c
 800d6fc:	2000ca69 	.word	0x2000ca69
 800d700:	2000ca24 	.word	0x2000ca24
 800d704:	2000ca4c 	.word	0x2000ca4c
 800d708:	08015aac 	.word	0x08015aac
 800d70c:	08015ac4 	.word	0x08015ac4
        } else {
          pcb->unacked = rseg->next;
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d718:	69f8      	ldr	r0, [r7, #28]
 800d71a:	f7fe fd22 	bl	800c162 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d722:	2b00      	cmp	r3, #0
 800d724:	d104      	bne.n	800d730 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d72c:	861a      	strh	r2, [r3, #48]	; 0x30
 800d72e:	e006      	b.n	800d73e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d744:	2b00      	cmp	r3, #0
 800d746:	d00a      	beq.n	800d75e <tcp_process+0x30a>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	6910      	ldr	r0, [r2, #16]
 800d752:	2200      	movs	r2, #0
 800d754:	6879      	ldr	r1, [r7, #4]
 800d756:	4798      	blx	r3
 800d758:	4603      	mov	r3, r0
 800d75a:	76bb      	strb	r3, [r7, #26]
 800d75c:	e001      	b.n	800d762 <tcp_process+0x30e>
 800d75e:	2300      	movs	r3, #0
 800d760:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d762:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d766:	f113 0f0d 	cmn.w	r3, #13
 800d76a:	d102      	bne.n	800d772 <tcp_process+0x31e>
          return ERR_ABRT;
 800d76c:	f06f 030c 	mvn.w	r3, #12
 800d770:	e250      	b.n	800dc14 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	8b5b      	ldrh	r3, [r3, #26]
 800d776:	f043 0302 	orr.w	r3, r3, #2
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d780:	e23a      	b.n	800dbf8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d782:	4b98      	ldr	r3, [pc, #608]	; (800d9e4 <tcp_process+0x590>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	f003 0310 	and.w	r3, r3, #16
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f000 8234 	beq.w	800dbf8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d790:	4b95      	ldr	r3, [pc, #596]	; (800d9e8 <tcp_process+0x594>)
 800d792:	6819      	ldr	r1, [r3, #0]
 800d794:	4b95      	ldr	r3, [pc, #596]	; (800d9ec <tcp_process+0x598>)
 800d796:	881b      	ldrh	r3, [r3, #0]
 800d798:	461a      	mov	r2, r3
 800d79a:	4b95      	ldr	r3, [pc, #596]	; (800d9f0 <tcp_process+0x59c>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d7a0:	4b94      	ldr	r3, [pc, #592]	; (800d9f4 <tcp_process+0x5a0>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7a4:	885b      	ldrh	r3, [r3, #2]
 800d7a6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d7a8:	4a92      	ldr	r2, [pc, #584]	; (800d9f4 <tcp_process+0x5a0>)
 800d7aa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7ac:	8812      	ldrh	r2, [r2, #0]
 800d7ae:	b292      	uxth	r2, r2
 800d7b0:	9202      	str	r2, [sp, #8]
 800d7b2:	9301      	str	r3, [sp, #4]
 800d7b4:	4b90      	ldr	r3, [pc, #576]	; (800d9f8 <tcp_process+0x5a4>)
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	4b90      	ldr	r3, [pc, #576]	; (800d9fc <tcp_process+0x5a8>)
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f002 fc85 	bl	80100cc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d7c8:	2b05      	cmp	r3, #5
 800d7ca:	f200 8215 	bhi.w	800dbf8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f002 fa4f 	bl	800fc78 <tcp_rexmit_rto>
      break;
 800d7da:	e20d      	b.n	800dbf8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d7dc:	4b81      	ldr	r3, [pc, #516]	; (800d9e4 <tcp_process+0x590>)
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	f003 0310 	and.w	r3, r3, #16
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f000 80a1 	beq.w	800d92c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d7ea:	4b7f      	ldr	r3, [pc, #508]	; (800d9e8 <tcp_process+0x594>)
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7f2:	1ad3      	subs	r3, r2, r3
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	db7e      	blt.n	800d8f8 <tcp_process+0x4a4>
 800d7fa:	4b7b      	ldr	r3, [pc, #492]	; (800d9e8 <tcp_process+0x594>)
 800d7fc:	681a      	ldr	r2, [r3, #0]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d802:	1ad3      	subs	r3, r2, r3
 800d804:	2b00      	cmp	r3, #0
 800d806:	dc77      	bgt.n	800d8f8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2204      	movs	r2, #4
 800d80c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d812:	2b00      	cmp	r3, #0
 800d814:	d102      	bne.n	800d81c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d816:	23fa      	movs	r3, #250	; 0xfa
 800d818:	76bb      	strb	r3, [r7, #26]
 800d81a:	e01d      	b.n	800d858 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d820:	699b      	ldr	r3, [r3, #24]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d106      	bne.n	800d834 <tcp_process+0x3e0>
 800d826:	4b76      	ldr	r3, [pc, #472]	; (800da00 <tcp_process+0x5ac>)
 800d828:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d82c:	4975      	ldr	r1, [pc, #468]	; (800da04 <tcp_process+0x5b0>)
 800d82e:	4876      	ldr	r0, [pc, #472]	; (800da08 <tcp_process+0x5b4>)
 800d830:	f005 fef6 	bl	8013620 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d838:	699b      	ldr	r3, [r3, #24]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d00a      	beq.n	800d854 <tcp_process+0x400>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d842:	699b      	ldr	r3, [r3, #24]
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	6910      	ldr	r0, [r2, #16]
 800d848:	2200      	movs	r2, #0
 800d84a:	6879      	ldr	r1, [r7, #4]
 800d84c:	4798      	blx	r3
 800d84e:	4603      	mov	r3, r0
 800d850:	76bb      	strb	r3, [r7, #26]
 800d852:	e001      	b.n	800d858 <tcp_process+0x404>
 800d854:	23f0      	movs	r3, #240	; 0xf0
 800d856:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d858:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00a      	beq.n	800d876 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d860:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d864:	f113 0f0d 	cmn.w	r3, #13
 800d868:	d002      	beq.n	800d870 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7fd ff8e 	bl	800b78c <tcp_abort>
            }
            return ERR_ABRT;
 800d870:	f06f 030c 	mvn.w	r3, #12
 800d874:	e1ce      	b.n	800dc14 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 fae0 	bl	800de3c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d87c:	4b63      	ldr	r3, [pc, #396]	; (800da0c <tcp_process+0x5b8>)
 800d87e:	881b      	ldrh	r3, [r3, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d005      	beq.n	800d890 <tcp_process+0x43c>
            recv_acked--;
 800d884:	4b61      	ldr	r3, [pc, #388]	; (800da0c <tcp_process+0x5b8>)
 800d886:	881b      	ldrh	r3, [r3, #0]
 800d888:	3b01      	subs	r3, #1
 800d88a:	b29a      	uxth	r2, r3
 800d88c:	4b5f      	ldr	r3, [pc, #380]	; (800da0c <tcp_process+0x5b8>)
 800d88e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d894:	009a      	lsls	r2, r3, #2
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d89a:	005b      	lsls	r3, r3, #1
 800d89c:	f241 111c 	movw	r1, #4380	; 0x111c
 800d8a0:	428b      	cmp	r3, r1
 800d8a2:	bf38      	it	cc
 800d8a4:	460b      	movcc	r3, r1
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d204      	bcs.n	800d8b4 <tcp_process+0x460>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	e00d      	b.n	800d8d0 <tcp_process+0x47c>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8b8:	005b      	lsls	r3, r3, #1
 800d8ba:	f241 121c 	movw	r2, #4380	; 0x111c
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d904      	bls.n	800d8cc <tcp_process+0x478>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8c6:	005b      	lsls	r3, r3, #1
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	e001      	b.n	800d8d0 <tcp_process+0x47c>
 800d8cc:	f241 131c 	movw	r3, #4380	; 0x111c
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d8d6:	4b4e      	ldr	r3, [pc, #312]	; (800da10 <tcp_process+0x5bc>)
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	f003 0320 	and.w	r3, r3, #32
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d037      	beq.n	800d952 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	8b5b      	ldrh	r3, [r3, #26]
 800d8e6:	f043 0302 	orr.w	r3, r3, #2
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2207      	movs	r2, #7
 800d8f4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d8f6:	e02c      	b.n	800d952 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8f8:	4b3b      	ldr	r3, [pc, #236]	; (800d9e8 <tcp_process+0x594>)
 800d8fa:	6819      	ldr	r1, [r3, #0]
 800d8fc:	4b3b      	ldr	r3, [pc, #236]	; (800d9ec <tcp_process+0x598>)
 800d8fe:	881b      	ldrh	r3, [r3, #0]
 800d900:	461a      	mov	r2, r3
 800d902:	4b3b      	ldr	r3, [pc, #236]	; (800d9f0 <tcp_process+0x59c>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d908:	4b3a      	ldr	r3, [pc, #232]	; (800d9f4 <tcp_process+0x5a0>)
 800d90a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d90c:	885b      	ldrh	r3, [r3, #2]
 800d90e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d910:	4a38      	ldr	r2, [pc, #224]	; (800d9f4 <tcp_process+0x5a0>)
 800d912:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d914:	8812      	ldrh	r2, [r2, #0]
 800d916:	b292      	uxth	r2, r2
 800d918:	9202      	str	r2, [sp, #8]
 800d91a:	9301      	str	r3, [sp, #4]
 800d91c:	4b36      	ldr	r3, [pc, #216]	; (800d9f8 <tcp_process+0x5a4>)
 800d91e:	9300      	str	r3, [sp, #0]
 800d920:	4b36      	ldr	r3, [pc, #216]	; (800d9fc <tcp_process+0x5a8>)
 800d922:	4602      	mov	r2, r0
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f002 fbd1 	bl	80100cc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d92a:	e167      	b.n	800dbfc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d92c:	4b2d      	ldr	r3, [pc, #180]	; (800d9e4 <tcp_process+0x590>)
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	f003 0302 	and.w	r3, r3, #2
 800d934:	2b00      	cmp	r3, #0
 800d936:	f000 8161 	beq.w	800dbfc <tcp_process+0x7a8>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d93e:	1e5a      	subs	r2, r3, #1
 800d940:	4b2b      	ldr	r3, [pc, #172]	; (800d9f0 <tcp_process+0x59c>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	429a      	cmp	r2, r3
 800d946:	f040 8159 	bne.w	800dbfc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f002 f9b6 	bl	800fcbc <tcp_rexmit>
      break;
 800d950:	e154      	b.n	800dbfc <tcp_process+0x7a8>
 800d952:	e153      	b.n	800dbfc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fa71 	bl	800de3c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d95a:	4b2d      	ldr	r3, [pc, #180]	; (800da10 <tcp_process+0x5bc>)
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	f003 0320 	and.w	r3, r3, #32
 800d962:	2b00      	cmp	r3, #0
 800d964:	f000 814c 	beq.w	800dc00 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	8b5b      	ldrh	r3, [r3, #26]
 800d96c:	f043 0302 	orr.w	r3, r3, #2
 800d970:	b29a      	uxth	r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2207      	movs	r2, #7
 800d97a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d97c:	e140      	b.n	800dc00 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f000 fa5c 	bl	800de3c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d984:	4b22      	ldr	r3, [pc, #136]	; (800da10 <tcp_process+0x5bc>)
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	f003 0320 	and.w	r3, r3, #32
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d071      	beq.n	800da74 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d990:	4b14      	ldr	r3, [pc, #80]	; (800d9e4 <tcp_process+0x590>)
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	f003 0310 	and.w	r3, r3, #16
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d060      	beq.n	800da5e <tcp_process+0x60a>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d9a0:	4b11      	ldr	r3, [pc, #68]	; (800d9e8 <tcp_process+0x594>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d15a      	bne.n	800da5e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d156      	bne.n	800da5e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	8b5b      	ldrh	r3, [r3, #26]
 800d9b4:	f043 0302 	orr.w	r3, r3, #2
 800d9b8:	b29a      	uxth	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f7fe fdbc 	bl	800c53c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d9c4:	4b13      	ldr	r3, [pc, #76]	; (800da14 <tcp_process+0x5c0>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d105      	bne.n	800d9da <tcp_process+0x586>
 800d9ce:	4b11      	ldr	r3, [pc, #68]	; (800da14 <tcp_process+0x5c0>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	4a0f      	ldr	r2, [pc, #60]	; (800da14 <tcp_process+0x5c0>)
 800d9d6:	6013      	str	r3, [r2, #0]
 800d9d8:	e02e      	b.n	800da38 <tcp_process+0x5e4>
 800d9da:	4b0e      	ldr	r3, [pc, #56]	; (800da14 <tcp_process+0x5c0>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	617b      	str	r3, [r7, #20]
 800d9e0:	e027      	b.n	800da32 <tcp_process+0x5de>
 800d9e2:	bf00      	nop
 800d9e4:	2000ca68 	.word	0x2000ca68
 800d9e8:	2000ca60 	.word	0x2000ca60
 800d9ec:	2000ca66 	.word	0x2000ca66
 800d9f0:	2000ca5c 	.word	0x2000ca5c
 800d9f4:	2000ca4c 	.word	0x2000ca4c
 800d9f8:	200092e0 	.word	0x200092e0
 800d9fc:	200092e4 	.word	0x200092e4
 800da00:	08015838 	.word	0x08015838
 800da04:	08015ad8 	.word	0x08015ad8
 800da08:	08015884 	.word	0x08015884
 800da0c:	2000ca64 	.word	0x2000ca64
 800da10:	2000ca69 	.word	0x2000ca69
 800da14:	2000ca30 	.word	0x2000ca30
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d104      	bne.n	800da2c <tcp_process+0x5d8>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	68da      	ldr	r2, [r3, #12]
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	60da      	str	r2, [r3, #12]
 800da2a:	e005      	b.n	800da38 <tcp_process+0x5e4>
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	617b      	str	r3, [r7, #20]
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1ef      	bne.n	800da18 <tcp_process+0x5c4>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	60da      	str	r2, [r3, #12]
 800da3e:	4b77      	ldr	r3, [pc, #476]	; (800dc1c <tcp_process+0x7c8>)
 800da40:	2201      	movs	r2, #1
 800da42:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	220a      	movs	r2, #10
 800da48:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800da4a:	4b75      	ldr	r3, [pc, #468]	; (800dc20 <tcp_process+0x7cc>)
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	60da      	str	r2, [r3, #12]
 800da52:	4a73      	ldr	r2, [pc, #460]	; (800dc20 <tcp_process+0x7cc>)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6013      	str	r3, [r2, #0]
 800da58:	f002 fcfa 	bl	8010450 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800da5c:	e0d2      	b.n	800dc04 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	8b5b      	ldrh	r3, [r3, #26]
 800da62:	f043 0302 	orr.w	r3, r3, #2
 800da66:	b29a      	uxth	r2, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2208      	movs	r2, #8
 800da70:	751a      	strb	r2, [r3, #20]
      break;
 800da72:	e0c7      	b.n	800dc04 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800da74:	4b6b      	ldr	r3, [pc, #428]	; (800dc24 <tcp_process+0x7d0>)
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	f003 0310 	and.w	r3, r3, #16
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f000 80c1 	beq.w	800dc04 <tcp_process+0x7b0>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da86:	4b68      	ldr	r3, [pc, #416]	; (800dc28 <tcp_process+0x7d4>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	f040 80ba 	bne.w	800dc04 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800da94:	2b00      	cmp	r3, #0
 800da96:	f040 80b5 	bne.w	800dc04 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2206      	movs	r2, #6
 800da9e:	751a      	strb	r2, [r3, #20]
      break;
 800daa0:	e0b0      	b.n	800dc04 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 f9ca 	bl	800de3c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800daa8:	4b60      	ldr	r3, [pc, #384]	; (800dc2c <tcp_process+0x7d8>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	f003 0320 	and.w	r3, r3, #32
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f000 80a9 	beq.w	800dc08 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	8b5b      	ldrh	r3, [r3, #26]
 800daba:	f043 0302 	orr.w	r3, r3, #2
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f7fe fd39 	bl	800c53c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800daca:	4b59      	ldr	r3, [pc, #356]	; (800dc30 <tcp_process+0x7dc>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d105      	bne.n	800dae0 <tcp_process+0x68c>
 800dad4:	4b56      	ldr	r3, [pc, #344]	; (800dc30 <tcp_process+0x7dc>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	68db      	ldr	r3, [r3, #12]
 800dada:	4a55      	ldr	r2, [pc, #340]	; (800dc30 <tcp_process+0x7dc>)
 800dadc:	6013      	str	r3, [r2, #0]
 800dade:	e013      	b.n	800db08 <tcp_process+0x6b4>
 800dae0:	4b53      	ldr	r3, [pc, #332]	; (800dc30 <tcp_process+0x7dc>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	613b      	str	r3, [r7, #16]
 800dae6:	e00c      	b.n	800db02 <tcp_process+0x6ae>
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d104      	bne.n	800dafc <tcp_process+0x6a8>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	68da      	ldr	r2, [r3, #12]
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	60da      	str	r2, [r3, #12]
 800dafa:	e005      	b.n	800db08 <tcp_process+0x6b4>
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	613b      	str	r3, [r7, #16]
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1ef      	bne.n	800dae8 <tcp_process+0x694>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	60da      	str	r2, [r3, #12]
 800db0e:	4b43      	ldr	r3, [pc, #268]	; (800dc1c <tcp_process+0x7c8>)
 800db10:	2201      	movs	r2, #1
 800db12:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	220a      	movs	r2, #10
 800db18:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800db1a:	4b41      	ldr	r3, [pc, #260]	; (800dc20 <tcp_process+0x7cc>)
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	60da      	str	r2, [r3, #12]
 800db22:	4a3f      	ldr	r2, [pc, #252]	; (800dc20 <tcp_process+0x7cc>)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6013      	str	r3, [r2, #0]
 800db28:	f002 fc92 	bl	8010450 <tcp_timer_needed>
      }
      break;
 800db2c:	e06c      	b.n	800dc08 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 f984 	bl	800de3c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800db34:	4b3b      	ldr	r3, [pc, #236]	; (800dc24 <tcp_process+0x7d0>)
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	f003 0310 	and.w	r3, r3, #16
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d065      	beq.n	800dc0c <tcp_process+0x7b8>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db44:	4b38      	ldr	r3, [pc, #224]	; (800dc28 <tcp_process+0x7d4>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d15f      	bne.n	800dc0c <tcp_process+0x7b8>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db50:	2b00      	cmp	r3, #0
 800db52:	d15b      	bne.n	800dc0c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7fe fcf1 	bl	800c53c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800db5a:	4b35      	ldr	r3, [pc, #212]	; (800dc30 <tcp_process+0x7dc>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	429a      	cmp	r2, r3
 800db62:	d105      	bne.n	800db70 <tcp_process+0x71c>
 800db64:	4b32      	ldr	r3, [pc, #200]	; (800dc30 <tcp_process+0x7dc>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	4a31      	ldr	r2, [pc, #196]	; (800dc30 <tcp_process+0x7dc>)
 800db6c:	6013      	str	r3, [r2, #0]
 800db6e:	e013      	b.n	800db98 <tcp_process+0x744>
 800db70:	4b2f      	ldr	r3, [pc, #188]	; (800dc30 <tcp_process+0x7dc>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	60fb      	str	r3, [r7, #12]
 800db76:	e00c      	b.n	800db92 <tcp_process+0x73e>
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d104      	bne.n	800db8c <tcp_process+0x738>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	68da      	ldr	r2, [r3, #12]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	60da      	str	r2, [r3, #12]
 800db8a:	e005      	b.n	800db98 <tcp_process+0x744>
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	60fb      	str	r3, [r7, #12]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d1ef      	bne.n	800db78 <tcp_process+0x724>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	60da      	str	r2, [r3, #12]
 800db9e:	4b1f      	ldr	r3, [pc, #124]	; (800dc1c <tcp_process+0x7c8>)
 800dba0:	2201      	movs	r2, #1
 800dba2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	220a      	movs	r2, #10
 800dba8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dbaa:	4b1d      	ldr	r3, [pc, #116]	; (800dc20 <tcp_process+0x7cc>)
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	60da      	str	r2, [r3, #12]
 800dbb2:	4a1b      	ldr	r2, [pc, #108]	; (800dc20 <tcp_process+0x7cc>)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6013      	str	r3, [r2, #0]
 800dbb8:	f002 fc4a 	bl	8010450 <tcp_timer_needed>
      }
      break;
 800dbbc:	e026      	b.n	800dc0c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 f93c 	bl	800de3c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800dbc4:	4b17      	ldr	r3, [pc, #92]	; (800dc24 <tcp_process+0x7d0>)
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	f003 0310 	and.w	r3, r3, #16
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d01f      	beq.n	800dc10 <tcp_process+0x7bc>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dbd4:	4b14      	ldr	r3, [pc, #80]	; (800dc28 <tcp_process+0x7d4>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d119      	bne.n	800dc10 <tcp_process+0x7bc>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d115      	bne.n	800dc10 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800dbe4:	4b11      	ldr	r3, [pc, #68]	; (800dc2c <tcp_process+0x7d8>)
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	f043 0310 	orr.w	r3, r3, #16
 800dbec:	b2da      	uxtb	r2, r3
 800dbee:	4b0f      	ldr	r3, [pc, #60]	; (800dc2c <tcp_process+0x7d8>)
 800dbf0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800dbf2:	e00d      	b.n	800dc10 <tcp_process+0x7bc>
    default:
      break;
 800dbf4:	bf00      	nop
 800dbf6:	e00c      	b.n	800dc12 <tcp_process+0x7be>
      break;
 800dbf8:	bf00      	nop
 800dbfa:	e00a      	b.n	800dc12 <tcp_process+0x7be>
      break;
 800dbfc:	bf00      	nop
 800dbfe:	e008      	b.n	800dc12 <tcp_process+0x7be>
      break;
 800dc00:	bf00      	nop
 800dc02:	e006      	b.n	800dc12 <tcp_process+0x7be>
      break;
 800dc04:	bf00      	nop
 800dc06:	e004      	b.n	800dc12 <tcp_process+0x7be>
      break;
 800dc08:	bf00      	nop
 800dc0a:	e002      	b.n	800dc12 <tcp_process+0x7be>
      break;
 800dc0c:	bf00      	nop
 800dc0e:	e000      	b.n	800dc12 <tcp_process+0x7be>
      break;
 800dc10:	bf00      	nop
  }
  return ERR_OK;
 800dc12:	2300      	movs	r3, #0
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3724      	adds	r7, #36	; 0x24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd90      	pop	{r4, r7, pc}
 800dc1c:	2000ca38 	.word	0x2000ca38
 800dc20:	2000ca34 	.word	0x2000ca34
 800dc24:	2000ca68 	.word	0x2000ca68
 800dc28:	2000ca60 	.word	0x2000ca60
 800dc2c:	2000ca69 	.word	0x2000ca69
 800dc30:	2000ca30 	.word	0x2000ca30

0800dc34 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800dc34:	b590      	push	{r4, r7, lr}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d106      	bne.n	800dc52 <tcp_oos_insert_segment+0x1e>
 800dc44:	4b3b      	ldr	r3, [pc, #236]	; (800dd34 <tcp_oos_insert_segment+0x100>)
 800dc46:	f240 421f 	movw	r2, #1055	; 0x41f
 800dc4a:	493b      	ldr	r1, [pc, #236]	; (800dd38 <tcp_oos_insert_segment+0x104>)
 800dc4c:	483b      	ldr	r0, [pc, #236]	; (800dd3c <tcp_oos_insert_segment+0x108>)
 800dc4e:	f005 fce7 	bl	8013620 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	899b      	ldrh	r3, [r3, #12]
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fb fc10 	bl	8009480 <lwip_htons>
 800dc60:	4603      	mov	r3, r0
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	f003 0301 	and.w	r3, r3, #1
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d028      	beq.n	800dcbe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800dc6c:	6838      	ldr	r0, [r7, #0]
 800dc6e:	f7fe fa63 	bl	800c138 <tcp_segs_free>
    next = NULL;
 800dc72:	2300      	movs	r3, #0
 800dc74:	603b      	str	r3, [r7, #0]
 800dc76:	e056      	b.n	800dd26 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	899b      	ldrh	r3, [r3, #12]
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7fb fbfd 	bl	8009480 <lwip_htons>
 800dc86:	4603      	mov	r3, r0
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	f003 0301 	and.w	r3, r3, #1
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d00d      	beq.n	800dcae <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	899b      	ldrh	r3, [r3, #12]
 800dc98:	b29c      	uxth	r4, r3
 800dc9a:	2001      	movs	r0, #1
 800dc9c:	f7fb fbf0 	bl	8009480 <lwip_htons>
 800dca0:	4603      	mov	r3, r0
 800dca2:	461a      	mov	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	4322      	orrs	r2, r4
 800dcaa:	b292      	uxth	r2, r2
 800dcac:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800dcb8:	68f8      	ldr	r0, [r7, #12]
 800dcba:	f7fe fa52 	bl	800c162 <tcp_seg_free>
    while (next &&
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00e      	beq.n	800dce2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	891b      	ldrh	r3, [r3, #8]
 800dcc8:	461a      	mov	r2, r3
 800dcca:	4b1d      	ldr	r3, [pc, #116]	; (800dd40 <tcp_oos_insert_segment+0x10c>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	441a      	add	r2, r3
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	6839      	ldr	r1, [r7, #0]
 800dcd8:	8909      	ldrh	r1, [r1, #8]
 800dcda:	440b      	add	r3, r1
 800dcdc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	daca      	bge.n	800dc78 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d01e      	beq.n	800dd26 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	891b      	ldrh	r3, [r3, #8]
 800dcec:	461a      	mov	r2, r3
 800dcee:	4b14      	ldr	r3, [pc, #80]	; (800dd40 <tcp_oos_insert_segment+0x10c>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	441a      	add	r2, r3
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	1ad3      	subs	r3, r2, r3
    if (next &&
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	dd12      	ble.n	800dd26 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	4b0d      	ldr	r3, [pc, #52]	; (800dd40 <tcp_oos_insert_segment+0x10c>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	1ad3      	subs	r3, r2, r3
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	685a      	ldr	r2, [r3, #4]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	891b      	ldrh	r3, [r3, #8]
 800dd1e:	4619      	mov	r1, r3
 800dd20:	4610      	mov	r0, r2
 800dd22:	f7fc fe19 	bl	800a958 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	683a      	ldr	r2, [r7, #0]
 800dd2a:	601a      	str	r2, [r3, #0]
}
 800dd2c:	bf00      	nop
 800dd2e:	3714      	adds	r7, #20
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd90      	pop	{r4, r7, pc}
 800dd34:	08015838 	.word	0x08015838
 800dd38:	08015af8 	.word	0x08015af8
 800dd3c:	08015884 	.word	0x08015884
 800dd40:	2000ca5c 	.word	0x2000ca5c

0800dd44 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800dd44:	b5b0      	push	{r4, r5, r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
 800dd50:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800dd52:	e03e      	b.n	800ddd2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7fd f80c 	bl	800ad80 <pbuf_clen>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dd72:	8a7a      	ldrh	r2, [r7, #18]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d906      	bls.n	800dd86 <tcp_free_acked_segments+0x42>
 800dd78:	4b2a      	ldr	r3, [pc, #168]	; (800de24 <tcp_free_acked_segments+0xe0>)
 800dd7a:	f240 4257 	movw	r2, #1111	; 0x457
 800dd7e:	492a      	ldr	r1, [pc, #168]	; (800de28 <tcp_free_acked_segments+0xe4>)
 800dd80:	482a      	ldr	r0, [pc, #168]	; (800de2c <tcp_free_acked_segments+0xe8>)
 800dd82:	f005 fc4d 	bl	8013620 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800dd8c:	8a7b      	ldrh	r3, [r7, #18]
 800dd8e:	1ad3      	subs	r3, r2, r3
 800dd90:	b29a      	uxth	r2, r3
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	891a      	ldrh	r2, [r3, #8]
 800dd9c:	4b24      	ldr	r3, [pc, #144]	; (800de30 <tcp_free_acked_segments+0xec>)
 800dd9e:	881b      	ldrh	r3, [r3, #0]
 800dda0:	4413      	add	r3, r2
 800dda2:	b29a      	uxth	r2, r3
 800dda4:	4b22      	ldr	r3, [pc, #136]	; (800de30 <tcp_free_acked_segments+0xec>)
 800dda6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800dda8:	6978      	ldr	r0, [r7, #20]
 800ddaa:	f7fe f9da 	bl	800c162 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d00c      	beq.n	800ddd2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d109      	bne.n	800ddd2 <tcp_free_acked_segments+0x8e>
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d106      	bne.n	800ddd2 <tcp_free_acked_segments+0x8e>
 800ddc4:	4b17      	ldr	r3, [pc, #92]	; (800de24 <tcp_free_acked_segments+0xe0>)
 800ddc6:	f240 4261 	movw	r2, #1121	; 0x461
 800ddca:	491a      	ldr	r1, [pc, #104]	; (800de34 <tcp_free_acked_segments+0xf0>)
 800ddcc:	4817      	ldr	r0, [pc, #92]	; (800de2c <tcp_free_acked_segments+0xe8>)
 800ddce:	f005 fc27 	bl	8013620 <iprintf>
  while (seg_list != NULL &&
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d020      	beq.n	800de1a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fb fb63 	bl	80094aa <lwip_htonl>
 800dde4:	4604      	mov	r4, r0
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	891b      	ldrh	r3, [r3, #8]
 800ddea:	461d      	mov	r5, r3
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	899b      	ldrh	r3, [r3, #12]
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fb fb43 	bl	8009480 <lwip_htons>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	f003 0303 	and.w	r3, r3, #3
 800de02:	2b00      	cmp	r3, #0
 800de04:	d001      	beq.n	800de0a <tcp_free_acked_segments+0xc6>
 800de06:	2301      	movs	r3, #1
 800de08:	e000      	b.n	800de0c <tcp_free_acked_segments+0xc8>
 800de0a:	2300      	movs	r3, #0
 800de0c:	442b      	add	r3, r5
 800de0e:	18e2      	adds	r2, r4, r3
 800de10:	4b09      	ldr	r3, [pc, #36]	; (800de38 <tcp_free_acked_segments+0xf4>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800de16:	2b00      	cmp	r3, #0
 800de18:	dd9c      	ble.n	800dd54 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800de1a:	68bb      	ldr	r3, [r7, #8]
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3718      	adds	r7, #24
 800de20:	46bd      	mov	sp, r7
 800de22:	bdb0      	pop	{r4, r5, r7, pc}
 800de24:	08015838 	.word	0x08015838
 800de28:	08015b20 	.word	0x08015b20
 800de2c:	08015884 	.word	0x08015884
 800de30:	2000ca64 	.word	0x2000ca64
 800de34:	08015b48 	.word	0x08015b48
 800de38:	2000ca60 	.word	0x2000ca60

0800de3c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800de3c:	b5b0      	push	{r4, r5, r7, lr}
 800de3e:	b094      	sub	sp, #80	; 0x50
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800de44:	2300      	movs	r3, #0
 800de46:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d106      	bne.n	800de5c <tcp_receive+0x20>
 800de4e:	4b91      	ldr	r3, [pc, #580]	; (800e094 <tcp_receive+0x258>)
 800de50:	f240 427b 	movw	r2, #1147	; 0x47b
 800de54:	4990      	ldr	r1, [pc, #576]	; (800e098 <tcp_receive+0x25c>)
 800de56:	4891      	ldr	r0, [pc, #580]	; (800e09c <tcp_receive+0x260>)
 800de58:	f005 fbe2 	bl	8013620 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	7d1b      	ldrb	r3, [r3, #20]
 800de60:	2b03      	cmp	r3, #3
 800de62:	d806      	bhi.n	800de72 <tcp_receive+0x36>
 800de64:	4b8b      	ldr	r3, [pc, #556]	; (800e094 <tcp_receive+0x258>)
 800de66:	f240 427c 	movw	r2, #1148	; 0x47c
 800de6a:	498d      	ldr	r1, [pc, #564]	; (800e0a0 <tcp_receive+0x264>)
 800de6c:	488b      	ldr	r0, [pc, #556]	; (800e09c <tcp_receive+0x260>)
 800de6e:	f005 fbd7 	bl	8013620 <iprintf>

  if (flags & TCP_ACK) {
 800de72:	4b8c      	ldr	r3, [pc, #560]	; (800e0a4 <tcp_receive+0x268>)
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	f003 0310 	and.w	r3, r3, #16
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	f000 8264 	beq.w	800e348 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de86:	461a      	mov	r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de8c:	4413      	add	r3, r2
 800de8e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de94:	4b84      	ldr	r3, [pc, #528]	; (800e0a8 <tcp_receive+0x26c>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	1ad3      	subs	r3, r2, r3
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	db1b      	blt.n	800ded6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dea2:	4b81      	ldr	r3, [pc, #516]	; (800e0a8 <tcp_receive+0x26c>)
 800dea4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d106      	bne.n	800deb8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800deae:	4b7f      	ldr	r3, [pc, #508]	; (800e0ac <tcp_receive+0x270>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	1ad3      	subs	r3, r2, r3
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	db0e      	blt.n	800ded6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800debc:	4b7b      	ldr	r3, [pc, #492]	; (800e0ac <tcp_receive+0x270>)
 800debe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d125      	bne.n	800df10 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800dec4:	4b7a      	ldr	r3, [pc, #488]	; (800e0b0 <tcp_receive+0x274>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	89db      	ldrh	r3, [r3, #14]
 800deca:	b29a      	uxth	r2, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d91c      	bls.n	800df10 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ded6:	4b76      	ldr	r3, [pc, #472]	; (800e0b0 <tcp_receive+0x274>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	89db      	ldrh	r3, [r3, #14]
 800dedc:	b29a      	uxth	r2, r3
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800def0:	429a      	cmp	r2, r3
 800def2:	d205      	bcs.n	800df00 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800df00:	4b69      	ldr	r3, [pc, #420]	; (800e0a8 <tcp_receive+0x26c>)
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800df08:	4b68      	ldr	r3, [pc, #416]	; (800e0ac <tcp_receive+0x270>)
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800df10:	4b66      	ldr	r3, [pc, #408]	; (800e0ac <tcp_receive+0x270>)
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	dc58      	bgt.n	800dfd0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800df1e:	4b65      	ldr	r3, [pc, #404]	; (800e0b4 <tcp_receive+0x278>)
 800df20:	881b      	ldrh	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d14b      	bne.n	800dfbe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800df30:	4413      	add	r3, r2
 800df32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df34:	429a      	cmp	r2, r3
 800df36:	d142      	bne.n	800dfbe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800df3e:	2b00      	cmp	r3, #0
 800df40:	db3d      	blt.n	800dfbe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df46:	4b59      	ldr	r3, [pc, #356]	; (800e0ac <tcp_receive+0x270>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d137      	bne.n	800dfbe <tcp_receive+0x182>
              found_dupack = 1;
 800df4e:	2301      	movs	r3, #1
 800df50:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800df58:	2bff      	cmp	r3, #255	; 0xff
 800df5a:	d007      	beq.n	800df6c <tcp_receive+0x130>
                ++pcb->dupacks;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800df62:	3301      	adds	r3, #1
 800df64:	b2da      	uxtb	r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800df72:	2b03      	cmp	r3, #3
 800df74:	d91b      	bls.n	800dfae <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df80:	4413      	add	r3, r2
 800df82:	b29a      	uxth	r2, r3
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d30a      	bcc.n	800dfa4 <tcp_receive+0x168>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df98:	4413      	add	r3, r2
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dfa2:	e004      	b.n	800dfae <tcp_receive+0x172>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dfaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dfb4:	2b02      	cmp	r3, #2
 800dfb6:	d902      	bls.n	800dfbe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f001 feeb 	bl	800fd94 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800dfbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f040 8161 	bne.w	800e288 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dfce:	e15b      	b.n	800e288 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dfd0:	4b36      	ldr	r3, [pc, #216]	; (800e0ac <tcp_receive+0x270>)
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfd8:	1ad3      	subs	r3, r2, r3
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	f2c0 814e 	blt.w	800e27e <tcp_receive+0x442>
 800dfe2:	4b32      	ldr	r3, [pc, #200]	; (800e0ac <tcp_receive+0x270>)
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfea:	1ad3      	subs	r3, r2, r3
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	f300 8146 	bgt.w	800e27e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	8b5b      	ldrh	r3, [r3, #26]
 800dff6:	f003 0304 	and.w	r3, r3, #4
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d010      	beq.n	800e020 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	8b5b      	ldrh	r3, [r3, #26]
 800e002:	f023 0304 	bic.w	r3, r3, #4
 800e006:	b29a      	uxth	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2200      	movs	r2, #0
 800e024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e02e:	10db      	asrs	r3, r3, #3
 800e030:	b21b      	sxth	r3, r3
 800e032:	b29a      	uxth	r2, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	4413      	add	r3, r2
 800e03e:	b29b      	uxth	r3, r3
 800e040:	b21a      	sxth	r2, r3
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e048:	4b18      	ldr	r3, [pc, #96]	; (800e0ac <tcp_receive+0x270>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e052:	b29b      	uxth	r3, r3
 800e054:	1ad3      	subs	r3, r2, r3
 800e056:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e060:	4b12      	ldr	r3, [pc, #72]	; (800e0ac <tcp_receive+0x270>)
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	7d1b      	ldrb	r3, [r3, #20]
 800e06c:	2b03      	cmp	r3, #3
 800e06e:	f240 8097 	bls.w	800e1a0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e07e:	429a      	cmp	r2, r3
 800e080:	d245      	bcs.n	800e10e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	8b5b      	ldrh	r3, [r3, #26]
 800e086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d014      	beq.n	800e0b8 <tcp_receive+0x27c>
 800e08e:	2301      	movs	r3, #1
 800e090:	e013      	b.n	800e0ba <tcp_receive+0x27e>
 800e092:	bf00      	nop
 800e094:	08015838 	.word	0x08015838
 800e098:	08015b68 	.word	0x08015b68
 800e09c:	08015884 	.word	0x08015884
 800e0a0:	08015b84 	.word	0x08015b84
 800e0a4:	2000ca68 	.word	0x2000ca68
 800e0a8:	2000ca5c 	.word	0x2000ca5c
 800e0ac:	2000ca60 	.word	0x2000ca60
 800e0b0:	2000ca4c 	.word	0x2000ca4c
 800e0b4:	2000ca66 	.word	0x2000ca66
 800e0b8:	2302      	movs	r3, #2
 800e0ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e0be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e0c8:	fb12 f303 	smulbb	r3, r2, r3
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	bf28      	it	cs
 800e0d4:	4613      	movcs	r3, r2
 800e0d6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e0de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e0e0:	4413      	add	r3, r2
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d309      	bcc.n	800e102 <tcp_receive+0x2c6>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e0f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e0f6:	4413      	add	r3, r2
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e100:	e04e      	b.n	800e1a0 <tcp_receive+0x364>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e108:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e10c:	e048      	b.n	800e1a0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e114:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e116:	4413      	add	r3, r2
 800e118:	b29a      	uxth	r2, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e120:	429a      	cmp	r2, r3
 800e122:	d309      	bcc.n	800e138 <tcp_receive+0x2fc>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e12a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e12c:	4413      	add	r3, r2
 800e12e:	b29a      	uxth	r2, r3
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e136:	e004      	b.n	800e142 <tcp_receive+0x306>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e13e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e14e:	429a      	cmp	r2, r3
 800e150:	d326      	bcc.n	800e1a0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	b29a      	uxth	r2, r3
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e172:	4413      	add	r3, r2
 800e174:	b29a      	uxth	r2, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d30a      	bcc.n	800e196 <tcp_receive+0x35a>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e18a:	4413      	add	r3, r2
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e194:	e004      	b.n	800e1a0 <tcp_receive+0x364>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e19c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1a8:	4a98      	ldr	r2, [pc, #608]	; (800e40c <tcp_receive+0x5d0>)
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f7ff fdca 	bl	800dd44 <tcp_free_acked_segments>
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1be:	4a94      	ldr	r2, [pc, #592]	; (800e410 <tcp_receive+0x5d4>)
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7ff fdbf 	bl	800dd44 <tcp_free_acked_segments>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d104      	bne.n	800e1de <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1da:	861a      	strh	r2, [r3, #48]	; 0x30
 800e1dc:	e002      	b.n	800e1e4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d103      	bne.n	800e1fa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e200:	4b84      	ldr	r3, [pc, #528]	; (800e414 <tcp_receive+0x5d8>)
 800e202:	881b      	ldrh	r3, [r3, #0]
 800e204:	4413      	add	r3, r2
 800e206:	b29a      	uxth	r2, r3
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	8b5b      	ldrh	r3, [r3, #26]
 800e212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e216:	2b00      	cmp	r3, #0
 800e218:	d035      	beq.n	800e286 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d118      	bne.n	800e254 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e226:	2b00      	cmp	r3, #0
 800e228:	d00c      	beq.n	800e244 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	4618      	mov	r0, r3
 800e238:	f7fb f937 	bl	80094aa <lwip_htonl>
 800e23c:	4603      	mov	r3, r0
 800e23e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e240:	2b00      	cmp	r3, #0
 800e242:	dc20      	bgt.n	800e286 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	8b5b      	ldrh	r3, [r3, #26]
 800e248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e24c:	b29a      	uxth	r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e252:	e018      	b.n	800e286 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	4618      	mov	r0, r3
 800e262:	f7fb f922 	bl	80094aa <lwip_htonl>
 800e266:	4603      	mov	r3, r0
 800e268:	1ae3      	subs	r3, r4, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	dc0b      	bgt.n	800e286 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	8b5b      	ldrh	r3, [r3, #26]
 800e272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e276:	b29a      	uxth	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e27c:	e003      	b.n	800e286 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f001 ff76 	bl	8010170 <tcp_send_empty_ack>
 800e284:	e000      	b.n	800e288 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e286:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d05b      	beq.n	800e348 <tcp_receive+0x50c>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e294:	4b60      	ldr	r3, [pc, #384]	; (800e418 <tcp_receive+0x5dc>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	1ad3      	subs	r3, r2, r3
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	da54      	bge.n	800e348 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e29e:	4b5f      	ldr	r3, [pc, #380]	; (800e41c <tcp_receive+0x5e0>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	1ad3      	subs	r3, r2, r3
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e2b2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e2bc:	10db      	asrs	r3, r3, #3
 800e2be:	b21b      	sxth	r3, r3
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	1ad3      	subs	r3, r2, r3
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e2d0:	b29a      	uxth	r2, r3
 800e2d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e2d6:	4413      	add	r3, r2
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	b21a      	sxth	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e2e0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	da05      	bge.n	800e2f4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e2e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e2ec:	425b      	negs	r3, r3
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e2f4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e2fe:	109b      	asrs	r3, r3, #2
 800e300:	b21b      	sxth	r3, r3
 800e302:	b29b      	uxth	r3, r3
 800e304:	1ad3      	subs	r3, r2, r3
 800e306:	b29b      	uxth	r3, r3
 800e308:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e312:	b29a      	uxth	r2, r3
 800e314:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e318:	4413      	add	r3, r2
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	b21a      	sxth	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e328:	10db      	asrs	r3, r3, #3
 800e32a:	b21b      	sxth	r3, r3
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e334:	b29b      	uxth	r3, r3
 800e336:	4413      	add	r3, r2
 800e338:	b29b      	uxth	r3, r3
 800e33a:	b21a      	sxth	r2, r3
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2200      	movs	r2, #0
 800e346:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e348:	4b35      	ldr	r3, [pc, #212]	; (800e420 <tcp_receive+0x5e4>)
 800e34a:	881b      	ldrh	r3, [r3, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f000 84e2 	beq.w	800ed16 <tcp_receive+0xeda>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	7d1b      	ldrb	r3, [r3, #20]
 800e356:	2b06      	cmp	r3, #6
 800e358:	f200 84dd 	bhi.w	800ed16 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e360:	4b30      	ldr	r3, [pc, #192]	; (800e424 <tcp_receive+0x5e8>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	1ad3      	subs	r3, r2, r3
 800e366:	3b01      	subs	r3, #1
 800e368:	2b00      	cmp	r3, #0
 800e36a:	f2c0 808f 	blt.w	800e48c <tcp_receive+0x650>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e372:	4b2b      	ldr	r3, [pc, #172]	; (800e420 <tcp_receive+0x5e4>)
 800e374:	881b      	ldrh	r3, [r3, #0]
 800e376:	4619      	mov	r1, r3
 800e378:	4b2a      	ldr	r3, [pc, #168]	; (800e424 <tcp_receive+0x5e8>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	440b      	add	r3, r1
 800e37e:	1ad3      	subs	r3, r2, r3
 800e380:	3301      	adds	r3, #1
 800e382:	2b00      	cmp	r3, #0
 800e384:	f300 8082 	bgt.w	800e48c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e388:	4b27      	ldr	r3, [pc, #156]	; (800e428 <tcp_receive+0x5ec>)
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e392:	4b24      	ldr	r3, [pc, #144]	; (800e424 <tcp_receive+0x5e8>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	1ad3      	subs	r3, r2, r3
 800e398:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e39a:	4b23      	ldr	r3, [pc, #140]	; (800e428 <tcp_receive+0x5ec>)
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d106      	bne.n	800e3b0 <tcp_receive+0x574>
 800e3a2:	4b22      	ldr	r3, [pc, #136]	; (800e42c <tcp_receive+0x5f0>)
 800e3a4:	f240 5294 	movw	r2, #1428	; 0x594
 800e3a8:	4921      	ldr	r1, [pc, #132]	; (800e430 <tcp_receive+0x5f4>)
 800e3aa:	4822      	ldr	r0, [pc, #136]	; (800e434 <tcp_receive+0x5f8>)
 800e3ac:	f005 f938 	bl	8013620 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d906      	bls.n	800e3c8 <tcp_receive+0x58c>
 800e3ba:	4b1c      	ldr	r3, [pc, #112]	; (800e42c <tcp_receive+0x5f0>)
 800e3bc:	f240 5295 	movw	r2, #1429	; 0x595
 800e3c0:	491d      	ldr	r1, [pc, #116]	; (800e438 <tcp_receive+0x5fc>)
 800e3c2:	481c      	ldr	r0, [pc, #112]	; (800e434 <tcp_receive+0x5f8>)
 800e3c4:	f005 f92c 	bl	8013620 <iprintf>
      off = (u16_t)off32;
 800e3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e3ce:	4b16      	ldr	r3, [pc, #88]	; (800e428 <tcp_receive+0x5ec>)
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	891b      	ldrh	r3, [r3, #8]
 800e3d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d906      	bls.n	800e3ea <tcp_receive+0x5ae>
 800e3dc:	4b13      	ldr	r3, [pc, #76]	; (800e42c <tcp_receive+0x5f0>)
 800e3de:	f240 5297 	movw	r2, #1431	; 0x597
 800e3e2:	4916      	ldr	r1, [pc, #88]	; (800e43c <tcp_receive+0x600>)
 800e3e4:	4813      	ldr	r0, [pc, #76]	; (800e434 <tcp_receive+0x5f8>)
 800e3e6:	f005 f91b 	bl	8013620 <iprintf>
      inseg.len -= off;
 800e3ea:	4b0f      	ldr	r3, [pc, #60]	; (800e428 <tcp_receive+0x5ec>)
 800e3ec:	891a      	ldrh	r2, [r3, #8]
 800e3ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e3f2:	1ad3      	subs	r3, r2, r3
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	4b0c      	ldr	r3, [pc, #48]	; (800e428 <tcp_receive+0x5ec>)
 800e3f8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e3fa:	4b0b      	ldr	r3, [pc, #44]	; (800e428 <tcp_receive+0x5ec>)
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	891a      	ldrh	r2, [r3, #8]
 800e400:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e404:	1ad3      	subs	r3, r2, r3
 800e406:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e408:	e02a      	b.n	800e460 <tcp_receive+0x624>
 800e40a:	bf00      	nop
 800e40c:	08015ba0 	.word	0x08015ba0
 800e410:	08015ba8 	.word	0x08015ba8
 800e414:	2000ca64 	.word	0x2000ca64
 800e418:	2000ca60 	.word	0x2000ca60
 800e41c:	2000ca24 	.word	0x2000ca24
 800e420:	2000ca66 	.word	0x2000ca66
 800e424:	2000ca5c 	.word	0x2000ca5c
 800e428:	2000ca3c 	.word	0x2000ca3c
 800e42c:	08015838 	.word	0x08015838
 800e430:	08015bb0 	.word	0x08015bb0
 800e434:	08015884 	.word	0x08015884
 800e438:	08015bc0 	.word	0x08015bc0
 800e43c:	08015bd0 	.word	0x08015bd0
        off -= p->len;
 800e440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e442:	895b      	ldrh	r3, [r3, #10]
 800e444:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e448:	1ad3      	subs	r3, r2, r3
 800e44a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e44e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e450:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e452:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e456:	2200      	movs	r2, #0
 800e458:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e45a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e462:	895b      	ldrh	r3, [r3, #10]
 800e464:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e468:	429a      	cmp	r2, r3
 800e46a:	d8e9      	bhi.n	800e440 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e46c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e470:	4619      	mov	r1, r3
 800e472:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e474:	f7fc fb70 	bl	800ab58 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e47c:	4a91      	ldr	r2, [pc, #580]	; (800e6c4 <tcp_receive+0x888>)
 800e47e:	6013      	str	r3, [r2, #0]
 800e480:	4b91      	ldr	r3, [pc, #580]	; (800e6c8 <tcp_receive+0x88c>)
 800e482:	68db      	ldr	r3, [r3, #12]
 800e484:	4a8f      	ldr	r2, [pc, #572]	; (800e6c4 <tcp_receive+0x888>)
 800e486:	6812      	ldr	r2, [r2, #0]
 800e488:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e48a:	e00d      	b.n	800e4a8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e48c:	4b8d      	ldr	r3, [pc, #564]	; (800e6c4 <tcp_receive+0x888>)
 800e48e:	681a      	ldr	r2, [r3, #0]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e494:	1ad3      	subs	r3, r2, r3
 800e496:	2b00      	cmp	r3, #0
 800e498:	da06      	bge.n	800e4a8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	8b5b      	ldrh	r3, [r3, #26]
 800e49e:	f043 0302 	orr.w	r3, r3, #2
 800e4a2:	b29a      	uxth	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e4a8:	4b86      	ldr	r3, [pc, #536]	; (800e6c4 <tcp_receive+0x888>)
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b0:	1ad3      	subs	r3, r2, r3
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	f2c0 842a 	blt.w	800ed0c <tcp_receive+0xed0>
 800e4b8:	4b82      	ldr	r3, [pc, #520]	; (800e6c4 <tcp_receive+0x888>)
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c0:	6879      	ldr	r1, [r7, #4]
 800e4c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e4c4:	440b      	add	r3, r1
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f300 841e 	bgt.w	800ed0c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4d4:	4b7b      	ldr	r3, [pc, #492]	; (800e6c4 <tcp_receive+0x888>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	f040 829a 	bne.w	800ea12 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e4de:	4b7a      	ldr	r3, [pc, #488]	; (800e6c8 <tcp_receive+0x88c>)
 800e4e0:	891c      	ldrh	r4, [r3, #8]
 800e4e2:	4b79      	ldr	r3, [pc, #484]	; (800e6c8 <tcp_receive+0x88c>)
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	899b      	ldrh	r3, [r3, #12]
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fa ffc8 	bl	8009480 <lwip_htons>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	f003 0303 	and.w	r3, r3, #3
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d001      	beq.n	800e500 <tcp_receive+0x6c4>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e000      	b.n	800e502 <tcp_receive+0x6c6>
 800e500:	2300      	movs	r3, #0
 800e502:	4423      	add	r3, r4
 800e504:	b29a      	uxth	r2, r3
 800e506:	4b71      	ldr	r3, [pc, #452]	; (800e6cc <tcp_receive+0x890>)
 800e508:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e50e:	4b6f      	ldr	r3, [pc, #444]	; (800e6cc <tcp_receive+0x890>)
 800e510:	881b      	ldrh	r3, [r3, #0]
 800e512:	429a      	cmp	r2, r3
 800e514:	d275      	bcs.n	800e602 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e516:	4b6c      	ldr	r3, [pc, #432]	; (800e6c8 <tcp_receive+0x88c>)
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	899b      	ldrh	r3, [r3, #12]
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	4618      	mov	r0, r3
 800e520:	f7fa ffae 	bl	8009480 <lwip_htons>
 800e524:	4603      	mov	r3, r0
 800e526:	b2db      	uxtb	r3, r3
 800e528:	f003 0301 	and.w	r3, r3, #1
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d01f      	beq.n	800e570 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e530:	4b65      	ldr	r3, [pc, #404]	; (800e6c8 <tcp_receive+0x88c>)
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	899b      	ldrh	r3, [r3, #12]
 800e536:	b29b      	uxth	r3, r3
 800e538:	b21b      	sxth	r3, r3
 800e53a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e53e:	b21c      	sxth	r4, r3
 800e540:	4b61      	ldr	r3, [pc, #388]	; (800e6c8 <tcp_receive+0x88c>)
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	899b      	ldrh	r3, [r3, #12]
 800e546:	b29b      	uxth	r3, r3
 800e548:	4618      	mov	r0, r3
 800e54a:	f7fa ff99 	bl	8009480 <lwip_htons>
 800e54e:	4603      	mov	r3, r0
 800e550:	b2db      	uxtb	r3, r3
 800e552:	b29b      	uxth	r3, r3
 800e554:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e558:	b29b      	uxth	r3, r3
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fa ff90 	bl	8009480 <lwip_htons>
 800e560:	4603      	mov	r3, r0
 800e562:	b21b      	sxth	r3, r3
 800e564:	4323      	orrs	r3, r4
 800e566:	b21a      	sxth	r2, r3
 800e568:	4b57      	ldr	r3, [pc, #348]	; (800e6c8 <tcp_receive+0x88c>)
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	b292      	uxth	r2, r2
 800e56e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e574:	4b54      	ldr	r3, [pc, #336]	; (800e6c8 <tcp_receive+0x88c>)
 800e576:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e578:	4b53      	ldr	r3, [pc, #332]	; (800e6c8 <tcp_receive+0x88c>)
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	899b      	ldrh	r3, [r3, #12]
 800e57e:	b29b      	uxth	r3, r3
 800e580:	4618      	mov	r0, r3
 800e582:	f7fa ff7d 	bl	8009480 <lwip_htons>
 800e586:	4603      	mov	r3, r0
 800e588:	b2db      	uxtb	r3, r3
 800e58a:	f003 0302 	and.w	r3, r3, #2
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d005      	beq.n	800e59e <tcp_receive+0x762>
            inseg.len -= 1;
 800e592:	4b4d      	ldr	r3, [pc, #308]	; (800e6c8 <tcp_receive+0x88c>)
 800e594:	891b      	ldrh	r3, [r3, #8]
 800e596:	3b01      	subs	r3, #1
 800e598:	b29a      	uxth	r2, r3
 800e59a:	4b4b      	ldr	r3, [pc, #300]	; (800e6c8 <tcp_receive+0x88c>)
 800e59c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e59e:	4b4a      	ldr	r3, [pc, #296]	; (800e6c8 <tcp_receive+0x88c>)
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	4a49      	ldr	r2, [pc, #292]	; (800e6c8 <tcp_receive+0x88c>)
 800e5a4:	8912      	ldrh	r2, [r2, #8]
 800e5a6:	4611      	mov	r1, r2
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7fc f9d5 	bl	800a958 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e5ae:	4b46      	ldr	r3, [pc, #280]	; (800e6c8 <tcp_receive+0x88c>)
 800e5b0:	891c      	ldrh	r4, [r3, #8]
 800e5b2:	4b45      	ldr	r3, [pc, #276]	; (800e6c8 <tcp_receive+0x88c>)
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	899b      	ldrh	r3, [r3, #12]
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7fa ff60 	bl	8009480 <lwip_htons>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	f003 0303 	and.w	r3, r3, #3
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d001      	beq.n	800e5d0 <tcp_receive+0x794>
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e000      	b.n	800e5d2 <tcp_receive+0x796>
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	4423      	add	r3, r4
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	4b3d      	ldr	r3, [pc, #244]	; (800e6cc <tcp_receive+0x890>)
 800e5d8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e5da:	4b3c      	ldr	r3, [pc, #240]	; (800e6cc <tcp_receive+0x890>)
 800e5dc:	881b      	ldrh	r3, [r3, #0]
 800e5de:	461a      	mov	r2, r3
 800e5e0:	4b38      	ldr	r3, [pc, #224]	; (800e6c4 <tcp_receive+0x888>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	441a      	add	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ea:	6879      	ldr	r1, [r7, #4]
 800e5ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e5ee:	440b      	add	r3, r1
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d006      	beq.n	800e602 <tcp_receive+0x7c6>
 800e5f4:	4b36      	ldr	r3, [pc, #216]	; (800e6d0 <tcp_receive+0x894>)
 800e5f6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e5fa:	4936      	ldr	r1, [pc, #216]	; (800e6d4 <tcp_receive+0x898>)
 800e5fc:	4836      	ldr	r0, [pc, #216]	; (800e6d8 <tcp_receive+0x89c>)
 800e5fe:	f005 f80f 	bl	8013620 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e606:	2b00      	cmp	r3, #0
 800e608:	f000 80e7 	beq.w	800e7da <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e60c:	4b2e      	ldr	r3, [pc, #184]	; (800e6c8 <tcp_receive+0x88c>)
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	899b      	ldrh	r3, [r3, #12]
 800e612:	b29b      	uxth	r3, r3
 800e614:	4618      	mov	r0, r3
 800e616:	f7fa ff33 	bl	8009480 <lwip_htons>
 800e61a:	4603      	mov	r3, r0
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	f003 0301 	and.w	r3, r3, #1
 800e622:	2b00      	cmp	r3, #0
 800e624:	d010      	beq.n	800e648 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e626:	e00a      	b.n	800e63e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e62c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f7fd fd92 	bl	800c162 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1f0      	bne.n	800e628 <tcp_receive+0x7ec>
 800e646:	e0c8      	b.n	800e7da <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e64c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e64e:	e052      	b.n	800e6f6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	899b      	ldrh	r3, [r3, #12]
 800e656:	b29b      	uxth	r3, r3
 800e658:	4618      	mov	r0, r3
 800e65a:	f7fa ff11 	bl	8009480 <lwip_htons>
 800e65e:	4603      	mov	r3, r0
 800e660:	b2db      	uxtb	r3, r3
 800e662:	f003 0301 	and.w	r3, r3, #1
 800e666:	2b00      	cmp	r3, #0
 800e668:	d03d      	beq.n	800e6e6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e66a:	4b17      	ldr	r3, [pc, #92]	; (800e6c8 <tcp_receive+0x88c>)
 800e66c:	68db      	ldr	r3, [r3, #12]
 800e66e:	899b      	ldrh	r3, [r3, #12]
 800e670:	b29b      	uxth	r3, r3
 800e672:	4618      	mov	r0, r3
 800e674:	f7fa ff04 	bl	8009480 <lwip_htons>
 800e678:	4603      	mov	r3, r0
 800e67a:	b2db      	uxtb	r3, r3
 800e67c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e680:	2b00      	cmp	r3, #0
 800e682:	d130      	bne.n	800e6e6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e684:	4b10      	ldr	r3, [pc, #64]	; (800e6c8 <tcp_receive+0x88c>)
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	899b      	ldrh	r3, [r3, #12]
 800e68a:	b29c      	uxth	r4, r3
 800e68c:	2001      	movs	r0, #1
 800e68e:	f7fa fef7 	bl	8009480 <lwip_htons>
 800e692:	4603      	mov	r3, r0
 800e694:	461a      	mov	r2, r3
 800e696:	4b0c      	ldr	r3, [pc, #48]	; (800e6c8 <tcp_receive+0x88c>)
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	4322      	orrs	r2, r4
 800e69c:	b292      	uxth	r2, r2
 800e69e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e6a0:	4b09      	ldr	r3, [pc, #36]	; (800e6c8 <tcp_receive+0x88c>)
 800e6a2:	891c      	ldrh	r4, [r3, #8]
 800e6a4:	4b08      	ldr	r3, [pc, #32]	; (800e6c8 <tcp_receive+0x88c>)
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	899b      	ldrh	r3, [r3, #12]
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fa fee7 	bl	8009480 <lwip_htons>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	b2db      	uxtb	r3, r3
 800e6b6:	f003 0303 	and.w	r3, r3, #3
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00e      	beq.n	800e6dc <tcp_receive+0x8a0>
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e00d      	b.n	800e6de <tcp_receive+0x8a2>
 800e6c2:	bf00      	nop
 800e6c4:	2000ca5c 	.word	0x2000ca5c
 800e6c8:	2000ca3c 	.word	0x2000ca3c
 800e6cc:	2000ca66 	.word	0x2000ca66
 800e6d0:	08015838 	.word	0x08015838
 800e6d4:	08015be0 	.word	0x08015be0
 800e6d8:	08015884 	.word	0x08015884
 800e6dc:	2300      	movs	r3, #0
 800e6de:	4423      	add	r3, r4
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	4b98      	ldr	r3, [pc, #608]	; (800e944 <tcp_receive+0xb08>)
 800e6e4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e6f0:	6938      	ldr	r0, [r7, #16]
 800e6f2:	f7fd fd36 	bl	800c162 <tcp_seg_free>
            while (next &&
 800e6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d00e      	beq.n	800e71a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e6fc:	4b91      	ldr	r3, [pc, #580]	; (800e944 <tcp_receive+0xb08>)
 800e6fe:	881b      	ldrh	r3, [r3, #0]
 800e700:	461a      	mov	r2, r3
 800e702:	4b91      	ldr	r3, [pc, #580]	; (800e948 <tcp_receive+0xb0c>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	441a      	add	r2, r3
 800e708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e710:	8909      	ldrh	r1, [r1, #8]
 800e712:	440b      	add	r3, r1
 800e714:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e716:	2b00      	cmp	r3, #0
 800e718:	da9a      	bge.n	800e650 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d059      	beq.n	800e7d4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e720:	4b88      	ldr	r3, [pc, #544]	; (800e944 <tcp_receive+0xb08>)
 800e722:	881b      	ldrh	r3, [r3, #0]
 800e724:	461a      	mov	r2, r3
 800e726:	4b88      	ldr	r3, [pc, #544]	; (800e948 <tcp_receive+0xb0c>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	441a      	add	r2, r3
 800e72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e734:	2b00      	cmp	r3, #0
 800e736:	dd4d      	ble.n	800e7d4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	b29a      	uxth	r2, r3
 800e740:	4b81      	ldr	r3, [pc, #516]	; (800e948 <tcp_receive+0xb0c>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	b29b      	uxth	r3, r3
 800e746:	1ad3      	subs	r3, r2, r3
 800e748:	b29a      	uxth	r2, r3
 800e74a:	4b80      	ldr	r3, [pc, #512]	; (800e94c <tcp_receive+0xb10>)
 800e74c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e74e:	4b7f      	ldr	r3, [pc, #508]	; (800e94c <tcp_receive+0xb10>)
 800e750:	68db      	ldr	r3, [r3, #12]
 800e752:	899b      	ldrh	r3, [r3, #12]
 800e754:	b29b      	uxth	r3, r3
 800e756:	4618      	mov	r0, r3
 800e758:	f7fa fe92 	bl	8009480 <lwip_htons>
 800e75c:	4603      	mov	r3, r0
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	f003 0302 	and.w	r3, r3, #2
 800e764:	2b00      	cmp	r3, #0
 800e766:	d005      	beq.n	800e774 <tcp_receive+0x938>
                inseg.len -= 1;
 800e768:	4b78      	ldr	r3, [pc, #480]	; (800e94c <tcp_receive+0xb10>)
 800e76a:	891b      	ldrh	r3, [r3, #8]
 800e76c:	3b01      	subs	r3, #1
 800e76e:	b29a      	uxth	r2, r3
 800e770:	4b76      	ldr	r3, [pc, #472]	; (800e94c <tcp_receive+0xb10>)
 800e772:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e774:	4b75      	ldr	r3, [pc, #468]	; (800e94c <tcp_receive+0xb10>)
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	4a74      	ldr	r2, [pc, #464]	; (800e94c <tcp_receive+0xb10>)
 800e77a:	8912      	ldrh	r2, [r2, #8]
 800e77c:	4611      	mov	r1, r2
 800e77e:	4618      	mov	r0, r3
 800e780:	f7fc f8ea 	bl	800a958 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e784:	4b71      	ldr	r3, [pc, #452]	; (800e94c <tcp_receive+0xb10>)
 800e786:	891c      	ldrh	r4, [r3, #8]
 800e788:	4b70      	ldr	r3, [pc, #448]	; (800e94c <tcp_receive+0xb10>)
 800e78a:	68db      	ldr	r3, [r3, #12]
 800e78c:	899b      	ldrh	r3, [r3, #12]
 800e78e:	b29b      	uxth	r3, r3
 800e790:	4618      	mov	r0, r3
 800e792:	f7fa fe75 	bl	8009480 <lwip_htons>
 800e796:	4603      	mov	r3, r0
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	f003 0303 	and.w	r3, r3, #3
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d001      	beq.n	800e7a6 <tcp_receive+0x96a>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e000      	b.n	800e7a8 <tcp_receive+0x96c>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	4423      	add	r3, r4
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	4b65      	ldr	r3, [pc, #404]	; (800e944 <tcp_receive+0xb08>)
 800e7ae:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e7b0:	4b64      	ldr	r3, [pc, #400]	; (800e944 <tcp_receive+0xb08>)
 800e7b2:	881b      	ldrh	r3, [r3, #0]
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	4b64      	ldr	r3, [pc, #400]	; (800e948 <tcp_receive+0xb0c>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	441a      	add	r2, r3
 800e7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7be:	68db      	ldr	r3, [r3, #12]
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d006      	beq.n	800e7d4 <tcp_receive+0x998>
 800e7c6:	4b62      	ldr	r3, [pc, #392]	; (800e950 <tcp_receive+0xb14>)
 800e7c8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e7cc:	4961      	ldr	r1, [pc, #388]	; (800e954 <tcp_receive+0xb18>)
 800e7ce:	4862      	ldr	r0, [pc, #392]	; (800e958 <tcp_receive+0xb1c>)
 800e7d0:	f004 ff26 	bl	8013620 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7d8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e7da:	4b5a      	ldr	r3, [pc, #360]	; (800e944 <tcp_receive+0xb08>)
 800e7dc:	881b      	ldrh	r3, [r3, #0]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	4b59      	ldr	r3, [pc, #356]	; (800e948 <tcp_receive+0xb0c>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	441a      	add	r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e7ee:	4b55      	ldr	r3, [pc, #340]	; (800e944 <tcp_receive+0xb08>)
 800e7f0:	881b      	ldrh	r3, [r3, #0]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d206      	bcs.n	800e804 <tcp_receive+0x9c8>
 800e7f6:	4b56      	ldr	r3, [pc, #344]	; (800e950 <tcp_receive+0xb14>)
 800e7f8:	f240 6207 	movw	r2, #1543	; 0x607
 800e7fc:	4957      	ldr	r1, [pc, #348]	; (800e95c <tcp_receive+0xb20>)
 800e7fe:	4856      	ldr	r0, [pc, #344]	; (800e958 <tcp_receive+0xb1c>)
 800e800:	f004 ff0e 	bl	8013620 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e808:	4b4e      	ldr	r3, [pc, #312]	; (800e944 <tcp_receive+0xb08>)
 800e80a:	881b      	ldrh	r3, [r3, #0]
 800e80c:	1ad3      	subs	r3, r2, r3
 800e80e:	b29a      	uxth	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f7fc ffc5 	bl	800b7a4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e81a:	4b4c      	ldr	r3, [pc, #304]	; (800e94c <tcp_receive+0xb10>)
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	891b      	ldrh	r3, [r3, #8]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d006      	beq.n	800e832 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e824:	4b49      	ldr	r3, [pc, #292]	; (800e94c <tcp_receive+0xb10>)
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	4a4d      	ldr	r2, [pc, #308]	; (800e960 <tcp_receive+0xb24>)
 800e82a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e82c:	4b47      	ldr	r3, [pc, #284]	; (800e94c <tcp_receive+0xb10>)
 800e82e:	2200      	movs	r2, #0
 800e830:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e832:	4b46      	ldr	r3, [pc, #280]	; (800e94c <tcp_receive+0xb10>)
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	899b      	ldrh	r3, [r3, #12]
 800e838:	b29b      	uxth	r3, r3
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7fa fe20 	bl	8009480 <lwip_htons>
 800e840:	4603      	mov	r3, r0
 800e842:	b2db      	uxtb	r3, r3
 800e844:	f003 0301 	and.w	r3, r3, #1
 800e848:	2b00      	cmp	r3, #0
 800e84a:	f000 80b8 	beq.w	800e9be <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e84e:	4b45      	ldr	r3, [pc, #276]	; (800e964 <tcp_receive+0xb28>)
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	f043 0320 	orr.w	r3, r3, #32
 800e856:	b2da      	uxtb	r2, r3
 800e858:	4b42      	ldr	r3, [pc, #264]	; (800e964 <tcp_receive+0xb28>)
 800e85a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e85c:	e0af      	b.n	800e9be <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e862:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	4a36      	ldr	r2, [pc, #216]	; (800e948 <tcp_receive+0xb0c>)
 800e86e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	891b      	ldrh	r3, [r3, #8]
 800e874:	461c      	mov	r4, r3
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	899b      	ldrh	r3, [r3, #12]
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fa fdfe 	bl	8009480 <lwip_htons>
 800e884:	4603      	mov	r3, r0
 800e886:	b2db      	uxtb	r3, r3
 800e888:	f003 0303 	and.w	r3, r3, #3
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d001      	beq.n	800e894 <tcp_receive+0xa58>
 800e890:	2301      	movs	r3, #1
 800e892:	e000      	b.n	800e896 <tcp_receive+0xa5a>
 800e894:	2300      	movs	r3, #0
 800e896:	191a      	adds	r2, r3, r4
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e89c:	441a      	add	r2, r3
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8a6:	461c      	mov	r4, r3
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	891b      	ldrh	r3, [r3, #8]
 800e8ac:	461d      	mov	r5, r3
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	899b      	ldrh	r3, [r3, #12]
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7fa fde2 	bl	8009480 <lwip_htons>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	f003 0303 	and.w	r3, r3, #3
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d001      	beq.n	800e8cc <tcp_receive+0xa90>
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	e000      	b.n	800e8ce <tcp_receive+0xa92>
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	442b      	add	r3, r5
 800e8d0:	429c      	cmp	r4, r3
 800e8d2:	d206      	bcs.n	800e8e2 <tcp_receive+0xaa6>
 800e8d4:	4b1e      	ldr	r3, [pc, #120]	; (800e950 <tcp_receive+0xb14>)
 800e8d6:	f240 622b 	movw	r2, #1579	; 0x62b
 800e8da:	4923      	ldr	r1, [pc, #140]	; (800e968 <tcp_receive+0xb2c>)
 800e8dc:	481e      	ldr	r0, [pc, #120]	; (800e958 <tcp_receive+0xb1c>)
 800e8de:	f004 fe9f 	bl	8013620 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	891b      	ldrh	r3, [r3, #8]
 800e8e6:	461c      	mov	r4, r3
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	899b      	ldrh	r3, [r3, #12]
 800e8ee:	b29b      	uxth	r3, r3
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7fa fdc5 	bl	8009480 <lwip_htons>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	f003 0303 	and.w	r3, r3, #3
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d001      	beq.n	800e906 <tcp_receive+0xaca>
 800e902:	2301      	movs	r3, #1
 800e904:	e000      	b.n	800e908 <tcp_receive+0xacc>
 800e906:	2300      	movs	r3, #0
 800e908:	1919      	adds	r1, r3, r4
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e90e:	b28b      	uxth	r3, r1
 800e910:	1ad3      	subs	r3, r2, r3
 800e912:	b29a      	uxth	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f7fc ff43 	bl	800b7a4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	891b      	ldrh	r3, [r3, #8]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d028      	beq.n	800e97a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e928:	4b0d      	ldr	r3, [pc, #52]	; (800e960 <tcp_receive+0xb24>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d01d      	beq.n	800e96c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e930:	4b0b      	ldr	r3, [pc, #44]	; (800e960 <tcp_receive+0xb24>)
 800e932:	681a      	ldr	r2, [r3, #0]
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	4619      	mov	r1, r3
 800e93a:	4610      	mov	r0, r2
 800e93c:	f7fc fa60 	bl	800ae00 <pbuf_cat>
 800e940:	e018      	b.n	800e974 <tcp_receive+0xb38>
 800e942:	bf00      	nop
 800e944:	2000ca66 	.word	0x2000ca66
 800e948:	2000ca5c 	.word	0x2000ca5c
 800e94c:	2000ca3c 	.word	0x2000ca3c
 800e950:	08015838 	.word	0x08015838
 800e954:	08015c18 	.word	0x08015c18
 800e958:	08015884 	.word	0x08015884
 800e95c:	08015c54 	.word	0x08015c54
 800e960:	2000ca6c 	.word	0x2000ca6c
 800e964:	2000ca69 	.word	0x2000ca69
 800e968:	08015c74 	.word	0x08015c74
            } else {
              recv_data = cseg->p;
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	4a70      	ldr	r2, [pc, #448]	; (800eb34 <tcp_receive+0xcf8>)
 800e972:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	2200      	movs	r2, #0
 800e978:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	899b      	ldrh	r3, [r3, #12]
 800e980:	b29b      	uxth	r3, r3
 800e982:	4618      	mov	r0, r3
 800e984:	f7fa fd7c 	bl	8009480 <lwip_htons>
 800e988:	4603      	mov	r3, r0
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	f003 0301 	and.w	r3, r3, #1
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00d      	beq.n	800e9b0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e994:	4b68      	ldr	r3, [pc, #416]	; (800eb38 <tcp_receive+0xcfc>)
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	f043 0320 	orr.w	r3, r3, #32
 800e99c:	b2da      	uxtb	r2, r3
 800e99e:	4b66      	ldr	r3, [pc, #408]	; (800eb38 <tcp_receive+0xcfc>)
 800e9a0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	7d1b      	ldrb	r3, [r3, #20]
 800e9a6:	2b04      	cmp	r3, #4
 800e9a8:	d102      	bne.n	800e9b0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2207      	movs	r2, #7
 800e9ae:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e9b8:	68b8      	ldr	r0, [r7, #8]
 800e9ba:	f7fd fbd2 	bl	800c162 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d008      	beq.n	800e9d8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	685a      	ldr	r2, [r3, #4]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	f43f af43 	beq.w	800e85e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	8b5b      	ldrh	r3, [r3, #26]
 800e9dc:	f003 0301 	and.w	r3, r3, #1
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d00e      	beq.n	800ea02 <tcp_receive+0xbc6>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	8b5b      	ldrh	r3, [r3, #26]
 800e9e8:	f023 0301 	bic.w	r3, r3, #1
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	835a      	strh	r2, [r3, #26]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	8b5b      	ldrh	r3, [r3, #26]
 800e9f6:	f043 0302 	orr.w	r3, r3, #2
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ea00:	e188      	b.n	800ed14 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	8b5b      	ldrh	r3, [r3, #26]
 800ea06:	f043 0301 	orr.w	r3, r3, #1
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ea10:	e180      	b.n	800ed14 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d106      	bne.n	800ea28 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ea1a:	4848      	ldr	r0, [pc, #288]	; (800eb3c <tcp_receive+0xd00>)
 800ea1c:	f7fd fbba 	bl	800c194 <tcp_seg_copy>
 800ea20:	4602      	mov	r2, r0
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	675a      	str	r2, [r3, #116]	; 0x74
 800ea26:	e16d      	b.n	800ed04 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea30:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea32:	e157      	b.n	800ece4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ea34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	685a      	ldr	r2, [r3, #4]
 800ea3a:	4b41      	ldr	r3, [pc, #260]	; (800eb40 <tcp_receive+0xd04>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d11d      	bne.n	800ea7e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ea42:	4b3e      	ldr	r3, [pc, #248]	; (800eb3c <tcp_receive+0xd00>)
 800ea44:	891a      	ldrh	r2, [r3, #8]
 800ea46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea48:	891b      	ldrh	r3, [r3, #8]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	f240 814f 	bls.w	800ecee <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ea50:	483a      	ldr	r0, [pc, #232]	; (800eb3c <tcp_receive+0xd00>)
 800ea52:	f7fd fb9f 	bl	800c194 <tcp_seg_copy>
 800ea56:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	f000 8149 	beq.w	800ecf2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ea60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d003      	beq.n	800ea6e <tcp_receive+0xc32>
                    prev->next = cseg;
 800ea66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea68:	697a      	ldr	r2, [r7, #20]
 800ea6a:	601a      	str	r2, [r3, #0]
 800ea6c:	e002      	b.n	800ea74 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	697a      	ldr	r2, [r7, #20]
 800ea72:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ea74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea76:	6978      	ldr	r0, [r7, #20]
 800ea78:	f7ff f8dc 	bl	800dc34 <tcp_oos_insert_segment>
                }
                break;
 800ea7c:	e139      	b.n	800ecf2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ea7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d117      	bne.n	800eab4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ea84:	4b2e      	ldr	r3, [pc, #184]	; (800eb40 <tcp_receive+0xd04>)
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8a:	68db      	ldr	r3, [r3, #12]
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	1ad3      	subs	r3, r2, r3
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	da57      	bge.n	800eb44 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ea94:	4829      	ldr	r0, [pc, #164]	; (800eb3c <tcp_receive+0xd00>)
 800ea96:	f7fd fb7d 	bl	800c194 <tcp_seg_copy>
 800ea9a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	f000 8129 	beq.w	800ecf6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	69ba      	ldr	r2, [r7, #24]
 800eaa8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800eaaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eaac:	69b8      	ldr	r0, [r7, #24]
 800eaae:	f7ff f8c1 	bl	800dc34 <tcp_oos_insert_segment>
                  }
                  break;
 800eab2:	e120      	b.n	800ecf6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800eab4:	4b22      	ldr	r3, [pc, #136]	; (800eb40 <tcp_receive+0xd04>)
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaba:	68db      	ldr	r3, [r3, #12]
 800eabc:	685b      	ldr	r3, [r3, #4]
 800eabe:	1ad3      	subs	r3, r2, r3
 800eac0:	3b01      	subs	r3, #1
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	db3e      	blt.n	800eb44 <tcp_receive+0xd08>
 800eac6:	4b1e      	ldr	r3, [pc, #120]	; (800eb40 <tcp_receive+0xd04>)
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	1ad3      	subs	r3, r2, r3
 800ead2:	3301      	adds	r3, #1
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	dc35      	bgt.n	800eb44 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ead8:	4818      	ldr	r0, [pc, #96]	; (800eb3c <tcp_receive+0xd00>)
 800eada:	f7fd fb5b 	bl	800c194 <tcp_seg_copy>
 800eade:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f000 8109 	beq.w	800ecfa <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800eae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eaf0:	8912      	ldrh	r2, [r2, #8]
 800eaf2:	441a      	add	r2, r3
 800eaf4:	4b12      	ldr	r3, [pc, #72]	; (800eb40 <tcp_receive+0xd04>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	dd12      	ble.n	800eb24 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800eafe:	4b10      	ldr	r3, [pc, #64]	; (800eb40 <tcp_receive+0xd04>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	b29a      	uxth	r2, r3
 800eb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb06:	68db      	ldr	r3, [r3, #12]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	1ad3      	subs	r3, r2, r3
 800eb0e:	b29a      	uxth	r2, r3
 800eb10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb12:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800eb14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb16:	685a      	ldr	r2, [r3, #4]
 800eb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb1a:	891b      	ldrh	r3, [r3, #8]
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	4610      	mov	r0, r2
 800eb20:	f7fb ff1a 	bl	800a958 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800eb24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb26:	69fa      	ldr	r2, [r7, #28]
 800eb28:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800eb2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eb2c:	69f8      	ldr	r0, [r7, #28]
 800eb2e:	f7ff f881 	bl	800dc34 <tcp_oos_insert_segment>
                  }
                  break;
 800eb32:	e0e2      	b.n	800ecfa <tcp_receive+0xebe>
 800eb34:	2000ca6c 	.word	0x2000ca6c
 800eb38:	2000ca69 	.word	0x2000ca69
 800eb3c:	2000ca3c 	.word	0x2000ca3c
 800eb40:	2000ca5c 	.word	0x2000ca5c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800eb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb46:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800eb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	f040 80c6 	bne.w	800ecde <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800eb52:	4b80      	ldr	r3, [pc, #512]	; (800ed54 <tcp_receive+0xf18>)
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb58:	68db      	ldr	r3, [r3, #12]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	f340 80bd 	ble.w	800ecde <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	899b      	ldrh	r3, [r3, #12]
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fa fc87 	bl	8009480 <lwip_htons>
 800eb72:	4603      	mov	r3, r0
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	f003 0301 	and.w	r3, r3, #1
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	f040 80bf 	bne.w	800ecfe <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800eb80:	4875      	ldr	r0, [pc, #468]	; (800ed58 <tcp_receive+0xf1c>)
 800eb82:	f7fd fb07 	bl	800c194 <tcp_seg_copy>
 800eb86:	4602      	mov	r2, r0
 800eb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800eb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	f000 80b6 	beq.w	800ed02 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800eb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb9e:	8912      	ldrh	r2, [r2, #8]
 800eba0:	441a      	add	r2, r3
 800eba2:	4b6c      	ldr	r3, [pc, #432]	; (800ed54 <tcp_receive+0xf18>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	1ad3      	subs	r3, r2, r3
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	dd12      	ble.n	800ebd2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ebac:	4b69      	ldr	r3, [pc, #420]	; (800ed54 <tcp_receive+0xf18>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	b29a      	uxth	r2, r3
 800ebb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	b29b      	uxth	r3, r3
 800ebba:	1ad3      	subs	r3, r2, r3
 800ebbc:	b29a      	uxth	r2, r3
 800ebbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ebc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc4:	685a      	ldr	r2, [r3, #4]
 800ebc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc8:	891b      	ldrh	r3, [r3, #8]
 800ebca:	4619      	mov	r1, r3
 800ebcc:	4610      	mov	r0, r2
 800ebce:	f7fb fec3 	bl	800a958 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ebd2:	4b62      	ldr	r3, [pc, #392]	; (800ed5c <tcp_receive+0xf20>)
 800ebd4:	881b      	ldrh	r3, [r3, #0]
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	4b5e      	ldr	r3, [pc, #376]	; (800ed54 <tcp_receive+0xf18>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	441a      	add	r2, r3
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe2:	6879      	ldr	r1, [r7, #4]
 800ebe4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ebe6:	440b      	add	r3, r1
 800ebe8:	1ad3      	subs	r3, r2, r3
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	f340 8089 	ble.w	800ed02 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ebf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	899b      	ldrh	r3, [r3, #12]
 800ebf8:	b29b      	uxth	r3, r3
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7fa fc40 	bl	8009480 <lwip_htons>
 800ec00:	4603      	mov	r3, r0
 800ec02:	b2db      	uxtb	r3, r3
 800ec04:	f003 0301 	and.w	r3, r3, #1
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d022      	beq.n	800ec52 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ec0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	68db      	ldr	r3, [r3, #12]
 800ec12:	899b      	ldrh	r3, [r3, #12]
 800ec14:	b29b      	uxth	r3, r3
 800ec16:	b21b      	sxth	r3, r3
 800ec18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ec1c:	b21c      	sxth	r4, r3
 800ec1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	899b      	ldrh	r3, [r3, #12]
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7fa fc29 	bl	8009480 <lwip_htons>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fa fc20 	bl	8009480 <lwip_htons>
 800ec40:	4603      	mov	r3, r0
 800ec42:	b21b      	sxth	r3, r3
 800ec44:	4323      	orrs	r3, r4
 800ec46:	b21a      	sxth	r2, r3
 800ec48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	b292      	uxth	r2, r2
 800ec50:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec56:	b29a      	uxth	r2, r3
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec5c:	4413      	add	r3, r2
 800ec5e:	b299      	uxth	r1, r3
 800ec60:	4b3c      	ldr	r3, [pc, #240]	; (800ed54 <tcp_receive+0xf18>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	1a8a      	subs	r2, r1, r2
 800ec6c:	b292      	uxth	r2, r2
 800ec6e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ec70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	685a      	ldr	r2, [r3, #4]
 800ec76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	891b      	ldrh	r3, [r3, #8]
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	4610      	mov	r0, r2
 800ec80:	f7fb fe6a 	bl	800a958 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ec84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	891c      	ldrh	r4, [r3, #8]
 800ec8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	68db      	ldr	r3, [r3, #12]
 800ec90:	899b      	ldrh	r3, [r3, #12]
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7fa fbf3 	bl	8009480 <lwip_htons>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	f003 0303 	and.w	r3, r3, #3
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d001      	beq.n	800ecaa <tcp_receive+0xe6e>
 800eca6:	2301      	movs	r3, #1
 800eca8:	e000      	b.n	800ecac <tcp_receive+0xe70>
 800ecaa:	2300      	movs	r3, #0
 800ecac:	4423      	add	r3, r4
 800ecae:	b29a      	uxth	r2, r3
 800ecb0:	4b2a      	ldr	r3, [pc, #168]	; (800ed5c <tcp_receive+0xf20>)
 800ecb2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ecb4:	4b29      	ldr	r3, [pc, #164]	; (800ed5c <tcp_receive+0xf20>)
 800ecb6:	881b      	ldrh	r3, [r3, #0]
 800ecb8:	461a      	mov	r2, r3
 800ecba:	4b26      	ldr	r3, [pc, #152]	; (800ed54 <tcp_receive+0xf18>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	441a      	add	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc4:	6879      	ldr	r1, [r7, #4]
 800ecc6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ecc8:	440b      	add	r3, r1
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d019      	beq.n	800ed02 <tcp_receive+0xec6>
 800ecce:	4b24      	ldr	r3, [pc, #144]	; (800ed60 <tcp_receive+0xf24>)
 800ecd0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ecd4:	4923      	ldr	r1, [pc, #140]	; (800ed64 <tcp_receive+0xf28>)
 800ecd6:	4824      	ldr	r0, [pc, #144]	; (800ed68 <tcp_receive+0xf2c>)
 800ecd8:	f004 fca2 	bl	8013620 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ecdc:	e011      	b.n	800ed02 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ecde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ece4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	f47f aea4 	bne.w	800ea34 <tcp_receive+0xbf8>
 800ecec:	e00a      	b.n	800ed04 <tcp_receive+0xec8>
                break;
 800ecee:	bf00      	nop
 800ecf0:	e008      	b.n	800ed04 <tcp_receive+0xec8>
                break;
 800ecf2:	bf00      	nop
 800ecf4:	e006      	b.n	800ed04 <tcp_receive+0xec8>
                  break;
 800ecf6:	bf00      	nop
 800ecf8:	e004      	b.n	800ed04 <tcp_receive+0xec8>
                  break;
 800ecfa:	bf00      	nop
 800ecfc:	e002      	b.n	800ed04 <tcp_receive+0xec8>
                  break;
 800ecfe:	bf00      	nop
 800ed00:	e000      	b.n	800ed04 <tcp_receive+0xec8>
                break;
 800ed02:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f001 fa33 	bl	8010170 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ed0a:	e003      	b.n	800ed14 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f001 fa2f 	bl	8010170 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ed12:	e01a      	b.n	800ed4a <tcp_receive+0xf0e>
 800ed14:	e019      	b.n	800ed4a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ed16:	4b0f      	ldr	r3, [pc, #60]	; (800ed54 <tcp_receive+0xf18>)
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed1e:	1ad3      	subs	r3, r2, r3
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	db0a      	blt.n	800ed3a <tcp_receive+0xefe>
 800ed24:	4b0b      	ldr	r3, [pc, #44]	; (800ed54 <tcp_receive+0xf18>)
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed2c:	6879      	ldr	r1, [r7, #4]
 800ed2e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ed30:	440b      	add	r3, r1
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	3301      	adds	r3, #1
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	dd07      	ble.n	800ed4a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	8b5b      	ldrh	r3, [r3, #26]
 800ed3e:	f043 0302 	orr.w	r3, r3, #2
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ed48:	e7ff      	b.n	800ed4a <tcp_receive+0xf0e>
 800ed4a:	bf00      	nop
 800ed4c:	3750      	adds	r7, #80	; 0x50
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bdb0      	pop	{r4, r5, r7, pc}
 800ed52:	bf00      	nop
 800ed54:	2000ca5c 	.word	0x2000ca5c
 800ed58:	2000ca3c 	.word	0x2000ca3c
 800ed5c:	2000ca66 	.word	0x2000ca66
 800ed60:	08015838 	.word	0x08015838
 800ed64:	08015be0 	.word	0x08015be0
 800ed68:	08015884 	.word	0x08015884

0800ed6c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ed72:	4b15      	ldr	r3, [pc, #84]	; (800edc8 <tcp_get_next_optbyte+0x5c>)
 800ed74:	881b      	ldrh	r3, [r3, #0]
 800ed76:	1c5a      	adds	r2, r3, #1
 800ed78:	b291      	uxth	r1, r2
 800ed7a:	4a13      	ldr	r2, [pc, #76]	; (800edc8 <tcp_get_next_optbyte+0x5c>)
 800ed7c:	8011      	strh	r1, [r2, #0]
 800ed7e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ed80:	4b12      	ldr	r3, [pc, #72]	; (800edcc <tcp_get_next_optbyte+0x60>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d004      	beq.n	800ed92 <tcp_get_next_optbyte+0x26>
 800ed88:	4b11      	ldr	r3, [pc, #68]	; (800edd0 <tcp_get_next_optbyte+0x64>)
 800ed8a:	881b      	ldrh	r3, [r3, #0]
 800ed8c:	88fa      	ldrh	r2, [r7, #6]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d208      	bcs.n	800eda4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ed92:	4b10      	ldr	r3, [pc, #64]	; (800edd4 <tcp_get_next_optbyte+0x68>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	3314      	adds	r3, #20
 800ed98:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ed9a:	88fb      	ldrh	r3, [r7, #6]
 800ed9c:	683a      	ldr	r2, [r7, #0]
 800ed9e:	4413      	add	r3, r2
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	e00b      	b.n	800edbc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800eda4:	88fb      	ldrh	r3, [r7, #6]
 800eda6:	b2da      	uxtb	r2, r3
 800eda8:	4b09      	ldr	r3, [pc, #36]	; (800edd0 <tcp_get_next_optbyte+0x64>)
 800edaa:	881b      	ldrh	r3, [r3, #0]
 800edac:	b2db      	uxtb	r3, r3
 800edae:	1ad3      	subs	r3, r2, r3
 800edb0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800edb2:	4b06      	ldr	r3, [pc, #24]	; (800edcc <tcp_get_next_optbyte+0x60>)
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	797b      	ldrb	r3, [r7, #5]
 800edb8:	4413      	add	r3, r2
 800edba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	370c      	adds	r7, #12
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr
 800edc8:	2000ca58 	.word	0x2000ca58
 800edcc:	2000ca54 	.word	0x2000ca54
 800edd0:	2000ca52 	.word	0x2000ca52
 800edd4:	2000ca4c 	.word	0x2000ca4c

0800edd8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d106      	bne.n	800edf4 <tcp_parseopt+0x1c>
 800ede6:	4b32      	ldr	r3, [pc, #200]	; (800eeb0 <tcp_parseopt+0xd8>)
 800ede8:	f240 727d 	movw	r2, #1917	; 0x77d
 800edec:	4931      	ldr	r1, [pc, #196]	; (800eeb4 <tcp_parseopt+0xdc>)
 800edee:	4832      	ldr	r0, [pc, #200]	; (800eeb8 <tcp_parseopt+0xe0>)
 800edf0:	f004 fc16 	bl	8013620 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800edf4:	4b31      	ldr	r3, [pc, #196]	; (800eebc <tcp_parseopt+0xe4>)
 800edf6:	881b      	ldrh	r3, [r3, #0]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d055      	beq.n	800eea8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800edfc:	4b30      	ldr	r3, [pc, #192]	; (800eec0 <tcp_parseopt+0xe8>)
 800edfe:	2200      	movs	r2, #0
 800ee00:	801a      	strh	r2, [r3, #0]
 800ee02:	e045      	b.n	800ee90 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ee04:	f7ff ffb2 	bl	800ed6c <tcp_get_next_optbyte>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ee0c:	7bfb      	ldrb	r3, [r7, #15]
 800ee0e:	2b02      	cmp	r3, #2
 800ee10:	d006      	beq.n	800ee20 <tcp_parseopt+0x48>
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	dc2b      	bgt.n	800ee6e <tcp_parseopt+0x96>
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d041      	beq.n	800ee9e <tcp_parseopt+0xc6>
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d127      	bne.n	800ee6e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ee1e:	e037      	b.n	800ee90 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ee20:	f7ff ffa4 	bl	800ed6c <tcp_get_next_optbyte>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b04      	cmp	r3, #4
 800ee28:	d13b      	bne.n	800eea2 <tcp_parseopt+0xca>
 800ee2a:	4b25      	ldr	r3, [pc, #148]	; (800eec0 <tcp_parseopt+0xe8>)
 800ee2c:	881b      	ldrh	r3, [r3, #0]
 800ee2e:	3301      	adds	r3, #1
 800ee30:	4a22      	ldr	r2, [pc, #136]	; (800eebc <tcp_parseopt+0xe4>)
 800ee32:	8812      	ldrh	r2, [r2, #0]
 800ee34:	4293      	cmp	r3, r2
 800ee36:	da34      	bge.n	800eea2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ee38:	f7ff ff98 	bl	800ed6c <tcp_get_next_optbyte>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	021b      	lsls	r3, r3, #8
 800ee42:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ee44:	f7ff ff92 	bl	800ed6c <tcp_get_next_optbyte>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	b29a      	uxth	r2, r3
 800ee4c:	89bb      	ldrh	r3, [r7, #12]
 800ee4e:	4313      	orrs	r3, r2
 800ee50:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ee52:	89bb      	ldrh	r3, [r7, #12]
 800ee54:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ee58:	d804      	bhi.n	800ee64 <tcp_parseopt+0x8c>
 800ee5a:	89bb      	ldrh	r3, [r7, #12]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d001      	beq.n	800ee64 <tcp_parseopt+0x8c>
 800ee60:	89ba      	ldrh	r2, [r7, #12]
 800ee62:	e001      	b.n	800ee68 <tcp_parseopt+0x90>
 800ee64:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ee6c:	e010      	b.n	800ee90 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ee6e:	f7ff ff7d 	bl	800ed6c <tcp_get_next_optbyte>
 800ee72:	4603      	mov	r3, r0
 800ee74:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ee76:	7afb      	ldrb	r3, [r7, #11]
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d914      	bls.n	800eea6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ee7c:	7afb      	ldrb	r3, [r7, #11]
 800ee7e:	b29a      	uxth	r2, r3
 800ee80:	4b0f      	ldr	r3, [pc, #60]	; (800eec0 <tcp_parseopt+0xe8>)
 800ee82:	881b      	ldrh	r3, [r3, #0]
 800ee84:	4413      	add	r3, r2
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	3b02      	subs	r3, #2
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	4b0c      	ldr	r3, [pc, #48]	; (800eec0 <tcp_parseopt+0xe8>)
 800ee8e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ee90:	4b0b      	ldr	r3, [pc, #44]	; (800eec0 <tcp_parseopt+0xe8>)
 800ee92:	881a      	ldrh	r2, [r3, #0]
 800ee94:	4b09      	ldr	r3, [pc, #36]	; (800eebc <tcp_parseopt+0xe4>)
 800ee96:	881b      	ldrh	r3, [r3, #0]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d3b3      	bcc.n	800ee04 <tcp_parseopt+0x2c>
 800ee9c:	e004      	b.n	800eea8 <tcp_parseopt+0xd0>
          return;
 800ee9e:	bf00      	nop
 800eea0:	e002      	b.n	800eea8 <tcp_parseopt+0xd0>
            return;
 800eea2:	bf00      	nop
 800eea4:	e000      	b.n	800eea8 <tcp_parseopt+0xd0>
            return;
 800eea6:	bf00      	nop
      }
    }
  }
}
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	08015838 	.word	0x08015838
 800eeb4:	08015c9c 	.word	0x08015c9c
 800eeb8:	08015884 	.word	0x08015884
 800eebc:	2000ca50 	.word	0x2000ca50
 800eec0:	2000ca58 	.word	0x2000ca58

0800eec4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800eec4:	b480      	push	{r7}
 800eec6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800eec8:	4b05      	ldr	r3, [pc, #20]	; (800eee0 <tcp_trigger_input_pcb_close+0x1c>)
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	f043 0310 	orr.w	r3, r3, #16
 800eed0:	b2da      	uxtb	r2, r3
 800eed2:	4b03      	ldr	r3, [pc, #12]	; (800eee0 <tcp_trigger_input_pcb_close+0x1c>)
 800eed4:	701a      	strb	r2, [r3, #0]
}
 800eed6:	bf00      	nop
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr
 800eee0:	2000ca69 	.word	0x2000ca69

0800eee4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	60f8      	str	r0, [r7, #12]
 800eeec:	60b9      	str	r1, [r7, #8]
 800eeee:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00a      	beq.n	800ef0c <tcp_route+0x28>
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	7a1b      	ldrb	r3, [r3, #8]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d006      	beq.n	800ef0c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	7a1b      	ldrb	r3, [r3, #8]
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7fb fb20 	bl	800a548 <netif_get_by_index>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	e003      	b.n	800ef14 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f002 fead 	bl	8011c6c <ip4_route>
 800ef12:	4603      	mov	r3, r0
  }
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3710      	adds	r7, #16
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ef1c:	b590      	push	{r4, r7, lr}
 800ef1e:	b087      	sub	sp, #28
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	603b      	str	r3, [r7, #0]
 800ef28:	4613      	mov	r3, r2
 800ef2a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d105      	bne.n	800ef3e <tcp_create_segment+0x22>
 800ef32:	4b44      	ldr	r3, [pc, #272]	; (800f044 <tcp_create_segment+0x128>)
 800ef34:	22a3      	movs	r2, #163	; 0xa3
 800ef36:	4944      	ldr	r1, [pc, #272]	; (800f048 <tcp_create_segment+0x12c>)
 800ef38:	4844      	ldr	r0, [pc, #272]	; (800f04c <tcp_create_segment+0x130>)
 800ef3a:	f004 fb71 	bl	8013620 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d105      	bne.n	800ef50 <tcp_create_segment+0x34>
 800ef44:	4b3f      	ldr	r3, [pc, #252]	; (800f044 <tcp_create_segment+0x128>)
 800ef46:	22a4      	movs	r2, #164	; 0xa4
 800ef48:	4941      	ldr	r1, [pc, #260]	; (800f050 <tcp_create_segment+0x134>)
 800ef4a:	4840      	ldr	r0, [pc, #256]	; (800f04c <tcp_create_segment+0x130>)
 800ef4c:	f004 fb68 	bl	8013620 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ef50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ef54:	009b      	lsls	r3, r3, #2
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	f003 0304 	and.w	r3, r3, #4
 800ef5c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ef5e:	2003      	movs	r0, #3
 800ef60:	f7fa ff66 	bl	8009e30 <memp_malloc>
 800ef64:	6138      	str	r0, [r7, #16]
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d104      	bne.n	800ef76 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ef6c:	68b8      	ldr	r0, [r7, #8]
 800ef6e:	f7fb fe79 	bl	800ac64 <pbuf_free>
    return NULL;
 800ef72:	2300      	movs	r3, #0
 800ef74:	e061      	b.n	800f03a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ef7c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	2200      	movs	r2, #0
 800ef82:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	68ba      	ldr	r2, [r7, #8]
 800ef88:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	891a      	ldrh	r2, [r3, #8]
 800ef8e:	7dfb      	ldrb	r3, [r7, #23]
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d205      	bcs.n	800efa2 <tcp_create_segment+0x86>
 800ef96:	4b2b      	ldr	r3, [pc, #172]	; (800f044 <tcp_create_segment+0x128>)
 800ef98:	22b0      	movs	r2, #176	; 0xb0
 800ef9a:	492e      	ldr	r1, [pc, #184]	; (800f054 <tcp_create_segment+0x138>)
 800ef9c:	482b      	ldr	r0, [pc, #172]	; (800f04c <tcp_create_segment+0x130>)
 800ef9e:	f004 fb3f 	bl	8013620 <iprintf>
  seg->len = p->tot_len - optlen;
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	891a      	ldrh	r2, [r3, #8]
 800efa6:	7dfb      	ldrb	r3, [r7, #23]
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	1ad3      	subs	r3, r2, r3
 800efac:	b29a      	uxth	r2, r3
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800efb2:	2114      	movs	r1, #20
 800efb4:	68b8      	ldr	r0, [r7, #8]
 800efb6:	f7fb fdbf 	bl	800ab38 <pbuf_add_header>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d004      	beq.n	800efca <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800efc0:	6938      	ldr	r0, [r7, #16]
 800efc2:	f7fd f8ce 	bl	800c162 <tcp_seg_free>
    return NULL;
 800efc6:	2300      	movs	r3, #0
 800efc8:	e037      	b.n	800f03a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	685a      	ldr	r2, [r3, #4]
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	8ada      	ldrh	r2, [r3, #22]
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	68dc      	ldr	r4, [r3, #12]
 800efdc:	4610      	mov	r0, r2
 800efde:	f7fa fa4f 	bl	8009480 <lwip_htons>
 800efe2:	4603      	mov	r3, r0
 800efe4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	8b1a      	ldrh	r2, [r3, #24]
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	68dc      	ldr	r4, [r3, #12]
 800efee:	4610      	mov	r0, r2
 800eff0:	f7fa fa46 	bl	8009480 <lwip_htons>
 800eff4:	4603      	mov	r3, r0
 800eff6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	68dc      	ldr	r4, [r3, #12]
 800effc:	6838      	ldr	r0, [r7, #0]
 800effe:	f7fa fa54 	bl	80094aa <lwip_htonl>
 800f002:	4603      	mov	r3, r0
 800f004:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f006:	7dfb      	ldrb	r3, [r7, #23]
 800f008:	089b      	lsrs	r3, r3, #2
 800f00a:	b2db      	uxtb	r3, r3
 800f00c:	b29b      	uxth	r3, r3
 800f00e:	3305      	adds	r3, #5
 800f010:	b29b      	uxth	r3, r3
 800f012:	031b      	lsls	r3, r3, #12
 800f014:	b29a      	uxth	r2, r3
 800f016:	79fb      	ldrb	r3, [r7, #7]
 800f018:	b29b      	uxth	r3, r3
 800f01a:	4313      	orrs	r3, r2
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	68dc      	ldr	r4, [r3, #12]
 800f022:	4610      	mov	r0, r2
 800f024:	f7fa fa2c 	bl	8009480 <lwip_htons>
 800f028:	4603      	mov	r3, r0
 800f02a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	2200      	movs	r2, #0
 800f032:	749a      	strb	r2, [r3, #18]
 800f034:	2200      	movs	r2, #0
 800f036:	74da      	strb	r2, [r3, #19]
  return seg;
 800f038:	693b      	ldr	r3, [r7, #16]
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	371c      	adds	r7, #28
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd90      	pop	{r4, r7, pc}
 800f042:	bf00      	nop
 800f044:	08015cb8 	.word	0x08015cb8
 800f048:	08015cec 	.word	0x08015cec
 800f04c:	08015d0c 	.word	0x08015d0c
 800f050:	08015d34 	.word	0x08015d34
 800f054:	08015d58 	.word	0x08015d58

0800f058 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f058:	b590      	push	{r4, r7, lr}
 800f05a:	b08b      	sub	sp, #44	; 0x2c
 800f05c:	af02      	add	r7, sp, #8
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	460b      	mov	r3, r1
 800f062:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f064:	2300      	movs	r3, #0
 800f066:	61fb      	str	r3, [r7, #28]
 800f068:	2300      	movs	r3, #0
 800f06a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f06c:	2300      	movs	r3, #0
 800f06e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d106      	bne.n	800f084 <tcp_split_unsent_seg+0x2c>
 800f076:	4b95      	ldr	r3, [pc, #596]	; (800f2cc <tcp_split_unsent_seg+0x274>)
 800f078:	f240 324b 	movw	r2, #843	; 0x34b
 800f07c:	4994      	ldr	r1, [pc, #592]	; (800f2d0 <tcp_split_unsent_seg+0x278>)
 800f07e:	4895      	ldr	r0, [pc, #596]	; (800f2d4 <tcp_split_unsent_seg+0x27c>)
 800f080:	f004 face 	bl	8013620 <iprintf>

  useg = pcb->unsent;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f088:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d102      	bne.n	800f096 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f090:	f04f 33ff 	mov.w	r3, #4294967295
 800f094:	e116      	b.n	800f2c4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f096:	887b      	ldrh	r3, [r7, #2]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d109      	bne.n	800f0b0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f09c:	4b8b      	ldr	r3, [pc, #556]	; (800f2cc <tcp_split_unsent_seg+0x274>)
 800f09e:	f240 3253 	movw	r2, #851	; 0x353
 800f0a2:	498d      	ldr	r1, [pc, #564]	; (800f2d8 <tcp_split_unsent_seg+0x280>)
 800f0a4:	488b      	ldr	r0, [pc, #556]	; (800f2d4 <tcp_split_unsent_seg+0x27c>)
 800f0a6:	f004 fabb 	bl	8013620 <iprintf>
    return ERR_VAL;
 800f0aa:	f06f 0305 	mvn.w	r3, #5
 800f0ae:	e109      	b.n	800f2c4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	891b      	ldrh	r3, [r3, #8]
 800f0b4:	887a      	ldrh	r2, [r7, #2]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d301      	bcc.n	800f0be <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	e102      	b.n	800f2c4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0c2:	887a      	ldrh	r2, [r7, #2]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d906      	bls.n	800f0d6 <tcp_split_unsent_seg+0x7e>
 800f0c8:	4b80      	ldr	r3, [pc, #512]	; (800f2cc <tcp_split_unsent_seg+0x274>)
 800f0ca:	f240 325b 	movw	r2, #859	; 0x35b
 800f0ce:	4983      	ldr	r1, [pc, #524]	; (800f2dc <tcp_split_unsent_seg+0x284>)
 800f0d0:	4880      	ldr	r0, [pc, #512]	; (800f2d4 <tcp_split_unsent_seg+0x27c>)
 800f0d2:	f004 faa5 	bl	8013620 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	891b      	ldrh	r3, [r3, #8]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d106      	bne.n	800f0ec <tcp_split_unsent_seg+0x94>
 800f0de:	4b7b      	ldr	r3, [pc, #492]	; (800f2cc <tcp_split_unsent_seg+0x274>)
 800f0e0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f0e4:	497e      	ldr	r1, [pc, #504]	; (800f2e0 <tcp_split_unsent_seg+0x288>)
 800f0e6:	487b      	ldr	r0, [pc, #492]	; (800f2d4 <tcp_split_unsent_seg+0x27c>)
 800f0e8:	f004 fa9a 	bl	8013620 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	7a9b      	ldrb	r3, [r3, #10]
 800f0f0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f0f2:	7bfb      	ldrb	r3, [r7, #15]
 800f0f4:	009b      	lsls	r3, r3, #2
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	f003 0304 	and.w	r3, r3, #4
 800f0fc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	891a      	ldrh	r2, [r3, #8]
 800f102:	887b      	ldrh	r3, [r7, #2]
 800f104:	1ad3      	subs	r3, r2, r3
 800f106:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f108:	7bbb      	ldrb	r3, [r7, #14]
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	89bb      	ldrh	r3, [r7, #12]
 800f10e:	4413      	add	r3, r2
 800f110:	b29b      	uxth	r3, r3
 800f112:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f116:	4619      	mov	r1, r3
 800f118:	2036      	movs	r0, #54	; 0x36
 800f11a:	f7fb fabf 	bl	800a69c <pbuf_alloc>
 800f11e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	2b00      	cmp	r3, #0
 800f124:	f000 80b7 	beq.w	800f296 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	891a      	ldrh	r2, [r3, #8]
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	891b      	ldrh	r3, [r3, #8]
 800f132:	1ad3      	subs	r3, r2, r3
 800f134:	b29a      	uxth	r2, r3
 800f136:	887b      	ldrh	r3, [r7, #2]
 800f138:	4413      	add	r3, r2
 800f13a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	6858      	ldr	r0, [r3, #4]
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	685a      	ldr	r2, [r3, #4]
 800f144:	7bbb      	ldrb	r3, [r7, #14]
 800f146:	18d1      	adds	r1, r2, r3
 800f148:	897b      	ldrh	r3, [r7, #10]
 800f14a:	89ba      	ldrh	r2, [r7, #12]
 800f14c:	f7fb ff80 	bl	800b050 <pbuf_copy_partial>
 800f150:	4603      	mov	r3, r0
 800f152:	461a      	mov	r2, r3
 800f154:	89bb      	ldrh	r3, [r7, #12]
 800f156:	4293      	cmp	r3, r2
 800f158:	f040 809f 	bne.w	800f29a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	68db      	ldr	r3, [r3, #12]
 800f160:	899b      	ldrh	r3, [r3, #12]
 800f162:	b29b      	uxth	r3, r3
 800f164:	4618      	mov	r0, r3
 800f166:	f7fa f98b 	bl	8009480 <lwip_htons>
 800f16a:	4603      	mov	r3, r0
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f172:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f174:	2300      	movs	r3, #0
 800f176:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f178:	7efb      	ldrb	r3, [r7, #27]
 800f17a:	f003 0308 	and.w	r3, r3, #8
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d007      	beq.n	800f192 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f182:	7efb      	ldrb	r3, [r7, #27]
 800f184:	f023 0308 	bic.w	r3, r3, #8
 800f188:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f18a:	7ebb      	ldrb	r3, [r7, #26]
 800f18c:	f043 0308 	orr.w	r3, r3, #8
 800f190:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f192:	7efb      	ldrb	r3, [r7, #27]
 800f194:	f003 0301 	and.w	r3, r3, #1
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d007      	beq.n	800f1ac <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f19c:	7efb      	ldrb	r3, [r7, #27]
 800f19e:	f023 0301 	bic.w	r3, r3, #1
 800f1a2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f1a4:	7ebb      	ldrb	r3, [r7, #26]
 800f1a6:	f043 0301 	orr.w	r3, r3, #1
 800f1aa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7fa f979 	bl	80094aa <lwip_htonl>
 800f1b8:	4602      	mov	r2, r0
 800f1ba:	887b      	ldrh	r3, [r7, #2]
 800f1bc:	18d1      	adds	r1, r2, r3
 800f1be:	7eba      	ldrb	r2, [r7, #26]
 800f1c0:	7bfb      	ldrb	r3, [r7, #15]
 800f1c2:	9300      	str	r3, [sp, #0]
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	6939      	ldr	r1, [r7, #16]
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f7ff fea7 	bl	800ef1c <tcp_create_segment>
 800f1ce:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f1d0:	69fb      	ldr	r3, [r7, #28]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d063      	beq.n	800f29e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	685b      	ldr	r3, [r3, #4]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fb fdd0 	bl	800ad80 <pbuf_clen>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1ea:	1a9b      	subs	r3, r3, r2
 800f1ec:	b29a      	uxth	r2, r3
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	6858      	ldr	r0, [r3, #4]
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	891a      	ldrh	r2, [r3, #8]
 800f1fe:	89bb      	ldrh	r3, [r7, #12]
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	b29b      	uxth	r3, r3
 800f204:	4619      	mov	r1, r3
 800f206:	f7fb fba7 	bl	800a958 <pbuf_realloc>
  useg->len -= remainder;
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	891a      	ldrh	r2, [r3, #8]
 800f20e:	89bb      	ldrh	r3, [r7, #12]
 800f210:	1ad3      	subs	r3, r2, r3
 800f212:	b29a      	uxth	r2, r3
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	899b      	ldrh	r3, [r3, #12]
 800f21e:	b29c      	uxth	r4, r3
 800f220:	7efb      	ldrb	r3, [r7, #27]
 800f222:	b29b      	uxth	r3, r3
 800f224:	4618      	mov	r0, r3
 800f226:	f7fa f92b 	bl	8009480 <lwip_htons>
 800f22a:	4603      	mov	r3, r0
 800f22c:	461a      	mov	r2, r3
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	4322      	orrs	r2, r4
 800f234:	b292      	uxth	r2, r2
 800f236:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7fb fd9f 	bl	800ad80 <pbuf_clen>
 800f242:	4603      	mov	r3, r0
 800f244:	461a      	mov	r2, r3
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f24c:	4413      	add	r3, r2
 800f24e:	b29a      	uxth	r2, r3
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f256:	69fb      	ldr	r3, [r7, #28]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7fb fd90 	bl	800ad80 <pbuf_clen>
 800f260:	4603      	mov	r3, r0
 800f262:	461a      	mov	r2, r3
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f26a:	4413      	add	r3, r2
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	69fa      	ldr	r2, [r7, #28]
 800f280:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f282:	69fb      	ldr	r3, [r7, #28]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d103      	bne.n	800f292 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2200      	movs	r2, #0
 800f28e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f292:	2300      	movs	r3, #0
 800f294:	e016      	b.n	800f2c4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f296:	bf00      	nop
 800f298:	e002      	b.n	800f2a0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f29a:	bf00      	nop
 800f29c:	e000      	b.n	800f2a0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f29e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d006      	beq.n	800f2b4 <tcp_split_unsent_seg+0x25c>
 800f2a6:	4b09      	ldr	r3, [pc, #36]	; (800f2cc <tcp_split_unsent_seg+0x274>)
 800f2a8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f2ac:	490d      	ldr	r1, [pc, #52]	; (800f2e4 <tcp_split_unsent_seg+0x28c>)
 800f2ae:	4809      	ldr	r0, [pc, #36]	; (800f2d4 <tcp_split_unsent_seg+0x27c>)
 800f2b0:	f004 f9b6 	bl	8013620 <iprintf>
  if (p != NULL) {
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d002      	beq.n	800f2c0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f2ba:	6938      	ldr	r0, [r7, #16]
 800f2bc:	f7fb fcd2 	bl	800ac64 <pbuf_free>
  }

  return ERR_MEM;
 800f2c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3724      	adds	r7, #36	; 0x24
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd90      	pop	{r4, r7, pc}
 800f2cc:	08015cb8 	.word	0x08015cb8
 800f2d0:	0801604c 	.word	0x0801604c
 800f2d4:	08015d0c 	.word	0x08015d0c
 800f2d8:	08016070 	.word	0x08016070
 800f2dc:	08016094 	.word	0x08016094
 800f2e0:	080160a4 	.word	0x080160a4
 800f2e4:	080160b4 	.word	0x080160b4

0800f2e8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f2e8:	b590      	push	{r4, r7, lr}
 800f2ea:	b085      	sub	sp, #20
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d106      	bne.n	800f304 <tcp_send_fin+0x1c>
 800f2f6:	4b21      	ldr	r3, [pc, #132]	; (800f37c <tcp_send_fin+0x94>)
 800f2f8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f2fc:	4920      	ldr	r1, [pc, #128]	; (800f380 <tcp_send_fin+0x98>)
 800f2fe:	4821      	ldr	r0, [pc, #132]	; (800f384 <tcp_send_fin+0x9c>)
 800f300:	f004 f98e 	bl	8013620 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d02e      	beq.n	800f36a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f310:	60fb      	str	r3, [r7, #12]
 800f312:	e002      	b.n	800f31a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d1f8      	bne.n	800f314 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	899b      	ldrh	r3, [r3, #12]
 800f328:	b29b      	uxth	r3, r3
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7fa f8a8 	bl	8009480 <lwip_htons>
 800f330:	4603      	mov	r3, r0
 800f332:	b2db      	uxtb	r3, r3
 800f334:	f003 0307 	and.w	r3, r3, #7
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d116      	bne.n	800f36a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	899b      	ldrh	r3, [r3, #12]
 800f342:	b29c      	uxth	r4, r3
 800f344:	2001      	movs	r0, #1
 800f346:	f7fa f89b 	bl	8009480 <lwip_htons>
 800f34a:	4603      	mov	r3, r0
 800f34c:	461a      	mov	r2, r3
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	4322      	orrs	r2, r4
 800f354:	b292      	uxth	r2, r2
 800f356:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	8b5b      	ldrh	r3, [r3, #26]
 800f35c:	f043 0320 	orr.w	r3, r3, #32
 800f360:	b29a      	uxth	r2, r3
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f366:	2300      	movs	r3, #0
 800f368:	e004      	b.n	800f374 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f36a:	2101      	movs	r1, #1
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 f80b 	bl	800f388 <tcp_enqueue_flags>
 800f372:	4603      	mov	r3, r0
}
 800f374:	4618      	mov	r0, r3
 800f376:	3714      	adds	r7, #20
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd90      	pop	{r4, r7, pc}
 800f37c:	08015cb8 	.word	0x08015cb8
 800f380:	080160c0 	.word	0x080160c0
 800f384:	08015d0c 	.word	0x08015d0c

0800f388 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b08a      	sub	sp, #40	; 0x28
 800f38c:	af02      	add	r7, sp, #8
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	460b      	mov	r3, r1
 800f392:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f394:	2300      	movs	r3, #0
 800f396:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f398:	2300      	movs	r3, #0
 800f39a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f39c:	78fb      	ldrb	r3, [r7, #3]
 800f39e:	f003 0303 	and.w	r3, r3, #3
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d106      	bne.n	800f3b4 <tcp_enqueue_flags+0x2c>
 800f3a6:	4b67      	ldr	r3, [pc, #412]	; (800f544 <tcp_enqueue_flags+0x1bc>)
 800f3a8:	f240 4211 	movw	r2, #1041	; 0x411
 800f3ac:	4966      	ldr	r1, [pc, #408]	; (800f548 <tcp_enqueue_flags+0x1c0>)
 800f3ae:	4867      	ldr	r0, [pc, #412]	; (800f54c <tcp_enqueue_flags+0x1c4>)
 800f3b0:	f004 f936 	bl	8013620 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d106      	bne.n	800f3c8 <tcp_enqueue_flags+0x40>
 800f3ba:	4b62      	ldr	r3, [pc, #392]	; (800f544 <tcp_enqueue_flags+0x1bc>)
 800f3bc:	f240 4213 	movw	r2, #1043	; 0x413
 800f3c0:	4963      	ldr	r1, [pc, #396]	; (800f550 <tcp_enqueue_flags+0x1c8>)
 800f3c2:	4862      	ldr	r0, [pc, #392]	; (800f54c <tcp_enqueue_flags+0x1c4>)
 800f3c4:	f004 f92c 	bl	8013620 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f3c8:	78fb      	ldrb	r3, [r7, #3]
 800f3ca:	f003 0302 	and.w	r3, r3, #2
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d001      	beq.n	800f3d6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f3d6:	7ffb      	ldrb	r3, [r7, #31]
 800f3d8:	009b      	lsls	r3, r3, #2
 800f3da:	b2db      	uxtb	r3, r3
 800f3dc:	f003 0304 	and.w	r3, r3, #4
 800f3e0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
 800f3e4:	b29b      	uxth	r3, r3
 800f3e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	2036      	movs	r0, #54	; 0x36
 800f3ee:	f7fb f955 	bl	800a69c <pbuf_alloc>
 800f3f2:	6138      	str	r0, [r7, #16]
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d109      	bne.n	800f40e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	8b5b      	ldrh	r3, [r3, #26]
 800f3fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f402:	b29a      	uxth	r2, r3
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f408:	f04f 33ff 	mov.w	r3, #4294967295
 800f40c:	e095      	b.n	800f53a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	895a      	ldrh	r2, [r3, #10]
 800f412:	7dfb      	ldrb	r3, [r7, #23]
 800f414:	b29b      	uxth	r3, r3
 800f416:	429a      	cmp	r2, r3
 800f418:	d206      	bcs.n	800f428 <tcp_enqueue_flags+0xa0>
 800f41a:	4b4a      	ldr	r3, [pc, #296]	; (800f544 <tcp_enqueue_flags+0x1bc>)
 800f41c:	f240 4239 	movw	r2, #1081	; 0x439
 800f420:	494c      	ldr	r1, [pc, #304]	; (800f554 <tcp_enqueue_flags+0x1cc>)
 800f422:	484a      	ldr	r0, [pc, #296]	; (800f54c <tcp_enqueue_flags+0x1c4>)
 800f424:	f004 f8fc 	bl	8013620 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f42c:	78fa      	ldrb	r2, [r7, #3]
 800f42e:	7ffb      	ldrb	r3, [r7, #31]
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	460b      	mov	r3, r1
 800f434:	6939      	ldr	r1, [r7, #16]
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f7ff fd70 	bl	800ef1c <tcp_create_segment>
 800f43c:	60f8      	str	r0, [r7, #12]
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d109      	bne.n	800f458 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	8b5b      	ldrh	r3, [r3, #26]
 800f448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f44c:	b29a      	uxth	r2, r3
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f452:	f04f 33ff 	mov.w	r3, #4294967295
 800f456:	e070      	b.n	800f53a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	68db      	ldr	r3, [r3, #12]
 800f45c:	f003 0303 	and.w	r3, r3, #3
 800f460:	2b00      	cmp	r3, #0
 800f462:	d006      	beq.n	800f472 <tcp_enqueue_flags+0xea>
 800f464:	4b37      	ldr	r3, [pc, #220]	; (800f544 <tcp_enqueue_flags+0x1bc>)
 800f466:	f240 4242 	movw	r2, #1090	; 0x442
 800f46a:	493b      	ldr	r1, [pc, #236]	; (800f558 <tcp_enqueue_flags+0x1d0>)
 800f46c:	4837      	ldr	r0, [pc, #220]	; (800f54c <tcp_enqueue_flags+0x1c4>)
 800f46e:	f004 f8d7 	bl	8013620 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	891b      	ldrh	r3, [r3, #8]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d006      	beq.n	800f488 <tcp_enqueue_flags+0x100>
 800f47a:	4b32      	ldr	r3, [pc, #200]	; (800f544 <tcp_enqueue_flags+0x1bc>)
 800f47c:	f240 4243 	movw	r2, #1091	; 0x443
 800f480:	4936      	ldr	r1, [pc, #216]	; (800f55c <tcp_enqueue_flags+0x1d4>)
 800f482:	4832      	ldr	r0, [pc, #200]	; (800f54c <tcp_enqueue_flags+0x1c4>)
 800f484:	f004 f8cc 	bl	8013620 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d103      	bne.n	800f498 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	68fa      	ldr	r2, [r7, #12]
 800f494:	66da      	str	r2, [r3, #108]	; 0x6c
 800f496:	e00d      	b.n	800f4b4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f49c:	61bb      	str	r3, [r7, #24]
 800f49e:	e002      	b.n	800f4a6 <tcp_enqueue_flags+0x11e>
 800f4a0:	69bb      	ldr	r3, [r7, #24]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	61bb      	str	r3, [r7, #24]
 800f4a6:	69bb      	ldr	r3, [r7, #24]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d1f8      	bne.n	800f4a0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	68fa      	ldr	r2, [r7, #12]
 800f4b2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f4bc:	78fb      	ldrb	r3, [r7, #3]
 800f4be:	f003 0302 	and.w	r3, r3, #2
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d104      	bne.n	800f4d0 <tcp_enqueue_flags+0x148>
 800f4c6:	78fb      	ldrb	r3, [r7, #3]
 800f4c8:	f003 0301 	and.w	r3, r3, #1
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d004      	beq.n	800f4da <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4d4:	1c5a      	adds	r2, r3, #1
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f4da:	78fb      	ldrb	r3, [r7, #3]
 800f4dc:	f003 0301 	and.w	r3, r3, #1
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d006      	beq.n	800f4f2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	8b5b      	ldrh	r3, [r3, #26]
 800f4e8:	f043 0320 	orr.w	r3, r3, #32
 800f4ec:	b29a      	uxth	r2, r3
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fb fc42 	bl	800ad80 <pbuf_clen>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	461a      	mov	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f506:	4413      	add	r3, r2
 800f508:	b29a      	uxth	r2, r3
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f516:	2b00      	cmp	r3, #0
 800f518:	d00e      	beq.n	800f538 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d10a      	bne.n	800f538 <tcp_enqueue_flags+0x1b0>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f526:	2b00      	cmp	r3, #0
 800f528:	d106      	bne.n	800f538 <tcp_enqueue_flags+0x1b0>
 800f52a:	4b06      	ldr	r3, [pc, #24]	; (800f544 <tcp_enqueue_flags+0x1bc>)
 800f52c:	f240 4265 	movw	r2, #1125	; 0x465
 800f530:	490b      	ldr	r1, [pc, #44]	; (800f560 <tcp_enqueue_flags+0x1d8>)
 800f532:	4806      	ldr	r0, [pc, #24]	; (800f54c <tcp_enqueue_flags+0x1c4>)
 800f534:	f004 f874 	bl	8013620 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3720      	adds	r7, #32
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop
 800f544:	08015cb8 	.word	0x08015cb8
 800f548:	080160dc 	.word	0x080160dc
 800f54c:	08015d0c 	.word	0x08015d0c
 800f550:	08016134 	.word	0x08016134
 800f554:	08016154 	.word	0x08016154
 800f558:	08016190 	.word	0x08016190
 800f55c:	080161a8 	.word	0x080161a8
 800f560:	080161d4 	.word	0x080161d4

0800f564 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f564:	b5b0      	push	{r4, r5, r7, lr}
 800f566:	b08a      	sub	sp, #40	; 0x28
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d106      	bne.n	800f580 <tcp_output+0x1c>
 800f572:	4b8a      	ldr	r3, [pc, #552]	; (800f79c <tcp_output+0x238>)
 800f574:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f578:	4989      	ldr	r1, [pc, #548]	; (800f7a0 <tcp_output+0x23c>)
 800f57a:	488a      	ldr	r0, [pc, #552]	; (800f7a4 <tcp_output+0x240>)
 800f57c:	f004 f850 	bl	8013620 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	7d1b      	ldrb	r3, [r3, #20]
 800f584:	2b01      	cmp	r3, #1
 800f586:	d106      	bne.n	800f596 <tcp_output+0x32>
 800f588:	4b84      	ldr	r3, [pc, #528]	; (800f79c <tcp_output+0x238>)
 800f58a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f58e:	4986      	ldr	r1, [pc, #536]	; (800f7a8 <tcp_output+0x244>)
 800f590:	4884      	ldr	r0, [pc, #528]	; (800f7a4 <tcp_output+0x240>)
 800f592:	f004 f845 	bl	8013620 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f596:	4b85      	ldr	r3, [pc, #532]	; (800f7ac <tcp_output+0x248>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d101      	bne.n	800f5a4 <tcp_output+0x40>
    return ERR_OK;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	e1ce      	b.n	800f942 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	bf28      	it	cs
 800f5b4:	4613      	movcs	r3, r2
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5be:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d10b      	bne.n	800f5de <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	8b5b      	ldrh	r3, [r3, #26]
 800f5ca:	f003 0302 	and.w	r3, r3, #2
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	f000 81aa 	beq.w	800f928 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f000 fdcb 	bl	8010170 <tcp_send_empty_ack>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	e1b1      	b.n	800f942 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f5de:	6879      	ldr	r1, [r7, #4]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	3304      	adds	r3, #4
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f7ff fc7c 	bl	800eee4 <tcp_route>
 800f5ec:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d102      	bne.n	800f5fa <tcp_output+0x96>
    return ERR_RTE;
 800f5f4:	f06f 0303 	mvn.w	r3, #3
 800f5f8:	e1a3      	b.n	800f942 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d003      	beq.n	800f608 <tcp_output+0xa4>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d111      	bne.n	800f62c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d002      	beq.n	800f614 <tcp_output+0xb0>
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	3304      	adds	r3, #4
 800f612:	e000      	b.n	800f616 <tcp_output+0xb2>
 800f614:	2300      	movs	r3, #0
 800f616:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d102      	bne.n	800f624 <tcp_output+0xc0>
      return ERR_RTE;
 800f61e:	f06f 0303 	mvn.w	r3, #3
 800f622:	e18e      	b.n	800f942 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	681a      	ldr	r2, [r3, #0]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	4618      	mov	r0, r3
 800f634:	f7f9 ff39 	bl	80094aa <lwip_htonl>
 800f638:	4602      	mov	r2, r0
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f63e:	1ad3      	subs	r3, r2, r3
 800f640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f642:	8912      	ldrh	r2, [r2, #8]
 800f644:	4413      	add	r3, r2
 800f646:	69ba      	ldr	r2, [r7, #24]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d227      	bcs.n	800f69c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f652:	461a      	mov	r2, r3
 800f654:	69bb      	ldr	r3, [r7, #24]
 800f656:	4293      	cmp	r3, r2
 800f658:	d114      	bne.n	800f684 <tcp_output+0x120>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d110      	bne.n	800f684 <tcp_output+0x120>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d10b      	bne.n	800f684 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2201      	movs	r2, #1
 800f678:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2200      	movs	r2, #0
 800f680:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	8b5b      	ldrh	r3, [r3, #26]
 800f688:	f003 0302 	and.w	r3, r3, #2
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	f000 814d 	beq.w	800f92c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f000 fd6c 	bl	8010170 <tcp_send_empty_ack>
 800f698:	4603      	mov	r3, r0
 800f69a:	e152      	b.n	800f942 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6a8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f6aa:	6a3b      	ldr	r3, [r7, #32]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	f000 811c 	beq.w	800f8ea <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f6b2:	e002      	b.n	800f6ba <tcp_output+0x156>
 800f6b4:	6a3b      	ldr	r3, [r7, #32]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	623b      	str	r3, [r7, #32]
 800f6ba:	6a3b      	ldr	r3, [r7, #32]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1f8      	bne.n	800f6b4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f6c2:	e112      	b.n	800f8ea <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	899b      	ldrh	r3, [r3, #12]
 800f6ca:	b29b      	uxth	r3, r3
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7f9 fed7 	bl	8009480 <lwip_htons>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	f003 0304 	and.w	r3, r3, #4
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d006      	beq.n	800f6ec <tcp_output+0x188>
 800f6de:	4b2f      	ldr	r3, [pc, #188]	; (800f79c <tcp_output+0x238>)
 800f6e0:	f240 5236 	movw	r2, #1334	; 0x536
 800f6e4:	4932      	ldr	r1, [pc, #200]	; (800f7b0 <tcp_output+0x24c>)
 800f6e6:	482f      	ldr	r0, [pc, #188]	; (800f7a4 <tcp_output+0x240>)
 800f6e8:	f003 ff9a 	bl	8013620 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d01f      	beq.n	800f734 <tcp_output+0x1d0>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	8b5b      	ldrh	r3, [r3, #26]
 800f6f8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d119      	bne.n	800f734 <tcp_output+0x1d0>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00b      	beq.n	800f720 <tcp_output+0x1bc>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d110      	bne.n	800f734 <tcp_output+0x1d0>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f716:	891a      	ldrh	r2, [r3, #8]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d209      	bcs.n	800f734 <tcp_output+0x1d0>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f726:	2b00      	cmp	r3, #0
 800f728:	d004      	beq.n	800f734 <tcp_output+0x1d0>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f730:	2b08      	cmp	r3, #8
 800f732:	d901      	bls.n	800f738 <tcp_output+0x1d4>
 800f734:	2301      	movs	r3, #1
 800f736:	e000      	b.n	800f73a <tcp_output+0x1d6>
 800f738:	2300      	movs	r3, #0
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d106      	bne.n	800f74c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	8b5b      	ldrh	r3, [r3, #26]
 800f742:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f746:	2b00      	cmp	r3, #0
 800f748:	f000 80e4 	beq.w	800f914 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	7d1b      	ldrb	r3, [r3, #20]
 800f750:	2b02      	cmp	r3, #2
 800f752:	d00d      	beq.n	800f770 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	899b      	ldrh	r3, [r3, #12]
 800f75a:	b29c      	uxth	r4, r3
 800f75c:	2010      	movs	r0, #16
 800f75e:	f7f9 fe8f 	bl	8009480 <lwip_htons>
 800f762:	4603      	mov	r3, r0
 800f764:	461a      	mov	r2, r3
 800f766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	4322      	orrs	r2, r4
 800f76c:	b292      	uxth	r2, r2
 800f76e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f770:	697a      	ldr	r2, [r7, #20]
 800f772:	6879      	ldr	r1, [r7, #4]
 800f774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f776:	f000 f909 	bl	800f98c <tcp_output_segment>
 800f77a:	4603      	mov	r3, r0
 800f77c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f77e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d016      	beq.n	800f7b4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	8b5b      	ldrh	r3, [r3, #26]
 800f78a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f78e:	b29a      	uxth	r2, r3
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	835a      	strh	r2, [r3, #26]
      return err;
 800f794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f798:	e0d3      	b.n	800f942 <tcp_output+0x3de>
 800f79a:	bf00      	nop
 800f79c:	08015cb8 	.word	0x08015cb8
 800f7a0:	080161fc 	.word	0x080161fc
 800f7a4:	08015d0c 	.word	0x08015d0c
 800f7a8:	08016214 	.word	0x08016214
 800f7ac:	2000ca70 	.word	0x2000ca70
 800f7b0:	0801623c 	.word	0x0801623c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	7d1b      	ldrb	r3, [r3, #20]
 800f7c0:	2b02      	cmp	r3, #2
 800f7c2:	d006      	beq.n	800f7d2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	8b5b      	ldrh	r3, [r3, #26]
 800f7c8:	f023 0303 	bic.w	r3, r3, #3
 800f7cc:	b29a      	uxth	r2, r3
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d4:	68db      	ldr	r3, [r3, #12]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7f9 fe66 	bl	80094aa <lwip_htonl>
 800f7de:	4604      	mov	r4, r0
 800f7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e2:	891b      	ldrh	r3, [r3, #8]
 800f7e4:	461d      	mov	r5, r3
 800f7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e8:	68db      	ldr	r3, [r3, #12]
 800f7ea:	899b      	ldrh	r3, [r3, #12]
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7f9 fe46 	bl	8009480 <lwip_htons>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	f003 0303 	and.w	r3, r3, #3
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d001      	beq.n	800f804 <tcp_output+0x2a0>
 800f800:	2301      	movs	r3, #1
 800f802:	e000      	b.n	800f806 <tcp_output+0x2a2>
 800f804:	2300      	movs	r3, #0
 800f806:	442b      	add	r3, r5
 800f808:	4423      	add	r3, r4
 800f80a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	1ad3      	subs	r3, r2, r3
 800f814:	2b00      	cmp	r3, #0
 800f816:	da02      	bge.n	800f81e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	68ba      	ldr	r2, [r7, #8]
 800f81c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f820:	891b      	ldrh	r3, [r3, #8]
 800f822:	461c      	mov	r4, r3
 800f824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	899b      	ldrh	r3, [r3, #12]
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7f9 fe27 	bl	8009480 <lwip_htons>
 800f832:	4603      	mov	r3, r0
 800f834:	b2db      	uxtb	r3, r3
 800f836:	f003 0303 	and.w	r3, r3, #3
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d001      	beq.n	800f842 <tcp_output+0x2de>
 800f83e:	2301      	movs	r3, #1
 800f840:	e000      	b.n	800f844 <tcp_output+0x2e0>
 800f842:	2300      	movs	r3, #0
 800f844:	4423      	add	r3, r4
 800f846:	2b00      	cmp	r3, #0
 800f848:	d049      	beq.n	800f8de <tcp_output+0x37a>
      seg->next = NULL;
 800f84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84c:	2200      	movs	r2, #0
 800f84e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f854:	2b00      	cmp	r3, #0
 800f856:	d105      	bne.n	800f864 <tcp_output+0x300>
        pcb->unacked = seg;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f85c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f860:	623b      	str	r3, [r7, #32]
 800f862:	e03f      	b.n	800f8e4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f866:	68db      	ldr	r3, [r3, #12]
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7f9 fe1d 	bl	80094aa <lwip_htonl>
 800f870:	4604      	mov	r4, r0
 800f872:	6a3b      	ldr	r3, [r7, #32]
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	685b      	ldr	r3, [r3, #4]
 800f878:	4618      	mov	r0, r3
 800f87a:	f7f9 fe16 	bl	80094aa <lwip_htonl>
 800f87e:	4603      	mov	r3, r0
 800f880:	1ae3      	subs	r3, r4, r3
 800f882:	2b00      	cmp	r3, #0
 800f884:	da24      	bge.n	800f8d0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	3370      	adds	r3, #112	; 0x70
 800f88a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f88c:	e002      	b.n	800f894 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d011      	beq.n	800f8c0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	685b      	ldr	r3, [r3, #4]
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7f9 fe00 	bl	80094aa <lwip_htonl>
 800f8aa:	4604      	mov	r4, r0
 800f8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ae:	68db      	ldr	r3, [r3, #12]
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7f9 fdf9 	bl	80094aa <lwip_htonl>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	dbe6      	blt.n	800f88e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8cc:	601a      	str	r2, [r3, #0]
 800f8ce:	e009      	b.n	800f8e4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f8d0:	6a3b      	ldr	r3, [r7, #32]
 800f8d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8d4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f8d6:	6a3b      	ldr	r3, [r7, #32]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	623b      	str	r3, [r7, #32]
 800f8dc:	e002      	b.n	800f8e4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f8de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8e0:	f7fc fc3f 	bl	800c162 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d012      	beq.n	800f916 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f2:	68db      	ldr	r3, [r3, #12]
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7f9 fdd7 	bl	80094aa <lwip_htonl>
 800f8fc:	4602      	mov	r2, r0
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f902:	1ad3      	subs	r3, r2, r3
 800f904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f906:	8912      	ldrh	r2, [r2, #8]
 800f908:	4413      	add	r3, r2
  while (seg != NULL &&
 800f90a:	69ba      	ldr	r2, [r7, #24]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	f4bf aed9 	bcs.w	800f6c4 <tcp_output+0x160>
 800f912:	e000      	b.n	800f916 <tcp_output+0x3b2>
      break;
 800f914:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d108      	bne.n	800f930 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f926:	e004      	b.n	800f932 <tcp_output+0x3ce>
    goto output_done;
 800f928:	bf00      	nop
 800f92a:	e002      	b.n	800f932 <tcp_output+0x3ce>
    goto output_done;
 800f92c:	bf00      	nop
 800f92e:	e000      	b.n	800f932 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f930:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	8b5b      	ldrh	r3, [r3, #26]
 800f936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	3728      	adds	r7, #40	; 0x28
 800f946:	46bd      	mov	sp, r7
 800f948:	bdb0      	pop	{r4, r5, r7, pc}
 800f94a:	bf00      	nop

0800f94c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d106      	bne.n	800f968 <tcp_output_segment_busy+0x1c>
 800f95a:	4b09      	ldr	r3, [pc, #36]	; (800f980 <tcp_output_segment_busy+0x34>)
 800f95c:	f240 529a 	movw	r2, #1434	; 0x59a
 800f960:	4908      	ldr	r1, [pc, #32]	; (800f984 <tcp_output_segment_busy+0x38>)
 800f962:	4809      	ldr	r0, [pc, #36]	; (800f988 <tcp_output_segment_busy+0x3c>)
 800f964:	f003 fe5c 	bl	8013620 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	7b9b      	ldrb	r3, [r3, #14]
 800f96e:	2b01      	cmp	r3, #1
 800f970:	d001      	beq.n	800f976 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f972:	2301      	movs	r3, #1
 800f974:	e000      	b.n	800f978 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f976:	2300      	movs	r3, #0
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3708      	adds	r7, #8
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	08015cb8 	.word	0x08015cb8
 800f984:	08016254 	.word	0x08016254
 800f988:	08015d0c 	.word	0x08015d0c

0800f98c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f98c:	b5b0      	push	{r4, r5, r7, lr}
 800f98e:	b08c      	sub	sp, #48	; 0x30
 800f990:	af04      	add	r7, sp, #16
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d106      	bne.n	800f9ac <tcp_output_segment+0x20>
 800f99e:	4b63      	ldr	r3, [pc, #396]	; (800fb2c <tcp_output_segment+0x1a0>)
 800f9a0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f9a4:	4962      	ldr	r1, [pc, #392]	; (800fb30 <tcp_output_segment+0x1a4>)
 800f9a6:	4863      	ldr	r0, [pc, #396]	; (800fb34 <tcp_output_segment+0x1a8>)
 800f9a8:	f003 fe3a 	bl	8013620 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d106      	bne.n	800f9c0 <tcp_output_segment+0x34>
 800f9b2:	4b5e      	ldr	r3, [pc, #376]	; (800fb2c <tcp_output_segment+0x1a0>)
 800f9b4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f9b8:	495f      	ldr	r1, [pc, #380]	; (800fb38 <tcp_output_segment+0x1ac>)
 800f9ba:	485e      	ldr	r0, [pc, #376]	; (800fb34 <tcp_output_segment+0x1a8>)
 800f9bc:	f003 fe30 	bl	8013620 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d106      	bne.n	800f9d4 <tcp_output_segment+0x48>
 800f9c6:	4b59      	ldr	r3, [pc, #356]	; (800fb2c <tcp_output_segment+0x1a0>)
 800f9c8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f9cc:	495b      	ldr	r1, [pc, #364]	; (800fb3c <tcp_output_segment+0x1b0>)
 800f9ce:	4859      	ldr	r0, [pc, #356]	; (800fb34 <tcp_output_segment+0x1a8>)
 800f9d0:	f003 fe26 	bl	8013620 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f9d4:	68f8      	ldr	r0, [r7, #12]
 800f9d6:	f7ff ffb9 	bl	800f94c <tcp_output_segment_busy>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d001      	beq.n	800f9e4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	e09f      	b.n	800fb24 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	68dc      	ldr	r4, [r3, #12]
 800f9ec:	4610      	mov	r0, r2
 800f9ee:	f7f9 fd5c 	bl	80094aa <lwip_htonl>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	68dc      	ldr	r4, [r3, #12]
 800f9fe:	4610      	mov	r0, r2
 800fa00:	f7f9 fd3e 	bl	8009480 <lwip_htons>
 800fa04:	4603      	mov	r3, r0
 800fa06:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa0c:	68ba      	ldr	r2, [r7, #8]
 800fa0e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fa10:	441a      	add	r2, r3
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	68db      	ldr	r3, [r3, #12]
 800fa1a:	3314      	adds	r3, #20
 800fa1c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	7a9b      	ldrb	r3, [r3, #10]
 800fa22:	f003 0301 	and.w	r3, r3, #1
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d015      	beq.n	800fa56 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	3304      	adds	r3, #4
 800fa2e:	461a      	mov	r2, r3
 800fa30:	6879      	ldr	r1, [r7, #4]
 800fa32:	f44f 7006 	mov.w	r0, #536	; 0x218
 800fa36:	f7fc fe8b 	bl	800c750 <tcp_eff_send_mss_netif>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fa3e:	8b7b      	ldrh	r3, [r7, #26]
 800fa40:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7f9 fd30 	bl	80094aa <lwip_htonl>
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	69fb      	ldr	r3, [r7, #28]
 800fa4e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	3304      	adds	r3, #4
 800fa54:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	da02      	bge.n	800fa66 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	2200      	movs	r2, #0
 800fa64:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d10c      	bne.n	800fa88 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800fa6e:	4b34      	ldr	r3, [pc, #208]	; (800fb40 <tcp_output_segment+0x1b4>)
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7f9 fd14 	bl	80094aa <lwip_htonl>
 800fa82:	4602      	mov	r2, r0
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	68da      	ldr	r2, [r3, #12]
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	685b      	ldr	r3, [r3, #4]
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	1ad3      	subs	r3, r2, r3
 800fa94:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	685b      	ldr	r3, [r3, #4]
 800fa9a:	8959      	ldrh	r1, [r3, #10]
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	8b3a      	ldrh	r2, [r7, #24]
 800faa2:	1a8a      	subs	r2, r1, r2
 800faa4:	b292      	uxth	r2, r2
 800faa6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	8919      	ldrh	r1, [r3, #8]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	8b3a      	ldrh	r2, [r7, #24]
 800fab4:	1a8a      	subs	r2, r1, r2
 800fab6:	b292      	uxth	r2, r2
 800fab8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	68fa      	ldr	r2, [r7, #12]
 800fac0:	68d2      	ldr	r2, [r2, #12]
 800fac2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	68db      	ldr	r3, [r3, #12]
 800fac8:	2200      	movs	r2, #0
 800faca:	741a      	strb	r2, [r3, #16]
 800facc:	2200      	movs	r2, #0
 800face:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	68db      	ldr	r3, [r3, #12]
 800fad4:	f103 0214 	add.w	r2, r3, #20
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	7a9b      	ldrb	r3, [r3, #10]
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	f003 0304 	and.w	r3, r3, #4
 800fae2:	4413      	add	r3, r2
 800fae4:	69fa      	ldr	r2, [r7, #28]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d006      	beq.n	800faf8 <tcp_output_segment+0x16c>
 800faea:	4b10      	ldr	r3, [pc, #64]	; (800fb2c <tcp_output_segment+0x1a0>)
 800faec:	f240 621c 	movw	r2, #1564	; 0x61c
 800faf0:	4914      	ldr	r1, [pc, #80]	; (800fb44 <tcp_output_segment+0x1b8>)
 800faf2:	4810      	ldr	r0, [pc, #64]	; (800fb34 <tcp_output_segment+0x1a8>)
 800faf4:	f003 fd94 	bl	8013620 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	6858      	ldr	r0, [r3, #4]
 800fafc:	68b9      	ldr	r1, [r7, #8]
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	1d1c      	adds	r4, r3, #4
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	7add      	ldrb	r5, [r3, #11]
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	7a9b      	ldrb	r3, [r3, #10]
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	9202      	str	r2, [sp, #8]
 800fb0e:	2206      	movs	r2, #6
 800fb10:	9201      	str	r2, [sp, #4]
 800fb12:	9300      	str	r3, [sp, #0]
 800fb14:	462b      	mov	r3, r5
 800fb16:	4622      	mov	r2, r4
 800fb18:	f002 fa66 	bl	8011fe8 <ip4_output_if>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800fb20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3720      	adds	r7, #32
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bdb0      	pop	{r4, r5, r7, pc}
 800fb2c:	08015cb8 	.word	0x08015cb8
 800fb30:	0801627c 	.word	0x0801627c
 800fb34:	08015d0c 	.word	0x08015d0c
 800fb38:	0801629c 	.word	0x0801629c
 800fb3c:	080162bc 	.word	0x080162bc
 800fb40:	2000ca24 	.word	0x2000ca24
 800fb44:	080162e0 	.word	0x080162e0

0800fb48 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800fb48:	b5b0      	push	{r4, r5, r7, lr}
 800fb4a:	b084      	sub	sp, #16
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d106      	bne.n	800fb64 <tcp_rexmit_rto_prepare+0x1c>
 800fb56:	4b31      	ldr	r3, [pc, #196]	; (800fc1c <tcp_rexmit_rto_prepare+0xd4>)
 800fb58:	f240 6263 	movw	r2, #1635	; 0x663
 800fb5c:	4930      	ldr	r1, [pc, #192]	; (800fc20 <tcp_rexmit_rto_prepare+0xd8>)
 800fb5e:	4831      	ldr	r0, [pc, #196]	; (800fc24 <tcp_rexmit_rto_prepare+0xdc>)
 800fb60:	f003 fd5e 	bl	8013620 <iprintf>

  if (pcb->unacked == NULL) {
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d102      	bne.n	800fb72 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800fb6c:	f06f 0305 	mvn.w	r3, #5
 800fb70:	e050      	b.n	800fc14 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb76:	60fb      	str	r3, [r7, #12]
 800fb78:	e00b      	b.n	800fb92 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800fb7a:	68f8      	ldr	r0, [r7, #12]
 800fb7c:	f7ff fee6 	bl	800f94c <tcp_output_segment_busy>
 800fb80:	4603      	mov	r3, r0
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d002      	beq.n	800fb8c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fb86:	f06f 0305 	mvn.w	r3, #5
 800fb8a:	e043      	b.n	800fc14 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	60fb      	str	r3, [r7, #12]
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d1ef      	bne.n	800fb7a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fb9a:	68f8      	ldr	r0, [r7, #12]
 800fb9c:	f7ff fed6 	bl	800f94c <tcp_output_segment_busy>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d002      	beq.n	800fbac <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fba6:	f06f 0305 	mvn.w	r3, #5
 800fbaa:	e033      	b.n	800fc14 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	8b5b      	ldrh	r3, [r3, #26]
 800fbc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fbca:	b29a      	uxth	r2, r3
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	68db      	ldr	r3, [r3, #12]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7f9 fc67 	bl	80094aa <lwip_htonl>
 800fbdc:	4604      	mov	r4, r0
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	891b      	ldrh	r3, [r3, #8]
 800fbe2:	461d      	mov	r5, r3
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	899b      	ldrh	r3, [r3, #12]
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	4618      	mov	r0, r3
 800fbee:	f7f9 fc47 	bl	8009480 <lwip_htons>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	f003 0303 	and.w	r3, r3, #3
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d001      	beq.n	800fc02 <tcp_rexmit_rto_prepare+0xba>
 800fbfe:	2301      	movs	r3, #1
 800fc00:	e000      	b.n	800fc04 <tcp_rexmit_rto_prepare+0xbc>
 800fc02:	2300      	movs	r3, #0
 800fc04:	442b      	add	r3, r5
 800fc06:	18e2      	adds	r2, r4, r3
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800fc12:	2300      	movs	r3, #0
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3710      	adds	r7, #16
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bdb0      	pop	{r4, r5, r7, pc}
 800fc1c:	08015cb8 	.word	0x08015cb8
 800fc20:	080162f4 	.word	0x080162f4
 800fc24:	08015d0c 	.word	0x08015d0c

0800fc28 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d106      	bne.n	800fc44 <tcp_rexmit_rto_commit+0x1c>
 800fc36:	4b0d      	ldr	r3, [pc, #52]	; (800fc6c <tcp_rexmit_rto_commit+0x44>)
 800fc38:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fc3c:	490c      	ldr	r1, [pc, #48]	; (800fc70 <tcp_rexmit_rto_commit+0x48>)
 800fc3e:	480d      	ldr	r0, [pc, #52]	; (800fc74 <tcp_rexmit_rto_commit+0x4c>)
 800fc40:	f003 fcee 	bl	8013620 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc4a:	2bff      	cmp	r3, #255	; 0xff
 800fc4c:	d007      	beq.n	800fc5e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc54:	3301      	adds	r3, #1
 800fc56:	b2da      	uxtb	r2, r3
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f7ff fc80 	bl	800f564 <tcp_output>
}
 800fc64:	bf00      	nop
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	08015cb8 	.word	0x08015cb8
 800fc70:	08016318 	.word	0x08016318
 800fc74:	08015d0c 	.word	0x08015d0c

0800fc78 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d106      	bne.n	800fc94 <tcp_rexmit_rto+0x1c>
 800fc86:	4b0a      	ldr	r3, [pc, #40]	; (800fcb0 <tcp_rexmit_rto+0x38>)
 800fc88:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800fc8c:	4909      	ldr	r1, [pc, #36]	; (800fcb4 <tcp_rexmit_rto+0x3c>)
 800fc8e:	480a      	ldr	r0, [pc, #40]	; (800fcb8 <tcp_rexmit_rto+0x40>)
 800fc90:	f003 fcc6 	bl	8013620 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f7ff ff57 	bl	800fb48 <tcp_rexmit_rto_prepare>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d102      	bne.n	800fca6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f7ff ffc1 	bl	800fc28 <tcp_rexmit_rto_commit>
  }
}
 800fca6:	bf00      	nop
 800fca8:	3708      	adds	r7, #8
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	08015cb8 	.word	0x08015cb8
 800fcb4:	0801633c 	.word	0x0801633c
 800fcb8:	08015d0c 	.word	0x08015d0c

0800fcbc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fcbc:	b590      	push	{r4, r7, lr}
 800fcbe:	b085      	sub	sp, #20
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d106      	bne.n	800fcd8 <tcp_rexmit+0x1c>
 800fcca:	4b2f      	ldr	r3, [pc, #188]	; (800fd88 <tcp_rexmit+0xcc>)
 800fccc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800fcd0:	492e      	ldr	r1, [pc, #184]	; (800fd8c <tcp_rexmit+0xd0>)
 800fcd2:	482f      	ldr	r0, [pc, #188]	; (800fd90 <tcp_rexmit+0xd4>)
 800fcd4:	f003 fca4 	bl	8013620 <iprintf>

  if (pcb->unacked == NULL) {
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d102      	bne.n	800fce6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800fce0:	f06f 0305 	mvn.w	r3, #5
 800fce4:	e04c      	b.n	800fd80 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcea:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800fcec:	68b8      	ldr	r0, [r7, #8]
 800fcee:	f7ff fe2d 	bl	800f94c <tcp_output_segment_busy>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d002      	beq.n	800fcfe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800fcf8:	f06f 0305 	mvn.w	r3, #5
 800fcfc:	e040      	b.n	800fd80 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	336c      	adds	r3, #108	; 0x6c
 800fd0a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fd0c:	e002      	b.n	800fd14 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d011      	beq.n	800fd40 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7f9 fbc0 	bl	80094aa <lwip_htonl>
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	68db      	ldr	r3, [r3, #12]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7f9 fbb9 	bl	80094aa <lwip_htonl>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	dbe6      	blt.n	800fd0e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	681a      	ldr	r2, [r3, #0]
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	68ba      	ldr	r2, [r7, #8]
 800fd4c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d103      	bne.n	800fd5e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd64:	2bff      	cmp	r3, #255	; 0xff
 800fd66:	d007      	beq.n	800fd78 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd6e:	3301      	adds	r3, #1
 800fd70:	b2da      	uxtb	r2, r3
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800fd7e:	2300      	movs	r3, #0
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3714      	adds	r7, #20
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd90      	pop	{r4, r7, pc}
 800fd88:	08015cb8 	.word	0x08015cb8
 800fd8c:	08016358 	.word	0x08016358
 800fd90:	08015d0c 	.word	0x08015d0c

0800fd94 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d106      	bne.n	800fdb0 <tcp_rexmit_fast+0x1c>
 800fda2:	4b2a      	ldr	r3, [pc, #168]	; (800fe4c <tcp_rexmit_fast+0xb8>)
 800fda4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800fda8:	4929      	ldr	r1, [pc, #164]	; (800fe50 <tcp_rexmit_fast+0xbc>)
 800fdaa:	482a      	ldr	r0, [pc, #168]	; (800fe54 <tcp_rexmit_fast+0xc0>)
 800fdac:	f003 fc38 	bl	8013620 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d045      	beq.n	800fe44 <tcp_rexmit_fast+0xb0>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	8b5b      	ldrh	r3, [r3, #26]
 800fdbc:	f003 0304 	and.w	r3, r3, #4
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d13f      	bne.n	800fe44 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7ff ff79 	bl	800fcbc <tcp_rexmit>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d139      	bne.n	800fe44 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fddc:	4293      	cmp	r3, r2
 800fdde:	bf28      	it	cs
 800fde0:	4613      	movcs	r3, r2
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	da00      	bge.n	800fdea <tcp_rexmit_fast+0x56>
 800fde8:	3301      	adds	r3, #1
 800fdea:	105b      	asrs	r3, r3, #1
 800fdec:	b29a      	uxth	r2, r3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe00:	005b      	lsls	r3, r3, #1
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d206      	bcs.n	800fe14 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe0a:	005b      	lsls	r3, r3, #1
 800fe0c:	b29a      	uxth	r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe1e:	4619      	mov	r1, r3
 800fe20:	0049      	lsls	r1, r1, #1
 800fe22:	440b      	add	r3, r1
 800fe24:	b29b      	uxth	r3, r3
 800fe26:	4413      	add	r3, r2
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	8b5b      	ldrh	r3, [r3, #26]
 800fe34:	f043 0304 	orr.w	r3, r3, #4
 800fe38:	b29a      	uxth	r2, r3
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2200      	movs	r2, #0
 800fe42:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800fe44:	bf00      	nop
 800fe46:	3708      	adds	r7, #8
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}
 800fe4c:	08015cb8 	.word	0x08015cb8
 800fe50:	08016370 	.word	0x08016370
 800fe54:	08015d0c 	.word	0x08015d0c

0800fe58 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b086      	sub	sp, #24
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	60f8      	str	r0, [r7, #12]
 800fe60:	607b      	str	r3, [r7, #4]
 800fe62:	460b      	mov	r3, r1
 800fe64:	817b      	strh	r3, [r7, #10]
 800fe66:	4613      	mov	r3, r2
 800fe68:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fe6a:	897a      	ldrh	r2, [r7, #10]
 800fe6c:	893b      	ldrh	r3, [r7, #8]
 800fe6e:	4413      	add	r3, r2
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	3314      	adds	r3, #20
 800fe74:	b29b      	uxth	r3, r3
 800fe76:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	2022      	movs	r0, #34	; 0x22
 800fe7e:	f7fa fc0d 	bl	800a69c <pbuf_alloc>
 800fe82:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d04d      	beq.n	800ff26 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fe8a:	897b      	ldrh	r3, [r7, #10]
 800fe8c:	3313      	adds	r3, #19
 800fe8e:	697a      	ldr	r2, [r7, #20]
 800fe90:	8952      	ldrh	r2, [r2, #10]
 800fe92:	4293      	cmp	r3, r2
 800fe94:	db06      	blt.n	800fea4 <tcp_output_alloc_header_common+0x4c>
 800fe96:	4b26      	ldr	r3, [pc, #152]	; (800ff30 <tcp_output_alloc_header_common+0xd8>)
 800fe98:	f240 7223 	movw	r2, #1827	; 0x723
 800fe9c:	4925      	ldr	r1, [pc, #148]	; (800ff34 <tcp_output_alloc_header_common+0xdc>)
 800fe9e:	4826      	ldr	r0, [pc, #152]	; (800ff38 <tcp_output_alloc_header_common+0xe0>)
 800fea0:	f003 fbbe 	bl	8013620 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800feaa:	8c3b      	ldrh	r3, [r7, #32]
 800feac:	4618      	mov	r0, r3
 800feae:	f7f9 fae7 	bl	8009480 <lwip_htons>
 800feb2:	4603      	mov	r3, r0
 800feb4:	461a      	mov	r2, r3
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800feba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800febc:	4618      	mov	r0, r3
 800febe:	f7f9 fadf 	bl	8009480 <lwip_htons>
 800fec2:	4603      	mov	r3, r0
 800fec4:	461a      	mov	r2, r3
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fed0:	68f8      	ldr	r0, [r7, #12]
 800fed2:	f7f9 faea 	bl	80094aa <lwip_htonl>
 800fed6:	4602      	mov	r2, r0
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fedc:	897b      	ldrh	r3, [r7, #10]
 800fede:	089b      	lsrs	r3, r3, #2
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	3305      	adds	r3, #5
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	031b      	lsls	r3, r3, #12
 800fee8:	b29a      	uxth	r2, r3
 800feea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800feee:	b29b      	uxth	r3, r3
 800fef0:	4313      	orrs	r3, r2
 800fef2:	b29b      	uxth	r3, r3
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7f9 fac3 	bl	8009480 <lwip_htons>
 800fefa:	4603      	mov	r3, r0
 800fefc:	461a      	mov	r2, r3
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ff02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7f9 fabb 	bl	8009480 <lwip_htons>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	2200      	movs	r2, #0
 800ff16:	741a      	strb	r2, [r3, #16]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	749a      	strb	r2, [r3, #18]
 800ff22:	2200      	movs	r2, #0
 800ff24:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ff26:	697b      	ldr	r3, [r7, #20]
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3718      	adds	r7, #24
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}
 800ff30:	08015cb8 	.word	0x08015cb8
 800ff34:	08016390 	.word	0x08016390
 800ff38:	08015d0c 	.word	0x08015d0c

0800ff3c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ff3c:	b5b0      	push	{r4, r5, r7, lr}
 800ff3e:	b08a      	sub	sp, #40	; 0x28
 800ff40:	af04      	add	r7, sp, #16
 800ff42:	60f8      	str	r0, [r7, #12]
 800ff44:	607b      	str	r3, [r7, #4]
 800ff46:	460b      	mov	r3, r1
 800ff48:	817b      	strh	r3, [r7, #10]
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d106      	bne.n	800ff62 <tcp_output_alloc_header+0x26>
 800ff54:	4b15      	ldr	r3, [pc, #84]	; (800ffac <tcp_output_alloc_header+0x70>)
 800ff56:	f240 7242 	movw	r2, #1858	; 0x742
 800ff5a:	4915      	ldr	r1, [pc, #84]	; (800ffb0 <tcp_output_alloc_header+0x74>)
 800ff5c:	4815      	ldr	r0, [pc, #84]	; (800ffb4 <tcp_output_alloc_header+0x78>)
 800ff5e:	f003 fb5f 	bl	8013620 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	8adb      	ldrh	r3, [r3, #22]
 800ff6a:	68fa      	ldr	r2, [r7, #12]
 800ff6c:	8b12      	ldrh	r2, [r2, #24]
 800ff6e:	68f9      	ldr	r1, [r7, #12]
 800ff70:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ff72:	893d      	ldrh	r5, [r7, #8]
 800ff74:	897c      	ldrh	r4, [r7, #10]
 800ff76:	9103      	str	r1, [sp, #12]
 800ff78:	2110      	movs	r1, #16
 800ff7a:	9102      	str	r1, [sp, #8]
 800ff7c:	9201      	str	r2, [sp, #4]
 800ff7e:	9300      	str	r3, [sp, #0]
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	462a      	mov	r2, r5
 800ff84:	4621      	mov	r1, r4
 800ff86:	f7ff ff67 	bl	800fe58 <tcp_output_alloc_header_common>
 800ff8a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d006      	beq.n	800ffa0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff96:	68fa      	ldr	r2, [r7, #12]
 800ff98:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ff9a:	441a      	add	r2, r3
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800ffa0:	697b      	ldr	r3, [r7, #20]
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3718      	adds	r7, #24
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bdb0      	pop	{r4, r5, r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	08015cb8 	.word	0x08015cb8
 800ffb0:	080163c0 	.word	0x080163c0
 800ffb4:	08015d0c 	.word	0x08015d0c

0800ffb8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b088      	sub	sp, #32
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	60f8      	str	r0, [r7, #12]
 800ffc0:	60b9      	str	r1, [r7, #8]
 800ffc2:	4611      	mov	r1, r2
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	460b      	mov	r3, r1
 800ffc8:	71fb      	strb	r3, [r7, #7]
 800ffca:	4613      	mov	r3, r2
 800ffcc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d106      	bne.n	800ffe6 <tcp_output_fill_options+0x2e>
 800ffd8:	4b13      	ldr	r3, [pc, #76]	; (8010028 <tcp_output_fill_options+0x70>)
 800ffda:	f240 7256 	movw	r2, #1878	; 0x756
 800ffde:	4913      	ldr	r1, [pc, #76]	; (801002c <tcp_output_fill_options+0x74>)
 800ffe0:	4813      	ldr	r0, [pc, #76]	; (8010030 <tcp_output_fill_options+0x78>)
 800ffe2:	f003 fb1d 	bl	8013620 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ffec:	69bb      	ldr	r3, [r7, #24]
 800ffee:	3314      	adds	r3, #20
 800fff0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	f103 0214 	add.w	r2, r3, #20
 800fff8:	8bfb      	ldrh	r3, [r7, #30]
 800fffa:	009b      	lsls	r3, r3, #2
 800fffc:	4619      	mov	r1, r3
 800fffe:	79fb      	ldrb	r3, [r7, #7]
 8010000:	009b      	lsls	r3, r3, #2
 8010002:	f003 0304 	and.w	r3, r3, #4
 8010006:	440b      	add	r3, r1
 8010008:	4413      	add	r3, r2
 801000a:	697a      	ldr	r2, [r7, #20]
 801000c:	429a      	cmp	r2, r3
 801000e:	d006      	beq.n	801001e <tcp_output_fill_options+0x66>
 8010010:	4b05      	ldr	r3, [pc, #20]	; (8010028 <tcp_output_fill_options+0x70>)
 8010012:	f240 7275 	movw	r2, #1909	; 0x775
 8010016:	4907      	ldr	r1, [pc, #28]	; (8010034 <tcp_output_fill_options+0x7c>)
 8010018:	4805      	ldr	r0, [pc, #20]	; (8010030 <tcp_output_fill_options+0x78>)
 801001a:	f003 fb01 	bl	8013620 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801001e:	bf00      	nop
 8010020:	3720      	adds	r7, #32
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	08015cb8 	.word	0x08015cb8
 801002c:	080163e8 	.word	0x080163e8
 8010030:	08015d0c 	.word	0x08015d0c
 8010034:	080162e0 	.word	0x080162e0

08010038 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b08a      	sub	sp, #40	; 0x28
 801003c:	af04      	add	r7, sp, #16
 801003e:	60f8      	str	r0, [r7, #12]
 8010040:	60b9      	str	r1, [r7, #8]
 8010042:	607a      	str	r2, [r7, #4]
 8010044:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d106      	bne.n	801005a <tcp_output_control_segment+0x22>
 801004c:	4b1c      	ldr	r3, [pc, #112]	; (80100c0 <tcp_output_control_segment+0x88>)
 801004e:	f240 7287 	movw	r2, #1927	; 0x787
 8010052:	491c      	ldr	r1, [pc, #112]	; (80100c4 <tcp_output_control_segment+0x8c>)
 8010054:	481c      	ldr	r0, [pc, #112]	; (80100c8 <tcp_output_control_segment+0x90>)
 8010056:	f003 fae3 	bl	8013620 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801005a:	683a      	ldr	r2, [r7, #0]
 801005c:	6879      	ldr	r1, [r7, #4]
 801005e:	68f8      	ldr	r0, [r7, #12]
 8010060:	f7fe ff40 	bl	800eee4 <tcp_route>
 8010064:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d102      	bne.n	8010072 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801006c:	23fc      	movs	r3, #252	; 0xfc
 801006e:	75fb      	strb	r3, [r7, #23]
 8010070:	e01c      	b.n	80100ac <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d006      	beq.n	8010086 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	7adb      	ldrb	r3, [r3, #11]
 801007c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	7a9b      	ldrb	r3, [r3, #10]
 8010082:	757b      	strb	r3, [r7, #21]
 8010084:	e003      	b.n	801008e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010086:	23ff      	movs	r3, #255	; 0xff
 8010088:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801008a:	2300      	movs	r3, #0
 801008c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801008e:	7dba      	ldrb	r2, [r7, #22]
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	9302      	str	r3, [sp, #8]
 8010094:	2306      	movs	r3, #6
 8010096:	9301      	str	r3, [sp, #4]
 8010098:	7d7b      	ldrb	r3, [r7, #21]
 801009a:	9300      	str	r3, [sp, #0]
 801009c:	4613      	mov	r3, r2
 801009e:	683a      	ldr	r2, [r7, #0]
 80100a0:	6879      	ldr	r1, [r7, #4]
 80100a2:	68b8      	ldr	r0, [r7, #8]
 80100a4:	f001 ffa0 	bl	8011fe8 <ip4_output_if>
 80100a8:	4603      	mov	r3, r0
 80100aa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80100ac:	68b8      	ldr	r0, [r7, #8]
 80100ae:	f7fa fdd9 	bl	800ac64 <pbuf_free>
  return err;
 80100b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3718      	adds	r7, #24
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	08015cb8 	.word	0x08015cb8
 80100c4:	08016410 	.word	0x08016410
 80100c8:	08015d0c 	.word	0x08015d0c

080100cc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80100cc:	b590      	push	{r4, r7, lr}
 80100ce:	b08b      	sub	sp, #44	; 0x2c
 80100d0:	af04      	add	r7, sp, #16
 80100d2:	60f8      	str	r0, [r7, #12]
 80100d4:	60b9      	str	r1, [r7, #8]
 80100d6:	607a      	str	r2, [r7, #4]
 80100d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d106      	bne.n	80100ee <tcp_rst+0x22>
 80100e0:	4b1f      	ldr	r3, [pc, #124]	; (8010160 <tcp_rst+0x94>)
 80100e2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80100e6:	491f      	ldr	r1, [pc, #124]	; (8010164 <tcp_rst+0x98>)
 80100e8:	481f      	ldr	r0, [pc, #124]	; (8010168 <tcp_rst+0x9c>)
 80100ea:	f003 fa99 	bl	8013620 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80100ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d106      	bne.n	8010102 <tcp_rst+0x36>
 80100f4:	4b1a      	ldr	r3, [pc, #104]	; (8010160 <tcp_rst+0x94>)
 80100f6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80100fa:	491c      	ldr	r1, [pc, #112]	; (801016c <tcp_rst+0xa0>)
 80100fc:	481a      	ldr	r0, [pc, #104]	; (8010168 <tcp_rst+0x9c>)
 80100fe:	f003 fa8f 	bl	8013620 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010102:	2300      	movs	r3, #0
 8010104:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010106:	f246 0308 	movw	r3, #24584	; 0x6008
 801010a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801010c:	7dfb      	ldrb	r3, [r7, #23]
 801010e:	b29c      	uxth	r4, r3
 8010110:	68b8      	ldr	r0, [r7, #8]
 8010112:	f7f9 f9ca 	bl	80094aa <lwip_htonl>
 8010116:	4602      	mov	r2, r0
 8010118:	8abb      	ldrh	r3, [r7, #20]
 801011a:	9303      	str	r3, [sp, #12]
 801011c:	2314      	movs	r3, #20
 801011e:	9302      	str	r3, [sp, #8]
 8010120:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010122:	9301      	str	r3, [sp, #4]
 8010124:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	4613      	mov	r3, r2
 801012a:	2200      	movs	r2, #0
 801012c:	4621      	mov	r1, r4
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f7ff fe92 	bl	800fe58 <tcp_output_alloc_header_common>
 8010134:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d00c      	beq.n	8010156 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801013c:	7dfb      	ldrb	r3, [r7, #23]
 801013e:	2200      	movs	r2, #0
 8010140:	6939      	ldr	r1, [r7, #16]
 8010142:	68f8      	ldr	r0, [r7, #12]
 8010144:	f7ff ff38 	bl	800ffb8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801014a:	683a      	ldr	r2, [r7, #0]
 801014c:	6939      	ldr	r1, [r7, #16]
 801014e:	68f8      	ldr	r0, [r7, #12]
 8010150:	f7ff ff72 	bl	8010038 <tcp_output_control_segment>
 8010154:	e000      	b.n	8010158 <tcp_rst+0x8c>
    return;
 8010156:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010158:	371c      	adds	r7, #28
 801015a:	46bd      	mov	sp, r7
 801015c:	bd90      	pop	{r4, r7, pc}
 801015e:	bf00      	nop
 8010160:	08015cb8 	.word	0x08015cb8
 8010164:	0801643c 	.word	0x0801643c
 8010168:	08015d0c 	.word	0x08015d0c
 801016c:	08016458 	.word	0x08016458

08010170 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010170:	b590      	push	{r4, r7, lr}
 8010172:	b087      	sub	sp, #28
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010178:	2300      	movs	r3, #0
 801017a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801017c:	2300      	movs	r3, #0
 801017e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d106      	bne.n	8010194 <tcp_send_empty_ack+0x24>
 8010186:	4b28      	ldr	r3, [pc, #160]	; (8010228 <tcp_send_empty_ack+0xb8>)
 8010188:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801018c:	4927      	ldr	r1, [pc, #156]	; (801022c <tcp_send_empty_ack+0xbc>)
 801018e:	4828      	ldr	r0, [pc, #160]	; (8010230 <tcp_send_empty_ack+0xc0>)
 8010190:	f003 fa46 	bl	8013620 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010194:	7dfb      	ldrb	r3, [r7, #23]
 8010196:	009b      	lsls	r3, r3, #2
 8010198:	b2db      	uxtb	r3, r3
 801019a:	f003 0304 	and.w	r3, r3, #4
 801019e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80101a0:	7d7b      	ldrb	r3, [r7, #21]
 80101a2:	b29c      	uxth	r4, r3
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7f9 f97e 	bl	80094aa <lwip_htonl>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2200      	movs	r2, #0
 80101b2:	4621      	mov	r1, r4
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f7ff fec1 	bl	800ff3c <tcp_output_alloc_header>
 80101ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80101bc:	693b      	ldr	r3, [r7, #16]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d109      	bne.n	80101d6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	8b5b      	ldrh	r3, [r3, #26]
 80101c6:	f043 0303 	orr.w	r3, r3, #3
 80101ca:	b29a      	uxth	r2, r3
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80101d0:	f06f 0301 	mvn.w	r3, #1
 80101d4:	e023      	b.n	801021e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80101d6:	7dbb      	ldrb	r3, [r7, #22]
 80101d8:	7dfa      	ldrb	r2, [r7, #23]
 80101da:	6939      	ldr	r1, [r7, #16]
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f7ff feeb 	bl	800ffb8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80101e2:	687a      	ldr	r2, [r7, #4]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	3304      	adds	r3, #4
 80101e8:	6939      	ldr	r1, [r7, #16]
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f7ff ff24 	bl	8010038 <tcp_output_control_segment>
 80101f0:	4603      	mov	r3, r0
 80101f2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80101f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d007      	beq.n	801020c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	8b5b      	ldrh	r3, [r3, #26]
 8010200:	f043 0303 	orr.w	r3, r3, #3
 8010204:	b29a      	uxth	r2, r3
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	835a      	strh	r2, [r3, #26]
 801020a:	e006      	b.n	801021a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	8b5b      	ldrh	r3, [r3, #26]
 8010210:	f023 0303 	bic.w	r3, r3, #3
 8010214:	b29a      	uxth	r2, r3
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801021a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801021e:	4618      	mov	r0, r3
 8010220:	371c      	adds	r7, #28
 8010222:	46bd      	mov	sp, r7
 8010224:	bd90      	pop	{r4, r7, pc}
 8010226:	bf00      	nop
 8010228:	08015cb8 	.word	0x08015cb8
 801022c:	08016474 	.word	0x08016474
 8010230:	08015d0c 	.word	0x08015d0c

08010234 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010234:	b590      	push	{r4, r7, lr}
 8010236:	b087      	sub	sp, #28
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801023c:	2300      	movs	r3, #0
 801023e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d106      	bne.n	8010254 <tcp_keepalive+0x20>
 8010246:	4b18      	ldr	r3, [pc, #96]	; (80102a8 <tcp_keepalive+0x74>)
 8010248:	f640 0224 	movw	r2, #2084	; 0x824
 801024c:	4917      	ldr	r1, [pc, #92]	; (80102ac <tcp_keepalive+0x78>)
 801024e:	4818      	ldr	r0, [pc, #96]	; (80102b0 <tcp_keepalive+0x7c>)
 8010250:	f003 f9e6 	bl	8013620 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010254:	7dfb      	ldrb	r3, [r7, #23]
 8010256:	b29c      	uxth	r4, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801025c:	3b01      	subs	r3, #1
 801025e:	4618      	mov	r0, r3
 8010260:	f7f9 f923 	bl	80094aa <lwip_htonl>
 8010264:	4603      	mov	r3, r0
 8010266:	2200      	movs	r2, #0
 8010268:	4621      	mov	r1, r4
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f7ff fe66 	bl	800ff3c <tcp_output_alloc_header>
 8010270:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d102      	bne.n	801027e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010278:	f04f 33ff 	mov.w	r3, #4294967295
 801027c:	e010      	b.n	80102a0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801027e:	7dfb      	ldrb	r3, [r7, #23]
 8010280:	2200      	movs	r2, #0
 8010282:	6939      	ldr	r1, [r7, #16]
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f7ff fe97 	bl	800ffb8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801028a:	687a      	ldr	r2, [r7, #4]
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	3304      	adds	r3, #4
 8010290:	6939      	ldr	r1, [r7, #16]
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f7ff fed0 	bl	8010038 <tcp_output_control_segment>
 8010298:	4603      	mov	r3, r0
 801029a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801029c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	371c      	adds	r7, #28
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd90      	pop	{r4, r7, pc}
 80102a8:	08015cb8 	.word	0x08015cb8
 80102ac:	08016494 	.word	0x08016494
 80102b0:	08015d0c 	.word	0x08015d0c

080102b4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80102b4:	b590      	push	{r4, r7, lr}
 80102b6:	b08b      	sub	sp, #44	; 0x2c
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80102bc:	2300      	movs	r3, #0
 80102be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d106      	bne.n	80102d6 <tcp_zero_window_probe+0x22>
 80102c8:	4b4c      	ldr	r3, [pc, #304]	; (80103fc <tcp_zero_window_probe+0x148>)
 80102ca:	f640 024f 	movw	r2, #2127	; 0x84f
 80102ce:	494c      	ldr	r1, [pc, #304]	; (8010400 <tcp_zero_window_probe+0x14c>)
 80102d0:	484c      	ldr	r0, [pc, #304]	; (8010404 <tcp_zero_window_probe+0x150>)
 80102d2:	f003 f9a5 	bl	8013620 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102da:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80102dc:	6a3b      	ldr	r3, [r7, #32]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d101      	bne.n	80102e6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80102e2:	2300      	movs	r3, #0
 80102e4:	e086      	b.n	80103f4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80102ec:	2bff      	cmp	r3, #255	; 0xff
 80102ee:	d007      	beq.n	8010300 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80102f6:	3301      	adds	r3, #1
 80102f8:	b2da      	uxtb	r2, r3
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010300:	6a3b      	ldr	r3, [r7, #32]
 8010302:	68db      	ldr	r3, [r3, #12]
 8010304:	899b      	ldrh	r3, [r3, #12]
 8010306:	b29b      	uxth	r3, r3
 8010308:	4618      	mov	r0, r3
 801030a:	f7f9 f8b9 	bl	8009480 <lwip_htons>
 801030e:	4603      	mov	r3, r0
 8010310:	b2db      	uxtb	r3, r3
 8010312:	f003 0301 	and.w	r3, r3, #1
 8010316:	2b00      	cmp	r3, #0
 8010318:	d005      	beq.n	8010326 <tcp_zero_window_probe+0x72>
 801031a:	6a3b      	ldr	r3, [r7, #32]
 801031c:	891b      	ldrh	r3, [r3, #8]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d101      	bne.n	8010326 <tcp_zero_window_probe+0x72>
 8010322:	2301      	movs	r3, #1
 8010324:	e000      	b.n	8010328 <tcp_zero_window_probe+0x74>
 8010326:	2300      	movs	r3, #0
 8010328:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801032a:	7ffb      	ldrb	r3, [r7, #31]
 801032c:	2b00      	cmp	r3, #0
 801032e:	bf0c      	ite	eq
 8010330:	2301      	moveq	r3, #1
 8010332:	2300      	movne	r3, #0
 8010334:	b2db      	uxtb	r3, r3
 8010336:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801033c:	b299      	uxth	r1, r3
 801033e:	6a3b      	ldr	r3, [r7, #32]
 8010340:	68db      	ldr	r3, [r3, #12]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	8bba      	ldrh	r2, [r7, #28]
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f7ff fdf8 	bl	800ff3c <tcp_output_alloc_header>
 801034c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d102      	bne.n	801035a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010354:	f04f 33ff 	mov.w	r3, #4294967295
 8010358:	e04c      	b.n	80103f4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801035a:	69bb      	ldr	r3, [r7, #24]
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010360:	7ffb      	ldrb	r3, [r7, #31]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d011      	beq.n	801038a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	899b      	ldrh	r3, [r3, #12]
 801036a:	b29b      	uxth	r3, r3
 801036c:	b21b      	sxth	r3, r3
 801036e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010372:	b21c      	sxth	r4, r3
 8010374:	2011      	movs	r0, #17
 8010376:	f7f9 f883 	bl	8009480 <lwip_htons>
 801037a:	4603      	mov	r3, r0
 801037c:	b21b      	sxth	r3, r3
 801037e:	4323      	orrs	r3, r4
 8010380:	b21b      	sxth	r3, r3
 8010382:	b29a      	uxth	r2, r3
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	819a      	strh	r2, [r3, #12]
 8010388:	e010      	b.n	80103ac <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	3314      	adds	r3, #20
 8010390:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010392:	6a3b      	ldr	r3, [r7, #32]
 8010394:	6858      	ldr	r0, [r3, #4]
 8010396:	6a3b      	ldr	r3, [r7, #32]
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	891a      	ldrh	r2, [r3, #8]
 801039c:	6a3b      	ldr	r3, [r7, #32]
 801039e:	891b      	ldrh	r3, [r3, #8]
 80103a0:	1ad3      	subs	r3, r2, r3
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	2201      	movs	r2, #1
 80103a6:	6939      	ldr	r1, [r7, #16]
 80103a8:	f7fa fe52 	bl	800b050 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80103ac:	6a3b      	ldr	r3, [r7, #32]
 80103ae:	68db      	ldr	r3, [r3, #12]
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7f9 f879 	bl	80094aa <lwip_htonl>
 80103b8:	4603      	mov	r3, r0
 80103ba:	3301      	adds	r3, #1
 80103bc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	1ad3      	subs	r3, r2, r3
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	da02      	bge.n	80103d0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	68fa      	ldr	r2, [r7, #12]
 80103ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80103d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103d4:	2200      	movs	r2, #0
 80103d6:	69b9      	ldr	r1, [r7, #24]
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f7ff fded 	bl	800ffb8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80103de:	687a      	ldr	r2, [r7, #4]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	3304      	adds	r3, #4
 80103e4:	69b9      	ldr	r1, [r7, #24]
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f7ff fe26 	bl	8010038 <tcp_output_control_segment>
 80103ec:	4603      	mov	r3, r0
 80103ee:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80103f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	372c      	adds	r7, #44	; 0x2c
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd90      	pop	{r4, r7, pc}
 80103fc:	08015cb8 	.word	0x08015cb8
 8010400:	080164b0 	.word	0x080164b0
 8010404:	08015d0c 	.word	0x08015d0c

08010408 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b082      	sub	sp, #8
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010410:	f7fa ff0c 	bl	800b22c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010414:	4b0a      	ldr	r3, [pc, #40]	; (8010440 <tcpip_tcp_timer+0x38>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d103      	bne.n	8010424 <tcpip_tcp_timer+0x1c>
 801041c:	4b09      	ldr	r3, [pc, #36]	; (8010444 <tcpip_tcp_timer+0x3c>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d005      	beq.n	8010430 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010424:	2200      	movs	r2, #0
 8010426:	4908      	ldr	r1, [pc, #32]	; (8010448 <tcpip_tcp_timer+0x40>)
 8010428:	20fa      	movs	r0, #250	; 0xfa
 801042a:	f000 f8f3 	bl	8010614 <sys_timeout>
 801042e:	e003      	b.n	8010438 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010430:	4b06      	ldr	r3, [pc, #24]	; (801044c <tcpip_tcp_timer+0x44>)
 8010432:	2200      	movs	r2, #0
 8010434:	601a      	str	r2, [r3, #0]
  }
}
 8010436:	bf00      	nop
 8010438:	bf00      	nop
 801043a:	3708      	adds	r7, #8
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}
 8010440:	2000ca30 	.word	0x2000ca30
 8010444:	2000ca34 	.word	0x2000ca34
 8010448:	08010409 	.word	0x08010409
 801044c:	2000ca7c 	.word	0x2000ca7c

08010450 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010454:	4b0a      	ldr	r3, [pc, #40]	; (8010480 <tcp_timer_needed+0x30>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d10f      	bne.n	801047c <tcp_timer_needed+0x2c>
 801045c:	4b09      	ldr	r3, [pc, #36]	; (8010484 <tcp_timer_needed+0x34>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d103      	bne.n	801046c <tcp_timer_needed+0x1c>
 8010464:	4b08      	ldr	r3, [pc, #32]	; (8010488 <tcp_timer_needed+0x38>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d007      	beq.n	801047c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801046c:	4b04      	ldr	r3, [pc, #16]	; (8010480 <tcp_timer_needed+0x30>)
 801046e:	2201      	movs	r2, #1
 8010470:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010472:	2200      	movs	r2, #0
 8010474:	4905      	ldr	r1, [pc, #20]	; (801048c <tcp_timer_needed+0x3c>)
 8010476:	20fa      	movs	r0, #250	; 0xfa
 8010478:	f000 f8cc 	bl	8010614 <sys_timeout>
  }
}
 801047c:	bf00      	nop
 801047e:	bd80      	pop	{r7, pc}
 8010480:	2000ca7c 	.word	0x2000ca7c
 8010484:	2000ca30 	.word	0x2000ca30
 8010488:	2000ca34 	.word	0x2000ca34
 801048c:	08010409 	.word	0x08010409

08010490 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b086      	sub	sp, #24
 8010494:	af00      	add	r7, sp, #0
 8010496:	60f8      	str	r0, [r7, #12]
 8010498:	60b9      	str	r1, [r7, #8]
 801049a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801049c:	200a      	movs	r0, #10
 801049e:	f7f9 fcc7 	bl	8009e30 <memp_malloc>
 80104a2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d109      	bne.n	80104be <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d151      	bne.n	8010554 <sys_timeout_abs+0xc4>
 80104b0:	4b2a      	ldr	r3, [pc, #168]	; (801055c <sys_timeout_abs+0xcc>)
 80104b2:	22be      	movs	r2, #190	; 0xbe
 80104b4:	492a      	ldr	r1, [pc, #168]	; (8010560 <sys_timeout_abs+0xd0>)
 80104b6:	482b      	ldr	r0, [pc, #172]	; (8010564 <sys_timeout_abs+0xd4>)
 80104b8:	f003 f8b2 	bl	8013620 <iprintf>
    return;
 80104bc:	e04a      	b.n	8010554 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	2200      	movs	r2, #0
 80104c2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	68ba      	ldr	r2, [r7, #8]
 80104c8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	68fa      	ldr	r2, [r7, #12]
 80104d4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80104d6:	4b24      	ldr	r3, [pc, #144]	; (8010568 <sys_timeout_abs+0xd8>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d103      	bne.n	80104e6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80104de:	4a22      	ldr	r2, [pc, #136]	; (8010568 <sys_timeout_abs+0xd8>)
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	6013      	str	r3, [r2, #0]
    return;
 80104e4:	e037      	b.n	8010556 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	685a      	ldr	r2, [r3, #4]
 80104ea:	4b1f      	ldr	r3, [pc, #124]	; (8010568 <sys_timeout_abs+0xd8>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	1ad3      	subs	r3, r2, r3
 80104f2:	0fdb      	lsrs	r3, r3, #31
 80104f4:	f003 0301 	and.w	r3, r3, #1
 80104f8:	b2db      	uxtb	r3, r3
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d007      	beq.n	801050e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80104fe:	4b1a      	ldr	r3, [pc, #104]	; (8010568 <sys_timeout_abs+0xd8>)
 8010500:	681a      	ldr	r2, [r3, #0]
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010506:	4a18      	ldr	r2, [pc, #96]	; (8010568 <sys_timeout_abs+0xd8>)
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	6013      	str	r3, [r2, #0]
 801050c:	e023      	b.n	8010556 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801050e:	4b16      	ldr	r3, [pc, #88]	; (8010568 <sys_timeout_abs+0xd8>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	617b      	str	r3, [r7, #20]
 8010514:	e01a      	b.n	801054c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d00b      	beq.n	8010536 <sys_timeout_abs+0xa6>
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	685a      	ldr	r2, [r3, #4]
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	1ad3      	subs	r3, r2, r3
 801052a:	0fdb      	lsrs	r3, r3, #31
 801052c:	f003 0301 	and.w	r3, r3, #1
 8010530:	b2db      	uxtb	r3, r3
 8010532:	2b00      	cmp	r3, #0
 8010534:	d007      	beq.n	8010546 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	693a      	ldr	r2, [r7, #16]
 8010542:	601a      	str	r2, [r3, #0]
        break;
 8010544:	e007      	b.n	8010556 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	617b      	str	r3, [r7, #20]
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d1e1      	bne.n	8010516 <sys_timeout_abs+0x86>
 8010552:	e000      	b.n	8010556 <sys_timeout_abs+0xc6>
    return;
 8010554:	bf00      	nop
      }
    }
  }
}
 8010556:	3718      	adds	r7, #24
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	080164d4 	.word	0x080164d4
 8010560:	08016508 	.word	0x08016508
 8010564:	08016548 	.word	0x08016548
 8010568:	2000ca74 	.word	0x2000ca74

0801056c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b086      	sub	sp, #24
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	4798      	blx	r3

  now = sys_now();
 801057e:	f7f5 fc5f 	bl	8005e40 <sys_now>
 8010582:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	4b0f      	ldr	r3, [pc, #60]	; (80105c8 <lwip_cyclic_timer+0x5c>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	4413      	add	r3, r2
 801058e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010590:	68fa      	ldr	r2, [r7, #12]
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	1ad3      	subs	r3, r2, r3
 8010596:	0fdb      	lsrs	r3, r3, #31
 8010598:	f003 0301 	and.w	r3, r3, #1
 801059c:	b2db      	uxtb	r3, r3
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d009      	beq.n	80105b6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	681a      	ldr	r2, [r3, #0]
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	4413      	add	r3, r2
 80105aa:	687a      	ldr	r2, [r7, #4]
 80105ac:	4907      	ldr	r1, [pc, #28]	; (80105cc <lwip_cyclic_timer+0x60>)
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7ff ff6e 	bl	8010490 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80105b4:	e004      	b.n	80105c0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80105b6:	687a      	ldr	r2, [r7, #4]
 80105b8:	4904      	ldr	r1, [pc, #16]	; (80105cc <lwip_cyclic_timer+0x60>)
 80105ba:	68f8      	ldr	r0, [r7, #12]
 80105bc:	f7ff ff68 	bl	8010490 <sys_timeout_abs>
}
 80105c0:	bf00      	nop
 80105c2:	3718      	adds	r7, #24
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	2000ca78 	.word	0x2000ca78
 80105cc:	0801056d 	.word	0x0801056d

080105d0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80105d6:	2301      	movs	r3, #1
 80105d8:	607b      	str	r3, [r7, #4]
 80105da:	e00e      	b.n	80105fa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80105dc:	4a0b      	ldr	r2, [pc, #44]	; (801060c <sys_timeouts_init+0x3c>)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	00db      	lsls	r3, r3, #3
 80105e8:	4a08      	ldr	r2, [pc, #32]	; (801060c <sys_timeouts_init+0x3c>)
 80105ea:	4413      	add	r3, r2
 80105ec:	461a      	mov	r2, r3
 80105ee:	4908      	ldr	r1, [pc, #32]	; (8010610 <sys_timeouts_init+0x40>)
 80105f0:	f000 f810 	bl	8010614 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	3301      	adds	r3, #1
 80105f8:	607b      	str	r3, [r7, #4]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2b02      	cmp	r3, #2
 80105fe:	d9ed      	bls.n	80105dc <sys_timeouts_init+0xc>
  }
}
 8010600:	bf00      	nop
 8010602:	bf00      	nop
 8010604:	3708      	adds	r7, #8
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	08017100 	.word	0x08017100
 8010610:	0801056d 	.word	0x0801056d

08010614 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b086      	sub	sp, #24
 8010618:	af00      	add	r7, sp, #0
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	60b9      	str	r1, [r7, #8]
 801061e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010626:	d306      	bcc.n	8010636 <sys_timeout+0x22>
 8010628:	4b0a      	ldr	r3, [pc, #40]	; (8010654 <sys_timeout+0x40>)
 801062a:	f240 1229 	movw	r2, #297	; 0x129
 801062e:	490a      	ldr	r1, [pc, #40]	; (8010658 <sys_timeout+0x44>)
 8010630:	480a      	ldr	r0, [pc, #40]	; (801065c <sys_timeout+0x48>)
 8010632:	f002 fff5 	bl	8013620 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010636:	f7f5 fc03 	bl	8005e40 <sys_now>
 801063a:	4602      	mov	r2, r0
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	4413      	add	r3, r2
 8010640:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	68b9      	ldr	r1, [r7, #8]
 8010646:	6978      	ldr	r0, [r7, #20]
 8010648:	f7ff ff22 	bl	8010490 <sys_timeout_abs>
#endif
}
 801064c:	bf00      	nop
 801064e:	3718      	adds	r7, #24
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	080164d4 	.word	0x080164d4
 8010658:	08016570 	.word	0x08016570
 801065c:	08016548 	.word	0x08016548

08010660 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b084      	sub	sp, #16
 8010664:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010666:	f7f5 fbeb 	bl	8005e40 <sys_now>
 801066a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801066c:	4b17      	ldr	r3, [pc, #92]	; (80106cc <sys_check_timeouts+0x6c>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d022      	beq.n	80106be <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	685b      	ldr	r3, [r3, #4]
 801067c:	68fa      	ldr	r2, [r7, #12]
 801067e:	1ad3      	subs	r3, r2, r3
 8010680:	0fdb      	lsrs	r3, r3, #31
 8010682:	f003 0301 	and.w	r3, r3, #1
 8010686:	b2db      	uxtb	r3, r3
 8010688:	2b00      	cmp	r3, #0
 801068a:	d11a      	bne.n	80106c2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	4a0e      	ldr	r2, [pc, #56]	; (80106cc <sys_check_timeouts+0x6c>)
 8010692:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	689b      	ldr	r3, [r3, #8]
 8010698:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	68db      	ldr	r3, [r3, #12]
 801069e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	685b      	ldr	r3, [r3, #4]
 80106a4:	4a0a      	ldr	r2, [pc, #40]	; (80106d0 <sys_check_timeouts+0x70>)
 80106a6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80106a8:	68b9      	ldr	r1, [r7, #8]
 80106aa:	200a      	movs	r0, #10
 80106ac:	f7f9 fc36 	bl	8009f1c <memp_free>
    if (handler != NULL) {
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d0da      	beq.n	801066c <sys_check_timeouts+0xc>
      handler(arg);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6838      	ldr	r0, [r7, #0]
 80106ba:	4798      	blx	r3
  do {
 80106bc:	e7d6      	b.n	801066c <sys_check_timeouts+0xc>
      return;
 80106be:	bf00      	nop
 80106c0:	e000      	b.n	80106c4 <sys_check_timeouts+0x64>
      return;
 80106c2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80106c4:	3710      	adds	r7, #16
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	2000ca74 	.word	0x2000ca74
 80106d0:	2000ca78 	.word	0x2000ca78

080106d4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80106da:	4b16      	ldr	r3, [pc, #88]	; (8010734 <sys_timeouts_sleeptime+0x60>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d102      	bne.n	80106e8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80106e2:	f04f 33ff 	mov.w	r3, #4294967295
 80106e6:	e020      	b.n	801072a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80106e8:	f7f5 fbaa 	bl	8005e40 <sys_now>
 80106ec:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80106ee:	4b11      	ldr	r3, [pc, #68]	; (8010734 <sys_timeouts_sleeptime+0x60>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	685a      	ldr	r2, [r3, #4]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	1ad3      	subs	r3, r2, r3
 80106f8:	0fdb      	lsrs	r3, r3, #31
 80106fa:	f003 0301 	and.w	r3, r3, #1
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	2b00      	cmp	r3, #0
 8010702:	d001      	beq.n	8010708 <sys_timeouts_sleeptime+0x34>
    return 0;
 8010704:	2300      	movs	r3, #0
 8010706:	e010      	b.n	801072a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8010708:	4b0a      	ldr	r3, [pc, #40]	; (8010734 <sys_timeouts_sleeptime+0x60>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	685a      	ldr	r2, [r3, #4]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	1ad3      	subs	r3, r2, r3
 8010712:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	2b00      	cmp	r3, #0
 8010718:	da06      	bge.n	8010728 <sys_timeouts_sleeptime+0x54>
 801071a:	4b07      	ldr	r3, [pc, #28]	; (8010738 <sys_timeouts_sleeptime+0x64>)
 801071c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8010720:	4906      	ldr	r1, [pc, #24]	; (801073c <sys_timeouts_sleeptime+0x68>)
 8010722:	4807      	ldr	r0, [pc, #28]	; (8010740 <sys_timeouts_sleeptime+0x6c>)
 8010724:	f002 ff7c 	bl	8013620 <iprintf>
    return ret;
 8010728:	683b      	ldr	r3, [r7, #0]
  }
}
 801072a:	4618      	mov	r0, r3
 801072c:	3708      	adds	r7, #8
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop
 8010734:	2000ca74 	.word	0x2000ca74
 8010738:	080164d4 	.word	0x080164d4
 801073c:	080165a8 	.word	0x080165a8
 8010740:	08016548 	.word	0x08016548

08010744 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010748:	f002 ff82 	bl	8013650 <rand>
 801074c:	4603      	mov	r3, r0
 801074e:	b29b      	uxth	r3, r3
 8010750:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010754:	b29b      	uxth	r3, r3
 8010756:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801075a:	b29a      	uxth	r2, r3
 801075c:	4b01      	ldr	r3, [pc, #4]	; (8010764 <udp_init+0x20>)
 801075e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010760:	bf00      	nop
 8010762:	bd80      	pop	{r7, pc}
 8010764:	2000002c 	.word	0x2000002c

08010768 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	4613      	mov	r3, r2
 8010774:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d105      	bne.n	8010788 <udp_input_local_match+0x20>
 801077c:	4b27      	ldr	r3, [pc, #156]	; (801081c <udp_input_local_match+0xb4>)
 801077e:	2287      	movs	r2, #135	; 0x87
 8010780:	4927      	ldr	r1, [pc, #156]	; (8010820 <udp_input_local_match+0xb8>)
 8010782:	4828      	ldr	r0, [pc, #160]	; (8010824 <udp_input_local_match+0xbc>)
 8010784:	f002 ff4c 	bl	8013620 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d105      	bne.n	801079a <udp_input_local_match+0x32>
 801078e:	4b23      	ldr	r3, [pc, #140]	; (801081c <udp_input_local_match+0xb4>)
 8010790:	2288      	movs	r2, #136	; 0x88
 8010792:	4925      	ldr	r1, [pc, #148]	; (8010828 <udp_input_local_match+0xc0>)
 8010794:	4823      	ldr	r0, [pc, #140]	; (8010824 <udp_input_local_match+0xbc>)
 8010796:	f002 ff43 	bl	8013620 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	7a1b      	ldrb	r3, [r3, #8]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d00b      	beq.n	80107ba <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	7a1a      	ldrb	r2, [r3, #8]
 80107a6:	4b21      	ldr	r3, [pc, #132]	; (801082c <udp_input_local_match+0xc4>)
 80107a8:	685b      	ldr	r3, [r3, #4]
 80107aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80107ae:	3301      	adds	r3, #1
 80107b0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d001      	beq.n	80107ba <udp_input_local_match+0x52>
    return 0;
 80107b6:	2300      	movs	r3, #0
 80107b8:	e02b      	b.n	8010812 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80107ba:	79fb      	ldrb	r3, [r7, #7]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d018      	beq.n	80107f2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d013      	beq.n	80107ee <udp_input_local_match+0x86>
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d00f      	beq.n	80107ee <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80107ce:	4b17      	ldr	r3, [pc, #92]	; (801082c <udp_input_local_match+0xc4>)
 80107d0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80107d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107d6:	d00a      	beq.n	80107ee <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681a      	ldr	r2, [r3, #0]
 80107dc:	4b13      	ldr	r3, [pc, #76]	; (801082c <udp_input_local_match+0xc4>)
 80107de:	695b      	ldr	r3, [r3, #20]
 80107e0:	405a      	eors	r2, r3
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	3308      	adds	r3, #8
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d110      	bne.n	8010810 <udp_input_local_match+0xa8>
          return 1;
 80107ee:	2301      	movs	r3, #1
 80107f0:	e00f      	b.n	8010812 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d009      	beq.n	801080c <udp_input_local_match+0xa4>
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d005      	beq.n	801080c <udp_input_local_match+0xa4>
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	681a      	ldr	r2, [r3, #0]
 8010804:	4b09      	ldr	r3, [pc, #36]	; (801082c <udp_input_local_match+0xc4>)
 8010806:	695b      	ldr	r3, [r3, #20]
 8010808:	429a      	cmp	r2, r3
 801080a:	d101      	bne.n	8010810 <udp_input_local_match+0xa8>
        return 1;
 801080c:	2301      	movs	r3, #1
 801080e:	e000      	b.n	8010812 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010810:	2300      	movs	r3, #0
}
 8010812:	4618      	mov	r0, r3
 8010814:	3710      	adds	r7, #16
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	080165bc 	.word	0x080165bc
 8010820:	080165ec 	.word	0x080165ec
 8010824:	08016610 	.word	0x08016610
 8010828:	08016638 	.word	0x08016638
 801082c:	200092d0 	.word	0x200092d0

08010830 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010830:	b590      	push	{r4, r7, lr}
 8010832:	b08d      	sub	sp, #52	; 0x34
 8010834:	af02      	add	r7, sp, #8
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801083a:	2300      	movs	r3, #0
 801083c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d105      	bne.n	8010850 <udp_input+0x20>
 8010844:	4b7c      	ldr	r3, [pc, #496]	; (8010a38 <udp_input+0x208>)
 8010846:	22cf      	movs	r2, #207	; 0xcf
 8010848:	497c      	ldr	r1, [pc, #496]	; (8010a3c <udp_input+0x20c>)
 801084a:	487d      	ldr	r0, [pc, #500]	; (8010a40 <udp_input+0x210>)
 801084c:	f002 fee8 	bl	8013620 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d105      	bne.n	8010862 <udp_input+0x32>
 8010856:	4b78      	ldr	r3, [pc, #480]	; (8010a38 <udp_input+0x208>)
 8010858:	22d0      	movs	r2, #208	; 0xd0
 801085a:	497a      	ldr	r1, [pc, #488]	; (8010a44 <udp_input+0x214>)
 801085c:	4878      	ldr	r0, [pc, #480]	; (8010a40 <udp_input+0x210>)
 801085e:	f002 fedf 	bl	8013620 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	895b      	ldrh	r3, [r3, #10]
 8010866:	2b07      	cmp	r3, #7
 8010868:	d803      	bhi.n	8010872 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f7fa f9fa 	bl	800ac64 <pbuf_free>
    goto end;
 8010870:	e0de      	b.n	8010a30 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	685b      	ldr	r3, [r3, #4]
 8010876:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010878:	4b73      	ldr	r3, [pc, #460]	; (8010a48 <udp_input+0x218>)
 801087a:	695b      	ldr	r3, [r3, #20]
 801087c:	4a72      	ldr	r2, [pc, #456]	; (8010a48 <udp_input+0x218>)
 801087e:	6812      	ldr	r2, [r2, #0]
 8010880:	4611      	mov	r1, r2
 8010882:	4618      	mov	r0, r3
 8010884:	f001 fc88 	bl	8012198 <ip4_addr_isbroadcast_u32>
 8010888:	4603      	mov	r3, r0
 801088a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	881b      	ldrh	r3, [r3, #0]
 8010890:	b29b      	uxth	r3, r3
 8010892:	4618      	mov	r0, r3
 8010894:	f7f8 fdf4 	bl	8009480 <lwip_htons>
 8010898:	4603      	mov	r3, r0
 801089a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	885b      	ldrh	r3, [r3, #2]
 80108a0:	b29b      	uxth	r3, r3
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7f8 fdec 	bl	8009480 <lwip_htons>
 80108a8:	4603      	mov	r3, r0
 80108aa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80108ac:	2300      	movs	r3, #0
 80108ae:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80108b0:	2300      	movs	r3, #0
 80108b2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80108b4:	2300      	movs	r3, #0
 80108b6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80108b8:	4b64      	ldr	r3, [pc, #400]	; (8010a4c <udp_input+0x21c>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	627b      	str	r3, [r7, #36]	; 0x24
 80108be:	e054      	b.n	801096a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80108c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c2:	8a5b      	ldrh	r3, [r3, #18]
 80108c4:	89fa      	ldrh	r2, [r7, #14]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d14a      	bne.n	8010960 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80108ca:	7cfb      	ldrb	r3, [r7, #19]
 80108cc:	461a      	mov	r2, r3
 80108ce:	6839      	ldr	r1, [r7, #0]
 80108d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108d2:	f7ff ff49 	bl	8010768 <udp_input_local_match>
 80108d6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d041      	beq.n	8010960 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80108dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108de:	7c1b      	ldrb	r3, [r3, #16]
 80108e0:	f003 0304 	and.w	r3, r3, #4
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d11d      	bne.n	8010924 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80108e8:	69fb      	ldr	r3, [r7, #28]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d102      	bne.n	80108f4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80108ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f0:	61fb      	str	r3, [r7, #28]
 80108f2:	e017      	b.n	8010924 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80108f4:	7cfb      	ldrb	r3, [r7, #19]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d014      	beq.n	8010924 <udp_input+0xf4>
 80108fa:	4b53      	ldr	r3, [pc, #332]	; (8010a48 <udp_input+0x218>)
 80108fc:	695b      	ldr	r3, [r3, #20]
 80108fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010902:	d10f      	bne.n	8010924 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010904:	69fb      	ldr	r3, [r7, #28]
 8010906:	681a      	ldr	r2, [r3, #0]
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	3304      	adds	r3, #4
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	429a      	cmp	r2, r3
 8010910:	d008      	beq.n	8010924 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010914:	681a      	ldr	r2, [r3, #0]
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	3304      	adds	r3, #4
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	429a      	cmp	r2, r3
 801091e:	d101      	bne.n	8010924 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010922:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010926:	8a9b      	ldrh	r3, [r3, #20]
 8010928:	8a3a      	ldrh	r2, [r7, #16]
 801092a:	429a      	cmp	r2, r3
 801092c:	d118      	bne.n	8010960 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010930:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010932:	2b00      	cmp	r3, #0
 8010934:	d005      	beq.n	8010942 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010938:	685a      	ldr	r2, [r3, #4]
 801093a:	4b43      	ldr	r3, [pc, #268]	; (8010a48 <udp_input+0x218>)
 801093c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801093e:	429a      	cmp	r2, r3
 8010940:	d10e      	bne.n	8010960 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010942:	6a3b      	ldr	r3, [r7, #32]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d014      	beq.n	8010972 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094a:	68da      	ldr	r2, [r3, #12]
 801094c:	6a3b      	ldr	r3, [r7, #32]
 801094e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010950:	4b3e      	ldr	r3, [pc, #248]	; (8010a4c <udp_input+0x21c>)
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010956:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010958:	4a3c      	ldr	r2, [pc, #240]	; (8010a4c <udp_input+0x21c>)
 801095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801095e:	e008      	b.n	8010972 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010962:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010966:	68db      	ldr	r3, [r3, #12]
 8010968:	627b      	str	r3, [r7, #36]	; 0x24
 801096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096c:	2b00      	cmp	r3, #0
 801096e:	d1a7      	bne.n	80108c0 <udp_input+0x90>
 8010970:	e000      	b.n	8010974 <udp_input+0x144>
        break;
 8010972:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010976:	2b00      	cmp	r3, #0
 8010978:	d101      	bne.n	801097e <udp_input+0x14e>
    pcb = uncon_pcb;
 801097a:	69fb      	ldr	r3, [r7, #28]
 801097c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010980:	2b00      	cmp	r3, #0
 8010982:	d002      	beq.n	801098a <udp_input+0x15a>
    for_us = 1;
 8010984:	2301      	movs	r3, #1
 8010986:	76fb      	strb	r3, [r7, #27]
 8010988:	e00a      	b.n	80109a0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	3304      	adds	r3, #4
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	4b2d      	ldr	r3, [pc, #180]	; (8010a48 <udp_input+0x218>)
 8010992:	695b      	ldr	r3, [r3, #20]
 8010994:	429a      	cmp	r2, r3
 8010996:	bf0c      	ite	eq
 8010998:	2301      	moveq	r3, #1
 801099a:	2300      	movne	r3, #0
 801099c:	b2db      	uxtb	r3, r3
 801099e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80109a0:	7efb      	ldrb	r3, [r7, #27]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d041      	beq.n	8010a2a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80109a6:	2108      	movs	r1, #8
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7fa f8d5 	bl	800ab58 <pbuf_remove_header>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d00a      	beq.n	80109ca <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80109b4:	4b20      	ldr	r3, [pc, #128]	; (8010a38 <udp_input+0x208>)
 80109b6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80109ba:	4925      	ldr	r1, [pc, #148]	; (8010a50 <udp_input+0x220>)
 80109bc:	4820      	ldr	r0, [pc, #128]	; (8010a40 <udp_input+0x210>)
 80109be:	f002 fe2f 	bl	8013620 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f7fa f94e 	bl	800ac64 <pbuf_free>
      goto end;
 80109c8:	e032      	b.n	8010a30 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80109ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d012      	beq.n	80109f6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80109d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d2:	699b      	ldr	r3, [r3, #24]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d00a      	beq.n	80109ee <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80109d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109da:	699c      	ldr	r4, [r3, #24]
 80109dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109de:	69d8      	ldr	r0, [r3, #28]
 80109e0:	8a3b      	ldrh	r3, [r7, #16]
 80109e2:	9300      	str	r3, [sp, #0]
 80109e4:	4b1b      	ldr	r3, [pc, #108]	; (8010a54 <udp_input+0x224>)
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109ea:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80109ec:	e021      	b.n	8010a32 <udp_input+0x202>
        pbuf_free(p);
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f7fa f938 	bl	800ac64 <pbuf_free>
        goto end;
 80109f4:	e01c      	b.n	8010a30 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80109f6:	7cfb      	ldrb	r3, [r7, #19]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d112      	bne.n	8010a22 <udp_input+0x1f2>
 80109fc:	4b12      	ldr	r3, [pc, #72]	; (8010a48 <udp_input+0x218>)
 80109fe:	695b      	ldr	r3, [r3, #20]
 8010a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a04:	2be0      	cmp	r3, #224	; 0xe0
 8010a06:	d00c      	beq.n	8010a22 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010a08:	4b0f      	ldr	r3, [pc, #60]	; (8010a48 <udp_input+0x218>)
 8010a0a:	899b      	ldrh	r3, [r3, #12]
 8010a0c:	3308      	adds	r3, #8
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	b21b      	sxth	r3, r3
 8010a12:	4619      	mov	r1, r3
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f7fa f912 	bl	800ac3e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010a1a:	2103      	movs	r1, #3
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f001 f89b 	bl	8011b58 <icmp_dest_unreach>
      pbuf_free(p);
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f7fa f91e 	bl	800ac64 <pbuf_free>
  return;
 8010a28:	e003      	b.n	8010a32 <udp_input+0x202>
    pbuf_free(p);
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7fa f91a 	bl	800ac64 <pbuf_free>
  return;
 8010a30:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010a32:	372c      	adds	r7, #44	; 0x2c
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd90      	pop	{r4, r7, pc}
 8010a38:	080165bc 	.word	0x080165bc
 8010a3c:	08016660 	.word	0x08016660
 8010a40:	08016610 	.word	0x08016610
 8010a44:	08016678 	.word	0x08016678
 8010a48:	200092d0 	.word	0x200092d0
 8010a4c:	2000ca80 	.word	0x2000ca80
 8010a50:	08016694 	.word	0x08016694
 8010a54:	200092e0 	.word	0x200092e0

08010a58 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b085      	sub	sp, #20
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d01e      	beq.n	8010aa6 <udp_netif_ip_addr_changed+0x4e>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d01a      	beq.n	8010aa6 <udp_netif_ip_addr_changed+0x4e>
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d017      	beq.n	8010aa6 <udp_netif_ip_addr_changed+0x4e>
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d013      	beq.n	8010aa6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010a7e:	4b0d      	ldr	r3, [pc, #52]	; (8010ab4 <udp_netif_ip_addr_changed+0x5c>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	60fb      	str	r3, [r7, #12]
 8010a84:	e00c      	b.n	8010aa0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	681a      	ldr	r2, [r3, #0]
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d103      	bne.n	8010a9a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	681a      	ldr	r2, [r3, #0]
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	68db      	ldr	r3, [r3, #12]
 8010a9e:	60fb      	str	r3, [r7, #12]
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d1ef      	bne.n	8010a86 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010aa6:	bf00      	nop
 8010aa8:	3714      	adds	r7, #20
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab0:	4770      	bx	lr
 8010ab2:	bf00      	nop
 8010ab4:	2000ca80 	.word	0x2000ca80

08010ab8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b082      	sub	sp, #8
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010ac0:	4915      	ldr	r1, [pc, #84]	; (8010b18 <etharp_free_entry+0x60>)
 8010ac2:	687a      	ldr	r2, [r7, #4]
 8010ac4:	4613      	mov	r3, r2
 8010ac6:	005b      	lsls	r3, r3, #1
 8010ac8:	4413      	add	r3, r2
 8010aca:	00db      	lsls	r3, r3, #3
 8010acc:	440b      	add	r3, r1
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d013      	beq.n	8010afc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010ad4:	4910      	ldr	r1, [pc, #64]	; (8010b18 <etharp_free_entry+0x60>)
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	4613      	mov	r3, r2
 8010ada:	005b      	lsls	r3, r3, #1
 8010adc:	4413      	add	r3, r2
 8010ade:	00db      	lsls	r3, r3, #3
 8010ae0:	440b      	add	r3, r1
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7fa f8bd 	bl	800ac64 <pbuf_free>
    arp_table[i].q = NULL;
 8010aea:	490b      	ldr	r1, [pc, #44]	; (8010b18 <etharp_free_entry+0x60>)
 8010aec:	687a      	ldr	r2, [r7, #4]
 8010aee:	4613      	mov	r3, r2
 8010af0:	005b      	lsls	r3, r3, #1
 8010af2:	4413      	add	r3, r2
 8010af4:	00db      	lsls	r3, r3, #3
 8010af6:	440b      	add	r3, r1
 8010af8:	2200      	movs	r2, #0
 8010afa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010afc:	4906      	ldr	r1, [pc, #24]	; (8010b18 <etharp_free_entry+0x60>)
 8010afe:	687a      	ldr	r2, [r7, #4]
 8010b00:	4613      	mov	r3, r2
 8010b02:	005b      	lsls	r3, r3, #1
 8010b04:	4413      	add	r3, r2
 8010b06:	00db      	lsls	r3, r3, #3
 8010b08:	440b      	add	r3, r1
 8010b0a:	3314      	adds	r3, #20
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010b10:	bf00      	nop
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	2000ca84 	.word	0x2000ca84

08010b1c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b082      	sub	sp, #8
 8010b20:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b22:	2300      	movs	r3, #0
 8010b24:	607b      	str	r3, [r7, #4]
 8010b26:	e096      	b.n	8010c56 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010b28:	494f      	ldr	r1, [pc, #316]	; (8010c68 <etharp_tmr+0x14c>)
 8010b2a:	687a      	ldr	r2, [r7, #4]
 8010b2c:	4613      	mov	r3, r2
 8010b2e:	005b      	lsls	r3, r3, #1
 8010b30:	4413      	add	r3, r2
 8010b32:	00db      	lsls	r3, r3, #3
 8010b34:	440b      	add	r3, r1
 8010b36:	3314      	adds	r3, #20
 8010b38:	781b      	ldrb	r3, [r3, #0]
 8010b3a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010b3c:	78fb      	ldrb	r3, [r7, #3]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	f000 8086 	beq.w	8010c50 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010b44:	4948      	ldr	r1, [pc, #288]	; (8010c68 <etharp_tmr+0x14c>)
 8010b46:	687a      	ldr	r2, [r7, #4]
 8010b48:	4613      	mov	r3, r2
 8010b4a:	005b      	lsls	r3, r3, #1
 8010b4c:	4413      	add	r3, r2
 8010b4e:	00db      	lsls	r3, r3, #3
 8010b50:	440b      	add	r3, r1
 8010b52:	3312      	adds	r3, #18
 8010b54:	881b      	ldrh	r3, [r3, #0]
 8010b56:	3301      	adds	r3, #1
 8010b58:	b298      	uxth	r0, r3
 8010b5a:	4943      	ldr	r1, [pc, #268]	; (8010c68 <etharp_tmr+0x14c>)
 8010b5c:	687a      	ldr	r2, [r7, #4]
 8010b5e:	4613      	mov	r3, r2
 8010b60:	005b      	lsls	r3, r3, #1
 8010b62:	4413      	add	r3, r2
 8010b64:	00db      	lsls	r3, r3, #3
 8010b66:	440b      	add	r3, r1
 8010b68:	3312      	adds	r3, #18
 8010b6a:	4602      	mov	r2, r0
 8010b6c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010b6e:	493e      	ldr	r1, [pc, #248]	; (8010c68 <etharp_tmr+0x14c>)
 8010b70:	687a      	ldr	r2, [r7, #4]
 8010b72:	4613      	mov	r3, r2
 8010b74:	005b      	lsls	r3, r3, #1
 8010b76:	4413      	add	r3, r2
 8010b78:	00db      	lsls	r3, r3, #3
 8010b7a:	440b      	add	r3, r1
 8010b7c:	3312      	adds	r3, #18
 8010b7e:	881b      	ldrh	r3, [r3, #0]
 8010b80:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010b84:	d215      	bcs.n	8010bb2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010b86:	4938      	ldr	r1, [pc, #224]	; (8010c68 <etharp_tmr+0x14c>)
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	4613      	mov	r3, r2
 8010b8c:	005b      	lsls	r3, r3, #1
 8010b8e:	4413      	add	r3, r2
 8010b90:	00db      	lsls	r3, r3, #3
 8010b92:	440b      	add	r3, r1
 8010b94:	3314      	adds	r3, #20
 8010b96:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	d10e      	bne.n	8010bba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010b9c:	4932      	ldr	r1, [pc, #200]	; (8010c68 <etharp_tmr+0x14c>)
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	005b      	lsls	r3, r3, #1
 8010ba4:	4413      	add	r3, r2
 8010ba6:	00db      	lsls	r3, r3, #3
 8010ba8:	440b      	add	r3, r1
 8010baa:	3312      	adds	r3, #18
 8010bac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010bae:	2b04      	cmp	r3, #4
 8010bb0:	d903      	bls.n	8010bba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f7ff ff80 	bl	8010ab8 <etharp_free_entry>
 8010bb8:	e04a      	b.n	8010c50 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010bba:	492b      	ldr	r1, [pc, #172]	; (8010c68 <etharp_tmr+0x14c>)
 8010bbc:	687a      	ldr	r2, [r7, #4]
 8010bbe:	4613      	mov	r3, r2
 8010bc0:	005b      	lsls	r3, r3, #1
 8010bc2:	4413      	add	r3, r2
 8010bc4:	00db      	lsls	r3, r3, #3
 8010bc6:	440b      	add	r3, r1
 8010bc8:	3314      	adds	r3, #20
 8010bca:	781b      	ldrb	r3, [r3, #0]
 8010bcc:	2b03      	cmp	r3, #3
 8010bce:	d10a      	bne.n	8010be6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010bd0:	4925      	ldr	r1, [pc, #148]	; (8010c68 <etharp_tmr+0x14c>)
 8010bd2:	687a      	ldr	r2, [r7, #4]
 8010bd4:	4613      	mov	r3, r2
 8010bd6:	005b      	lsls	r3, r3, #1
 8010bd8:	4413      	add	r3, r2
 8010bda:	00db      	lsls	r3, r3, #3
 8010bdc:	440b      	add	r3, r1
 8010bde:	3314      	adds	r3, #20
 8010be0:	2204      	movs	r2, #4
 8010be2:	701a      	strb	r2, [r3, #0]
 8010be4:	e034      	b.n	8010c50 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010be6:	4920      	ldr	r1, [pc, #128]	; (8010c68 <etharp_tmr+0x14c>)
 8010be8:	687a      	ldr	r2, [r7, #4]
 8010bea:	4613      	mov	r3, r2
 8010bec:	005b      	lsls	r3, r3, #1
 8010bee:	4413      	add	r3, r2
 8010bf0:	00db      	lsls	r3, r3, #3
 8010bf2:	440b      	add	r3, r1
 8010bf4:	3314      	adds	r3, #20
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	2b04      	cmp	r3, #4
 8010bfa:	d10a      	bne.n	8010c12 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010bfc:	491a      	ldr	r1, [pc, #104]	; (8010c68 <etharp_tmr+0x14c>)
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	4613      	mov	r3, r2
 8010c02:	005b      	lsls	r3, r3, #1
 8010c04:	4413      	add	r3, r2
 8010c06:	00db      	lsls	r3, r3, #3
 8010c08:	440b      	add	r3, r1
 8010c0a:	3314      	adds	r3, #20
 8010c0c:	2202      	movs	r2, #2
 8010c0e:	701a      	strb	r2, [r3, #0]
 8010c10:	e01e      	b.n	8010c50 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010c12:	4915      	ldr	r1, [pc, #84]	; (8010c68 <etharp_tmr+0x14c>)
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	4613      	mov	r3, r2
 8010c18:	005b      	lsls	r3, r3, #1
 8010c1a:	4413      	add	r3, r2
 8010c1c:	00db      	lsls	r3, r3, #3
 8010c1e:	440b      	add	r3, r1
 8010c20:	3314      	adds	r3, #20
 8010c22:	781b      	ldrb	r3, [r3, #0]
 8010c24:	2b01      	cmp	r3, #1
 8010c26:	d113      	bne.n	8010c50 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010c28:	490f      	ldr	r1, [pc, #60]	; (8010c68 <etharp_tmr+0x14c>)
 8010c2a:	687a      	ldr	r2, [r7, #4]
 8010c2c:	4613      	mov	r3, r2
 8010c2e:	005b      	lsls	r3, r3, #1
 8010c30:	4413      	add	r3, r2
 8010c32:	00db      	lsls	r3, r3, #3
 8010c34:	440b      	add	r3, r1
 8010c36:	3308      	adds	r3, #8
 8010c38:	6818      	ldr	r0, [r3, #0]
 8010c3a:	687a      	ldr	r2, [r7, #4]
 8010c3c:	4613      	mov	r3, r2
 8010c3e:	005b      	lsls	r3, r3, #1
 8010c40:	4413      	add	r3, r2
 8010c42:	00db      	lsls	r3, r3, #3
 8010c44:	4a08      	ldr	r2, [pc, #32]	; (8010c68 <etharp_tmr+0x14c>)
 8010c46:	4413      	add	r3, r2
 8010c48:	3304      	adds	r3, #4
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	f000 fe6e 	bl	801192c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	3301      	adds	r3, #1
 8010c54:	607b      	str	r3, [r7, #4]
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	2b09      	cmp	r3, #9
 8010c5a:	f77f af65 	ble.w	8010b28 <etharp_tmr+0xc>
      }
    }
  }
}
 8010c5e:	bf00      	nop
 8010c60:	bf00      	nop
 8010c62:	3708      	adds	r7, #8
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}
 8010c68:	2000ca84 	.word	0x2000ca84

08010c6c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b08a      	sub	sp, #40	; 0x28
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	60f8      	str	r0, [r7, #12]
 8010c74:	460b      	mov	r3, r1
 8010c76:	607a      	str	r2, [r7, #4]
 8010c78:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010c7a:	230a      	movs	r3, #10
 8010c7c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010c7e:	230a      	movs	r3, #10
 8010c80:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010c82:	230a      	movs	r3, #10
 8010c84:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010c86:	2300      	movs	r3, #0
 8010c88:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010c8a:	230a      	movs	r3, #10
 8010c8c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	83bb      	strh	r3, [r7, #28]
 8010c92:	2300      	movs	r3, #0
 8010c94:	837b      	strh	r3, [r7, #26]
 8010c96:	2300      	movs	r3, #0
 8010c98:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	843b      	strh	r3, [r7, #32]
 8010c9e:	e0ae      	b.n	8010dfe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010ca0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ca4:	49a6      	ldr	r1, [pc, #664]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	005b      	lsls	r3, r3, #1
 8010caa:	4413      	add	r3, r2
 8010cac:	00db      	lsls	r3, r3, #3
 8010cae:	440b      	add	r3, r1
 8010cb0:	3314      	adds	r3, #20
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010cb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010cba:	2b0a      	cmp	r3, #10
 8010cbc:	d105      	bne.n	8010cca <etharp_find_entry+0x5e>
 8010cbe:	7dfb      	ldrb	r3, [r7, #23]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d102      	bne.n	8010cca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010cc4:	8c3b      	ldrh	r3, [r7, #32]
 8010cc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8010cc8:	e095      	b.n	8010df6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010cca:	7dfb      	ldrb	r3, [r7, #23]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	f000 8092 	beq.w	8010df6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010cd2:	7dfb      	ldrb	r3, [r7, #23]
 8010cd4:	2b01      	cmp	r3, #1
 8010cd6:	d009      	beq.n	8010cec <etharp_find_entry+0x80>
 8010cd8:	7dfb      	ldrb	r3, [r7, #23]
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d806      	bhi.n	8010cec <etharp_find_entry+0x80>
 8010cde:	4b99      	ldr	r3, [pc, #612]	; (8010f44 <etharp_find_entry+0x2d8>)
 8010ce0:	f240 1223 	movw	r2, #291	; 0x123
 8010ce4:	4998      	ldr	r1, [pc, #608]	; (8010f48 <etharp_find_entry+0x2dc>)
 8010ce6:	4899      	ldr	r0, [pc, #612]	; (8010f4c <etharp_find_entry+0x2e0>)
 8010ce8:	f002 fc9a 	bl	8013620 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d020      	beq.n	8010d34 <etharp_find_entry+0xc8>
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	6819      	ldr	r1, [r3, #0]
 8010cf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cfa:	4891      	ldr	r0, [pc, #580]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010cfc:	4613      	mov	r3, r2
 8010cfe:	005b      	lsls	r3, r3, #1
 8010d00:	4413      	add	r3, r2
 8010d02:	00db      	lsls	r3, r3, #3
 8010d04:	4403      	add	r3, r0
 8010d06:	3304      	adds	r3, #4
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4299      	cmp	r1, r3
 8010d0c:	d112      	bne.n	8010d34 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d00c      	beq.n	8010d2e <etharp_find_entry+0xc2>
 8010d14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d18:	4989      	ldr	r1, [pc, #548]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	005b      	lsls	r3, r3, #1
 8010d1e:	4413      	add	r3, r2
 8010d20:	00db      	lsls	r3, r3, #3
 8010d22:	440b      	add	r3, r1
 8010d24:	3308      	adds	r3, #8
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	687a      	ldr	r2, [r7, #4]
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d102      	bne.n	8010d34 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010d2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010d32:	e100      	b.n	8010f36 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010d34:	7dfb      	ldrb	r3, [r7, #23]
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d140      	bne.n	8010dbc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010d3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d3e:	4980      	ldr	r1, [pc, #512]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010d40:	4613      	mov	r3, r2
 8010d42:	005b      	lsls	r3, r3, #1
 8010d44:	4413      	add	r3, r2
 8010d46:	00db      	lsls	r3, r3, #3
 8010d48:	440b      	add	r3, r1
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d01a      	beq.n	8010d86 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010d50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d54:	497a      	ldr	r1, [pc, #488]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010d56:	4613      	mov	r3, r2
 8010d58:	005b      	lsls	r3, r3, #1
 8010d5a:	4413      	add	r3, r2
 8010d5c:	00db      	lsls	r3, r3, #3
 8010d5e:	440b      	add	r3, r1
 8010d60:	3312      	adds	r3, #18
 8010d62:	881b      	ldrh	r3, [r3, #0]
 8010d64:	8bba      	ldrh	r2, [r7, #28]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d845      	bhi.n	8010df6 <etharp_find_entry+0x18a>
            old_queue = i;
 8010d6a:	8c3b      	ldrh	r3, [r7, #32]
 8010d6c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010d6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d72:	4973      	ldr	r1, [pc, #460]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010d74:	4613      	mov	r3, r2
 8010d76:	005b      	lsls	r3, r3, #1
 8010d78:	4413      	add	r3, r2
 8010d7a:	00db      	lsls	r3, r3, #3
 8010d7c:	440b      	add	r3, r1
 8010d7e:	3312      	adds	r3, #18
 8010d80:	881b      	ldrh	r3, [r3, #0]
 8010d82:	83bb      	strh	r3, [r7, #28]
 8010d84:	e037      	b.n	8010df6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010d86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d8a:	496d      	ldr	r1, [pc, #436]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010d8c:	4613      	mov	r3, r2
 8010d8e:	005b      	lsls	r3, r3, #1
 8010d90:	4413      	add	r3, r2
 8010d92:	00db      	lsls	r3, r3, #3
 8010d94:	440b      	add	r3, r1
 8010d96:	3312      	adds	r3, #18
 8010d98:	881b      	ldrh	r3, [r3, #0]
 8010d9a:	8b7a      	ldrh	r2, [r7, #26]
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d82a      	bhi.n	8010df6 <etharp_find_entry+0x18a>
            old_pending = i;
 8010da0:	8c3b      	ldrh	r3, [r7, #32]
 8010da2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010da4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010da8:	4965      	ldr	r1, [pc, #404]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010daa:	4613      	mov	r3, r2
 8010dac:	005b      	lsls	r3, r3, #1
 8010dae:	4413      	add	r3, r2
 8010db0:	00db      	lsls	r3, r3, #3
 8010db2:	440b      	add	r3, r1
 8010db4:	3312      	adds	r3, #18
 8010db6:	881b      	ldrh	r3, [r3, #0]
 8010db8:	837b      	strh	r3, [r7, #26]
 8010dba:	e01c      	b.n	8010df6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010dbc:	7dfb      	ldrb	r3, [r7, #23]
 8010dbe:	2b01      	cmp	r3, #1
 8010dc0:	d919      	bls.n	8010df6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010dc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010dc6:	495e      	ldr	r1, [pc, #376]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010dc8:	4613      	mov	r3, r2
 8010dca:	005b      	lsls	r3, r3, #1
 8010dcc:	4413      	add	r3, r2
 8010dce:	00db      	lsls	r3, r3, #3
 8010dd0:	440b      	add	r3, r1
 8010dd2:	3312      	adds	r3, #18
 8010dd4:	881b      	ldrh	r3, [r3, #0]
 8010dd6:	8b3a      	ldrh	r2, [r7, #24]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d80c      	bhi.n	8010df6 <etharp_find_entry+0x18a>
            old_stable = i;
 8010ddc:	8c3b      	ldrh	r3, [r7, #32]
 8010dde:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010de0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010de4:	4956      	ldr	r1, [pc, #344]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010de6:	4613      	mov	r3, r2
 8010de8:	005b      	lsls	r3, r3, #1
 8010dea:	4413      	add	r3, r2
 8010dec:	00db      	lsls	r3, r3, #3
 8010dee:	440b      	add	r3, r1
 8010df0:	3312      	adds	r3, #18
 8010df2:	881b      	ldrh	r3, [r3, #0]
 8010df4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010df6:	8c3b      	ldrh	r3, [r7, #32]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	b29b      	uxth	r3, r3
 8010dfc:	843b      	strh	r3, [r7, #32]
 8010dfe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e02:	2b09      	cmp	r3, #9
 8010e04:	f77f af4c 	ble.w	8010ca0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010e08:	7afb      	ldrb	r3, [r7, #11]
 8010e0a:	f003 0302 	and.w	r3, r3, #2
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d108      	bne.n	8010e24 <etharp_find_entry+0x1b8>
 8010e12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010e16:	2b0a      	cmp	r3, #10
 8010e18:	d107      	bne.n	8010e2a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010e1a:	7afb      	ldrb	r3, [r7, #11]
 8010e1c:	f003 0301 	and.w	r3, r3, #1
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d102      	bne.n	8010e2a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010e24:	f04f 33ff 	mov.w	r3, #4294967295
 8010e28:	e085      	b.n	8010f36 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010e2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010e2e:	2b09      	cmp	r3, #9
 8010e30:	dc02      	bgt.n	8010e38 <etharp_find_entry+0x1cc>
    i = empty;
 8010e32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e34:	843b      	strh	r3, [r7, #32]
 8010e36:	e039      	b.n	8010eac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010e38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010e3c:	2b09      	cmp	r3, #9
 8010e3e:	dc14      	bgt.n	8010e6a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e42:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010e44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e48:	493d      	ldr	r1, [pc, #244]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010e4a:	4613      	mov	r3, r2
 8010e4c:	005b      	lsls	r3, r3, #1
 8010e4e:	4413      	add	r3, r2
 8010e50:	00db      	lsls	r3, r3, #3
 8010e52:	440b      	add	r3, r1
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d018      	beq.n	8010e8c <etharp_find_entry+0x220>
 8010e5a:	4b3a      	ldr	r3, [pc, #232]	; (8010f44 <etharp_find_entry+0x2d8>)
 8010e5c:	f240 126d 	movw	r2, #365	; 0x16d
 8010e60:	493b      	ldr	r1, [pc, #236]	; (8010f50 <etharp_find_entry+0x2e4>)
 8010e62:	483a      	ldr	r0, [pc, #232]	; (8010f4c <etharp_find_entry+0x2e0>)
 8010e64:	f002 fbdc 	bl	8013620 <iprintf>
 8010e68:	e010      	b.n	8010e8c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010e6a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010e6e:	2b09      	cmp	r3, #9
 8010e70:	dc02      	bgt.n	8010e78 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010e72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010e74:	843b      	strh	r3, [r7, #32]
 8010e76:	e009      	b.n	8010e8c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010e78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010e7c:	2b09      	cmp	r3, #9
 8010e7e:	dc02      	bgt.n	8010e86 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010e80:	8bfb      	ldrh	r3, [r7, #30]
 8010e82:	843b      	strh	r3, [r7, #32]
 8010e84:	e002      	b.n	8010e8c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010e86:	f04f 33ff 	mov.w	r3, #4294967295
 8010e8a:	e054      	b.n	8010f36 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010e8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e90:	2b09      	cmp	r3, #9
 8010e92:	dd06      	ble.n	8010ea2 <etharp_find_entry+0x236>
 8010e94:	4b2b      	ldr	r3, [pc, #172]	; (8010f44 <etharp_find_entry+0x2d8>)
 8010e96:	f240 127f 	movw	r2, #383	; 0x17f
 8010e9a:	492e      	ldr	r1, [pc, #184]	; (8010f54 <etharp_find_entry+0x2e8>)
 8010e9c:	482b      	ldr	r0, [pc, #172]	; (8010f4c <etharp_find_entry+0x2e0>)
 8010e9e:	f002 fbbf 	bl	8013620 <iprintf>
    etharp_free_entry(i);
 8010ea2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7ff fe06 	bl	8010ab8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010eac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010eb0:	2b09      	cmp	r3, #9
 8010eb2:	dd06      	ble.n	8010ec2 <etharp_find_entry+0x256>
 8010eb4:	4b23      	ldr	r3, [pc, #140]	; (8010f44 <etharp_find_entry+0x2d8>)
 8010eb6:	f240 1283 	movw	r2, #387	; 0x183
 8010eba:	4926      	ldr	r1, [pc, #152]	; (8010f54 <etharp_find_entry+0x2e8>)
 8010ebc:	4823      	ldr	r0, [pc, #140]	; (8010f4c <etharp_find_entry+0x2e0>)
 8010ebe:	f002 fbaf 	bl	8013620 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010ec2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ec6:	491e      	ldr	r1, [pc, #120]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010ec8:	4613      	mov	r3, r2
 8010eca:	005b      	lsls	r3, r3, #1
 8010ecc:	4413      	add	r3, r2
 8010ece:	00db      	lsls	r3, r3, #3
 8010ed0:	440b      	add	r3, r1
 8010ed2:	3314      	adds	r3, #20
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d006      	beq.n	8010ee8 <etharp_find_entry+0x27c>
 8010eda:	4b1a      	ldr	r3, [pc, #104]	; (8010f44 <etharp_find_entry+0x2d8>)
 8010edc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010ee0:	491d      	ldr	r1, [pc, #116]	; (8010f58 <etharp_find_entry+0x2ec>)
 8010ee2:	481a      	ldr	r0, [pc, #104]	; (8010f4c <etharp_find_entry+0x2e0>)
 8010ee4:	f002 fb9c 	bl	8013620 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d00b      	beq.n	8010f06 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010eee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	6819      	ldr	r1, [r3, #0]
 8010ef6:	4812      	ldr	r0, [pc, #72]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010ef8:	4613      	mov	r3, r2
 8010efa:	005b      	lsls	r3, r3, #1
 8010efc:	4413      	add	r3, r2
 8010efe:	00db      	lsls	r3, r3, #3
 8010f00:	4403      	add	r3, r0
 8010f02:	3304      	adds	r3, #4
 8010f04:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010f06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f0a:	490d      	ldr	r1, [pc, #52]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010f0c:	4613      	mov	r3, r2
 8010f0e:	005b      	lsls	r3, r3, #1
 8010f10:	4413      	add	r3, r2
 8010f12:	00db      	lsls	r3, r3, #3
 8010f14:	440b      	add	r3, r1
 8010f16:	3312      	adds	r3, #18
 8010f18:	2200      	movs	r2, #0
 8010f1a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010f1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f20:	4907      	ldr	r1, [pc, #28]	; (8010f40 <etharp_find_entry+0x2d4>)
 8010f22:	4613      	mov	r3, r2
 8010f24:	005b      	lsls	r3, r3, #1
 8010f26:	4413      	add	r3, r2
 8010f28:	00db      	lsls	r3, r3, #3
 8010f2a:	440b      	add	r3, r1
 8010f2c:	3308      	adds	r3, #8
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010f32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3728      	adds	r7, #40	; 0x28
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	2000ca84 	.word	0x2000ca84
 8010f44:	08016920 	.word	0x08016920
 8010f48:	08016958 	.word	0x08016958
 8010f4c:	08016998 	.word	0x08016998
 8010f50:	080169c0 	.word	0x080169c0
 8010f54:	080169d8 	.word	0x080169d8
 8010f58:	080169ec 	.word	0x080169ec

08010f5c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b088      	sub	sp, #32
 8010f60:	af02      	add	r7, sp, #8
 8010f62:	60f8      	str	r0, [r7, #12]
 8010f64:	60b9      	str	r1, [r7, #8]
 8010f66:	607a      	str	r2, [r7, #4]
 8010f68:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010f70:	2b06      	cmp	r3, #6
 8010f72:	d006      	beq.n	8010f82 <etharp_update_arp_entry+0x26>
 8010f74:	4b48      	ldr	r3, [pc, #288]	; (8011098 <etharp_update_arp_entry+0x13c>)
 8010f76:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010f7a:	4948      	ldr	r1, [pc, #288]	; (801109c <etharp_update_arp_entry+0x140>)
 8010f7c:	4848      	ldr	r0, [pc, #288]	; (80110a0 <etharp_update_arp_entry+0x144>)
 8010f7e:	f002 fb4f 	bl	8013620 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d012      	beq.n	8010fae <etharp_update_arp_entry+0x52>
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d00e      	beq.n	8010fae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	68f9      	ldr	r1, [r7, #12]
 8010f96:	4618      	mov	r0, r3
 8010f98:	f001 f8fe 	bl	8012198 <ip4_addr_isbroadcast_u32>
 8010f9c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d105      	bne.n	8010fae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010faa:	2be0      	cmp	r3, #224	; 0xe0
 8010fac:	d102      	bne.n	8010fb4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010fae:	f06f 030f 	mvn.w	r3, #15
 8010fb2:	e06c      	b.n	801108e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010fb4:	78fb      	ldrb	r3, [r7, #3]
 8010fb6:	68fa      	ldr	r2, [r7, #12]
 8010fb8:	4619      	mov	r1, r3
 8010fba:	68b8      	ldr	r0, [r7, #8]
 8010fbc:	f7ff fe56 	bl	8010c6c <etharp_find_entry>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010fc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	da02      	bge.n	8010fd2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010fcc:	8afb      	ldrh	r3, [r7, #22]
 8010fce:	b25b      	sxtb	r3, r3
 8010fd0:	e05d      	b.n	801108e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010fd2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010fd6:	4933      	ldr	r1, [pc, #204]	; (80110a4 <etharp_update_arp_entry+0x148>)
 8010fd8:	4613      	mov	r3, r2
 8010fda:	005b      	lsls	r3, r3, #1
 8010fdc:	4413      	add	r3, r2
 8010fde:	00db      	lsls	r3, r3, #3
 8010fe0:	440b      	add	r3, r1
 8010fe2:	3314      	adds	r3, #20
 8010fe4:	2202      	movs	r2, #2
 8010fe6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010fe8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010fec:	492d      	ldr	r1, [pc, #180]	; (80110a4 <etharp_update_arp_entry+0x148>)
 8010fee:	4613      	mov	r3, r2
 8010ff0:	005b      	lsls	r3, r3, #1
 8010ff2:	4413      	add	r3, r2
 8010ff4:	00db      	lsls	r3, r3, #3
 8010ff6:	440b      	add	r3, r1
 8010ff8:	3308      	adds	r3, #8
 8010ffa:	68fa      	ldr	r2, [r7, #12]
 8010ffc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010ffe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011002:	4613      	mov	r3, r2
 8011004:	005b      	lsls	r3, r3, #1
 8011006:	4413      	add	r3, r2
 8011008:	00db      	lsls	r3, r3, #3
 801100a:	3308      	adds	r3, #8
 801100c:	4a25      	ldr	r2, [pc, #148]	; (80110a4 <etharp_update_arp_entry+0x148>)
 801100e:	4413      	add	r3, r2
 8011010:	3304      	adds	r3, #4
 8011012:	2206      	movs	r2, #6
 8011014:	6879      	ldr	r1, [r7, #4]
 8011016:	4618      	mov	r0, r3
 8011018:	f002 fa57 	bl	80134ca <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801101c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011020:	4920      	ldr	r1, [pc, #128]	; (80110a4 <etharp_update_arp_entry+0x148>)
 8011022:	4613      	mov	r3, r2
 8011024:	005b      	lsls	r3, r3, #1
 8011026:	4413      	add	r3, r2
 8011028:	00db      	lsls	r3, r3, #3
 801102a:	440b      	add	r3, r1
 801102c:	3312      	adds	r3, #18
 801102e:	2200      	movs	r2, #0
 8011030:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011032:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011036:	491b      	ldr	r1, [pc, #108]	; (80110a4 <etharp_update_arp_entry+0x148>)
 8011038:	4613      	mov	r3, r2
 801103a:	005b      	lsls	r3, r3, #1
 801103c:	4413      	add	r3, r2
 801103e:	00db      	lsls	r3, r3, #3
 8011040:	440b      	add	r3, r1
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d021      	beq.n	801108c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011048:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801104c:	4915      	ldr	r1, [pc, #84]	; (80110a4 <etharp_update_arp_entry+0x148>)
 801104e:	4613      	mov	r3, r2
 8011050:	005b      	lsls	r3, r3, #1
 8011052:	4413      	add	r3, r2
 8011054:	00db      	lsls	r3, r3, #3
 8011056:	440b      	add	r3, r1
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801105c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011060:	4910      	ldr	r1, [pc, #64]	; (80110a4 <etharp_update_arp_entry+0x148>)
 8011062:	4613      	mov	r3, r2
 8011064:	005b      	lsls	r3, r3, #1
 8011066:	4413      	add	r3, r2
 8011068:	00db      	lsls	r3, r3, #3
 801106a:	440b      	add	r3, r1
 801106c:	2200      	movs	r2, #0
 801106e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011076:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801107a:	9300      	str	r3, [sp, #0]
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6939      	ldr	r1, [r7, #16]
 8011080:	68f8      	ldr	r0, [r7, #12]
 8011082:	f001 ff97 	bl	8012fb4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011086:	6938      	ldr	r0, [r7, #16]
 8011088:	f7f9 fdec 	bl	800ac64 <pbuf_free>
  }
  return ERR_OK;
 801108c:	2300      	movs	r3, #0
}
 801108e:	4618      	mov	r0, r3
 8011090:	3718      	adds	r7, #24
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}
 8011096:	bf00      	nop
 8011098:	08016920 	.word	0x08016920
 801109c:	08016a18 	.word	0x08016a18
 80110a0:	08016998 	.word	0x08016998
 80110a4:	2000ca84 	.word	0x2000ca84

080110a8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80110b0:	2300      	movs	r3, #0
 80110b2:	60fb      	str	r3, [r7, #12]
 80110b4:	e01e      	b.n	80110f4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80110b6:	4913      	ldr	r1, [pc, #76]	; (8011104 <etharp_cleanup_netif+0x5c>)
 80110b8:	68fa      	ldr	r2, [r7, #12]
 80110ba:	4613      	mov	r3, r2
 80110bc:	005b      	lsls	r3, r3, #1
 80110be:	4413      	add	r3, r2
 80110c0:	00db      	lsls	r3, r3, #3
 80110c2:	440b      	add	r3, r1
 80110c4:	3314      	adds	r3, #20
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80110ca:	7afb      	ldrb	r3, [r7, #11]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d00e      	beq.n	80110ee <etharp_cleanup_netif+0x46>
 80110d0:	490c      	ldr	r1, [pc, #48]	; (8011104 <etharp_cleanup_netif+0x5c>)
 80110d2:	68fa      	ldr	r2, [r7, #12]
 80110d4:	4613      	mov	r3, r2
 80110d6:	005b      	lsls	r3, r3, #1
 80110d8:	4413      	add	r3, r2
 80110da:	00db      	lsls	r3, r3, #3
 80110dc:	440b      	add	r3, r1
 80110de:	3308      	adds	r3, #8
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d102      	bne.n	80110ee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80110e8:	68f8      	ldr	r0, [r7, #12]
 80110ea:	f7ff fce5 	bl	8010ab8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	3301      	adds	r3, #1
 80110f2:	60fb      	str	r3, [r7, #12]
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2b09      	cmp	r3, #9
 80110f8:	dddd      	ble.n	80110b6 <etharp_cleanup_netif+0xe>
    }
  }
}
 80110fa:	bf00      	nop
 80110fc:	bf00      	nop
 80110fe:	3710      	adds	r7, #16
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	2000ca84 	.word	0x2000ca84

08011108 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011108:	b5b0      	push	{r4, r5, r7, lr}
 801110a:	b08a      	sub	sp, #40	; 0x28
 801110c:	af04      	add	r7, sp, #16
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d107      	bne.n	8011128 <etharp_input+0x20>
 8011118:	4b3d      	ldr	r3, [pc, #244]	; (8011210 <etharp_input+0x108>)
 801111a:	f240 228a 	movw	r2, #650	; 0x28a
 801111e:	493d      	ldr	r1, [pc, #244]	; (8011214 <etharp_input+0x10c>)
 8011120:	483d      	ldr	r0, [pc, #244]	; (8011218 <etharp_input+0x110>)
 8011122:	f002 fa7d 	bl	8013620 <iprintf>
 8011126:	e06f      	b.n	8011208 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	685b      	ldr	r3, [r3, #4]
 801112c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	881b      	ldrh	r3, [r3, #0]
 8011132:	b29b      	uxth	r3, r3
 8011134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011138:	d10c      	bne.n	8011154 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801113e:	2b06      	cmp	r3, #6
 8011140:	d108      	bne.n	8011154 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011146:	2b04      	cmp	r3, #4
 8011148:	d104      	bne.n	8011154 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	885b      	ldrh	r3, [r3, #2]
 801114e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011150:	2b08      	cmp	r3, #8
 8011152:	d003      	beq.n	801115c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f7f9 fd85 	bl	800ac64 <pbuf_free>
    return;
 801115a:	e055      	b.n	8011208 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	330e      	adds	r3, #14
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	3318      	adds	r3, #24
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	3304      	adds	r3, #4
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d102      	bne.n	801117c <etharp_input+0x74>
    for_us = 0;
 8011176:	2300      	movs	r3, #0
 8011178:	75fb      	strb	r3, [r7, #23]
 801117a:	e009      	b.n	8011190 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801117c:	68ba      	ldr	r2, [r7, #8]
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	3304      	adds	r3, #4
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	429a      	cmp	r2, r3
 8011186:	bf0c      	ite	eq
 8011188:	2301      	moveq	r3, #1
 801118a:	2300      	movne	r3, #0
 801118c:	b2db      	uxtb	r3, r3
 801118e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	f103 0208 	add.w	r2, r3, #8
 8011196:	7dfb      	ldrb	r3, [r7, #23]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d001      	beq.n	80111a0 <etharp_input+0x98>
 801119c:	2301      	movs	r3, #1
 801119e:	e000      	b.n	80111a2 <etharp_input+0x9a>
 80111a0:	2302      	movs	r3, #2
 80111a2:	f107 010c 	add.w	r1, r7, #12
 80111a6:	6838      	ldr	r0, [r7, #0]
 80111a8:	f7ff fed8 	bl	8010f5c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	88db      	ldrh	r3, [r3, #6]
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80111b6:	d003      	beq.n	80111c0 <etharp_input+0xb8>
 80111b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111bc:	d01e      	beq.n	80111fc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80111be:	e020      	b.n	8011202 <etharp_input+0xfa>
      if (for_us) {
 80111c0:	7dfb      	ldrb	r3, [r7, #23]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d01c      	beq.n	8011200 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80111dc:	693a      	ldr	r2, [r7, #16]
 80111de:	3208      	adds	r2, #8
        etharp_raw(netif,
 80111e0:	2102      	movs	r1, #2
 80111e2:	9103      	str	r1, [sp, #12]
 80111e4:	f107 010c 	add.w	r1, r7, #12
 80111e8:	9102      	str	r1, [sp, #8]
 80111ea:	9201      	str	r2, [sp, #4]
 80111ec:	9300      	str	r3, [sp, #0]
 80111ee:	462b      	mov	r3, r5
 80111f0:	4622      	mov	r2, r4
 80111f2:	4601      	mov	r1, r0
 80111f4:	6838      	ldr	r0, [r7, #0]
 80111f6:	f000 faeb 	bl	80117d0 <etharp_raw>
      break;
 80111fa:	e001      	b.n	8011200 <etharp_input+0xf8>
      break;
 80111fc:	bf00      	nop
 80111fe:	e000      	b.n	8011202 <etharp_input+0xfa>
      break;
 8011200:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f7f9 fd2e 	bl	800ac64 <pbuf_free>
}
 8011208:	3718      	adds	r7, #24
 801120a:	46bd      	mov	sp, r7
 801120c:	bdb0      	pop	{r4, r5, r7, pc}
 801120e:	bf00      	nop
 8011210:	08016920 	.word	0x08016920
 8011214:	08016a70 	.word	0x08016a70
 8011218:	08016998 	.word	0x08016998

0801121c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b086      	sub	sp, #24
 8011220:	af02      	add	r7, sp, #8
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	4613      	mov	r3, r2
 8011228:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801122a:	79fa      	ldrb	r2, [r7, #7]
 801122c:	4944      	ldr	r1, [pc, #272]	; (8011340 <etharp_output_to_arp_index+0x124>)
 801122e:	4613      	mov	r3, r2
 8011230:	005b      	lsls	r3, r3, #1
 8011232:	4413      	add	r3, r2
 8011234:	00db      	lsls	r3, r3, #3
 8011236:	440b      	add	r3, r1
 8011238:	3314      	adds	r3, #20
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	2b01      	cmp	r3, #1
 801123e:	d806      	bhi.n	801124e <etharp_output_to_arp_index+0x32>
 8011240:	4b40      	ldr	r3, [pc, #256]	; (8011344 <etharp_output_to_arp_index+0x128>)
 8011242:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011246:	4940      	ldr	r1, [pc, #256]	; (8011348 <etharp_output_to_arp_index+0x12c>)
 8011248:	4840      	ldr	r0, [pc, #256]	; (801134c <etharp_output_to_arp_index+0x130>)
 801124a:	f002 f9e9 	bl	8013620 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801124e:	79fa      	ldrb	r2, [r7, #7]
 8011250:	493b      	ldr	r1, [pc, #236]	; (8011340 <etharp_output_to_arp_index+0x124>)
 8011252:	4613      	mov	r3, r2
 8011254:	005b      	lsls	r3, r3, #1
 8011256:	4413      	add	r3, r2
 8011258:	00db      	lsls	r3, r3, #3
 801125a:	440b      	add	r3, r1
 801125c:	3314      	adds	r3, #20
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	2b02      	cmp	r3, #2
 8011262:	d153      	bne.n	801130c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011264:	79fa      	ldrb	r2, [r7, #7]
 8011266:	4936      	ldr	r1, [pc, #216]	; (8011340 <etharp_output_to_arp_index+0x124>)
 8011268:	4613      	mov	r3, r2
 801126a:	005b      	lsls	r3, r3, #1
 801126c:	4413      	add	r3, r2
 801126e:	00db      	lsls	r3, r3, #3
 8011270:	440b      	add	r3, r1
 8011272:	3312      	adds	r3, #18
 8011274:	881b      	ldrh	r3, [r3, #0]
 8011276:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801127a:	d919      	bls.n	80112b0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801127c:	79fa      	ldrb	r2, [r7, #7]
 801127e:	4613      	mov	r3, r2
 8011280:	005b      	lsls	r3, r3, #1
 8011282:	4413      	add	r3, r2
 8011284:	00db      	lsls	r3, r3, #3
 8011286:	4a2e      	ldr	r2, [pc, #184]	; (8011340 <etharp_output_to_arp_index+0x124>)
 8011288:	4413      	add	r3, r2
 801128a:	3304      	adds	r3, #4
 801128c:	4619      	mov	r1, r3
 801128e:	68f8      	ldr	r0, [r7, #12]
 8011290:	f000 fb4c 	bl	801192c <etharp_request>
 8011294:	4603      	mov	r3, r0
 8011296:	2b00      	cmp	r3, #0
 8011298:	d138      	bne.n	801130c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801129a:	79fa      	ldrb	r2, [r7, #7]
 801129c:	4928      	ldr	r1, [pc, #160]	; (8011340 <etharp_output_to_arp_index+0x124>)
 801129e:	4613      	mov	r3, r2
 80112a0:	005b      	lsls	r3, r3, #1
 80112a2:	4413      	add	r3, r2
 80112a4:	00db      	lsls	r3, r3, #3
 80112a6:	440b      	add	r3, r1
 80112a8:	3314      	adds	r3, #20
 80112aa:	2203      	movs	r2, #3
 80112ac:	701a      	strb	r2, [r3, #0]
 80112ae:	e02d      	b.n	801130c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80112b0:	79fa      	ldrb	r2, [r7, #7]
 80112b2:	4923      	ldr	r1, [pc, #140]	; (8011340 <etharp_output_to_arp_index+0x124>)
 80112b4:	4613      	mov	r3, r2
 80112b6:	005b      	lsls	r3, r3, #1
 80112b8:	4413      	add	r3, r2
 80112ba:	00db      	lsls	r3, r3, #3
 80112bc:	440b      	add	r3, r1
 80112be:	3312      	adds	r3, #18
 80112c0:	881b      	ldrh	r3, [r3, #0]
 80112c2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80112c6:	d321      	bcc.n	801130c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80112c8:	79fa      	ldrb	r2, [r7, #7]
 80112ca:	4613      	mov	r3, r2
 80112cc:	005b      	lsls	r3, r3, #1
 80112ce:	4413      	add	r3, r2
 80112d0:	00db      	lsls	r3, r3, #3
 80112d2:	4a1b      	ldr	r2, [pc, #108]	; (8011340 <etharp_output_to_arp_index+0x124>)
 80112d4:	4413      	add	r3, r2
 80112d6:	1d19      	adds	r1, r3, #4
 80112d8:	79fa      	ldrb	r2, [r7, #7]
 80112da:	4613      	mov	r3, r2
 80112dc:	005b      	lsls	r3, r3, #1
 80112de:	4413      	add	r3, r2
 80112e0:	00db      	lsls	r3, r3, #3
 80112e2:	3308      	adds	r3, #8
 80112e4:	4a16      	ldr	r2, [pc, #88]	; (8011340 <etharp_output_to_arp_index+0x124>)
 80112e6:	4413      	add	r3, r2
 80112e8:	3304      	adds	r3, #4
 80112ea:	461a      	mov	r2, r3
 80112ec:	68f8      	ldr	r0, [r7, #12]
 80112ee:	f000 fafb 	bl	80118e8 <etharp_request_dst>
 80112f2:	4603      	mov	r3, r0
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d109      	bne.n	801130c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80112f8:	79fa      	ldrb	r2, [r7, #7]
 80112fa:	4911      	ldr	r1, [pc, #68]	; (8011340 <etharp_output_to_arp_index+0x124>)
 80112fc:	4613      	mov	r3, r2
 80112fe:	005b      	lsls	r3, r3, #1
 8011300:	4413      	add	r3, r2
 8011302:	00db      	lsls	r3, r3, #3
 8011304:	440b      	add	r3, r1
 8011306:	3314      	adds	r3, #20
 8011308:	2203      	movs	r2, #3
 801130a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011312:	79fa      	ldrb	r2, [r7, #7]
 8011314:	4613      	mov	r3, r2
 8011316:	005b      	lsls	r3, r3, #1
 8011318:	4413      	add	r3, r2
 801131a:	00db      	lsls	r3, r3, #3
 801131c:	3308      	adds	r3, #8
 801131e:	4a08      	ldr	r2, [pc, #32]	; (8011340 <etharp_output_to_arp_index+0x124>)
 8011320:	4413      	add	r3, r2
 8011322:	3304      	adds	r3, #4
 8011324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011328:	9200      	str	r2, [sp, #0]
 801132a:	460a      	mov	r2, r1
 801132c:	68b9      	ldr	r1, [r7, #8]
 801132e:	68f8      	ldr	r0, [r7, #12]
 8011330:	f001 fe40 	bl	8012fb4 <ethernet_output>
 8011334:	4603      	mov	r3, r0
}
 8011336:	4618      	mov	r0, r3
 8011338:	3710      	adds	r7, #16
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}
 801133e:	bf00      	nop
 8011340:	2000ca84 	.word	0x2000ca84
 8011344:	08016920 	.word	0x08016920
 8011348:	08016a90 	.word	0x08016a90
 801134c:	08016998 	.word	0x08016998

08011350 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b08a      	sub	sp, #40	; 0x28
 8011354:	af02      	add	r7, sp, #8
 8011356:	60f8      	str	r0, [r7, #12]
 8011358:	60b9      	str	r1, [r7, #8]
 801135a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d106      	bne.n	8011374 <etharp_output+0x24>
 8011366:	4b73      	ldr	r3, [pc, #460]	; (8011534 <etharp_output+0x1e4>)
 8011368:	f240 321e 	movw	r2, #798	; 0x31e
 801136c:	4972      	ldr	r1, [pc, #456]	; (8011538 <etharp_output+0x1e8>)
 801136e:	4873      	ldr	r0, [pc, #460]	; (801153c <etharp_output+0x1ec>)
 8011370:	f002 f956 	bl	8013620 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d106      	bne.n	8011388 <etharp_output+0x38>
 801137a:	4b6e      	ldr	r3, [pc, #440]	; (8011534 <etharp_output+0x1e4>)
 801137c:	f240 321f 	movw	r2, #799	; 0x31f
 8011380:	496f      	ldr	r1, [pc, #444]	; (8011540 <etharp_output+0x1f0>)
 8011382:	486e      	ldr	r0, [pc, #440]	; (801153c <etharp_output+0x1ec>)
 8011384:	f002 f94c 	bl	8013620 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d106      	bne.n	801139c <etharp_output+0x4c>
 801138e:	4b69      	ldr	r3, [pc, #420]	; (8011534 <etharp_output+0x1e4>)
 8011390:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011394:	496b      	ldr	r1, [pc, #428]	; (8011544 <etharp_output+0x1f4>)
 8011396:	4869      	ldr	r0, [pc, #420]	; (801153c <etharp_output+0x1ec>)
 8011398:	f002 f942 	bl	8013620 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	68f9      	ldr	r1, [r7, #12]
 80113a2:	4618      	mov	r0, r3
 80113a4:	f000 fef8 	bl	8012198 <ip4_addr_isbroadcast_u32>
 80113a8:	4603      	mov	r3, r0
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d002      	beq.n	80113b4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80113ae:	4b66      	ldr	r3, [pc, #408]	; (8011548 <etharp_output+0x1f8>)
 80113b0:	61fb      	str	r3, [r7, #28]
 80113b2:	e0af      	b.n	8011514 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113bc:	2be0      	cmp	r3, #224	; 0xe0
 80113be:	d118      	bne.n	80113f2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80113c0:	2301      	movs	r3, #1
 80113c2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80113c4:	2300      	movs	r3, #0
 80113c6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80113c8:	235e      	movs	r3, #94	; 0x5e
 80113ca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	3301      	adds	r3, #1
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113d6:	b2db      	uxtb	r3, r3
 80113d8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	3302      	adds	r3, #2
 80113de:	781b      	ldrb	r3, [r3, #0]
 80113e0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	3303      	adds	r3, #3
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80113ea:	f107 0310 	add.w	r3, r7, #16
 80113ee:	61fb      	str	r3, [r7, #28]
 80113f0:	e090      	b.n	8011514 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681a      	ldr	r2, [r3, #0]
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	3304      	adds	r3, #4
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	405a      	eors	r2, r3
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	3308      	adds	r3, #8
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	4013      	ands	r3, r2
 8011406:	2b00      	cmp	r3, #0
 8011408:	d012      	beq.n	8011430 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011410:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011414:	4293      	cmp	r3, r2
 8011416:	d00b      	beq.n	8011430 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	330c      	adds	r3, #12
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d003      	beq.n	801142a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	330c      	adds	r3, #12
 8011426:	61bb      	str	r3, [r7, #24]
 8011428:	e002      	b.n	8011430 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801142a:	f06f 0303 	mvn.w	r3, #3
 801142e:	e07d      	b.n	801152c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011430:	4b46      	ldr	r3, [pc, #280]	; (801154c <etharp_output+0x1fc>)
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	4619      	mov	r1, r3
 8011436:	4a46      	ldr	r2, [pc, #280]	; (8011550 <etharp_output+0x200>)
 8011438:	460b      	mov	r3, r1
 801143a:	005b      	lsls	r3, r3, #1
 801143c:	440b      	add	r3, r1
 801143e:	00db      	lsls	r3, r3, #3
 8011440:	4413      	add	r3, r2
 8011442:	3314      	adds	r3, #20
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	2b01      	cmp	r3, #1
 8011448:	d925      	bls.n	8011496 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801144a:	4b40      	ldr	r3, [pc, #256]	; (801154c <etharp_output+0x1fc>)
 801144c:	781b      	ldrb	r3, [r3, #0]
 801144e:	4619      	mov	r1, r3
 8011450:	4a3f      	ldr	r2, [pc, #252]	; (8011550 <etharp_output+0x200>)
 8011452:	460b      	mov	r3, r1
 8011454:	005b      	lsls	r3, r3, #1
 8011456:	440b      	add	r3, r1
 8011458:	00db      	lsls	r3, r3, #3
 801145a:	4413      	add	r3, r2
 801145c:	3308      	adds	r3, #8
 801145e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011460:	68fa      	ldr	r2, [r7, #12]
 8011462:	429a      	cmp	r2, r3
 8011464:	d117      	bne.n	8011496 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011466:	69bb      	ldr	r3, [r7, #24]
 8011468:	681a      	ldr	r2, [r3, #0]
 801146a:	4b38      	ldr	r3, [pc, #224]	; (801154c <etharp_output+0x1fc>)
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	4618      	mov	r0, r3
 8011470:	4937      	ldr	r1, [pc, #220]	; (8011550 <etharp_output+0x200>)
 8011472:	4603      	mov	r3, r0
 8011474:	005b      	lsls	r3, r3, #1
 8011476:	4403      	add	r3, r0
 8011478:	00db      	lsls	r3, r3, #3
 801147a:	440b      	add	r3, r1
 801147c:	3304      	adds	r3, #4
 801147e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011480:	429a      	cmp	r2, r3
 8011482:	d108      	bne.n	8011496 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011484:	4b31      	ldr	r3, [pc, #196]	; (801154c <etharp_output+0x1fc>)
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	461a      	mov	r2, r3
 801148a:	68b9      	ldr	r1, [r7, #8]
 801148c:	68f8      	ldr	r0, [r7, #12]
 801148e:	f7ff fec5 	bl	801121c <etharp_output_to_arp_index>
 8011492:	4603      	mov	r3, r0
 8011494:	e04a      	b.n	801152c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011496:	2300      	movs	r3, #0
 8011498:	75fb      	strb	r3, [r7, #23]
 801149a:	e031      	b.n	8011500 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801149c:	7dfa      	ldrb	r2, [r7, #23]
 801149e:	492c      	ldr	r1, [pc, #176]	; (8011550 <etharp_output+0x200>)
 80114a0:	4613      	mov	r3, r2
 80114a2:	005b      	lsls	r3, r3, #1
 80114a4:	4413      	add	r3, r2
 80114a6:	00db      	lsls	r3, r3, #3
 80114a8:	440b      	add	r3, r1
 80114aa:	3314      	adds	r3, #20
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	2b01      	cmp	r3, #1
 80114b0:	d923      	bls.n	80114fa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80114b2:	7dfa      	ldrb	r2, [r7, #23]
 80114b4:	4926      	ldr	r1, [pc, #152]	; (8011550 <etharp_output+0x200>)
 80114b6:	4613      	mov	r3, r2
 80114b8:	005b      	lsls	r3, r3, #1
 80114ba:	4413      	add	r3, r2
 80114bc:	00db      	lsls	r3, r3, #3
 80114be:	440b      	add	r3, r1
 80114c0:	3308      	adds	r3, #8
 80114c2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80114c4:	68fa      	ldr	r2, [r7, #12]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d117      	bne.n	80114fa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80114ca:	69bb      	ldr	r3, [r7, #24]
 80114cc:	6819      	ldr	r1, [r3, #0]
 80114ce:	7dfa      	ldrb	r2, [r7, #23]
 80114d0:	481f      	ldr	r0, [pc, #124]	; (8011550 <etharp_output+0x200>)
 80114d2:	4613      	mov	r3, r2
 80114d4:	005b      	lsls	r3, r3, #1
 80114d6:	4413      	add	r3, r2
 80114d8:	00db      	lsls	r3, r3, #3
 80114da:	4403      	add	r3, r0
 80114dc:	3304      	adds	r3, #4
 80114de:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80114e0:	4299      	cmp	r1, r3
 80114e2:	d10a      	bne.n	80114fa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80114e4:	4a19      	ldr	r2, [pc, #100]	; (801154c <etharp_output+0x1fc>)
 80114e6:	7dfb      	ldrb	r3, [r7, #23]
 80114e8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80114ea:	7dfb      	ldrb	r3, [r7, #23]
 80114ec:	461a      	mov	r2, r3
 80114ee:	68b9      	ldr	r1, [r7, #8]
 80114f0:	68f8      	ldr	r0, [r7, #12]
 80114f2:	f7ff fe93 	bl	801121c <etharp_output_to_arp_index>
 80114f6:	4603      	mov	r3, r0
 80114f8:	e018      	b.n	801152c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80114fa:	7dfb      	ldrb	r3, [r7, #23]
 80114fc:	3301      	adds	r3, #1
 80114fe:	75fb      	strb	r3, [r7, #23]
 8011500:	7dfb      	ldrb	r3, [r7, #23]
 8011502:	2b09      	cmp	r3, #9
 8011504:	d9ca      	bls.n	801149c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011506:	68ba      	ldr	r2, [r7, #8]
 8011508:	69b9      	ldr	r1, [r7, #24]
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	f000 f822 	bl	8011554 <etharp_query>
 8011510:	4603      	mov	r3, r0
 8011512:	e00b      	b.n	801152c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801151a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801151e:	9300      	str	r3, [sp, #0]
 8011520:	69fb      	ldr	r3, [r7, #28]
 8011522:	68b9      	ldr	r1, [r7, #8]
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	f001 fd45 	bl	8012fb4 <ethernet_output>
 801152a:	4603      	mov	r3, r0
}
 801152c:	4618      	mov	r0, r3
 801152e:	3720      	adds	r7, #32
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}
 8011534:	08016920 	.word	0x08016920
 8011538:	08016a70 	.word	0x08016a70
 801153c:	08016998 	.word	0x08016998
 8011540:	08016ac0 	.word	0x08016ac0
 8011544:	08016a60 	.word	0x08016a60
 8011548:	0801711c 	.word	0x0801711c
 801154c:	2000cb74 	.word	0x2000cb74
 8011550:	2000ca84 	.word	0x2000ca84

08011554 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b08c      	sub	sp, #48	; 0x30
 8011558:	af02      	add	r7, sp, #8
 801155a:	60f8      	str	r0, [r7, #12]
 801155c:	60b9      	str	r1, [r7, #8]
 801155e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	3326      	adds	r3, #38	; 0x26
 8011564:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011566:	23ff      	movs	r3, #255	; 0xff
 8011568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801156c:	2300      	movs	r3, #0
 801156e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	68f9      	ldr	r1, [r7, #12]
 8011576:	4618      	mov	r0, r3
 8011578:	f000 fe0e 	bl	8012198 <ip4_addr_isbroadcast_u32>
 801157c:	4603      	mov	r3, r0
 801157e:	2b00      	cmp	r3, #0
 8011580:	d10c      	bne.n	801159c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801158a:	2be0      	cmp	r3, #224	; 0xe0
 801158c:	d006      	beq.n	801159c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d003      	beq.n	801159c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d102      	bne.n	80115a2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801159c:	f06f 030f 	mvn.w	r3, #15
 80115a0:	e101      	b.n	80117a6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80115a2:	68fa      	ldr	r2, [r7, #12]
 80115a4:	2101      	movs	r1, #1
 80115a6:	68b8      	ldr	r0, [r7, #8]
 80115a8:	f7ff fb60 	bl	8010c6c <etharp_find_entry>
 80115ac:	4603      	mov	r3, r0
 80115ae:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80115b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	da02      	bge.n	80115be <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80115b8:	8a7b      	ldrh	r3, [r7, #18]
 80115ba:	b25b      	sxtb	r3, r3
 80115bc:	e0f3      	b.n	80117a6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80115be:	8a7b      	ldrh	r3, [r7, #18]
 80115c0:	2b7e      	cmp	r3, #126	; 0x7e
 80115c2:	d906      	bls.n	80115d2 <etharp_query+0x7e>
 80115c4:	4b7a      	ldr	r3, [pc, #488]	; (80117b0 <etharp_query+0x25c>)
 80115c6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80115ca:	497a      	ldr	r1, [pc, #488]	; (80117b4 <etharp_query+0x260>)
 80115cc:	487a      	ldr	r0, [pc, #488]	; (80117b8 <etharp_query+0x264>)
 80115ce:	f002 f827 	bl	8013620 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80115d2:	8a7b      	ldrh	r3, [r7, #18]
 80115d4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80115d6:	7c7a      	ldrb	r2, [r7, #17]
 80115d8:	4978      	ldr	r1, [pc, #480]	; (80117bc <etharp_query+0x268>)
 80115da:	4613      	mov	r3, r2
 80115dc:	005b      	lsls	r3, r3, #1
 80115de:	4413      	add	r3, r2
 80115e0:	00db      	lsls	r3, r3, #3
 80115e2:	440b      	add	r3, r1
 80115e4:	3314      	adds	r3, #20
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d115      	bne.n	8011618 <etharp_query+0xc4>
    is_new_entry = 1;
 80115ec:	2301      	movs	r3, #1
 80115ee:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80115f0:	7c7a      	ldrb	r2, [r7, #17]
 80115f2:	4972      	ldr	r1, [pc, #456]	; (80117bc <etharp_query+0x268>)
 80115f4:	4613      	mov	r3, r2
 80115f6:	005b      	lsls	r3, r3, #1
 80115f8:	4413      	add	r3, r2
 80115fa:	00db      	lsls	r3, r3, #3
 80115fc:	440b      	add	r3, r1
 80115fe:	3314      	adds	r3, #20
 8011600:	2201      	movs	r2, #1
 8011602:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011604:	7c7a      	ldrb	r2, [r7, #17]
 8011606:	496d      	ldr	r1, [pc, #436]	; (80117bc <etharp_query+0x268>)
 8011608:	4613      	mov	r3, r2
 801160a:	005b      	lsls	r3, r3, #1
 801160c:	4413      	add	r3, r2
 801160e:	00db      	lsls	r3, r3, #3
 8011610:	440b      	add	r3, r1
 8011612:	3308      	adds	r3, #8
 8011614:	68fa      	ldr	r2, [r7, #12]
 8011616:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011618:	7c7a      	ldrb	r2, [r7, #17]
 801161a:	4968      	ldr	r1, [pc, #416]	; (80117bc <etharp_query+0x268>)
 801161c:	4613      	mov	r3, r2
 801161e:	005b      	lsls	r3, r3, #1
 8011620:	4413      	add	r3, r2
 8011622:	00db      	lsls	r3, r3, #3
 8011624:	440b      	add	r3, r1
 8011626:	3314      	adds	r3, #20
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	2b01      	cmp	r3, #1
 801162c:	d011      	beq.n	8011652 <etharp_query+0xfe>
 801162e:	7c7a      	ldrb	r2, [r7, #17]
 8011630:	4962      	ldr	r1, [pc, #392]	; (80117bc <etharp_query+0x268>)
 8011632:	4613      	mov	r3, r2
 8011634:	005b      	lsls	r3, r3, #1
 8011636:	4413      	add	r3, r2
 8011638:	00db      	lsls	r3, r3, #3
 801163a:	440b      	add	r3, r1
 801163c:	3314      	adds	r3, #20
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	2b01      	cmp	r3, #1
 8011642:	d806      	bhi.n	8011652 <etharp_query+0xfe>
 8011644:	4b5a      	ldr	r3, [pc, #360]	; (80117b0 <etharp_query+0x25c>)
 8011646:	f240 32cd 	movw	r2, #973	; 0x3cd
 801164a:	495d      	ldr	r1, [pc, #372]	; (80117c0 <etharp_query+0x26c>)
 801164c:	485a      	ldr	r0, [pc, #360]	; (80117b8 <etharp_query+0x264>)
 801164e:	f001 ffe7 	bl	8013620 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011652:	6a3b      	ldr	r3, [r7, #32]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d102      	bne.n	801165e <etharp_query+0x10a>
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d10c      	bne.n	8011678 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801165e:	68b9      	ldr	r1, [r7, #8]
 8011660:	68f8      	ldr	r0, [r7, #12]
 8011662:	f000 f963 	bl	801192c <etharp_request>
 8011666:	4603      	mov	r3, r0
 8011668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d102      	bne.n	8011678 <etharp_query+0x124>
      return result;
 8011672:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011676:	e096      	b.n	80117a6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d106      	bne.n	801168c <etharp_query+0x138>
 801167e:	4b4c      	ldr	r3, [pc, #304]	; (80117b0 <etharp_query+0x25c>)
 8011680:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011684:	494f      	ldr	r1, [pc, #316]	; (80117c4 <etharp_query+0x270>)
 8011686:	484c      	ldr	r0, [pc, #304]	; (80117b8 <etharp_query+0x264>)
 8011688:	f001 ffca 	bl	8013620 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801168c:	7c7a      	ldrb	r2, [r7, #17]
 801168e:	494b      	ldr	r1, [pc, #300]	; (80117bc <etharp_query+0x268>)
 8011690:	4613      	mov	r3, r2
 8011692:	005b      	lsls	r3, r3, #1
 8011694:	4413      	add	r3, r2
 8011696:	00db      	lsls	r3, r3, #3
 8011698:	440b      	add	r3, r1
 801169a:	3314      	adds	r3, #20
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	2b01      	cmp	r3, #1
 80116a0:	d917      	bls.n	80116d2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80116a2:	4a49      	ldr	r2, [pc, #292]	; (80117c8 <etharp_query+0x274>)
 80116a4:	7c7b      	ldrb	r3, [r7, #17]
 80116a6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80116a8:	7c7a      	ldrb	r2, [r7, #17]
 80116aa:	4613      	mov	r3, r2
 80116ac:	005b      	lsls	r3, r3, #1
 80116ae:	4413      	add	r3, r2
 80116b0:	00db      	lsls	r3, r3, #3
 80116b2:	3308      	adds	r3, #8
 80116b4:	4a41      	ldr	r2, [pc, #260]	; (80117bc <etharp_query+0x268>)
 80116b6:	4413      	add	r3, r2
 80116b8:	3304      	adds	r3, #4
 80116ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80116be:	9200      	str	r2, [sp, #0]
 80116c0:	697a      	ldr	r2, [r7, #20]
 80116c2:	6879      	ldr	r1, [r7, #4]
 80116c4:	68f8      	ldr	r0, [r7, #12]
 80116c6:	f001 fc75 	bl	8012fb4 <ethernet_output>
 80116ca:	4603      	mov	r3, r0
 80116cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80116d0:	e067      	b.n	80117a2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80116d2:	7c7a      	ldrb	r2, [r7, #17]
 80116d4:	4939      	ldr	r1, [pc, #228]	; (80117bc <etharp_query+0x268>)
 80116d6:	4613      	mov	r3, r2
 80116d8:	005b      	lsls	r3, r3, #1
 80116da:	4413      	add	r3, r2
 80116dc:	00db      	lsls	r3, r3, #3
 80116de:	440b      	add	r3, r1
 80116e0:	3314      	adds	r3, #20
 80116e2:	781b      	ldrb	r3, [r3, #0]
 80116e4:	2b01      	cmp	r3, #1
 80116e6:	d15c      	bne.n	80117a2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80116e8:	2300      	movs	r3, #0
 80116ea:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 80116f0:	e01c      	b.n	801172c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80116f2:	69fb      	ldr	r3, [r7, #28]
 80116f4:	895a      	ldrh	r2, [r3, #10]
 80116f6:	69fb      	ldr	r3, [r7, #28]
 80116f8:	891b      	ldrh	r3, [r3, #8]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d10a      	bne.n	8011714 <etharp_query+0x1c0>
 80116fe:	69fb      	ldr	r3, [r7, #28]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d006      	beq.n	8011714 <etharp_query+0x1c0>
 8011706:	4b2a      	ldr	r3, [pc, #168]	; (80117b0 <etharp_query+0x25c>)
 8011708:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801170c:	492f      	ldr	r1, [pc, #188]	; (80117cc <etharp_query+0x278>)
 801170e:	482a      	ldr	r0, [pc, #168]	; (80117b8 <etharp_query+0x264>)
 8011710:	f001 ff86 	bl	8013620 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	7b1b      	ldrb	r3, [r3, #12]
 8011718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801171c:	2b00      	cmp	r3, #0
 801171e:	d002      	beq.n	8011726 <etharp_query+0x1d2>
        copy_needed = 1;
 8011720:	2301      	movs	r3, #1
 8011722:	61bb      	str	r3, [r7, #24]
        break;
 8011724:	e005      	b.n	8011732 <etharp_query+0x1de>
      }
      p = p->next;
 8011726:	69fb      	ldr	r3, [r7, #28]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801172c:	69fb      	ldr	r3, [r7, #28]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d1df      	bne.n	80116f2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011732:	69bb      	ldr	r3, [r7, #24]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d007      	beq.n	8011748 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011738:	687a      	ldr	r2, [r7, #4]
 801173a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801173e:	200e      	movs	r0, #14
 8011740:	f7f9 fcf8 	bl	800b134 <pbuf_clone>
 8011744:	61f8      	str	r0, [r7, #28]
 8011746:	e004      	b.n	8011752 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801174c:	69f8      	ldr	r0, [r7, #28]
 801174e:	f7f9 fb2f 	bl	800adb0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011752:	69fb      	ldr	r3, [r7, #28]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d021      	beq.n	801179c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011758:	7c7a      	ldrb	r2, [r7, #17]
 801175a:	4918      	ldr	r1, [pc, #96]	; (80117bc <etharp_query+0x268>)
 801175c:	4613      	mov	r3, r2
 801175e:	005b      	lsls	r3, r3, #1
 8011760:	4413      	add	r3, r2
 8011762:	00db      	lsls	r3, r3, #3
 8011764:	440b      	add	r3, r1
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d00a      	beq.n	8011782 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801176c:	7c7a      	ldrb	r2, [r7, #17]
 801176e:	4913      	ldr	r1, [pc, #76]	; (80117bc <etharp_query+0x268>)
 8011770:	4613      	mov	r3, r2
 8011772:	005b      	lsls	r3, r3, #1
 8011774:	4413      	add	r3, r2
 8011776:	00db      	lsls	r3, r3, #3
 8011778:	440b      	add	r3, r1
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	4618      	mov	r0, r3
 801177e:	f7f9 fa71 	bl	800ac64 <pbuf_free>
      }
      arp_table[i].q = p;
 8011782:	7c7a      	ldrb	r2, [r7, #17]
 8011784:	490d      	ldr	r1, [pc, #52]	; (80117bc <etharp_query+0x268>)
 8011786:	4613      	mov	r3, r2
 8011788:	005b      	lsls	r3, r3, #1
 801178a:	4413      	add	r3, r2
 801178c:	00db      	lsls	r3, r3, #3
 801178e:	440b      	add	r3, r1
 8011790:	69fa      	ldr	r2, [r7, #28]
 8011792:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011794:	2300      	movs	r3, #0
 8011796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801179a:	e002      	b.n	80117a2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801179c:	23ff      	movs	r3, #255	; 0xff
 801179e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80117a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80117a6:	4618      	mov	r0, r3
 80117a8:	3728      	adds	r7, #40	; 0x28
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bd80      	pop	{r7, pc}
 80117ae:	bf00      	nop
 80117b0:	08016920 	.word	0x08016920
 80117b4:	08016acc 	.word	0x08016acc
 80117b8:	08016998 	.word	0x08016998
 80117bc:	2000ca84 	.word	0x2000ca84
 80117c0:	08016adc 	.word	0x08016adc
 80117c4:	08016ac0 	.word	0x08016ac0
 80117c8:	2000cb74 	.word	0x2000cb74
 80117cc:	08016b04 	.word	0x08016b04

080117d0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b08a      	sub	sp, #40	; 0x28
 80117d4:	af02      	add	r7, sp, #8
 80117d6:	60f8      	str	r0, [r7, #12]
 80117d8:	60b9      	str	r1, [r7, #8]
 80117da:	607a      	str	r2, [r7, #4]
 80117dc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80117de:	2300      	movs	r3, #0
 80117e0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d106      	bne.n	80117f6 <etharp_raw+0x26>
 80117e8:	4b3a      	ldr	r3, [pc, #232]	; (80118d4 <etharp_raw+0x104>)
 80117ea:	f240 4257 	movw	r2, #1111	; 0x457
 80117ee:	493a      	ldr	r1, [pc, #232]	; (80118d8 <etharp_raw+0x108>)
 80117f0:	483a      	ldr	r0, [pc, #232]	; (80118dc <etharp_raw+0x10c>)
 80117f2:	f001 ff15 	bl	8013620 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80117f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80117fa:	211c      	movs	r1, #28
 80117fc:	200e      	movs	r0, #14
 80117fe:	f7f8 ff4d 	bl	800a69c <pbuf_alloc>
 8011802:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011804:	69bb      	ldr	r3, [r7, #24]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d102      	bne.n	8011810 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801180a:	f04f 33ff 	mov.w	r3, #4294967295
 801180e:	e05d      	b.n	80118cc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011810:	69bb      	ldr	r3, [r7, #24]
 8011812:	895b      	ldrh	r3, [r3, #10]
 8011814:	2b1b      	cmp	r3, #27
 8011816:	d806      	bhi.n	8011826 <etharp_raw+0x56>
 8011818:	4b2e      	ldr	r3, [pc, #184]	; (80118d4 <etharp_raw+0x104>)
 801181a:	f240 4262 	movw	r2, #1122	; 0x462
 801181e:	4930      	ldr	r1, [pc, #192]	; (80118e0 <etharp_raw+0x110>)
 8011820:	482e      	ldr	r0, [pc, #184]	; (80118dc <etharp_raw+0x10c>)
 8011822:	f001 fefd 	bl	8013620 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011826:	69bb      	ldr	r3, [r7, #24]
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801182c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801182e:	4618      	mov	r0, r3
 8011830:	f7f7 fe26 	bl	8009480 <lwip_htons>
 8011834:	4603      	mov	r3, r0
 8011836:	461a      	mov	r2, r3
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011842:	2b06      	cmp	r3, #6
 8011844:	d006      	beq.n	8011854 <etharp_raw+0x84>
 8011846:	4b23      	ldr	r3, [pc, #140]	; (80118d4 <etharp_raw+0x104>)
 8011848:	f240 4269 	movw	r2, #1129	; 0x469
 801184c:	4925      	ldr	r1, [pc, #148]	; (80118e4 <etharp_raw+0x114>)
 801184e:	4823      	ldr	r0, [pc, #140]	; (80118dc <etharp_raw+0x10c>)
 8011850:	f001 fee6 	bl	8013620 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	3308      	adds	r3, #8
 8011858:	2206      	movs	r2, #6
 801185a:	6839      	ldr	r1, [r7, #0]
 801185c:	4618      	mov	r0, r3
 801185e:	f001 fe34 	bl	80134ca <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	3312      	adds	r3, #18
 8011866:	2206      	movs	r2, #6
 8011868:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801186a:	4618      	mov	r0, r3
 801186c:	f001 fe2d 	bl	80134ca <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	330e      	adds	r3, #14
 8011874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011876:	6812      	ldr	r2, [r2, #0]
 8011878:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	3318      	adds	r3, #24
 801187e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011880:	6812      	ldr	r2, [r2, #0]
 8011882:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	2200      	movs	r2, #0
 8011888:	701a      	strb	r2, [r3, #0]
 801188a:	2200      	movs	r2, #0
 801188c:	f042 0201 	orr.w	r2, r2, #1
 8011890:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	2200      	movs	r2, #0
 8011896:	f042 0208 	orr.w	r2, r2, #8
 801189a:	709a      	strb	r2, [r3, #2]
 801189c:	2200      	movs	r2, #0
 801189e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	2206      	movs	r2, #6
 80118a4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	2204      	movs	r2, #4
 80118aa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80118ac:	f640 0306 	movw	r3, #2054	; 0x806
 80118b0:	9300      	str	r3, [sp, #0]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	68ba      	ldr	r2, [r7, #8]
 80118b6:	69b9      	ldr	r1, [r7, #24]
 80118b8:	68f8      	ldr	r0, [r7, #12]
 80118ba:	f001 fb7b 	bl	8012fb4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80118be:	69b8      	ldr	r0, [r7, #24]
 80118c0:	f7f9 f9d0 	bl	800ac64 <pbuf_free>
  p = NULL;
 80118c4:	2300      	movs	r3, #0
 80118c6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80118c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3720      	adds	r7, #32
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}
 80118d4:	08016920 	.word	0x08016920
 80118d8:	08016a70 	.word	0x08016a70
 80118dc:	08016998 	.word	0x08016998
 80118e0:	08016b20 	.word	0x08016b20
 80118e4:	08016b54 	.word	0x08016b54

080118e8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b088      	sub	sp, #32
 80118ec:	af04      	add	r7, sp, #16
 80118ee:	60f8      	str	r0, [r7, #12]
 80118f0:	60b9      	str	r1, [r7, #8]
 80118f2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011904:	2201      	movs	r2, #1
 8011906:	9203      	str	r2, [sp, #12]
 8011908:	68ba      	ldr	r2, [r7, #8]
 801190a:	9202      	str	r2, [sp, #8]
 801190c:	4a06      	ldr	r2, [pc, #24]	; (8011928 <etharp_request_dst+0x40>)
 801190e:	9201      	str	r2, [sp, #4]
 8011910:	9300      	str	r3, [sp, #0]
 8011912:	4603      	mov	r3, r0
 8011914:	687a      	ldr	r2, [r7, #4]
 8011916:	68f8      	ldr	r0, [r7, #12]
 8011918:	f7ff ff5a 	bl	80117d0 <etharp_raw>
 801191c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801191e:	4618      	mov	r0, r3
 8011920:	3710      	adds	r7, #16
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	08017124 	.word	0x08017124

0801192c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011936:	4a05      	ldr	r2, [pc, #20]	; (801194c <etharp_request+0x20>)
 8011938:	6839      	ldr	r1, [r7, #0]
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f7ff ffd4 	bl	80118e8 <etharp_request_dst>
 8011940:	4603      	mov	r3, r0
}
 8011942:	4618      	mov	r0, r3
 8011944:	3708      	adds	r7, #8
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}
 801194a:	bf00      	nop
 801194c:	0801711c 	.word	0x0801711c

08011950 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b08e      	sub	sp, #56	; 0x38
 8011954:	af04      	add	r7, sp, #16
 8011956:	6078      	str	r0, [r7, #4]
 8011958:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801195a:	4b79      	ldr	r3, [pc, #484]	; (8011b40 <icmp_input+0x1f0>)
 801195c:	689b      	ldr	r3, [r3, #8]
 801195e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	f003 030f 	and.w	r3, r3, #15
 8011968:	b2db      	uxtb	r3, r3
 801196a:	009b      	lsls	r3, r3, #2
 801196c:	b2db      	uxtb	r3, r3
 801196e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011970:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011972:	2b13      	cmp	r3, #19
 8011974:	f240 80cd 	bls.w	8011b12 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	895b      	ldrh	r3, [r3, #10]
 801197c:	2b03      	cmp	r3, #3
 801197e:	f240 80ca 	bls.w	8011b16 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	685b      	ldr	r3, [r3, #4]
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801198c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011990:	2b00      	cmp	r3, #0
 8011992:	f000 80b7 	beq.w	8011b04 <icmp_input+0x1b4>
 8011996:	2b08      	cmp	r3, #8
 8011998:	f040 80b7 	bne.w	8011b0a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801199c:	4b69      	ldr	r3, [pc, #420]	; (8011b44 <icmp_input+0x1f4>)
 801199e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80119a0:	4b67      	ldr	r3, [pc, #412]	; (8011b40 <icmp_input+0x1f0>)
 80119a2:	695b      	ldr	r3, [r3, #20]
 80119a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80119a8:	2be0      	cmp	r3, #224	; 0xe0
 80119aa:	f000 80bb 	beq.w	8011b24 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80119ae:	4b64      	ldr	r3, [pc, #400]	; (8011b40 <icmp_input+0x1f0>)
 80119b0:	695b      	ldr	r3, [r3, #20]
 80119b2:	4a63      	ldr	r2, [pc, #396]	; (8011b40 <icmp_input+0x1f0>)
 80119b4:	6812      	ldr	r2, [r2, #0]
 80119b6:	4611      	mov	r1, r2
 80119b8:	4618      	mov	r0, r3
 80119ba:	f000 fbed 	bl	8012198 <ip4_addr_isbroadcast_u32>
 80119be:	4603      	mov	r3, r0
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	f040 80b1 	bne.w	8011b28 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	891b      	ldrh	r3, [r3, #8]
 80119ca:	2b07      	cmp	r3, #7
 80119cc:	f240 80a5 	bls.w	8011b1a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80119d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80119d2:	330e      	adds	r3, #14
 80119d4:	4619      	mov	r1, r3
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f7f9 f8ae 	bl	800ab38 <pbuf_add_header>
 80119dc:	4603      	mov	r3, r0
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d04b      	beq.n	8011a7a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	891a      	ldrh	r2, [r3, #8]
 80119e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80119e8:	4413      	add	r3, r2
 80119ea:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	891b      	ldrh	r3, [r3, #8]
 80119f0:	8b7a      	ldrh	r2, [r7, #26]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	f0c0 809a 	bcc.w	8011b2c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80119f8:	8b7b      	ldrh	r3, [r7, #26]
 80119fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80119fe:	4619      	mov	r1, r3
 8011a00:	200e      	movs	r0, #14
 8011a02:	f7f8 fe4b 	bl	800a69c <pbuf_alloc>
 8011a06:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	f000 8090 	beq.w	8011b30 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	895b      	ldrh	r3, [r3, #10]
 8011a14:	461a      	mov	r2, r3
 8011a16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a18:	3308      	adds	r3, #8
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d203      	bcs.n	8011a26 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011a1e:	6978      	ldr	r0, [r7, #20]
 8011a20:	f7f9 f920 	bl	800ac64 <pbuf_free>
          goto icmperr;
 8011a24:	e085      	b.n	8011b32 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011a2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f001 fd4b 	bl	80134ca <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011a34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a36:	4619      	mov	r1, r3
 8011a38:	6978      	ldr	r0, [r7, #20]
 8011a3a:	f7f9 f88d 	bl	800ab58 <pbuf_remove_header>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d009      	beq.n	8011a58 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011a44:	4b40      	ldr	r3, [pc, #256]	; (8011b48 <icmp_input+0x1f8>)
 8011a46:	22b6      	movs	r2, #182	; 0xb6
 8011a48:	4940      	ldr	r1, [pc, #256]	; (8011b4c <icmp_input+0x1fc>)
 8011a4a:	4841      	ldr	r0, [pc, #260]	; (8011b50 <icmp_input+0x200>)
 8011a4c:	f001 fde8 	bl	8013620 <iprintf>
          pbuf_free(r);
 8011a50:	6978      	ldr	r0, [r7, #20]
 8011a52:	f7f9 f907 	bl	800ac64 <pbuf_free>
          goto icmperr;
 8011a56:	e06c      	b.n	8011b32 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011a58:	6879      	ldr	r1, [r7, #4]
 8011a5a:	6978      	ldr	r0, [r7, #20]
 8011a5c:	f7f9 fa26 	bl	800aeac <pbuf_copy>
 8011a60:	4603      	mov	r3, r0
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d003      	beq.n	8011a6e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011a66:	6978      	ldr	r0, [r7, #20]
 8011a68:	f7f9 f8fc 	bl	800ac64 <pbuf_free>
          goto icmperr;
 8011a6c:	e061      	b.n	8011b32 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f7f9 f8f8 	bl	800ac64 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	607b      	str	r3, [r7, #4]
 8011a78:	e00f      	b.n	8011a9a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011a7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a7c:	330e      	adds	r3, #14
 8011a7e:	4619      	mov	r1, r3
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f7f9 f869 	bl	800ab58 <pbuf_remove_header>
 8011a86:	4603      	mov	r3, r0
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d006      	beq.n	8011a9a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011a8c:	4b2e      	ldr	r3, [pc, #184]	; (8011b48 <icmp_input+0x1f8>)
 8011a8e:	22c7      	movs	r2, #199	; 0xc7
 8011a90:	4930      	ldr	r1, [pc, #192]	; (8011b54 <icmp_input+0x204>)
 8011a92:	482f      	ldr	r0, [pc, #188]	; (8011b50 <icmp_input+0x200>)
 8011a94:	f001 fdc4 	bl	8013620 <iprintf>
          goto icmperr;
 8011a98:	e04b      	b.n	8011b32 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011aa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f7f9 f847 	bl	800ab38 <pbuf_add_header>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d12b      	bne.n	8011b08 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	685b      	ldr	r3, [r3, #4]
 8011ab4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011ab6:	69fb      	ldr	r3, [r7, #28]
 8011ab8:	681a      	ldr	r2, [r3, #0]
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011abe:	4b20      	ldr	r3, [pc, #128]	; (8011b40 <icmp_input+0x1f0>)
 8011ac0:	691a      	ldr	r2, [r3, #16]
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	2200      	movs	r2, #0
 8011aca:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	709a      	strb	r2, [r3, #2]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	22ff      	movs	r2, #255	; 0xff
 8011ada:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	729a      	strb	r2, [r3, #10]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	9302      	str	r3, [sp, #8]
 8011aea:	2301      	movs	r3, #1
 8011aec:	9301      	str	r3, [sp, #4]
 8011aee:	2300      	movs	r3, #0
 8011af0:	9300      	str	r3, [sp, #0]
 8011af2:	23ff      	movs	r3, #255	; 0xff
 8011af4:	2200      	movs	r2, #0
 8011af6:	69f9      	ldr	r1, [r7, #28]
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f000 fa75 	bl	8011fe8 <ip4_output_if>
 8011afe:	4603      	mov	r3, r0
 8011b00:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011b02:	e001      	b.n	8011b08 <icmp_input+0x1b8>
      break;
 8011b04:	bf00      	nop
 8011b06:	e000      	b.n	8011b0a <icmp_input+0x1ba>
      break;
 8011b08:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f7f9 f8aa 	bl	800ac64 <pbuf_free>
  return;
 8011b10:	e013      	b.n	8011b3a <icmp_input+0x1ea>
    goto lenerr;
 8011b12:	bf00      	nop
 8011b14:	e002      	b.n	8011b1c <icmp_input+0x1cc>
    goto lenerr;
 8011b16:	bf00      	nop
 8011b18:	e000      	b.n	8011b1c <icmp_input+0x1cc>
        goto lenerr;
 8011b1a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f7f9 f8a1 	bl	800ac64 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011b22:	e00a      	b.n	8011b3a <icmp_input+0x1ea>
        goto icmperr;
 8011b24:	bf00      	nop
 8011b26:	e004      	b.n	8011b32 <icmp_input+0x1e2>
        goto icmperr;
 8011b28:	bf00      	nop
 8011b2a:	e002      	b.n	8011b32 <icmp_input+0x1e2>
          goto icmperr;
 8011b2c:	bf00      	nop
 8011b2e:	e000      	b.n	8011b32 <icmp_input+0x1e2>
          goto icmperr;
 8011b30:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f7f9 f896 	bl	800ac64 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011b38:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011b3a:	3728      	adds	r7, #40	; 0x28
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}
 8011b40:	200092d0 	.word	0x200092d0
 8011b44:	200092e4 	.word	0x200092e4
 8011b48:	08016b98 	.word	0x08016b98
 8011b4c:	08016bd0 	.word	0x08016bd0
 8011b50:	08016c08 	.word	0x08016c08
 8011b54:	08016c30 	.word	0x08016c30

08011b58 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	460b      	mov	r3, r1
 8011b62:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011b64:	78fb      	ldrb	r3, [r7, #3]
 8011b66:	461a      	mov	r2, r3
 8011b68:	2103      	movs	r1, #3
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f000 f814 	bl	8011b98 <icmp_send_response>
}
 8011b70:	bf00      	nop
 8011b72:	3708      	adds	r7, #8
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	460b      	mov	r3, r1
 8011b82:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011b84:	78fb      	ldrb	r3, [r7, #3]
 8011b86:	461a      	mov	r2, r3
 8011b88:	210b      	movs	r1, #11
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f000 f804 	bl	8011b98 <icmp_send_response>
}
 8011b90:	bf00      	nop
 8011b92:	3708      	adds	r7, #8
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}

08011b98 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b08c      	sub	sp, #48	; 0x30
 8011b9c:	af04      	add	r7, sp, #16
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	460b      	mov	r3, r1
 8011ba2:	70fb      	strb	r3, [r7, #3]
 8011ba4:	4613      	mov	r3, r2
 8011ba6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011ba8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bac:	2124      	movs	r1, #36	; 0x24
 8011bae:	2022      	movs	r0, #34	; 0x22
 8011bb0:	f7f8 fd74 	bl	800a69c <pbuf_alloc>
 8011bb4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011bb6:	69fb      	ldr	r3, [r7, #28]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d04c      	beq.n	8011c56 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011bbc:	69fb      	ldr	r3, [r7, #28]
 8011bbe:	895b      	ldrh	r3, [r3, #10]
 8011bc0:	2b23      	cmp	r3, #35	; 0x23
 8011bc2:	d806      	bhi.n	8011bd2 <icmp_send_response+0x3a>
 8011bc4:	4b26      	ldr	r3, [pc, #152]	; (8011c60 <icmp_send_response+0xc8>)
 8011bc6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011bca:	4926      	ldr	r1, [pc, #152]	; (8011c64 <icmp_send_response+0xcc>)
 8011bcc:	4826      	ldr	r0, [pc, #152]	; (8011c68 <icmp_send_response+0xd0>)
 8011bce:	f001 fd27 	bl	8013620 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	685b      	ldr	r3, [r3, #4]
 8011bd6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011bd8:	69fb      	ldr	r3, [r7, #28]
 8011bda:	685b      	ldr	r3, [r3, #4]
 8011bdc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	78fa      	ldrb	r2, [r7, #3]
 8011be2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	78ba      	ldrb	r2, [r7, #2]
 8011be8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	2200      	movs	r2, #0
 8011bee:	711a      	strb	r2, [r3, #4]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	719a      	strb	r2, [r3, #6]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011bfe:	69fb      	ldr	r3, [r7, #28]
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	f103 0008 	add.w	r0, r3, #8
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	221c      	movs	r2, #28
 8011c0c:	4619      	mov	r1, r3
 8011c0e:	f001 fc5c 	bl	80134ca <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011c12:	69bb      	ldr	r3, [r7, #24]
 8011c14:	68db      	ldr	r3, [r3, #12]
 8011c16:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011c18:	f107 030c 	add.w	r3, r7, #12
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f000 f825 	bl	8011c6c <ip4_route>
 8011c22:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d011      	beq.n	8011c4e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	709a      	strb	r2, [r3, #2]
 8011c30:	2200      	movs	r2, #0
 8011c32:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011c34:	f107 020c 	add.w	r2, r7, #12
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	9302      	str	r3, [sp, #8]
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	9301      	str	r3, [sp, #4]
 8011c40:	2300      	movs	r3, #0
 8011c42:	9300      	str	r3, [sp, #0]
 8011c44:	23ff      	movs	r3, #255	; 0xff
 8011c46:	2100      	movs	r1, #0
 8011c48:	69f8      	ldr	r0, [r7, #28]
 8011c4a:	f000 f9cd 	bl	8011fe8 <ip4_output_if>
  }
  pbuf_free(q);
 8011c4e:	69f8      	ldr	r0, [r7, #28]
 8011c50:	f7f9 f808 	bl	800ac64 <pbuf_free>
 8011c54:	e000      	b.n	8011c58 <icmp_send_response+0xc0>
    return;
 8011c56:	bf00      	nop
}
 8011c58:	3720      	adds	r7, #32
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}
 8011c5e:	bf00      	nop
 8011c60:	08016b98 	.word	0x08016b98
 8011c64:	08016c64 	.word	0x08016c64
 8011c68:	08016c08 	.word	0x08016c08

08011c6c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b085      	sub	sp, #20
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011c74:	4b33      	ldr	r3, [pc, #204]	; (8011d44 <ip4_route+0xd8>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	60fb      	str	r3, [r7, #12]
 8011c7a:	e036      	b.n	8011cea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c82:	f003 0301 	and.w	r3, r3, #1
 8011c86:	b2db      	uxtb	r3, r3
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d02b      	beq.n	8011ce4 <ip4_route+0x78>
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c92:	089b      	lsrs	r3, r3, #2
 8011c94:	f003 0301 	and.w	r3, r3, #1
 8011c98:	b2db      	uxtb	r3, r3
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d022      	beq.n	8011ce4 <ip4_route+0x78>
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	3304      	adds	r3, #4
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d01d      	beq.n	8011ce4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681a      	ldr	r2, [r3, #0]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	3304      	adds	r3, #4
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	405a      	eors	r2, r3
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	3308      	adds	r3, #8
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	4013      	ands	r3, r2
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d101      	bne.n	8011cc4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	e038      	b.n	8011d36 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011cca:	f003 0302 	and.w	r3, r3, #2
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d108      	bne.n	8011ce4 <ip4_route+0x78>
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681a      	ldr	r2, [r3, #0]
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	330c      	adds	r3, #12
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	d101      	bne.n	8011ce4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	e028      	b.n	8011d36 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	60fb      	str	r3, [r7, #12]
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d1c5      	bne.n	8011c7c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011cf0:	4b15      	ldr	r3, [pc, #84]	; (8011d48 <ip4_route+0xdc>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d01a      	beq.n	8011d2e <ip4_route+0xc2>
 8011cf8:	4b13      	ldr	r3, [pc, #76]	; (8011d48 <ip4_route+0xdc>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d00:	f003 0301 	and.w	r3, r3, #1
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d012      	beq.n	8011d2e <ip4_route+0xc2>
 8011d08:	4b0f      	ldr	r3, [pc, #60]	; (8011d48 <ip4_route+0xdc>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d10:	f003 0304 	and.w	r3, r3, #4
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d00a      	beq.n	8011d2e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011d18:	4b0b      	ldr	r3, [pc, #44]	; (8011d48 <ip4_route+0xdc>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	3304      	adds	r3, #4
 8011d1e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d004      	beq.n	8011d2e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	b2db      	uxtb	r3, r3
 8011d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8011d2c:	d101      	bne.n	8011d32 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	e001      	b.n	8011d36 <ip4_route+0xca>
  }

  return netif_default;
 8011d32:	4b05      	ldr	r3, [pc, #20]	; (8011d48 <ip4_route+0xdc>)
 8011d34:	681b      	ldr	r3, [r3, #0]
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3714      	adds	r7, #20
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d40:	4770      	bx	lr
 8011d42:	bf00      	nop
 8011d44:	2000ca18 	.word	0x2000ca18
 8011d48:	2000ca1c 	.word	0x2000ca1c

08011d4c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b082      	sub	sp, #8
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d5a:	f003 0301 	and.w	r3, r3, #1
 8011d5e:	b2db      	uxtb	r3, r3
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d016      	beq.n	8011d92 <ip4_input_accept+0x46>
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	3304      	adds	r3, #4
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d011      	beq.n	8011d92 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011d6e:	4b0b      	ldr	r3, [pc, #44]	; (8011d9c <ip4_input_accept+0x50>)
 8011d70:	695a      	ldr	r2, [r3, #20]
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	3304      	adds	r3, #4
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d008      	beq.n	8011d8e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011d7c:	4b07      	ldr	r3, [pc, #28]	; (8011d9c <ip4_input_accept+0x50>)
 8011d7e:	695b      	ldr	r3, [r3, #20]
 8011d80:	6879      	ldr	r1, [r7, #4]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f000 fa08 	bl	8012198 <ip4_addr_isbroadcast_u32>
 8011d88:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d001      	beq.n	8011d92 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011d8e:	2301      	movs	r3, #1
 8011d90:	e000      	b.n	8011d94 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011d92:	2300      	movs	r3, #0
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	3708      	adds	r7, #8
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}
 8011d9c:	200092d0 	.word	0x200092d0

08011da0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b086      	sub	sp, #24
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	781b      	ldrb	r3, [r3, #0]
 8011db4:	091b      	lsrs	r3, r3, #4
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	2b04      	cmp	r3, #4
 8011dba:	d004      	beq.n	8011dc6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f7f8 ff51 	bl	800ac64 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	e107      	b.n	8011fd6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	f003 030f 	and.w	r3, r3, #15
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	009b      	lsls	r3, r3, #2
 8011dd2:	b2db      	uxtb	r3, r3
 8011dd4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	885b      	ldrh	r3, [r3, #2]
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7f7 fb4f 	bl	8009480 <lwip_htons>
 8011de2:	4603      	mov	r3, r0
 8011de4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	891b      	ldrh	r3, [r3, #8]
 8011dea:	89ba      	ldrh	r2, [r7, #12]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d204      	bcs.n	8011dfa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011df0:	89bb      	ldrh	r3, [r7, #12]
 8011df2:	4619      	mov	r1, r3
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f7f8 fdaf 	bl	800a958 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	895b      	ldrh	r3, [r3, #10]
 8011dfe:	89fa      	ldrh	r2, [r7, #14]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d807      	bhi.n	8011e14 <ip4_input+0x74>
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	891b      	ldrh	r3, [r3, #8]
 8011e08:	89ba      	ldrh	r2, [r7, #12]
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d802      	bhi.n	8011e14 <ip4_input+0x74>
 8011e0e:	89fb      	ldrh	r3, [r7, #14]
 8011e10:	2b13      	cmp	r3, #19
 8011e12:	d804      	bhi.n	8011e1e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f7f8 ff25 	bl	800ac64 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	e0db      	b.n	8011fd6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	691b      	ldr	r3, [r3, #16]
 8011e22:	4a6f      	ldr	r2, [pc, #444]	; (8011fe0 <ip4_input+0x240>)
 8011e24:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	68db      	ldr	r3, [r3, #12]
 8011e2a:	4a6d      	ldr	r2, [pc, #436]	; (8011fe0 <ip4_input+0x240>)
 8011e2c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011e2e:	4b6c      	ldr	r3, [pc, #432]	; (8011fe0 <ip4_input+0x240>)
 8011e30:	695b      	ldr	r3, [r3, #20]
 8011e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011e36:	2be0      	cmp	r3, #224	; 0xe0
 8011e38:	d112      	bne.n	8011e60 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e40:	f003 0301 	and.w	r3, r3, #1
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d007      	beq.n	8011e5a <ip4_input+0xba>
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	3304      	adds	r3, #4
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d002      	beq.n	8011e5a <ip4_input+0xba>
      netif = inp;
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	613b      	str	r3, [r7, #16]
 8011e58:	e02a      	b.n	8011eb0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	613b      	str	r3, [r7, #16]
 8011e5e:	e027      	b.n	8011eb0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011e60:	6838      	ldr	r0, [r7, #0]
 8011e62:	f7ff ff73 	bl	8011d4c <ip4_input_accept>
 8011e66:	4603      	mov	r3, r0
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d002      	beq.n	8011e72 <ip4_input+0xd2>
      netif = inp;
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	613b      	str	r3, [r7, #16]
 8011e70:	e01e      	b.n	8011eb0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011e72:	2300      	movs	r3, #0
 8011e74:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011e76:	4b5a      	ldr	r3, [pc, #360]	; (8011fe0 <ip4_input+0x240>)
 8011e78:	695b      	ldr	r3, [r3, #20]
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8011e7e:	d017      	beq.n	8011eb0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011e80:	4b58      	ldr	r3, [pc, #352]	; (8011fe4 <ip4_input+0x244>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	613b      	str	r3, [r7, #16]
 8011e86:	e00e      	b.n	8011ea6 <ip4_input+0x106>
          if (netif == inp) {
 8011e88:	693a      	ldr	r2, [r7, #16]
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d006      	beq.n	8011e9e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011e90:	6938      	ldr	r0, [r7, #16]
 8011e92:	f7ff ff5b 	bl	8011d4c <ip4_input_accept>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d108      	bne.n	8011eae <ip4_input+0x10e>
 8011e9c:	e000      	b.n	8011ea0 <ip4_input+0x100>
            continue;
 8011e9e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	613b      	str	r3, [r7, #16]
 8011ea6:	693b      	ldr	r3, [r7, #16]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d1ed      	bne.n	8011e88 <ip4_input+0xe8>
 8011eac:	e000      	b.n	8011eb0 <ip4_input+0x110>
            break;
 8011eae:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011eb0:	4b4b      	ldr	r3, [pc, #300]	; (8011fe0 <ip4_input+0x240>)
 8011eb2:	691b      	ldr	r3, [r3, #16]
 8011eb4:	6839      	ldr	r1, [r7, #0]
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f000 f96e 	bl	8012198 <ip4_addr_isbroadcast_u32>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d105      	bne.n	8011ece <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011ec2:	4b47      	ldr	r3, [pc, #284]	; (8011fe0 <ip4_input+0x240>)
 8011ec4:	691b      	ldr	r3, [r3, #16]
 8011ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011eca:	2be0      	cmp	r3, #224	; 0xe0
 8011ecc:	d104      	bne.n	8011ed8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f7f8 fec8 	bl	800ac64 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	e07e      	b.n	8011fd6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d104      	bne.n	8011ee8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011ede:	6878      	ldr	r0, [r7, #4]
 8011ee0:	f7f8 fec0 	bl	800ac64 <pbuf_free>
    return ERR_OK;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	e076      	b.n	8011fd6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	88db      	ldrh	r3, [r3, #6]
 8011eec:	b29b      	uxth	r3, r3
 8011eee:	461a      	mov	r2, r3
 8011ef0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011ef4:	4013      	ands	r3, r2
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d00b      	beq.n	8011f12 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f000 fc92 	bl	8012824 <ip4_reass>
 8011f00:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d101      	bne.n	8011f0c <ip4_input+0x16c>
      return ERR_OK;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	e064      	b.n	8011fd6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011f12:	4a33      	ldr	r2, [pc, #204]	; (8011fe0 <ip4_input+0x240>)
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011f18:	4a31      	ldr	r2, [pc, #196]	; (8011fe0 <ip4_input+0x240>)
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011f1e:	4a30      	ldr	r2, [pc, #192]	; (8011fe0 <ip4_input+0x240>)
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	f003 030f 	and.w	r3, r3, #15
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	009b      	lsls	r3, r3, #2
 8011f30:	b2db      	uxtb	r3, r3
 8011f32:	b29a      	uxth	r2, r3
 8011f34:	4b2a      	ldr	r3, [pc, #168]	; (8011fe0 <ip4_input+0x240>)
 8011f36:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011f38:	89fb      	ldrh	r3, [r7, #14]
 8011f3a:	4619      	mov	r1, r3
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f7f8 fe0b 	bl	800ab58 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011f42:	697b      	ldr	r3, [r7, #20]
 8011f44:	7a5b      	ldrb	r3, [r3, #9]
 8011f46:	2b11      	cmp	r3, #17
 8011f48:	d006      	beq.n	8011f58 <ip4_input+0x1b8>
 8011f4a:	2b11      	cmp	r3, #17
 8011f4c:	dc13      	bgt.n	8011f76 <ip4_input+0x1d6>
 8011f4e:	2b01      	cmp	r3, #1
 8011f50:	d00c      	beq.n	8011f6c <ip4_input+0x1cc>
 8011f52:	2b06      	cmp	r3, #6
 8011f54:	d005      	beq.n	8011f62 <ip4_input+0x1c2>
 8011f56:	e00e      	b.n	8011f76 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011f58:	6839      	ldr	r1, [r7, #0]
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f7fe fc68 	bl	8010830 <udp_input>
        break;
 8011f60:	e026      	b.n	8011fb0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011f62:	6839      	ldr	r1, [r7, #0]
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f7fa fcb1 	bl	800c8cc <tcp_input>
        break;
 8011f6a:	e021      	b.n	8011fb0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011f6c:	6839      	ldr	r1, [r7, #0]
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f7ff fcee 	bl	8011950 <icmp_input>
        break;
 8011f74:	e01c      	b.n	8011fb0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011f76:	4b1a      	ldr	r3, [pc, #104]	; (8011fe0 <ip4_input+0x240>)
 8011f78:	695b      	ldr	r3, [r3, #20]
 8011f7a:	6939      	ldr	r1, [r7, #16]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f000 f90b 	bl	8012198 <ip4_addr_isbroadcast_u32>
 8011f82:	4603      	mov	r3, r0
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d10f      	bne.n	8011fa8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011f88:	4b15      	ldr	r3, [pc, #84]	; (8011fe0 <ip4_input+0x240>)
 8011f8a:	695b      	ldr	r3, [r3, #20]
 8011f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011f90:	2be0      	cmp	r3, #224	; 0xe0
 8011f92:	d009      	beq.n	8011fa8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011f94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011f98:	4619      	mov	r1, r3
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f7f8 fe4f 	bl	800ac3e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011fa0:	2102      	movs	r1, #2
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f7ff fdd8 	bl	8011b58 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f7f8 fe5b 	bl	800ac64 <pbuf_free>
        break;
 8011fae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011fb0:	4b0b      	ldr	r3, [pc, #44]	; (8011fe0 <ip4_input+0x240>)
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011fb6:	4b0a      	ldr	r3, [pc, #40]	; (8011fe0 <ip4_input+0x240>)
 8011fb8:	2200      	movs	r2, #0
 8011fba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011fbc:	4b08      	ldr	r3, [pc, #32]	; (8011fe0 <ip4_input+0x240>)
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011fc2:	4b07      	ldr	r3, [pc, #28]	; (8011fe0 <ip4_input+0x240>)
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011fc8:	4b05      	ldr	r3, [pc, #20]	; (8011fe0 <ip4_input+0x240>)
 8011fca:	2200      	movs	r2, #0
 8011fcc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011fce:	4b04      	ldr	r3, [pc, #16]	; (8011fe0 <ip4_input+0x240>)
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011fd4:	2300      	movs	r3, #0
}
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	3718      	adds	r7, #24
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}
 8011fde:	bf00      	nop
 8011fe0:	200092d0 	.word	0x200092d0
 8011fe4:	2000ca18 	.word	0x2000ca18

08011fe8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b08a      	sub	sp, #40	; 0x28
 8011fec:	af04      	add	r7, sp, #16
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	60b9      	str	r1, [r7, #8]
 8011ff2:	607a      	str	r2, [r7, #4]
 8011ff4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d009      	beq.n	8012014 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d003      	beq.n	801200e <ip4_output_if+0x26>
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d102      	bne.n	8012014 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012010:	3304      	adds	r3, #4
 8012012:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012014:	78fa      	ldrb	r2, [r7, #3]
 8012016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012018:	9302      	str	r3, [sp, #8]
 801201a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801201e:	9301      	str	r3, [sp, #4]
 8012020:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012024:	9300      	str	r3, [sp, #0]
 8012026:	4613      	mov	r3, r2
 8012028:	687a      	ldr	r2, [r7, #4]
 801202a:	6979      	ldr	r1, [r7, #20]
 801202c:	68f8      	ldr	r0, [r7, #12]
 801202e:	f000 f805 	bl	801203c <ip4_output_if_src>
 8012032:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012034:	4618      	mov	r0, r3
 8012036:	3718      	adds	r7, #24
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b088      	sub	sp, #32
 8012040:	af00      	add	r7, sp, #0
 8012042:	60f8      	str	r0, [r7, #12]
 8012044:	60b9      	str	r1, [r7, #8]
 8012046:	607a      	str	r2, [r7, #4]
 8012048:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	7b9b      	ldrb	r3, [r3, #14]
 801204e:	2b01      	cmp	r3, #1
 8012050:	d006      	beq.n	8012060 <ip4_output_if_src+0x24>
 8012052:	4b4b      	ldr	r3, [pc, #300]	; (8012180 <ip4_output_if_src+0x144>)
 8012054:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012058:	494a      	ldr	r1, [pc, #296]	; (8012184 <ip4_output_if_src+0x148>)
 801205a:	484b      	ldr	r0, [pc, #300]	; (8012188 <ip4_output_if_src+0x14c>)
 801205c:	f001 fae0 	bl	8013620 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d060      	beq.n	8012128 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012066:	2314      	movs	r3, #20
 8012068:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801206a:	2114      	movs	r1, #20
 801206c:	68f8      	ldr	r0, [r7, #12]
 801206e:	f7f8 fd63 	bl	800ab38 <pbuf_add_header>
 8012072:	4603      	mov	r3, r0
 8012074:	2b00      	cmp	r3, #0
 8012076:	d002      	beq.n	801207e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012078:	f06f 0301 	mvn.w	r3, #1
 801207c:	e07c      	b.n	8012178 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	685b      	ldr	r3, [r3, #4]
 8012082:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	895b      	ldrh	r3, [r3, #10]
 8012088:	2b13      	cmp	r3, #19
 801208a:	d806      	bhi.n	801209a <ip4_output_if_src+0x5e>
 801208c:	4b3c      	ldr	r3, [pc, #240]	; (8012180 <ip4_output_if_src+0x144>)
 801208e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012092:	493e      	ldr	r1, [pc, #248]	; (801218c <ip4_output_if_src+0x150>)
 8012094:	483c      	ldr	r0, [pc, #240]	; (8012188 <ip4_output_if_src+0x14c>)
 8012096:	f001 fac3 	bl	8013620 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801209a:	69fb      	ldr	r3, [r7, #28]
 801209c:	78fa      	ldrb	r2, [r7, #3]
 801209e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80120a0:	69fb      	ldr	r3, [r7, #28]
 80120a2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80120a6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681a      	ldr	r2, [r3, #0]
 80120ac:	69fb      	ldr	r3, [r7, #28]
 80120ae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80120b0:	8b7b      	ldrh	r3, [r7, #26]
 80120b2:	089b      	lsrs	r3, r3, #2
 80120b4:	b29b      	uxth	r3, r3
 80120b6:	b2db      	uxtb	r3, r3
 80120b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120bc:	b2da      	uxtb	r2, r3
 80120be:	69fb      	ldr	r3, [r7, #28]
 80120c0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80120c2:	69fb      	ldr	r3, [r7, #28]
 80120c4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80120c8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	891b      	ldrh	r3, [r3, #8]
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7f7 f9d6 	bl	8009480 <lwip_htons>
 80120d4:	4603      	mov	r3, r0
 80120d6:	461a      	mov	r2, r3
 80120d8:	69fb      	ldr	r3, [r7, #28]
 80120da:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80120dc:	69fb      	ldr	r3, [r7, #28]
 80120de:	2200      	movs	r2, #0
 80120e0:	719a      	strb	r2, [r3, #6]
 80120e2:	2200      	movs	r2, #0
 80120e4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80120e6:	4b2a      	ldr	r3, [pc, #168]	; (8012190 <ip4_output_if_src+0x154>)
 80120e8:	881b      	ldrh	r3, [r3, #0]
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7f7 f9c8 	bl	8009480 <lwip_htons>
 80120f0:	4603      	mov	r3, r0
 80120f2:	461a      	mov	r2, r3
 80120f4:	69fb      	ldr	r3, [r7, #28]
 80120f6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80120f8:	4b25      	ldr	r3, [pc, #148]	; (8012190 <ip4_output_if_src+0x154>)
 80120fa:	881b      	ldrh	r3, [r3, #0]
 80120fc:	3301      	adds	r3, #1
 80120fe:	b29a      	uxth	r2, r3
 8012100:	4b23      	ldr	r3, [pc, #140]	; (8012190 <ip4_output_if_src+0x154>)
 8012102:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012104:	68bb      	ldr	r3, [r7, #8]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d104      	bne.n	8012114 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801210a:	4b22      	ldr	r3, [pc, #136]	; (8012194 <ip4_output_if_src+0x158>)
 801210c:	681a      	ldr	r2, [r3, #0]
 801210e:	69fb      	ldr	r3, [r7, #28]
 8012110:	60da      	str	r2, [r3, #12]
 8012112:	e003      	b.n	801211c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	681a      	ldr	r2, [r3, #0]
 8012118:	69fb      	ldr	r3, [r7, #28]
 801211a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801211c:	69fb      	ldr	r3, [r7, #28]
 801211e:	2200      	movs	r2, #0
 8012120:	729a      	strb	r2, [r3, #10]
 8012122:	2200      	movs	r2, #0
 8012124:	72da      	strb	r2, [r3, #11]
 8012126:	e00f      	b.n	8012148 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	895b      	ldrh	r3, [r3, #10]
 801212c:	2b13      	cmp	r3, #19
 801212e:	d802      	bhi.n	8012136 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012130:	f06f 0301 	mvn.w	r3, #1
 8012134:	e020      	b.n	8012178 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	685b      	ldr	r3, [r3, #4]
 801213a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801213c:	69fb      	ldr	r3, [r7, #28]
 801213e:	691b      	ldr	r3, [r3, #16]
 8012140:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012142:	f107 0314 	add.w	r3, r7, #20
 8012146:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801214a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801214c:	2b00      	cmp	r3, #0
 801214e:	d00c      	beq.n	801216a <ip4_output_if_src+0x12e>
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	891a      	ldrh	r2, [r3, #8]
 8012154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012156:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012158:	429a      	cmp	r2, r3
 801215a:	d906      	bls.n	801216a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801215c:	687a      	ldr	r2, [r7, #4]
 801215e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012160:	68f8      	ldr	r0, [r7, #12]
 8012162:	f000 fd53 	bl	8012c0c <ip4_frag>
 8012166:	4603      	mov	r3, r0
 8012168:	e006      	b.n	8012178 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801216c:	695b      	ldr	r3, [r3, #20]
 801216e:	687a      	ldr	r2, [r7, #4]
 8012170:	68f9      	ldr	r1, [r7, #12]
 8012172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012174:	4798      	blx	r3
 8012176:	4603      	mov	r3, r0
}
 8012178:	4618      	mov	r0, r3
 801217a:	3720      	adds	r7, #32
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}
 8012180:	08016c90 	.word	0x08016c90
 8012184:	08016cc4 	.word	0x08016cc4
 8012188:	08016cd0 	.word	0x08016cd0
 801218c:	08016cf8 	.word	0x08016cf8
 8012190:	2000cb76 	.word	0x2000cb76
 8012194:	08017118 	.word	0x08017118

08012198 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012198:	b480      	push	{r7}
 801219a:	b085      	sub	sp, #20
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ac:	d002      	beq.n	80121b4 <ip4_addr_isbroadcast_u32+0x1c>
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d101      	bne.n	80121b8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80121b4:	2301      	movs	r3, #1
 80121b6:	e02a      	b.n	801220e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80121be:	f003 0302 	and.w	r3, r3, #2
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d101      	bne.n	80121ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80121c6:	2300      	movs	r3, #0
 80121c8:	e021      	b.n	801220e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	3304      	adds	r3, #4
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	687a      	ldr	r2, [r7, #4]
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d101      	bne.n	80121da <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80121d6:	2300      	movs	r3, #0
 80121d8:	e019      	b.n	801220e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80121da:	68fa      	ldr	r2, [r7, #12]
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	3304      	adds	r3, #4
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	405a      	eors	r2, r3
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	3308      	adds	r3, #8
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	4013      	ands	r3, r2
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d10d      	bne.n	801220c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	3308      	adds	r3, #8
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	43da      	mvns	r2, r3
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	3308      	adds	r3, #8
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012204:	429a      	cmp	r2, r3
 8012206:	d101      	bne.n	801220c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012208:	2301      	movs	r3, #1
 801220a:	e000      	b.n	801220e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801220c:	2300      	movs	r3, #0
  }
}
 801220e:	4618      	mov	r0, r3
 8012210:	3714      	adds	r7, #20
 8012212:	46bd      	mov	sp, r7
 8012214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012218:	4770      	bx	lr
	...

0801221c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b084      	sub	sp, #16
 8012220:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012222:	2300      	movs	r3, #0
 8012224:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012226:	4b12      	ldr	r3, [pc, #72]	; (8012270 <ip_reass_tmr+0x54>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801222c:	e018      	b.n	8012260 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	7fdb      	ldrb	r3, [r3, #31]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d00b      	beq.n	801224e <ip_reass_tmr+0x32>
      r->timer--;
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	7fdb      	ldrb	r3, [r3, #31]
 801223a:	3b01      	subs	r3, #1
 801223c:	b2da      	uxtb	r2, r3
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	60fb      	str	r3, [r7, #12]
 801224c:	e008      	b.n	8012260 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012258:	68b9      	ldr	r1, [r7, #8]
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f000 f80a 	bl	8012274 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d1e3      	bne.n	801222e <ip_reass_tmr+0x12>
    }
  }
}
 8012266:	bf00      	nop
 8012268:	bf00      	nop
 801226a:	3710      	adds	r7, #16
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	2000cb78 	.word	0x2000cb78

08012274 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b088      	sub	sp, #32
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801227e:	2300      	movs	r3, #0
 8012280:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012282:	683a      	ldr	r2, [r7, #0]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	429a      	cmp	r2, r3
 8012288:	d105      	bne.n	8012296 <ip_reass_free_complete_datagram+0x22>
 801228a:	4b45      	ldr	r3, [pc, #276]	; (80123a0 <ip_reass_free_complete_datagram+0x12c>)
 801228c:	22ab      	movs	r2, #171	; 0xab
 801228e:	4945      	ldr	r1, [pc, #276]	; (80123a4 <ip_reass_free_complete_datagram+0x130>)
 8012290:	4845      	ldr	r0, [pc, #276]	; (80123a8 <ip_reass_free_complete_datagram+0x134>)
 8012292:	f001 f9c5 	bl	8013620 <iprintf>
  if (prev != NULL) {
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d00a      	beq.n	80122b2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	687a      	ldr	r2, [r7, #4]
 80122a2:	429a      	cmp	r2, r3
 80122a4:	d005      	beq.n	80122b2 <ip_reass_free_complete_datagram+0x3e>
 80122a6:	4b3e      	ldr	r3, [pc, #248]	; (80123a0 <ip_reass_free_complete_datagram+0x12c>)
 80122a8:	22ad      	movs	r2, #173	; 0xad
 80122aa:	4940      	ldr	r1, [pc, #256]	; (80123ac <ip_reass_free_complete_datagram+0x138>)
 80122ac:	483e      	ldr	r0, [pc, #248]	; (80123a8 <ip_reass_free_complete_datagram+0x134>)
 80122ae:	f001 f9b7 	bl	8013620 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	685b      	ldr	r3, [r3, #4]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	889b      	ldrh	r3, [r3, #4]
 80122be:	b29b      	uxth	r3, r3
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d12a      	bne.n	801231a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	681a      	ldr	r2, [r3, #0]
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80122d2:	69bb      	ldr	r3, [r7, #24]
 80122d4:	6858      	ldr	r0, [r3, #4]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	3308      	adds	r3, #8
 80122da:	2214      	movs	r2, #20
 80122dc:	4619      	mov	r1, r3
 80122de:	f001 f8f4 	bl	80134ca <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80122e2:	2101      	movs	r1, #1
 80122e4:	69b8      	ldr	r0, [r7, #24]
 80122e6:	f7ff fc47 	bl	8011b78 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80122ea:	69b8      	ldr	r0, [r7, #24]
 80122ec:	f7f8 fd48 	bl	800ad80 <pbuf_clen>
 80122f0:	4603      	mov	r3, r0
 80122f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80122f4:	8bfa      	ldrh	r2, [r7, #30]
 80122f6:	8a7b      	ldrh	r3, [r7, #18]
 80122f8:	4413      	add	r3, r2
 80122fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122fe:	db05      	blt.n	801230c <ip_reass_free_complete_datagram+0x98>
 8012300:	4b27      	ldr	r3, [pc, #156]	; (80123a0 <ip_reass_free_complete_datagram+0x12c>)
 8012302:	22bc      	movs	r2, #188	; 0xbc
 8012304:	492a      	ldr	r1, [pc, #168]	; (80123b0 <ip_reass_free_complete_datagram+0x13c>)
 8012306:	4828      	ldr	r0, [pc, #160]	; (80123a8 <ip_reass_free_complete_datagram+0x134>)
 8012308:	f001 f98a 	bl	8013620 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801230c:	8bfa      	ldrh	r2, [r7, #30]
 801230e:	8a7b      	ldrh	r3, [r7, #18]
 8012310:	4413      	add	r3, r2
 8012312:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012314:	69b8      	ldr	r0, [r7, #24]
 8012316:	f7f8 fca5 	bl	800ac64 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	685b      	ldr	r3, [r3, #4]
 801231e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012320:	e01f      	b.n	8012362 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012322:	69bb      	ldr	r3, [r7, #24]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012328:	69bb      	ldr	r3, [r7, #24]
 801232a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012332:	68f8      	ldr	r0, [r7, #12]
 8012334:	f7f8 fd24 	bl	800ad80 <pbuf_clen>
 8012338:	4603      	mov	r3, r0
 801233a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801233c:	8bfa      	ldrh	r2, [r7, #30]
 801233e:	8a7b      	ldrh	r3, [r7, #18]
 8012340:	4413      	add	r3, r2
 8012342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012346:	db05      	blt.n	8012354 <ip_reass_free_complete_datagram+0xe0>
 8012348:	4b15      	ldr	r3, [pc, #84]	; (80123a0 <ip_reass_free_complete_datagram+0x12c>)
 801234a:	22cc      	movs	r2, #204	; 0xcc
 801234c:	4918      	ldr	r1, [pc, #96]	; (80123b0 <ip_reass_free_complete_datagram+0x13c>)
 801234e:	4816      	ldr	r0, [pc, #88]	; (80123a8 <ip_reass_free_complete_datagram+0x134>)
 8012350:	f001 f966 	bl	8013620 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012354:	8bfa      	ldrh	r2, [r7, #30]
 8012356:	8a7b      	ldrh	r3, [r7, #18]
 8012358:	4413      	add	r3, r2
 801235a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801235c:	68f8      	ldr	r0, [r7, #12]
 801235e:	f7f8 fc81 	bl	800ac64 <pbuf_free>
  while (p != NULL) {
 8012362:	69bb      	ldr	r3, [r7, #24]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d1dc      	bne.n	8012322 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012368:	6839      	ldr	r1, [r7, #0]
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f000 f8c2 	bl	80124f4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012370:	4b10      	ldr	r3, [pc, #64]	; (80123b4 <ip_reass_free_complete_datagram+0x140>)
 8012372:	881b      	ldrh	r3, [r3, #0]
 8012374:	8bfa      	ldrh	r2, [r7, #30]
 8012376:	429a      	cmp	r2, r3
 8012378:	d905      	bls.n	8012386 <ip_reass_free_complete_datagram+0x112>
 801237a:	4b09      	ldr	r3, [pc, #36]	; (80123a0 <ip_reass_free_complete_datagram+0x12c>)
 801237c:	22d2      	movs	r2, #210	; 0xd2
 801237e:	490e      	ldr	r1, [pc, #56]	; (80123b8 <ip_reass_free_complete_datagram+0x144>)
 8012380:	4809      	ldr	r0, [pc, #36]	; (80123a8 <ip_reass_free_complete_datagram+0x134>)
 8012382:	f001 f94d 	bl	8013620 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012386:	4b0b      	ldr	r3, [pc, #44]	; (80123b4 <ip_reass_free_complete_datagram+0x140>)
 8012388:	881a      	ldrh	r2, [r3, #0]
 801238a:	8bfb      	ldrh	r3, [r7, #30]
 801238c:	1ad3      	subs	r3, r2, r3
 801238e:	b29a      	uxth	r2, r3
 8012390:	4b08      	ldr	r3, [pc, #32]	; (80123b4 <ip_reass_free_complete_datagram+0x140>)
 8012392:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012394:	8bfb      	ldrh	r3, [r7, #30]
}
 8012396:	4618      	mov	r0, r3
 8012398:	3720      	adds	r7, #32
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}
 801239e:	bf00      	nop
 80123a0:	08016d28 	.word	0x08016d28
 80123a4:	08016d64 	.word	0x08016d64
 80123a8:	08016d70 	.word	0x08016d70
 80123ac:	08016d98 	.word	0x08016d98
 80123b0:	08016dac 	.word	0x08016dac
 80123b4:	2000cb7c 	.word	0x2000cb7c
 80123b8:	08016dcc 	.word	0x08016dcc

080123bc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b08a      	sub	sp, #40	; 0x28
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
 80123c4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80123c6:	2300      	movs	r3, #0
 80123c8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80123ca:	2300      	movs	r3, #0
 80123cc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80123ce:	2300      	movs	r3, #0
 80123d0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80123d2:	2300      	movs	r3, #0
 80123d4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80123d6:	2300      	movs	r3, #0
 80123d8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80123da:	4b28      	ldr	r3, [pc, #160]	; (801247c <ip_reass_remove_oldest_datagram+0xc0>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80123e0:	e030      	b.n	8012444 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80123e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e4:	695a      	ldr	r2, [r3, #20]
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	68db      	ldr	r3, [r3, #12]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d10c      	bne.n	8012408 <ip_reass_remove_oldest_datagram+0x4c>
 80123ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f0:	699a      	ldr	r2, [r3, #24]
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	691b      	ldr	r3, [r3, #16]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d106      	bne.n	8012408 <ip_reass_remove_oldest_datagram+0x4c>
 80123fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fc:	899a      	ldrh	r2, [r3, #12]
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	889b      	ldrh	r3, [r3, #4]
 8012402:	b29b      	uxth	r3, r3
 8012404:	429a      	cmp	r2, r3
 8012406:	d014      	beq.n	8012432 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	3301      	adds	r3, #1
 801240c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801240e:	6a3b      	ldr	r3, [r7, #32]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d104      	bne.n	801241e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012416:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012418:	69fb      	ldr	r3, [r7, #28]
 801241a:	61bb      	str	r3, [r7, #24]
 801241c:	e009      	b.n	8012432 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012420:	7fda      	ldrb	r2, [r3, #31]
 8012422:	6a3b      	ldr	r3, [r7, #32]
 8012424:	7fdb      	ldrb	r3, [r3, #31]
 8012426:	429a      	cmp	r2, r3
 8012428:	d803      	bhi.n	8012432 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801242e:	69fb      	ldr	r3, [r7, #28]
 8012430:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d001      	beq.n	801243e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012446:	2b00      	cmp	r3, #0
 8012448:	d1cb      	bne.n	80123e2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801244a:	6a3b      	ldr	r3, [r7, #32]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d008      	beq.n	8012462 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012450:	69b9      	ldr	r1, [r7, #24]
 8012452:	6a38      	ldr	r0, [r7, #32]
 8012454:	f7ff ff0e 	bl	8012274 <ip_reass_free_complete_datagram>
 8012458:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801245a:	697a      	ldr	r2, [r7, #20]
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	4413      	add	r3, r2
 8012460:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012462:	697a      	ldr	r2, [r7, #20]
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	429a      	cmp	r2, r3
 8012468:	da02      	bge.n	8012470 <ip_reass_remove_oldest_datagram+0xb4>
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	2b01      	cmp	r3, #1
 801246e:	dcac      	bgt.n	80123ca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012470:	697b      	ldr	r3, [r7, #20]
}
 8012472:	4618      	mov	r0, r3
 8012474:	3728      	adds	r7, #40	; 0x28
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
 801247a:	bf00      	nop
 801247c:	2000cb78 	.word	0x2000cb78

08012480 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b084      	sub	sp, #16
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
 8012488:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801248a:	2004      	movs	r0, #4
 801248c:	f7f7 fcd0 	bl	8009e30 <memp_malloc>
 8012490:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d110      	bne.n	80124ba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012498:	6839      	ldr	r1, [r7, #0]
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f7ff ff8e 	bl	80123bc <ip_reass_remove_oldest_datagram>
 80124a0:	4602      	mov	r2, r0
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	4293      	cmp	r3, r2
 80124a6:	dc03      	bgt.n	80124b0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80124a8:	2004      	movs	r0, #4
 80124aa:	f7f7 fcc1 	bl	8009e30 <memp_malloc>
 80124ae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d101      	bne.n	80124ba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80124b6:	2300      	movs	r3, #0
 80124b8:	e016      	b.n	80124e8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80124ba:	2220      	movs	r2, #32
 80124bc:	2100      	movs	r1, #0
 80124be:	68f8      	ldr	r0, [r7, #12]
 80124c0:	f001 f811 	bl	80134e6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	220f      	movs	r2, #15
 80124c8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80124ca:	4b09      	ldr	r3, [pc, #36]	; (80124f0 <ip_reass_enqueue_new_datagram+0x70>)
 80124cc:	681a      	ldr	r2, [r3, #0]
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80124d2:	4a07      	ldr	r2, [pc, #28]	; (80124f0 <ip_reass_enqueue_new_datagram+0x70>)
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	3308      	adds	r3, #8
 80124dc:	2214      	movs	r2, #20
 80124de:	6879      	ldr	r1, [r7, #4]
 80124e0:	4618      	mov	r0, r3
 80124e2:	f000 fff2 	bl	80134ca <memcpy>
  return ipr;
 80124e6:	68fb      	ldr	r3, [r7, #12]
}
 80124e8:	4618      	mov	r0, r3
 80124ea:	3710      	adds	r7, #16
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}
 80124f0:	2000cb78 	.word	0x2000cb78

080124f4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b082      	sub	sp, #8
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80124fe:	4b10      	ldr	r3, [pc, #64]	; (8012540 <ip_reass_dequeue_datagram+0x4c>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	687a      	ldr	r2, [r7, #4]
 8012504:	429a      	cmp	r2, r3
 8012506:	d104      	bne.n	8012512 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	4a0c      	ldr	r2, [pc, #48]	; (8012540 <ip_reass_dequeue_datagram+0x4c>)
 801250e:	6013      	str	r3, [r2, #0]
 8012510:	e00d      	b.n	801252e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d106      	bne.n	8012526 <ip_reass_dequeue_datagram+0x32>
 8012518:	4b0a      	ldr	r3, [pc, #40]	; (8012544 <ip_reass_dequeue_datagram+0x50>)
 801251a:	f240 1245 	movw	r2, #325	; 0x145
 801251e:	490a      	ldr	r1, [pc, #40]	; (8012548 <ip_reass_dequeue_datagram+0x54>)
 8012520:	480a      	ldr	r0, [pc, #40]	; (801254c <ip_reass_dequeue_datagram+0x58>)
 8012522:	f001 f87d 	bl	8013620 <iprintf>
    prev->next = ipr->next;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681a      	ldr	r2, [r3, #0]
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801252e:	6879      	ldr	r1, [r7, #4]
 8012530:	2004      	movs	r0, #4
 8012532:	f7f7 fcf3 	bl	8009f1c <memp_free>
}
 8012536:	bf00      	nop
 8012538:	3708      	adds	r7, #8
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}
 801253e:	bf00      	nop
 8012540:	2000cb78 	.word	0x2000cb78
 8012544:	08016d28 	.word	0x08016d28
 8012548:	08016df0 	.word	0x08016df0
 801254c:	08016d70 	.word	0x08016d70

08012550 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b08c      	sub	sp, #48	; 0x30
 8012554:	af00      	add	r7, sp, #0
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801255c:	2300      	movs	r3, #0
 801255e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012560:	2301      	movs	r3, #1
 8012562:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801256a:	69fb      	ldr	r3, [r7, #28]
 801256c:	885b      	ldrh	r3, [r3, #2]
 801256e:	b29b      	uxth	r3, r3
 8012570:	4618      	mov	r0, r3
 8012572:	f7f6 ff85 	bl	8009480 <lwip_htons>
 8012576:	4603      	mov	r3, r0
 8012578:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801257a:	69fb      	ldr	r3, [r7, #28]
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	f003 030f 	and.w	r3, r3, #15
 8012582:	b2db      	uxtb	r3, r3
 8012584:	009b      	lsls	r3, r3, #2
 8012586:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012588:	7e7b      	ldrb	r3, [r7, #25]
 801258a:	b29b      	uxth	r3, r3
 801258c:	8b7a      	ldrh	r2, [r7, #26]
 801258e:	429a      	cmp	r2, r3
 8012590:	d202      	bcs.n	8012598 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012592:	f04f 33ff 	mov.w	r3, #4294967295
 8012596:	e135      	b.n	8012804 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012598:	7e7b      	ldrb	r3, [r7, #25]
 801259a:	b29b      	uxth	r3, r3
 801259c:	8b7a      	ldrh	r2, [r7, #26]
 801259e:	1ad3      	subs	r3, r2, r3
 80125a0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80125a2:	69fb      	ldr	r3, [r7, #28]
 80125a4:	88db      	ldrh	r3, [r3, #6]
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	4618      	mov	r0, r3
 80125aa:	f7f6 ff69 	bl	8009480 <lwip_htons>
 80125ae:	4603      	mov	r3, r0
 80125b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80125b4:	b29b      	uxth	r3, r3
 80125b6:	00db      	lsls	r3, r3, #3
 80125b8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80125c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c2:	2200      	movs	r2, #0
 80125c4:	701a      	strb	r2, [r3, #0]
 80125c6:	2200      	movs	r2, #0
 80125c8:	705a      	strb	r2, [r3, #1]
 80125ca:	2200      	movs	r2, #0
 80125cc:	709a      	strb	r2, [r3, #2]
 80125ce:	2200      	movs	r2, #0
 80125d0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80125d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d4:	8afa      	ldrh	r2, [r7, #22]
 80125d6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80125d8:	8afa      	ldrh	r2, [r7, #22]
 80125da:	8b7b      	ldrh	r3, [r7, #26]
 80125dc:	4413      	add	r3, r2
 80125de:	b29a      	uxth	r2, r3
 80125e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80125e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e6:	88db      	ldrh	r3, [r3, #6]
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	8afa      	ldrh	r2, [r7, #22]
 80125ec:	429a      	cmp	r2, r3
 80125ee:	d902      	bls.n	80125f6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80125f0:	f04f 33ff 	mov.w	r3, #4294967295
 80125f4:	e106      	b.n	8012804 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	685b      	ldr	r3, [r3, #4]
 80125fa:	627b      	str	r3, [r7, #36]	; 0x24
 80125fc:	e068      	b.n	80126d0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80125fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012606:	889b      	ldrh	r3, [r3, #4]
 8012608:	b29a      	uxth	r2, r3
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	889b      	ldrh	r3, [r3, #4]
 801260e:	b29b      	uxth	r3, r3
 8012610:	429a      	cmp	r2, r3
 8012612:	d235      	bcs.n	8012680 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012618:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801261c:	2b00      	cmp	r3, #0
 801261e:	d020      	beq.n	8012662 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012622:	889b      	ldrh	r3, [r3, #4]
 8012624:	b29a      	uxth	r2, r3
 8012626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012628:	88db      	ldrh	r3, [r3, #6]
 801262a:	b29b      	uxth	r3, r3
 801262c:	429a      	cmp	r2, r3
 801262e:	d307      	bcc.n	8012640 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012632:	88db      	ldrh	r3, [r3, #6]
 8012634:	b29a      	uxth	r2, r3
 8012636:	693b      	ldr	r3, [r7, #16]
 8012638:	889b      	ldrh	r3, [r3, #4]
 801263a:	b29b      	uxth	r3, r3
 801263c:	429a      	cmp	r2, r3
 801263e:	d902      	bls.n	8012646 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012640:	f04f 33ff 	mov.w	r3, #4294967295
 8012644:	e0de      	b.n	8012804 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012648:	68ba      	ldr	r2, [r7, #8]
 801264a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801264e:	88db      	ldrh	r3, [r3, #6]
 8012650:	b29a      	uxth	r2, r3
 8012652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012654:	889b      	ldrh	r3, [r3, #4]
 8012656:	b29b      	uxth	r3, r3
 8012658:	429a      	cmp	r2, r3
 801265a:	d03d      	beq.n	80126d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801265c:	2300      	movs	r3, #0
 801265e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012660:	e03a      	b.n	80126d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012664:	88db      	ldrh	r3, [r3, #6]
 8012666:	b29a      	uxth	r2, r3
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	889b      	ldrh	r3, [r3, #4]
 801266c:	b29b      	uxth	r3, r3
 801266e:	429a      	cmp	r2, r3
 8012670:	d902      	bls.n	8012678 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012672:	f04f 33ff 	mov.w	r3, #4294967295
 8012676:	e0c5      	b.n	8012804 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	68ba      	ldr	r2, [r7, #8]
 801267c:	605a      	str	r2, [r3, #4]
      break;
 801267e:	e02b      	b.n	80126d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012682:	889b      	ldrh	r3, [r3, #4]
 8012684:	b29a      	uxth	r2, r3
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	889b      	ldrh	r3, [r3, #4]
 801268a:	b29b      	uxth	r3, r3
 801268c:	429a      	cmp	r2, r3
 801268e:	d102      	bne.n	8012696 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012690:	f04f 33ff 	mov.w	r3, #4294967295
 8012694:	e0b6      	b.n	8012804 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012698:	889b      	ldrh	r3, [r3, #4]
 801269a:	b29a      	uxth	r2, r3
 801269c:	693b      	ldr	r3, [r7, #16]
 801269e:	88db      	ldrh	r3, [r3, #6]
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	429a      	cmp	r2, r3
 80126a4:	d202      	bcs.n	80126ac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80126a6:	f04f 33ff 	mov.w	r3, #4294967295
 80126aa:	e0ab      	b.n	8012804 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80126ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d009      	beq.n	80126c6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80126b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b4:	88db      	ldrh	r3, [r3, #6]
 80126b6:	b29a      	uxth	r2, r3
 80126b8:	693b      	ldr	r3, [r7, #16]
 80126ba:	889b      	ldrh	r3, [r3, #4]
 80126bc:	b29b      	uxth	r3, r3
 80126be:	429a      	cmp	r2, r3
 80126c0:	d001      	beq.n	80126c6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80126c2:	2300      	movs	r3, #0
 80126c4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80126c6:	693b      	ldr	r3, [r7, #16]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80126cc:	693b      	ldr	r3, [r7, #16]
 80126ce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80126d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d193      	bne.n	80125fe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80126d6:	e000      	b.n	80126da <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80126d8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80126da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d12d      	bne.n	801273c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80126e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d01c      	beq.n	8012720 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80126e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e8:	88db      	ldrh	r3, [r3, #6]
 80126ea:	b29a      	uxth	r2, r3
 80126ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ee:	889b      	ldrh	r3, [r3, #4]
 80126f0:	b29b      	uxth	r3, r3
 80126f2:	429a      	cmp	r2, r3
 80126f4:	d906      	bls.n	8012704 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80126f6:	4b45      	ldr	r3, [pc, #276]	; (801280c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80126f8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80126fc:	4944      	ldr	r1, [pc, #272]	; (8012810 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80126fe:	4845      	ldr	r0, [pc, #276]	; (8012814 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012700:	f000 ff8e 	bl	8013620 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012706:	68ba      	ldr	r2, [r7, #8]
 8012708:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801270c:	88db      	ldrh	r3, [r3, #6]
 801270e:	b29a      	uxth	r2, r3
 8012710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012712:	889b      	ldrh	r3, [r3, #4]
 8012714:	b29b      	uxth	r3, r3
 8012716:	429a      	cmp	r2, r3
 8012718:	d010      	beq.n	801273c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801271a:	2300      	movs	r3, #0
 801271c:	623b      	str	r3, [r7, #32]
 801271e:	e00d      	b.n	801273c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d006      	beq.n	8012736 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012728:	4b38      	ldr	r3, [pc, #224]	; (801280c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801272a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801272e:	493a      	ldr	r1, [pc, #232]	; (8012818 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012730:	4838      	ldr	r0, [pc, #224]	; (8012814 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012732:	f000 ff75 	bl	8013620 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	68ba      	ldr	r2, [r7, #8]
 801273a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d105      	bne.n	801274e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	7f9b      	ldrb	r3, [r3, #30]
 8012746:	f003 0301 	and.w	r3, r3, #1
 801274a:	2b00      	cmp	r3, #0
 801274c:	d059      	beq.n	8012802 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801274e:	6a3b      	ldr	r3, [r7, #32]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d04f      	beq.n	80127f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d006      	beq.n	801276a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	685b      	ldr	r3, [r3, #4]
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	889b      	ldrh	r3, [r3, #4]
 8012764:	b29b      	uxth	r3, r3
 8012766:	2b00      	cmp	r3, #0
 8012768:	d002      	beq.n	8012770 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801276a:	2300      	movs	r3, #0
 801276c:	623b      	str	r3, [r7, #32]
 801276e:	e041      	b.n	80127f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012772:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801277a:	e012      	b.n	80127a2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012784:	88db      	ldrh	r3, [r3, #6]
 8012786:	b29a      	uxth	r2, r3
 8012788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278a:	889b      	ldrh	r3, [r3, #4]
 801278c:	b29b      	uxth	r3, r3
 801278e:	429a      	cmp	r2, r3
 8012790:	d002      	beq.n	8012798 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012792:	2300      	movs	r3, #0
 8012794:	623b      	str	r3, [r7, #32]
            break;
 8012796:	e007      	b.n	80127a8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80127a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d1e9      	bne.n	801277c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80127a8:	6a3b      	ldr	r3, [r7, #32]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d022      	beq.n	80127f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	685b      	ldr	r3, [r3, #4]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d106      	bne.n	80127c4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80127b6:	4b15      	ldr	r3, [pc, #84]	; (801280c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80127b8:	f240 12df 	movw	r2, #479	; 0x1df
 80127bc:	4917      	ldr	r1, [pc, #92]	; (801281c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80127be:	4815      	ldr	r0, [pc, #84]	; (8012814 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80127c0:	f000 ff2e 	bl	8013620 <iprintf>
          LWIP_ASSERT("sanity check",
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	685b      	ldr	r3, [r3, #4]
 80127c8:	685b      	ldr	r3, [r3, #4]
 80127ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d106      	bne.n	80127de <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80127d0:	4b0e      	ldr	r3, [pc, #56]	; (801280c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80127d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80127d6:	4911      	ldr	r1, [pc, #68]	; (801281c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80127d8:	480e      	ldr	r0, [pc, #56]	; (8012814 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80127da:	f000 ff21 	bl	8013620 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80127de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d006      	beq.n	80127f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80127e6:	4b09      	ldr	r3, [pc, #36]	; (801280c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80127e8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80127ec:	490c      	ldr	r1, [pc, #48]	; (8012820 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80127ee:	4809      	ldr	r0, [pc, #36]	; (8012814 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80127f0:	f000 ff16 	bl	8013620 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80127f4:	6a3b      	ldr	r3, [r7, #32]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	bf14      	ite	ne
 80127fa:	2301      	movne	r3, #1
 80127fc:	2300      	moveq	r3, #0
 80127fe:	b2db      	uxtb	r3, r3
 8012800:	e000      	b.n	8012804 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012802:	2300      	movs	r3, #0
}
 8012804:	4618      	mov	r0, r3
 8012806:	3730      	adds	r7, #48	; 0x30
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}
 801280c:	08016d28 	.word	0x08016d28
 8012810:	08016e0c 	.word	0x08016e0c
 8012814:	08016d70 	.word	0x08016d70
 8012818:	08016e2c 	.word	0x08016e2c
 801281c:	08016e64 	.word	0x08016e64
 8012820:	08016e74 	.word	0x08016e74

08012824 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b08e      	sub	sp, #56	; 0x38
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	f003 030f 	and.w	r3, r3, #15
 801283a:	b2db      	uxtb	r3, r3
 801283c:	009b      	lsls	r3, r3, #2
 801283e:	b2db      	uxtb	r3, r3
 8012840:	2b14      	cmp	r3, #20
 8012842:	f040 8171 	bne.w	8012b28 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012848:	88db      	ldrh	r3, [r3, #6]
 801284a:	b29b      	uxth	r3, r3
 801284c:	4618      	mov	r0, r3
 801284e:	f7f6 fe17 	bl	8009480 <lwip_htons>
 8012852:	4603      	mov	r3, r0
 8012854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012858:	b29b      	uxth	r3, r3
 801285a:	00db      	lsls	r3, r3, #3
 801285c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012860:	885b      	ldrh	r3, [r3, #2]
 8012862:	b29b      	uxth	r3, r3
 8012864:	4618      	mov	r0, r3
 8012866:	f7f6 fe0b 	bl	8009480 <lwip_htons>
 801286a:	4603      	mov	r3, r0
 801286c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	f003 030f 	and.w	r3, r3, #15
 8012876:	b2db      	uxtb	r3, r3
 8012878:	009b      	lsls	r3, r3, #2
 801287a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801287e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012882:	b29b      	uxth	r3, r3
 8012884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012886:	429a      	cmp	r2, r3
 8012888:	f0c0 8150 	bcc.w	8012b2c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801288c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012890:	b29b      	uxth	r3, r3
 8012892:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012894:	1ad3      	subs	r3, r2, r3
 8012896:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f7f8 fa71 	bl	800ad80 <pbuf_clen>
 801289e:	4603      	mov	r3, r0
 80128a0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80128a2:	4b8c      	ldr	r3, [pc, #560]	; (8012ad4 <ip4_reass+0x2b0>)
 80128a4:	881b      	ldrh	r3, [r3, #0]
 80128a6:	461a      	mov	r2, r3
 80128a8:	8c3b      	ldrh	r3, [r7, #32]
 80128aa:	4413      	add	r3, r2
 80128ac:	2b0a      	cmp	r3, #10
 80128ae:	dd10      	ble.n	80128d2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80128b0:	8c3b      	ldrh	r3, [r7, #32]
 80128b2:	4619      	mov	r1, r3
 80128b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128b6:	f7ff fd81 	bl	80123bc <ip_reass_remove_oldest_datagram>
 80128ba:	4603      	mov	r3, r0
 80128bc:	2b00      	cmp	r3, #0
 80128be:	f000 8137 	beq.w	8012b30 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80128c2:	4b84      	ldr	r3, [pc, #528]	; (8012ad4 <ip4_reass+0x2b0>)
 80128c4:	881b      	ldrh	r3, [r3, #0]
 80128c6:	461a      	mov	r2, r3
 80128c8:	8c3b      	ldrh	r3, [r7, #32]
 80128ca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80128cc:	2b0a      	cmp	r3, #10
 80128ce:	f300 812f 	bgt.w	8012b30 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80128d2:	4b81      	ldr	r3, [pc, #516]	; (8012ad8 <ip4_reass+0x2b4>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	633b      	str	r3, [r7, #48]	; 0x30
 80128d8:	e015      	b.n	8012906 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80128da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128dc:	695a      	ldr	r2, [r3, #20]
 80128de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e0:	68db      	ldr	r3, [r3, #12]
 80128e2:	429a      	cmp	r2, r3
 80128e4:	d10c      	bne.n	8012900 <ip4_reass+0xdc>
 80128e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e8:	699a      	ldr	r2, [r3, #24]
 80128ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ec:	691b      	ldr	r3, [r3, #16]
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d106      	bne.n	8012900 <ip4_reass+0xdc>
 80128f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f4:	899a      	ldrh	r2, [r3, #12]
 80128f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128f8:	889b      	ldrh	r3, [r3, #4]
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d006      	beq.n	801290e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	633b      	str	r3, [r7, #48]	; 0x30
 8012906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012908:	2b00      	cmp	r3, #0
 801290a:	d1e6      	bne.n	80128da <ip4_reass+0xb6>
 801290c:	e000      	b.n	8012910 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801290e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012912:	2b00      	cmp	r3, #0
 8012914:	d109      	bne.n	801292a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012916:	8c3b      	ldrh	r3, [r7, #32]
 8012918:	4619      	mov	r1, r3
 801291a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801291c:	f7ff fdb0 	bl	8012480 <ip_reass_enqueue_new_datagram>
 8012920:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012924:	2b00      	cmp	r3, #0
 8012926:	d11c      	bne.n	8012962 <ip4_reass+0x13e>
      goto nullreturn;
 8012928:	e105      	b.n	8012b36 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292c:	88db      	ldrh	r3, [r3, #6]
 801292e:	b29b      	uxth	r3, r3
 8012930:	4618      	mov	r0, r3
 8012932:	f7f6 fda5 	bl	8009480 <lwip_htons>
 8012936:	4603      	mov	r3, r0
 8012938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801293c:	2b00      	cmp	r3, #0
 801293e:	d110      	bne.n	8012962 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012942:	89db      	ldrh	r3, [r3, #14]
 8012944:	4618      	mov	r0, r3
 8012946:	f7f6 fd9b 	bl	8009480 <lwip_htons>
 801294a:	4603      	mov	r3, r0
 801294c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012950:	2b00      	cmp	r3, #0
 8012952:	d006      	beq.n	8012962 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012956:	3308      	adds	r3, #8
 8012958:	2214      	movs	r2, #20
 801295a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801295c:	4618      	mov	r0, r3
 801295e:	f000 fdb4 	bl	80134ca <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012964:	88db      	ldrh	r3, [r3, #6]
 8012966:	b29b      	uxth	r3, r3
 8012968:	f003 0320 	and.w	r3, r3, #32
 801296c:	2b00      	cmp	r3, #0
 801296e:	bf0c      	ite	eq
 8012970:	2301      	moveq	r3, #1
 8012972:	2300      	movne	r3, #0
 8012974:	b2db      	uxtb	r3, r3
 8012976:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d00e      	beq.n	801299c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801297e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012982:	4413      	add	r3, r2
 8012984:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012986:	8b7a      	ldrh	r2, [r7, #26]
 8012988:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801298a:	429a      	cmp	r2, r3
 801298c:	f0c0 80a0 	bcc.w	8012ad0 <ip4_reass+0x2ac>
 8012990:	8b7b      	ldrh	r3, [r7, #26]
 8012992:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012996:	4293      	cmp	r3, r2
 8012998:	f200 809a 	bhi.w	8012ad0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801299c:	69fa      	ldr	r2, [r7, #28]
 801299e:	6879      	ldr	r1, [r7, #4]
 80129a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129a2:	f7ff fdd5 	bl	8012550 <ip_reass_chain_frag_into_datagram_and_validate>
 80129a6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129ae:	f000 809b 	beq.w	8012ae8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80129b2:	4b48      	ldr	r3, [pc, #288]	; (8012ad4 <ip4_reass+0x2b0>)
 80129b4:	881a      	ldrh	r2, [r3, #0]
 80129b6:	8c3b      	ldrh	r3, [r7, #32]
 80129b8:	4413      	add	r3, r2
 80129ba:	b29a      	uxth	r2, r3
 80129bc:	4b45      	ldr	r3, [pc, #276]	; (8012ad4 <ip4_reass+0x2b0>)
 80129be:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80129c0:	69fb      	ldr	r3, [r7, #28]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d00d      	beq.n	80129e2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80129c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80129c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129ca:	4413      	add	r3, r2
 80129cc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80129ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d0:	8a7a      	ldrh	r2, [r7, #18]
 80129d2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80129d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d6:	7f9b      	ldrb	r3, [r3, #30]
 80129d8:	f043 0301 	orr.w	r3, r3, #1
 80129dc:	b2da      	uxtb	r2, r3
 80129de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d171      	bne.n	8012acc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80129e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ea:	8b9b      	ldrh	r3, [r3, #28]
 80129ec:	3314      	adds	r3, #20
 80129ee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80129f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f2:	685b      	ldr	r3, [r3, #4]
 80129f4:	685b      	ldr	r3, [r3, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80129fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	685b      	ldr	r3, [r3, #4]
 8012a00:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a04:	3308      	adds	r3, #8
 8012a06:	2214      	movs	r2, #20
 8012a08:	4619      	mov	r1, r3
 8012a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a0c:	f000 fd5d 	bl	80134ca <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012a10:	8a3b      	ldrh	r3, [r7, #16]
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7f6 fd34 	bl	8009480 <lwip_htons>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a1e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a22:	2200      	movs	r2, #0
 8012a24:	719a      	strb	r2, [r3, #6]
 8012a26:	2200      	movs	r2, #0
 8012a28:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	729a      	strb	r2, [r3, #10]
 8012a30:	2200      	movs	r2, #0
 8012a32:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a36:	685b      	ldr	r3, [r3, #4]
 8012a38:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012a3a:	e00d      	b.n	8012a58 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a3e:	685b      	ldr	r3, [r3, #4]
 8012a40:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012a42:	2114      	movs	r1, #20
 8012a44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012a46:	f7f8 f887 	bl	800ab58 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012a4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f7f8 f9d7 	bl	800ae00 <pbuf_cat>
      r = iprh->next_pbuf;
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d1ee      	bne.n	8012a3c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012a5e:	4b1e      	ldr	r3, [pc, #120]	; (8012ad8 <ip4_reass+0x2b4>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d102      	bne.n	8012a6e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a6c:	e010      	b.n	8012a90 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012a6e:	4b1a      	ldr	r3, [pc, #104]	; (8012ad8 <ip4_reass+0x2b4>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a74:	e007      	b.n	8012a86 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a7c:	429a      	cmp	r2, r3
 8012a7e:	d006      	beq.n	8012a8e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d1f4      	bne.n	8012a76 <ip4_reass+0x252>
 8012a8c:	e000      	b.n	8012a90 <ip4_reass+0x26c>
          break;
 8012a8e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012a90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a94:	f7ff fd2e 	bl	80124f4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f7f8 f971 	bl	800ad80 <pbuf_clen>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012aa2:	4b0c      	ldr	r3, [pc, #48]	; (8012ad4 <ip4_reass+0x2b0>)
 8012aa4:	881b      	ldrh	r3, [r3, #0]
 8012aa6:	8c3a      	ldrh	r2, [r7, #32]
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d906      	bls.n	8012aba <ip4_reass+0x296>
 8012aac:	4b0b      	ldr	r3, [pc, #44]	; (8012adc <ip4_reass+0x2b8>)
 8012aae:	f240 229b 	movw	r2, #667	; 0x29b
 8012ab2:	490b      	ldr	r1, [pc, #44]	; (8012ae0 <ip4_reass+0x2bc>)
 8012ab4:	480b      	ldr	r0, [pc, #44]	; (8012ae4 <ip4_reass+0x2c0>)
 8012ab6:	f000 fdb3 	bl	8013620 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012aba:	4b06      	ldr	r3, [pc, #24]	; (8012ad4 <ip4_reass+0x2b0>)
 8012abc:	881a      	ldrh	r2, [r3, #0]
 8012abe:	8c3b      	ldrh	r3, [r7, #32]
 8012ac0:	1ad3      	subs	r3, r2, r3
 8012ac2:	b29a      	uxth	r2, r3
 8012ac4:	4b03      	ldr	r3, [pc, #12]	; (8012ad4 <ip4_reass+0x2b0>)
 8012ac6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	e038      	b.n	8012b3e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012acc:	2300      	movs	r3, #0
 8012ace:	e036      	b.n	8012b3e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012ad0:	bf00      	nop
 8012ad2:	e00a      	b.n	8012aea <ip4_reass+0x2c6>
 8012ad4:	2000cb7c 	.word	0x2000cb7c
 8012ad8:	2000cb78 	.word	0x2000cb78
 8012adc:	08016d28 	.word	0x08016d28
 8012ae0:	08016e98 	.word	0x08016e98
 8012ae4:	08016d70 	.word	0x08016d70
    goto nullreturn_ipr;
 8012ae8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d106      	bne.n	8012afe <ip4_reass+0x2da>
 8012af0:	4b15      	ldr	r3, [pc, #84]	; (8012b48 <ip4_reass+0x324>)
 8012af2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012af6:	4915      	ldr	r1, [pc, #84]	; (8012b4c <ip4_reass+0x328>)
 8012af8:	4815      	ldr	r0, [pc, #84]	; (8012b50 <ip4_reass+0x32c>)
 8012afa:	f000 fd91 	bl	8013620 <iprintf>
  if (ipr->p == NULL) {
 8012afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b00:	685b      	ldr	r3, [r3, #4]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d116      	bne.n	8012b34 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012b06:	4b13      	ldr	r3, [pc, #76]	; (8012b54 <ip4_reass+0x330>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d006      	beq.n	8012b1e <ip4_reass+0x2fa>
 8012b10:	4b0d      	ldr	r3, [pc, #52]	; (8012b48 <ip4_reass+0x324>)
 8012b12:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012b16:	4910      	ldr	r1, [pc, #64]	; (8012b58 <ip4_reass+0x334>)
 8012b18:	480d      	ldr	r0, [pc, #52]	; (8012b50 <ip4_reass+0x32c>)
 8012b1a:	f000 fd81 	bl	8013620 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012b1e:	2100      	movs	r1, #0
 8012b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b22:	f7ff fce7 	bl	80124f4 <ip_reass_dequeue_datagram>
 8012b26:	e006      	b.n	8012b36 <ip4_reass+0x312>
    goto nullreturn;
 8012b28:	bf00      	nop
 8012b2a:	e004      	b.n	8012b36 <ip4_reass+0x312>
    goto nullreturn;
 8012b2c:	bf00      	nop
 8012b2e:	e002      	b.n	8012b36 <ip4_reass+0x312>
      goto nullreturn;
 8012b30:	bf00      	nop
 8012b32:	e000      	b.n	8012b36 <ip4_reass+0x312>
  }

nullreturn:
 8012b34:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f7f8 f894 	bl	800ac64 <pbuf_free>
  return NULL;
 8012b3c:	2300      	movs	r3, #0
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3738      	adds	r7, #56	; 0x38
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	08016d28 	.word	0x08016d28
 8012b4c:	08016eb4 	.word	0x08016eb4
 8012b50:	08016d70 	.word	0x08016d70
 8012b54:	2000cb78 	.word	0x2000cb78
 8012b58:	08016ec0 	.word	0x08016ec0

08012b5c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012b60:	2005      	movs	r0, #5
 8012b62:	f7f7 f965 	bl	8009e30 <memp_malloc>
 8012b66:	4603      	mov	r3, r0
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	bd80      	pop	{r7, pc}

08012b6c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b082      	sub	sp, #8
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d106      	bne.n	8012b88 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012b7a:	4b07      	ldr	r3, [pc, #28]	; (8012b98 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012b7c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012b80:	4906      	ldr	r1, [pc, #24]	; (8012b9c <ip_frag_free_pbuf_custom_ref+0x30>)
 8012b82:	4807      	ldr	r0, [pc, #28]	; (8012ba0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012b84:	f000 fd4c 	bl	8013620 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012b88:	6879      	ldr	r1, [r7, #4]
 8012b8a:	2005      	movs	r0, #5
 8012b8c:	f7f7 f9c6 	bl	8009f1c <memp_free>
}
 8012b90:	bf00      	nop
 8012b92:	3708      	adds	r7, #8
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}
 8012b98:	08016d28 	.word	0x08016d28
 8012b9c:	08016ee0 	.word	0x08016ee0
 8012ba0:	08016d70 	.word	0x08016d70

08012ba4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b084      	sub	sp, #16
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d106      	bne.n	8012bc4 <ipfrag_free_pbuf_custom+0x20>
 8012bb6:	4b11      	ldr	r3, [pc, #68]	; (8012bfc <ipfrag_free_pbuf_custom+0x58>)
 8012bb8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012bbc:	4910      	ldr	r1, [pc, #64]	; (8012c00 <ipfrag_free_pbuf_custom+0x5c>)
 8012bbe:	4811      	ldr	r0, [pc, #68]	; (8012c04 <ipfrag_free_pbuf_custom+0x60>)
 8012bc0:	f000 fd2e 	bl	8013620 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012bc4:	68fa      	ldr	r2, [r7, #12]
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d006      	beq.n	8012bda <ipfrag_free_pbuf_custom+0x36>
 8012bcc:	4b0b      	ldr	r3, [pc, #44]	; (8012bfc <ipfrag_free_pbuf_custom+0x58>)
 8012bce:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012bd2:	490d      	ldr	r1, [pc, #52]	; (8012c08 <ipfrag_free_pbuf_custom+0x64>)
 8012bd4:	480b      	ldr	r0, [pc, #44]	; (8012c04 <ipfrag_free_pbuf_custom+0x60>)
 8012bd6:	f000 fd23 	bl	8013620 <iprintf>
  if (pcr->original != NULL) {
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	695b      	ldr	r3, [r3, #20]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d004      	beq.n	8012bec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	695b      	ldr	r3, [r3, #20]
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7f8 f83c 	bl	800ac64 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012bec:	68f8      	ldr	r0, [r7, #12]
 8012bee:	f7ff ffbd 	bl	8012b6c <ip_frag_free_pbuf_custom_ref>
}
 8012bf2:	bf00      	nop
 8012bf4:	3710      	adds	r7, #16
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
 8012bfa:	bf00      	nop
 8012bfc:	08016d28 	.word	0x08016d28
 8012c00:	08016eec 	.word	0x08016eec
 8012c04:	08016d70 	.word	0x08016d70
 8012c08:	08016ef8 	.word	0x08016ef8

08012c0c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b094      	sub	sp, #80	; 0x50
 8012c10:	af02      	add	r7, sp, #8
 8012c12:	60f8      	str	r0, [r7, #12]
 8012c14:	60b9      	str	r1, [r7, #8]
 8012c16:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012c22:	3b14      	subs	r3, #20
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	da00      	bge.n	8012c2a <ip4_frag+0x1e>
 8012c28:	3307      	adds	r3, #7
 8012c2a:	10db      	asrs	r3, r3, #3
 8012c2c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012c2e:	2314      	movs	r3, #20
 8012c30:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	685b      	ldr	r3, [r3, #4]
 8012c36:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c3a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	f003 030f 	and.w	r3, r3, #15
 8012c44:	b2db      	uxtb	r3, r3
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	b2db      	uxtb	r3, r3
 8012c4a:	2b14      	cmp	r3, #20
 8012c4c:	d002      	beq.n	8012c54 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012c4e:	f06f 0305 	mvn.w	r3, #5
 8012c52:	e110      	b.n	8012e76 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	895b      	ldrh	r3, [r3, #10]
 8012c58:	2b13      	cmp	r3, #19
 8012c5a:	d809      	bhi.n	8012c70 <ip4_frag+0x64>
 8012c5c:	4b88      	ldr	r3, [pc, #544]	; (8012e80 <ip4_frag+0x274>)
 8012c5e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012c62:	4988      	ldr	r1, [pc, #544]	; (8012e84 <ip4_frag+0x278>)
 8012c64:	4888      	ldr	r0, [pc, #544]	; (8012e88 <ip4_frag+0x27c>)
 8012c66:	f000 fcdb 	bl	8013620 <iprintf>
 8012c6a:	f06f 0305 	mvn.w	r3, #5
 8012c6e:	e102      	b.n	8012e76 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c72:	88db      	ldrh	r3, [r3, #6]
 8012c74:	b29b      	uxth	r3, r3
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7f6 fc02 	bl	8009480 <lwip_htons>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012c80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012c8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012c90:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	891b      	ldrh	r3, [r3, #8]
 8012c96:	3b14      	subs	r3, #20
 8012c98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012c9c:	e0e1      	b.n	8012e62 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012c9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012ca0:	00db      	lsls	r3, r3, #3
 8012ca2:	b29b      	uxth	r3, r3
 8012ca4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	bf28      	it	cs
 8012cac:	4613      	movcs	r3, r2
 8012cae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012cb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012cb4:	2114      	movs	r1, #20
 8012cb6:	200e      	movs	r0, #14
 8012cb8:	f7f7 fcf0 	bl	800a69c <pbuf_alloc>
 8012cbc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	f000 80d5 	beq.w	8012e70 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc8:	895b      	ldrh	r3, [r3, #10]
 8012cca:	2b13      	cmp	r3, #19
 8012ccc:	d806      	bhi.n	8012cdc <ip4_frag+0xd0>
 8012cce:	4b6c      	ldr	r3, [pc, #432]	; (8012e80 <ip4_frag+0x274>)
 8012cd0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012cd4:	496d      	ldr	r1, [pc, #436]	; (8012e8c <ip4_frag+0x280>)
 8012cd6:	486c      	ldr	r0, [pc, #432]	; (8012e88 <ip4_frag+0x27c>)
 8012cd8:	f000 fca2 	bl	8013620 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cde:	685b      	ldr	r3, [r3, #4]
 8012ce0:	2214      	movs	r2, #20
 8012ce2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f000 fbf0 	bl	80134ca <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cec:	685b      	ldr	r3, [r3, #4]
 8012cee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012cf0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012cf2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012cf6:	e064      	b.n	8012dc2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	895a      	ldrh	r2, [r3, #10]
 8012cfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012cfe:	1ad3      	subs	r3, r2, r3
 8012d00:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	895b      	ldrh	r3, [r3, #10]
 8012d06:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012d08:	429a      	cmp	r2, r3
 8012d0a:	d906      	bls.n	8012d1a <ip4_frag+0x10e>
 8012d0c:	4b5c      	ldr	r3, [pc, #368]	; (8012e80 <ip4_frag+0x274>)
 8012d0e:	f240 322d 	movw	r2, #813	; 0x32d
 8012d12:	495f      	ldr	r1, [pc, #380]	; (8012e90 <ip4_frag+0x284>)
 8012d14:	485c      	ldr	r0, [pc, #368]	; (8012e88 <ip4_frag+0x27c>)
 8012d16:	f000 fc83 	bl	8013620 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012d1a:	8bfa      	ldrh	r2, [r7, #30]
 8012d1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012d20:	4293      	cmp	r3, r2
 8012d22:	bf28      	it	cs
 8012d24:	4613      	movcs	r3, r2
 8012d26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012d2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d105      	bne.n	8012d3e <ip4_frag+0x132>
        poff = 0;
 8012d32:	2300      	movs	r3, #0
 8012d34:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	60fb      	str	r3, [r7, #12]
        continue;
 8012d3c:	e041      	b.n	8012dc2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012d3e:	f7ff ff0d 	bl	8012b5c <ip_frag_alloc_pbuf_custom_ref>
 8012d42:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012d44:	69bb      	ldr	r3, [r7, #24]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d103      	bne.n	8012d52 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012d4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d4c:	f7f7 ff8a 	bl	800ac64 <pbuf_free>
        goto memerr;
 8012d50:	e08f      	b.n	8012e72 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012d52:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012d58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012d5a:	4413      	add	r3, r2
 8012d5c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012d60:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012d64:	9201      	str	r2, [sp, #4]
 8012d66:	9300      	str	r3, [sp, #0]
 8012d68:	4603      	mov	r3, r0
 8012d6a:	2241      	movs	r2, #65	; 0x41
 8012d6c:	2000      	movs	r0, #0
 8012d6e:	f7f7 fdbf 	bl	800a8f0 <pbuf_alloced_custom>
 8012d72:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012d74:	697b      	ldr	r3, [r7, #20]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d106      	bne.n	8012d88 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012d7a:	69b8      	ldr	r0, [r7, #24]
 8012d7c:	f7ff fef6 	bl	8012b6c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d82:	f7f7 ff6f 	bl	800ac64 <pbuf_free>
        goto memerr;
 8012d86:	e074      	b.n	8012e72 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012d88:	68f8      	ldr	r0, [r7, #12]
 8012d8a:	f7f8 f811 	bl	800adb0 <pbuf_ref>
      pcr->original = p;
 8012d8e:	69bb      	ldr	r3, [r7, #24]
 8012d90:	68fa      	ldr	r2, [r7, #12]
 8012d92:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012d94:	69bb      	ldr	r3, [r7, #24]
 8012d96:	4a3f      	ldr	r2, [pc, #252]	; (8012e94 <ip4_frag+0x288>)
 8012d98:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012d9a:	6979      	ldr	r1, [r7, #20]
 8012d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d9e:	f7f8 f82f 	bl	800ae00 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012da2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012da6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012daa:	1ad3      	subs	r3, r2, r3
 8012dac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012db0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d004      	beq.n	8012dc2 <ip4_frag+0x1b6>
        poff = 0;
 8012db8:	2300      	movs	r3, #0
 8012dba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012dc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d196      	bne.n	8012cf8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012dca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012dcc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012dd0:	4413      	add	r3, r2
 8012dd2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012dd4:	68bb      	ldr	r3, [r7, #8]
 8012dd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012dd8:	f1a3 0213 	sub.w	r2, r3, #19
 8012ddc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012de0:	429a      	cmp	r2, r3
 8012de2:	bfcc      	ite	gt
 8012de4:	2301      	movgt	r3, #1
 8012de6:	2300      	movle	r3, #0
 8012de8:	b2db      	uxtb	r3, r3
 8012dea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012dec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012df4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012df6:	6a3b      	ldr	r3, [r7, #32]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d002      	beq.n	8012e02 <ip4_frag+0x1f6>
 8012dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d003      	beq.n	8012e0a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012e02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012e08:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012e0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7f6 fb37 	bl	8009480 <lwip_htons>
 8012e12:	4603      	mov	r3, r0
 8012e14:	461a      	mov	r2, r3
 8012e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e18:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012e1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012e1c:	3314      	adds	r3, #20
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7f6 fb2d 	bl	8009480 <lwip_htons>
 8012e26:	4603      	mov	r3, r0
 8012e28:	461a      	mov	r2, r3
 8012e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e2c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e30:	2200      	movs	r2, #0
 8012e32:	729a      	strb	r2, [r3, #10]
 8012e34:	2200      	movs	r2, #0
 8012e36:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012e38:	68bb      	ldr	r3, [r7, #8]
 8012e3a:	695b      	ldr	r3, [r3, #20]
 8012e3c:	687a      	ldr	r2, [r7, #4]
 8012e3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e40:	68b8      	ldr	r0, [r7, #8]
 8012e42:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012e44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e46:	f7f7 ff0d 	bl	800ac64 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012e4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012e50:	1ad3      	subs	r3, r2, r3
 8012e52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012e56:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012e5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e5c:	4413      	add	r3, r2
 8012e5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012e62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	f47f af19 	bne.w	8012c9e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	e002      	b.n	8012e76 <ip4_frag+0x26a>
      goto memerr;
 8012e70:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3748      	adds	r7, #72	; 0x48
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
 8012e7e:	bf00      	nop
 8012e80:	08016d28 	.word	0x08016d28
 8012e84:	08016f04 	.word	0x08016f04
 8012e88:	08016d70 	.word	0x08016d70
 8012e8c:	08016f20 	.word	0x08016f20
 8012e90:	08016f40 	.word	0x08016f40
 8012e94:	08012ba5 	.word	0x08012ba5

08012e98 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b086      	sub	sp, #24
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
 8012ea0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012ea2:	230e      	movs	r3, #14
 8012ea4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	895b      	ldrh	r3, [r3, #10]
 8012eaa:	2b0e      	cmp	r3, #14
 8012eac:	d96e      	bls.n	8012f8c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	7bdb      	ldrb	r3, [r3, #15]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d106      	bne.n	8012ec4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012ebc:	3301      	adds	r3, #1
 8012ebe:	b2da      	uxtb	r2, r3
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	685b      	ldr	r3, [r3, #4]
 8012ec8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012eca:	693b      	ldr	r3, [r7, #16]
 8012ecc:	7b1a      	ldrb	r2, [r3, #12]
 8012ece:	7b5b      	ldrb	r3, [r3, #13]
 8012ed0:	021b      	lsls	r3, r3, #8
 8012ed2:	4313      	orrs	r3, r2
 8012ed4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	f003 0301 	and.w	r3, r3, #1
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d023      	beq.n	8012f2a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	2b01      	cmp	r3, #1
 8012ee8:	d10f      	bne.n	8012f0a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	785b      	ldrb	r3, [r3, #1]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d11b      	bne.n	8012f2a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012ef6:	2b5e      	cmp	r3, #94	; 0x5e
 8012ef8:	d117      	bne.n	8012f2a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	7b5b      	ldrb	r3, [r3, #13]
 8012efe:	f043 0310 	orr.w	r3, r3, #16
 8012f02:	b2da      	uxtb	r2, r3
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	735a      	strb	r2, [r3, #13]
 8012f08:	e00f      	b.n	8012f2a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	2206      	movs	r2, #6
 8012f0e:	4928      	ldr	r1, [pc, #160]	; (8012fb0 <ethernet_input+0x118>)
 8012f10:	4618      	mov	r0, r3
 8012f12:	f000 faca 	bl	80134aa <memcmp>
 8012f16:	4603      	mov	r3, r0
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d106      	bne.n	8012f2a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	7b5b      	ldrb	r3, [r3, #13]
 8012f20:	f043 0308 	orr.w	r3, r3, #8
 8012f24:	b2da      	uxtb	r2, r3
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012f2a:	89fb      	ldrh	r3, [r7, #14]
 8012f2c:	2b08      	cmp	r3, #8
 8012f2e:	d003      	beq.n	8012f38 <ethernet_input+0xa0>
 8012f30:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012f34:	d014      	beq.n	8012f60 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012f36:	e032      	b.n	8012f9e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012f38:	683b      	ldr	r3, [r7, #0]
 8012f3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f3e:	f003 0308 	and.w	r3, r3, #8
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d024      	beq.n	8012f90 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012f46:	8afb      	ldrh	r3, [r7, #22]
 8012f48:	4619      	mov	r1, r3
 8012f4a:	6878      	ldr	r0, [r7, #4]
 8012f4c:	f7f7 fe04 	bl	800ab58 <pbuf_remove_header>
 8012f50:	4603      	mov	r3, r0
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d11e      	bne.n	8012f94 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012f56:	6839      	ldr	r1, [r7, #0]
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f7fe ff21 	bl	8011da0 <ip4_input>
      break;
 8012f5e:	e013      	b.n	8012f88 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f66:	f003 0308 	and.w	r3, r3, #8
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d014      	beq.n	8012f98 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012f6e:	8afb      	ldrh	r3, [r7, #22]
 8012f70:	4619      	mov	r1, r3
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f7f7 fdf0 	bl	800ab58 <pbuf_remove_header>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d10e      	bne.n	8012f9c <ethernet_input+0x104>
        etharp_input(p, netif);
 8012f7e:	6839      	ldr	r1, [r7, #0]
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f7fe f8c1 	bl	8011108 <etharp_input>
      break;
 8012f86:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	e00c      	b.n	8012fa6 <ethernet_input+0x10e>
    goto free_and_return;
 8012f8c:	bf00      	nop
 8012f8e:	e006      	b.n	8012f9e <ethernet_input+0x106>
        goto free_and_return;
 8012f90:	bf00      	nop
 8012f92:	e004      	b.n	8012f9e <ethernet_input+0x106>
        goto free_and_return;
 8012f94:	bf00      	nop
 8012f96:	e002      	b.n	8012f9e <ethernet_input+0x106>
        goto free_and_return;
 8012f98:	bf00      	nop
 8012f9a:	e000      	b.n	8012f9e <ethernet_input+0x106>
        goto free_and_return;
 8012f9c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f7f7 fe60 	bl	800ac64 <pbuf_free>
  return ERR_OK;
 8012fa4:	2300      	movs	r3, #0
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3718      	adds	r7, #24
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}
 8012fae:	bf00      	nop
 8012fb0:	0801711c 	.word	0x0801711c

08012fb4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b086      	sub	sp, #24
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	60f8      	str	r0, [r7, #12]
 8012fbc:	60b9      	str	r1, [r7, #8]
 8012fbe:	607a      	str	r2, [r7, #4]
 8012fc0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012fc2:	8c3b      	ldrh	r3, [r7, #32]
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7f6 fa5b 	bl	8009480 <lwip_htons>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012fce:	210e      	movs	r1, #14
 8012fd0:	68b8      	ldr	r0, [r7, #8]
 8012fd2:	f7f7 fdb1 	bl	800ab38 <pbuf_add_header>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d125      	bne.n	8013028 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	685b      	ldr	r3, [r3, #4]
 8012fe0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	8afa      	ldrh	r2, [r7, #22]
 8012fe6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012fe8:	693b      	ldr	r3, [r7, #16]
 8012fea:	2206      	movs	r2, #6
 8012fec:	6839      	ldr	r1, [r7, #0]
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f000 fa6b 	bl	80134ca <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012ff4:	693b      	ldr	r3, [r7, #16]
 8012ff6:	3306      	adds	r3, #6
 8012ff8:	2206      	movs	r2, #6
 8012ffa:	6879      	ldr	r1, [r7, #4]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f000 fa64 	bl	80134ca <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013008:	2b06      	cmp	r3, #6
 801300a:	d006      	beq.n	801301a <ethernet_output+0x66>
 801300c:	4b0a      	ldr	r3, [pc, #40]	; (8013038 <ethernet_output+0x84>)
 801300e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013012:	490a      	ldr	r1, [pc, #40]	; (801303c <ethernet_output+0x88>)
 8013014:	480a      	ldr	r0, [pc, #40]	; (8013040 <ethernet_output+0x8c>)
 8013016:	f000 fb03 	bl	8013620 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	699b      	ldr	r3, [r3, #24]
 801301e:	68b9      	ldr	r1, [r7, #8]
 8013020:	68f8      	ldr	r0, [r7, #12]
 8013022:	4798      	blx	r3
 8013024:	4603      	mov	r3, r0
 8013026:	e002      	b.n	801302e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013028:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801302a:	f06f 0301 	mvn.w	r3, #1
}
 801302e:	4618      	mov	r0, r3
 8013030:	3718      	adds	r7, #24
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}
 8013036:	bf00      	nop
 8013038:	08016f50 	.word	0x08016f50
 801303c:	08016f88 	.word	0x08016f88
 8013040:	08016fbc 	.word	0x08016fbc

08013044 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b086      	sub	sp, #24
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	60bb      	str	r3, [r7, #8]
 8013052:	2304      	movs	r3, #4
 8013054:	60fb      	str	r3, [r7, #12]
 8013056:	2300      	movs	r3, #0
 8013058:	613b      	str	r3, [r7, #16]
 801305a:	2300      	movs	r3, #0
 801305c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801305e:	f107 0308 	add.w	r3, r7, #8
 8013062:	2100      	movs	r1, #0
 8013064:	4618      	mov	r0, r3
 8013066:	f7f3 facd 	bl	8006604 <osMessageCreate>
 801306a:	4602      	mov	r2, r0
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d102      	bne.n	801307e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8013078:	f04f 33ff 	mov.w	r3, #4294967295
 801307c:	e000      	b.n	8013080 <sys_mbox_new+0x3c>

  return ERR_OK;
 801307e:	2300      	movs	r3, #0
}
 8013080:	4618      	mov	r0, r3
 8013082:	3718      	adds	r7, #24
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}

08013088 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b084      	sub	sp, #16
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	6839      	ldr	r1, [r7, #0]
 8013098:	2200      	movs	r2, #0
 801309a:	4618      	mov	r0, r3
 801309c:	f7f3 fada 	bl	8006654 <osMessagePut>
 80130a0:	4603      	mov	r3, r0
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d102      	bne.n	80130ac <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80130a6:	2300      	movs	r3, #0
 80130a8:	73fb      	strb	r3, [r7, #15]
 80130aa:	e001      	b.n	80130b0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80130ac:	23ff      	movs	r3, #255	; 0xff
 80130ae:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80130b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80130b4:	4618      	mov	r0, r3
 80130b6:	3710      	adds	r7, #16
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}

080130bc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b08c      	sub	sp, #48	; 0x30
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	61f8      	str	r0, [r7, #28]
 80130c4:	61b9      	str	r1, [r7, #24]
 80130c6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80130c8:	f7f3 f90c 	bl	80062e4 <osKernelSysTick>
 80130cc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d017      	beq.n	8013104 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80130d4:	69fb      	ldr	r3, [r7, #28]
 80130d6:	6819      	ldr	r1, [r3, #0]
 80130d8:	f107 0320 	add.w	r3, r7, #32
 80130dc:	697a      	ldr	r2, [r7, #20]
 80130de:	4618      	mov	r0, r3
 80130e0:	f7f3 faf8 	bl	80066d4 <osMessageGet>

    if(event.status == osEventMessage)
 80130e4:	6a3b      	ldr	r3, [r7, #32]
 80130e6:	2b10      	cmp	r3, #16
 80130e8:	d109      	bne.n	80130fe <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80130ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ec:	461a      	mov	r2, r3
 80130ee:	69bb      	ldr	r3, [r7, #24]
 80130f0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80130f2:	f7f3 f8f7 	bl	80062e4 <osKernelSysTick>
 80130f6:	4602      	mov	r2, r0
 80130f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130fa:	1ad3      	subs	r3, r2, r3
 80130fc:	e019      	b.n	8013132 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80130fe:	f04f 33ff 	mov.w	r3, #4294967295
 8013102:	e016      	b.n	8013132 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8013104:	69fb      	ldr	r3, [r7, #28]
 8013106:	6819      	ldr	r1, [r3, #0]
 8013108:	463b      	mov	r3, r7
 801310a:	f04f 32ff 	mov.w	r2, #4294967295
 801310e:	4618      	mov	r0, r3
 8013110:	f7f3 fae0 	bl	80066d4 <osMessageGet>
 8013114:	f107 0320 	add.w	r3, r7, #32
 8013118:	463a      	mov	r2, r7
 801311a:	ca07      	ldmia	r2, {r0, r1, r2}
 801311c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8013120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013122:	461a      	mov	r2, r3
 8013124:	69bb      	ldr	r3, [r7, #24]
 8013126:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013128:	f7f3 f8dc 	bl	80062e4 <osKernelSysTick>
 801312c:	4602      	mov	r2, r0
 801312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013130:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8013132:	4618      	mov	r0, r3
 8013134:	3730      	adds	r7, #48	; 0x30
 8013136:	46bd      	mov	sp, r7
 8013138:	bd80      	pop	{r7, pc}

0801313a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801313a:	b480      	push	{r7}
 801313c:	b083      	sub	sp, #12
 801313e:	af00      	add	r7, sp, #0
 8013140:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d101      	bne.n	801314e <sys_mbox_valid+0x14>
    return 0;
 801314a:	2300      	movs	r3, #0
 801314c:	e000      	b.n	8013150 <sys_mbox_valid+0x16>
  else
    return 1;
 801314e:	2301      	movs	r3, #1
}
 8013150:	4618      	mov	r0, r3
 8013152:	370c      	adds	r7, #12
 8013154:	46bd      	mov	sp, r7
 8013156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315a:	4770      	bx	lr

0801315c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013160:	4803      	ldr	r0, [pc, #12]	; (8013170 <sys_init+0x14>)
 8013162:	f7f3 f92f 	bl	80063c4 <osMutexCreate>
 8013166:	4603      	mov	r3, r0
 8013168:	4a02      	ldr	r2, [pc, #8]	; (8013174 <sys_init+0x18>)
 801316a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801316c:	bf00      	nop
 801316e:	bd80      	pop	{r7, pc}
 8013170:	0801712c 	.word	0x0801712c
 8013174:	2000cb80 	.word	0x2000cb80

08013178 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013178:	b580      	push	{r7, lr}
 801317a:	b084      	sub	sp, #16
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013180:	2300      	movs	r3, #0
 8013182:	60bb      	str	r3, [r7, #8]
 8013184:	2300      	movs	r3, #0
 8013186:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013188:	f107 0308 	add.w	r3, r7, #8
 801318c:	4618      	mov	r0, r3
 801318e:	f7f3 f919 	bl	80063c4 <osMutexCreate>
 8013192:	4602      	mov	r2, r0
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d102      	bne.n	80131a6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80131a0:	f04f 33ff 	mov.w	r3, #4294967295
 80131a4:	e000      	b.n	80131a8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80131a6:	2300      	movs	r3, #0
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	3710      	adds	r7, #16
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}

080131b0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	f04f 31ff 	mov.w	r1, #4294967295
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7f3 f917 	bl	80063f4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80131c6:	bf00      	nop
 80131c8:	3708      	adds	r7, #8
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}

080131ce <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80131ce:	b580      	push	{r7, lr}
 80131d0:	b082      	sub	sp, #8
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	4618      	mov	r0, r3
 80131dc:	f7f3 f958 	bl	8006490 <osMutexRelease>
}
 80131e0:	bf00      	nop
 80131e2:	3708      	adds	r7, #8
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}

080131e8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b08c      	sub	sp, #48	; 0x30
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	60f8      	str	r0, [r7, #12]
 80131f0:	60b9      	str	r1, [r7, #8]
 80131f2:	607a      	str	r2, [r7, #4]
 80131f4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80131f6:	f107 0314 	add.w	r3, r7, #20
 80131fa:	2200      	movs	r2, #0
 80131fc:	601a      	str	r2, [r3, #0]
 80131fe:	605a      	str	r2, [r3, #4]
 8013200:	609a      	str	r2, [r3, #8]
 8013202:	60da      	str	r2, [r3, #12]
 8013204:	611a      	str	r2, [r3, #16]
 8013206:	615a      	str	r2, [r3, #20]
 8013208:	619a      	str	r2, [r3, #24]
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	617b      	str	r3, [r7, #20]
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	61bb      	str	r3, [r7, #24]
 8013212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013214:	b21b      	sxth	r3, r3
 8013216:	83bb      	strh	r3, [r7, #28]
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801321c:	f107 0314 	add.w	r3, r7, #20
 8013220:	6879      	ldr	r1, [r7, #4]
 8013222:	4618      	mov	r0, r3
 8013224:	f7f3 f86e 	bl	8006304 <osThreadCreate>
 8013228:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801322a:	4618      	mov	r0, r3
 801322c:	3730      	adds	r7, #48	; 0x30
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}
	...

08013234 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8013238:	4b04      	ldr	r3, [pc, #16]	; (801324c <sys_arch_protect+0x18>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	f04f 31ff 	mov.w	r1, #4294967295
 8013240:	4618      	mov	r0, r3
 8013242:	f7f3 f8d7 	bl	80063f4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8013246:	2301      	movs	r3, #1
}
 8013248:	4618      	mov	r0, r3
 801324a:	bd80      	pop	{r7, pc}
 801324c:	2000cb80 	.word	0x2000cb80

08013250 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013258:	4b04      	ldr	r3, [pc, #16]	; (801326c <sys_arch_unprotect+0x1c>)
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	4618      	mov	r0, r3
 801325e:	f7f3 f917 	bl	8006490 <osMutexRelease>
}
 8013262:	bf00      	nop
 8013264:	3708      	adds	r7, #8
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}
 801326a:	bf00      	nop
 801326c:	2000cb80 	.word	0x2000cb80

08013270 <std>:
 8013270:	2300      	movs	r3, #0
 8013272:	b510      	push	{r4, lr}
 8013274:	4604      	mov	r4, r0
 8013276:	e9c0 3300 	strd	r3, r3, [r0]
 801327a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801327e:	6083      	str	r3, [r0, #8]
 8013280:	8181      	strh	r1, [r0, #12]
 8013282:	6643      	str	r3, [r0, #100]	; 0x64
 8013284:	81c2      	strh	r2, [r0, #14]
 8013286:	6183      	str	r3, [r0, #24]
 8013288:	4619      	mov	r1, r3
 801328a:	2208      	movs	r2, #8
 801328c:	305c      	adds	r0, #92	; 0x5c
 801328e:	f000 f92a 	bl	80134e6 <memset>
 8013292:	4b05      	ldr	r3, [pc, #20]	; (80132a8 <std+0x38>)
 8013294:	6263      	str	r3, [r4, #36]	; 0x24
 8013296:	4b05      	ldr	r3, [pc, #20]	; (80132ac <std+0x3c>)
 8013298:	62a3      	str	r3, [r4, #40]	; 0x28
 801329a:	4b05      	ldr	r3, [pc, #20]	; (80132b0 <std+0x40>)
 801329c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801329e:	4b05      	ldr	r3, [pc, #20]	; (80132b4 <std+0x44>)
 80132a0:	6224      	str	r4, [r4, #32]
 80132a2:	6323      	str	r3, [r4, #48]	; 0x30
 80132a4:	bd10      	pop	{r4, pc}
 80132a6:	bf00      	nop
 80132a8:	080137c1 	.word	0x080137c1
 80132ac:	080137e3 	.word	0x080137e3
 80132b0:	0801381b 	.word	0x0801381b
 80132b4:	0801383f 	.word	0x0801383f

080132b8 <_cleanup_r>:
 80132b8:	4901      	ldr	r1, [pc, #4]	; (80132c0 <_cleanup_r+0x8>)
 80132ba:	f000 b8af 	b.w	801341c <_fwalk_reent>
 80132be:	bf00      	nop
 80132c0:	080139d5 	.word	0x080139d5

080132c4 <__sfmoreglue>:
 80132c4:	b570      	push	{r4, r5, r6, lr}
 80132c6:	2268      	movs	r2, #104	; 0x68
 80132c8:	1e4d      	subs	r5, r1, #1
 80132ca:	4355      	muls	r5, r2
 80132cc:	460e      	mov	r6, r1
 80132ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80132d2:	f000 f931 	bl	8013538 <_malloc_r>
 80132d6:	4604      	mov	r4, r0
 80132d8:	b140      	cbz	r0, 80132ec <__sfmoreglue+0x28>
 80132da:	2100      	movs	r1, #0
 80132dc:	e9c0 1600 	strd	r1, r6, [r0]
 80132e0:	300c      	adds	r0, #12
 80132e2:	60a0      	str	r0, [r4, #8]
 80132e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80132e8:	f000 f8fd 	bl	80134e6 <memset>
 80132ec:	4620      	mov	r0, r4
 80132ee:	bd70      	pop	{r4, r5, r6, pc}

080132f0 <__sfp_lock_acquire>:
 80132f0:	4801      	ldr	r0, [pc, #4]	; (80132f8 <__sfp_lock_acquire+0x8>)
 80132f2:	f000 b8d8 	b.w	80134a6 <__retarget_lock_acquire_recursive>
 80132f6:	bf00      	nop
 80132f8:	2000cb85 	.word	0x2000cb85

080132fc <__sfp_lock_release>:
 80132fc:	4801      	ldr	r0, [pc, #4]	; (8013304 <__sfp_lock_release+0x8>)
 80132fe:	f000 b8d3 	b.w	80134a8 <__retarget_lock_release_recursive>
 8013302:	bf00      	nop
 8013304:	2000cb85 	.word	0x2000cb85

08013308 <__sinit_lock_acquire>:
 8013308:	4801      	ldr	r0, [pc, #4]	; (8013310 <__sinit_lock_acquire+0x8>)
 801330a:	f000 b8cc 	b.w	80134a6 <__retarget_lock_acquire_recursive>
 801330e:	bf00      	nop
 8013310:	2000cb86 	.word	0x2000cb86

08013314 <__sinit_lock_release>:
 8013314:	4801      	ldr	r0, [pc, #4]	; (801331c <__sinit_lock_release+0x8>)
 8013316:	f000 b8c7 	b.w	80134a8 <__retarget_lock_release_recursive>
 801331a:	bf00      	nop
 801331c:	2000cb86 	.word	0x2000cb86

08013320 <__sinit>:
 8013320:	b510      	push	{r4, lr}
 8013322:	4604      	mov	r4, r0
 8013324:	f7ff fff0 	bl	8013308 <__sinit_lock_acquire>
 8013328:	69a3      	ldr	r3, [r4, #24]
 801332a:	b11b      	cbz	r3, 8013334 <__sinit+0x14>
 801332c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013330:	f7ff bff0 	b.w	8013314 <__sinit_lock_release>
 8013334:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013338:	6523      	str	r3, [r4, #80]	; 0x50
 801333a:	4b13      	ldr	r3, [pc, #76]	; (8013388 <__sinit+0x68>)
 801333c:	4a13      	ldr	r2, [pc, #76]	; (801338c <__sinit+0x6c>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	62a2      	str	r2, [r4, #40]	; 0x28
 8013342:	42a3      	cmp	r3, r4
 8013344:	bf04      	itt	eq
 8013346:	2301      	moveq	r3, #1
 8013348:	61a3      	streq	r3, [r4, #24]
 801334a:	4620      	mov	r0, r4
 801334c:	f000 f820 	bl	8013390 <__sfp>
 8013350:	6060      	str	r0, [r4, #4]
 8013352:	4620      	mov	r0, r4
 8013354:	f000 f81c 	bl	8013390 <__sfp>
 8013358:	60a0      	str	r0, [r4, #8]
 801335a:	4620      	mov	r0, r4
 801335c:	f000 f818 	bl	8013390 <__sfp>
 8013360:	2200      	movs	r2, #0
 8013362:	60e0      	str	r0, [r4, #12]
 8013364:	2104      	movs	r1, #4
 8013366:	6860      	ldr	r0, [r4, #4]
 8013368:	f7ff ff82 	bl	8013270 <std>
 801336c:	68a0      	ldr	r0, [r4, #8]
 801336e:	2201      	movs	r2, #1
 8013370:	2109      	movs	r1, #9
 8013372:	f7ff ff7d 	bl	8013270 <std>
 8013376:	68e0      	ldr	r0, [r4, #12]
 8013378:	2202      	movs	r2, #2
 801337a:	2112      	movs	r1, #18
 801337c:	f7ff ff78 	bl	8013270 <std>
 8013380:	2301      	movs	r3, #1
 8013382:	61a3      	str	r3, [r4, #24]
 8013384:	e7d2      	b.n	801332c <__sinit+0xc>
 8013386:	bf00      	nop
 8013388:	08017194 	.word	0x08017194
 801338c:	080132b9 	.word	0x080132b9

08013390 <__sfp>:
 8013390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013392:	4607      	mov	r7, r0
 8013394:	f7ff ffac 	bl	80132f0 <__sfp_lock_acquire>
 8013398:	4b1e      	ldr	r3, [pc, #120]	; (8013414 <__sfp+0x84>)
 801339a:	681e      	ldr	r6, [r3, #0]
 801339c:	69b3      	ldr	r3, [r6, #24]
 801339e:	b913      	cbnz	r3, 80133a6 <__sfp+0x16>
 80133a0:	4630      	mov	r0, r6
 80133a2:	f7ff ffbd 	bl	8013320 <__sinit>
 80133a6:	3648      	adds	r6, #72	; 0x48
 80133a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80133ac:	3b01      	subs	r3, #1
 80133ae:	d503      	bpl.n	80133b8 <__sfp+0x28>
 80133b0:	6833      	ldr	r3, [r6, #0]
 80133b2:	b30b      	cbz	r3, 80133f8 <__sfp+0x68>
 80133b4:	6836      	ldr	r6, [r6, #0]
 80133b6:	e7f7      	b.n	80133a8 <__sfp+0x18>
 80133b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80133bc:	b9d5      	cbnz	r5, 80133f4 <__sfp+0x64>
 80133be:	4b16      	ldr	r3, [pc, #88]	; (8013418 <__sfp+0x88>)
 80133c0:	60e3      	str	r3, [r4, #12]
 80133c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80133c6:	6665      	str	r5, [r4, #100]	; 0x64
 80133c8:	f000 f86c 	bl	80134a4 <__retarget_lock_init_recursive>
 80133cc:	f7ff ff96 	bl	80132fc <__sfp_lock_release>
 80133d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80133d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80133d8:	6025      	str	r5, [r4, #0]
 80133da:	61a5      	str	r5, [r4, #24]
 80133dc:	2208      	movs	r2, #8
 80133de:	4629      	mov	r1, r5
 80133e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80133e4:	f000 f87f 	bl	80134e6 <memset>
 80133e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80133ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80133f0:	4620      	mov	r0, r4
 80133f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133f4:	3468      	adds	r4, #104	; 0x68
 80133f6:	e7d9      	b.n	80133ac <__sfp+0x1c>
 80133f8:	2104      	movs	r1, #4
 80133fa:	4638      	mov	r0, r7
 80133fc:	f7ff ff62 	bl	80132c4 <__sfmoreglue>
 8013400:	4604      	mov	r4, r0
 8013402:	6030      	str	r0, [r6, #0]
 8013404:	2800      	cmp	r0, #0
 8013406:	d1d5      	bne.n	80133b4 <__sfp+0x24>
 8013408:	f7ff ff78 	bl	80132fc <__sfp_lock_release>
 801340c:	230c      	movs	r3, #12
 801340e:	603b      	str	r3, [r7, #0]
 8013410:	e7ee      	b.n	80133f0 <__sfp+0x60>
 8013412:	bf00      	nop
 8013414:	08017194 	.word	0x08017194
 8013418:	ffff0001 	.word	0xffff0001

0801341c <_fwalk_reent>:
 801341c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013420:	4606      	mov	r6, r0
 8013422:	4688      	mov	r8, r1
 8013424:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013428:	2700      	movs	r7, #0
 801342a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801342e:	f1b9 0901 	subs.w	r9, r9, #1
 8013432:	d505      	bpl.n	8013440 <_fwalk_reent+0x24>
 8013434:	6824      	ldr	r4, [r4, #0]
 8013436:	2c00      	cmp	r4, #0
 8013438:	d1f7      	bne.n	801342a <_fwalk_reent+0xe>
 801343a:	4638      	mov	r0, r7
 801343c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013440:	89ab      	ldrh	r3, [r5, #12]
 8013442:	2b01      	cmp	r3, #1
 8013444:	d907      	bls.n	8013456 <_fwalk_reent+0x3a>
 8013446:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801344a:	3301      	adds	r3, #1
 801344c:	d003      	beq.n	8013456 <_fwalk_reent+0x3a>
 801344e:	4629      	mov	r1, r5
 8013450:	4630      	mov	r0, r6
 8013452:	47c0      	blx	r8
 8013454:	4307      	orrs	r7, r0
 8013456:	3568      	adds	r5, #104	; 0x68
 8013458:	e7e9      	b.n	801342e <_fwalk_reent+0x12>
	...

0801345c <__libc_init_array>:
 801345c:	b570      	push	{r4, r5, r6, lr}
 801345e:	4d0d      	ldr	r5, [pc, #52]	; (8013494 <__libc_init_array+0x38>)
 8013460:	4c0d      	ldr	r4, [pc, #52]	; (8013498 <__libc_init_array+0x3c>)
 8013462:	1b64      	subs	r4, r4, r5
 8013464:	10a4      	asrs	r4, r4, #2
 8013466:	2600      	movs	r6, #0
 8013468:	42a6      	cmp	r6, r4
 801346a:	d109      	bne.n	8013480 <__libc_init_array+0x24>
 801346c:	4d0b      	ldr	r5, [pc, #44]	; (801349c <__libc_init_array+0x40>)
 801346e:	4c0c      	ldr	r4, [pc, #48]	; (80134a0 <__libc_init_array+0x44>)
 8013470:	f001 f802 	bl	8014478 <_init>
 8013474:	1b64      	subs	r4, r4, r5
 8013476:	10a4      	asrs	r4, r4, #2
 8013478:	2600      	movs	r6, #0
 801347a:	42a6      	cmp	r6, r4
 801347c:	d105      	bne.n	801348a <__libc_init_array+0x2e>
 801347e:	bd70      	pop	{r4, r5, r6, pc}
 8013480:	f855 3b04 	ldr.w	r3, [r5], #4
 8013484:	4798      	blx	r3
 8013486:	3601      	adds	r6, #1
 8013488:	e7ee      	b.n	8013468 <__libc_init_array+0xc>
 801348a:	f855 3b04 	ldr.w	r3, [r5], #4
 801348e:	4798      	blx	r3
 8013490:	3601      	adds	r6, #1
 8013492:	e7f2      	b.n	801347a <__libc_init_array+0x1e>
 8013494:	08017284 	.word	0x08017284
 8013498:	08017284 	.word	0x08017284
 801349c:	08017284 	.word	0x08017284
 80134a0:	08017288 	.word	0x08017288

080134a4 <__retarget_lock_init_recursive>:
 80134a4:	4770      	bx	lr

080134a6 <__retarget_lock_acquire_recursive>:
 80134a6:	4770      	bx	lr

080134a8 <__retarget_lock_release_recursive>:
 80134a8:	4770      	bx	lr

080134aa <memcmp>:
 80134aa:	b510      	push	{r4, lr}
 80134ac:	3901      	subs	r1, #1
 80134ae:	4402      	add	r2, r0
 80134b0:	4290      	cmp	r0, r2
 80134b2:	d101      	bne.n	80134b8 <memcmp+0xe>
 80134b4:	2000      	movs	r0, #0
 80134b6:	e005      	b.n	80134c4 <memcmp+0x1a>
 80134b8:	7803      	ldrb	r3, [r0, #0]
 80134ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80134be:	42a3      	cmp	r3, r4
 80134c0:	d001      	beq.n	80134c6 <memcmp+0x1c>
 80134c2:	1b18      	subs	r0, r3, r4
 80134c4:	bd10      	pop	{r4, pc}
 80134c6:	3001      	adds	r0, #1
 80134c8:	e7f2      	b.n	80134b0 <memcmp+0x6>

080134ca <memcpy>:
 80134ca:	440a      	add	r2, r1
 80134cc:	4291      	cmp	r1, r2
 80134ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80134d2:	d100      	bne.n	80134d6 <memcpy+0xc>
 80134d4:	4770      	bx	lr
 80134d6:	b510      	push	{r4, lr}
 80134d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134e0:	4291      	cmp	r1, r2
 80134e2:	d1f9      	bne.n	80134d8 <memcpy+0xe>
 80134e4:	bd10      	pop	{r4, pc}

080134e6 <memset>:
 80134e6:	4402      	add	r2, r0
 80134e8:	4603      	mov	r3, r0
 80134ea:	4293      	cmp	r3, r2
 80134ec:	d100      	bne.n	80134f0 <memset+0xa>
 80134ee:	4770      	bx	lr
 80134f0:	f803 1b01 	strb.w	r1, [r3], #1
 80134f4:	e7f9      	b.n	80134ea <memset+0x4>
	...

080134f8 <sbrk_aligned>:
 80134f8:	b570      	push	{r4, r5, r6, lr}
 80134fa:	4e0e      	ldr	r6, [pc, #56]	; (8013534 <sbrk_aligned+0x3c>)
 80134fc:	460c      	mov	r4, r1
 80134fe:	6831      	ldr	r1, [r6, #0]
 8013500:	4605      	mov	r5, r0
 8013502:	b911      	cbnz	r1, 801350a <sbrk_aligned+0x12>
 8013504:	f000 f94c 	bl	80137a0 <_sbrk_r>
 8013508:	6030      	str	r0, [r6, #0]
 801350a:	4621      	mov	r1, r4
 801350c:	4628      	mov	r0, r5
 801350e:	f000 f947 	bl	80137a0 <_sbrk_r>
 8013512:	1c43      	adds	r3, r0, #1
 8013514:	d00a      	beq.n	801352c <sbrk_aligned+0x34>
 8013516:	1cc4      	adds	r4, r0, #3
 8013518:	f024 0403 	bic.w	r4, r4, #3
 801351c:	42a0      	cmp	r0, r4
 801351e:	d007      	beq.n	8013530 <sbrk_aligned+0x38>
 8013520:	1a21      	subs	r1, r4, r0
 8013522:	4628      	mov	r0, r5
 8013524:	f000 f93c 	bl	80137a0 <_sbrk_r>
 8013528:	3001      	adds	r0, #1
 801352a:	d101      	bne.n	8013530 <sbrk_aligned+0x38>
 801352c:	f04f 34ff 	mov.w	r4, #4294967295
 8013530:	4620      	mov	r0, r4
 8013532:	bd70      	pop	{r4, r5, r6, pc}
 8013534:	2000cb8c 	.word	0x2000cb8c

08013538 <_malloc_r>:
 8013538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801353c:	1ccd      	adds	r5, r1, #3
 801353e:	f025 0503 	bic.w	r5, r5, #3
 8013542:	3508      	adds	r5, #8
 8013544:	2d0c      	cmp	r5, #12
 8013546:	bf38      	it	cc
 8013548:	250c      	movcc	r5, #12
 801354a:	2d00      	cmp	r5, #0
 801354c:	4607      	mov	r7, r0
 801354e:	db01      	blt.n	8013554 <_malloc_r+0x1c>
 8013550:	42a9      	cmp	r1, r5
 8013552:	d905      	bls.n	8013560 <_malloc_r+0x28>
 8013554:	230c      	movs	r3, #12
 8013556:	603b      	str	r3, [r7, #0]
 8013558:	2600      	movs	r6, #0
 801355a:	4630      	mov	r0, r6
 801355c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013560:	4e2e      	ldr	r6, [pc, #184]	; (801361c <_malloc_r+0xe4>)
 8013562:	f000 fa9f 	bl	8013aa4 <__malloc_lock>
 8013566:	6833      	ldr	r3, [r6, #0]
 8013568:	461c      	mov	r4, r3
 801356a:	bb34      	cbnz	r4, 80135ba <_malloc_r+0x82>
 801356c:	4629      	mov	r1, r5
 801356e:	4638      	mov	r0, r7
 8013570:	f7ff ffc2 	bl	80134f8 <sbrk_aligned>
 8013574:	1c43      	adds	r3, r0, #1
 8013576:	4604      	mov	r4, r0
 8013578:	d14d      	bne.n	8013616 <_malloc_r+0xde>
 801357a:	6834      	ldr	r4, [r6, #0]
 801357c:	4626      	mov	r6, r4
 801357e:	2e00      	cmp	r6, #0
 8013580:	d140      	bne.n	8013604 <_malloc_r+0xcc>
 8013582:	6823      	ldr	r3, [r4, #0]
 8013584:	4631      	mov	r1, r6
 8013586:	4638      	mov	r0, r7
 8013588:	eb04 0803 	add.w	r8, r4, r3
 801358c:	f000 f908 	bl	80137a0 <_sbrk_r>
 8013590:	4580      	cmp	r8, r0
 8013592:	d13a      	bne.n	801360a <_malloc_r+0xd2>
 8013594:	6821      	ldr	r1, [r4, #0]
 8013596:	3503      	adds	r5, #3
 8013598:	1a6d      	subs	r5, r5, r1
 801359a:	f025 0503 	bic.w	r5, r5, #3
 801359e:	3508      	adds	r5, #8
 80135a0:	2d0c      	cmp	r5, #12
 80135a2:	bf38      	it	cc
 80135a4:	250c      	movcc	r5, #12
 80135a6:	4629      	mov	r1, r5
 80135a8:	4638      	mov	r0, r7
 80135aa:	f7ff ffa5 	bl	80134f8 <sbrk_aligned>
 80135ae:	3001      	adds	r0, #1
 80135b0:	d02b      	beq.n	801360a <_malloc_r+0xd2>
 80135b2:	6823      	ldr	r3, [r4, #0]
 80135b4:	442b      	add	r3, r5
 80135b6:	6023      	str	r3, [r4, #0]
 80135b8:	e00e      	b.n	80135d8 <_malloc_r+0xa0>
 80135ba:	6822      	ldr	r2, [r4, #0]
 80135bc:	1b52      	subs	r2, r2, r5
 80135be:	d41e      	bmi.n	80135fe <_malloc_r+0xc6>
 80135c0:	2a0b      	cmp	r2, #11
 80135c2:	d916      	bls.n	80135f2 <_malloc_r+0xba>
 80135c4:	1961      	adds	r1, r4, r5
 80135c6:	42a3      	cmp	r3, r4
 80135c8:	6025      	str	r5, [r4, #0]
 80135ca:	bf18      	it	ne
 80135cc:	6059      	strne	r1, [r3, #4]
 80135ce:	6863      	ldr	r3, [r4, #4]
 80135d0:	bf08      	it	eq
 80135d2:	6031      	streq	r1, [r6, #0]
 80135d4:	5162      	str	r2, [r4, r5]
 80135d6:	604b      	str	r3, [r1, #4]
 80135d8:	4638      	mov	r0, r7
 80135da:	f104 060b 	add.w	r6, r4, #11
 80135de:	f000 fa67 	bl	8013ab0 <__malloc_unlock>
 80135e2:	f026 0607 	bic.w	r6, r6, #7
 80135e6:	1d23      	adds	r3, r4, #4
 80135e8:	1af2      	subs	r2, r6, r3
 80135ea:	d0b6      	beq.n	801355a <_malloc_r+0x22>
 80135ec:	1b9b      	subs	r3, r3, r6
 80135ee:	50a3      	str	r3, [r4, r2]
 80135f0:	e7b3      	b.n	801355a <_malloc_r+0x22>
 80135f2:	6862      	ldr	r2, [r4, #4]
 80135f4:	42a3      	cmp	r3, r4
 80135f6:	bf0c      	ite	eq
 80135f8:	6032      	streq	r2, [r6, #0]
 80135fa:	605a      	strne	r2, [r3, #4]
 80135fc:	e7ec      	b.n	80135d8 <_malloc_r+0xa0>
 80135fe:	4623      	mov	r3, r4
 8013600:	6864      	ldr	r4, [r4, #4]
 8013602:	e7b2      	b.n	801356a <_malloc_r+0x32>
 8013604:	4634      	mov	r4, r6
 8013606:	6876      	ldr	r6, [r6, #4]
 8013608:	e7b9      	b.n	801357e <_malloc_r+0x46>
 801360a:	230c      	movs	r3, #12
 801360c:	603b      	str	r3, [r7, #0]
 801360e:	4638      	mov	r0, r7
 8013610:	f000 fa4e 	bl	8013ab0 <__malloc_unlock>
 8013614:	e7a1      	b.n	801355a <_malloc_r+0x22>
 8013616:	6025      	str	r5, [r4, #0]
 8013618:	e7de      	b.n	80135d8 <_malloc_r+0xa0>
 801361a:	bf00      	nop
 801361c:	2000cb88 	.word	0x2000cb88

08013620 <iprintf>:
 8013620:	b40f      	push	{r0, r1, r2, r3}
 8013622:	4b0a      	ldr	r3, [pc, #40]	; (801364c <iprintf+0x2c>)
 8013624:	b513      	push	{r0, r1, r4, lr}
 8013626:	681c      	ldr	r4, [r3, #0]
 8013628:	b124      	cbz	r4, 8013634 <iprintf+0x14>
 801362a:	69a3      	ldr	r3, [r4, #24]
 801362c:	b913      	cbnz	r3, 8013634 <iprintf+0x14>
 801362e:	4620      	mov	r0, r4
 8013630:	f7ff fe76 	bl	8013320 <__sinit>
 8013634:	ab05      	add	r3, sp, #20
 8013636:	9a04      	ldr	r2, [sp, #16]
 8013638:	68a1      	ldr	r1, [r4, #8]
 801363a:	9301      	str	r3, [sp, #4]
 801363c:	4620      	mov	r0, r4
 801363e:	f000 fab3 	bl	8013ba8 <_vfiprintf_r>
 8013642:	b002      	add	sp, #8
 8013644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013648:	b004      	add	sp, #16
 801364a:	4770      	bx	lr
 801364c:	20000030 	.word	0x20000030

08013650 <rand>:
 8013650:	4b16      	ldr	r3, [pc, #88]	; (80136ac <rand+0x5c>)
 8013652:	b510      	push	{r4, lr}
 8013654:	681c      	ldr	r4, [r3, #0]
 8013656:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013658:	b9b3      	cbnz	r3, 8013688 <rand+0x38>
 801365a:	2018      	movs	r0, #24
 801365c:	f000 fa1a 	bl	8013a94 <malloc>
 8013660:	63a0      	str	r0, [r4, #56]	; 0x38
 8013662:	b928      	cbnz	r0, 8013670 <rand+0x20>
 8013664:	4602      	mov	r2, r0
 8013666:	4b12      	ldr	r3, [pc, #72]	; (80136b0 <rand+0x60>)
 8013668:	4812      	ldr	r0, [pc, #72]	; (80136b4 <rand+0x64>)
 801366a:	214e      	movs	r1, #78	; 0x4e
 801366c:	f000 f8fe 	bl	801386c <__assert_func>
 8013670:	4a11      	ldr	r2, [pc, #68]	; (80136b8 <rand+0x68>)
 8013672:	4b12      	ldr	r3, [pc, #72]	; (80136bc <rand+0x6c>)
 8013674:	e9c0 2300 	strd	r2, r3, [r0]
 8013678:	4b11      	ldr	r3, [pc, #68]	; (80136c0 <rand+0x70>)
 801367a:	6083      	str	r3, [r0, #8]
 801367c:	230b      	movs	r3, #11
 801367e:	8183      	strh	r3, [r0, #12]
 8013680:	2201      	movs	r2, #1
 8013682:	2300      	movs	r3, #0
 8013684:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013688:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801368a:	4a0e      	ldr	r2, [pc, #56]	; (80136c4 <rand+0x74>)
 801368c:	6920      	ldr	r0, [r4, #16]
 801368e:	6963      	ldr	r3, [r4, #20]
 8013690:	490d      	ldr	r1, [pc, #52]	; (80136c8 <rand+0x78>)
 8013692:	4342      	muls	r2, r0
 8013694:	fb01 2203 	mla	r2, r1, r3, r2
 8013698:	fba0 0101 	umull	r0, r1, r0, r1
 801369c:	1c43      	adds	r3, r0, #1
 801369e:	eb42 0001 	adc.w	r0, r2, r1
 80136a2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80136a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80136aa:	bd10      	pop	{r4, pc}
 80136ac:	20000030 	.word	0x20000030
 80136b0:	08017198 	.word	0x08017198
 80136b4:	080171af 	.word	0x080171af
 80136b8:	abcd330e 	.word	0xabcd330e
 80136bc:	e66d1234 	.word	0xe66d1234
 80136c0:	0005deec 	.word	0x0005deec
 80136c4:	5851f42d 	.word	0x5851f42d
 80136c8:	4c957f2d 	.word	0x4c957f2d

080136cc <cleanup_glue>:
 80136cc:	b538      	push	{r3, r4, r5, lr}
 80136ce:	460c      	mov	r4, r1
 80136d0:	6809      	ldr	r1, [r1, #0]
 80136d2:	4605      	mov	r5, r0
 80136d4:	b109      	cbz	r1, 80136da <cleanup_glue+0xe>
 80136d6:	f7ff fff9 	bl	80136cc <cleanup_glue>
 80136da:	4621      	mov	r1, r4
 80136dc:	4628      	mov	r0, r5
 80136de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80136e2:	f000 b9eb 	b.w	8013abc <_free_r>
	...

080136e8 <_reclaim_reent>:
 80136e8:	4b2c      	ldr	r3, [pc, #176]	; (801379c <_reclaim_reent+0xb4>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	4283      	cmp	r3, r0
 80136ee:	b570      	push	{r4, r5, r6, lr}
 80136f0:	4604      	mov	r4, r0
 80136f2:	d051      	beq.n	8013798 <_reclaim_reent+0xb0>
 80136f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80136f6:	b143      	cbz	r3, 801370a <_reclaim_reent+0x22>
 80136f8:	68db      	ldr	r3, [r3, #12]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d14a      	bne.n	8013794 <_reclaim_reent+0xac>
 80136fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013700:	6819      	ldr	r1, [r3, #0]
 8013702:	b111      	cbz	r1, 801370a <_reclaim_reent+0x22>
 8013704:	4620      	mov	r0, r4
 8013706:	f000 f9d9 	bl	8013abc <_free_r>
 801370a:	6961      	ldr	r1, [r4, #20]
 801370c:	b111      	cbz	r1, 8013714 <_reclaim_reent+0x2c>
 801370e:	4620      	mov	r0, r4
 8013710:	f000 f9d4 	bl	8013abc <_free_r>
 8013714:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013716:	b111      	cbz	r1, 801371e <_reclaim_reent+0x36>
 8013718:	4620      	mov	r0, r4
 801371a:	f000 f9cf 	bl	8013abc <_free_r>
 801371e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013720:	b111      	cbz	r1, 8013728 <_reclaim_reent+0x40>
 8013722:	4620      	mov	r0, r4
 8013724:	f000 f9ca 	bl	8013abc <_free_r>
 8013728:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801372a:	b111      	cbz	r1, 8013732 <_reclaim_reent+0x4a>
 801372c:	4620      	mov	r0, r4
 801372e:	f000 f9c5 	bl	8013abc <_free_r>
 8013732:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013734:	b111      	cbz	r1, 801373c <_reclaim_reent+0x54>
 8013736:	4620      	mov	r0, r4
 8013738:	f000 f9c0 	bl	8013abc <_free_r>
 801373c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801373e:	b111      	cbz	r1, 8013746 <_reclaim_reent+0x5e>
 8013740:	4620      	mov	r0, r4
 8013742:	f000 f9bb 	bl	8013abc <_free_r>
 8013746:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013748:	b111      	cbz	r1, 8013750 <_reclaim_reent+0x68>
 801374a:	4620      	mov	r0, r4
 801374c:	f000 f9b6 	bl	8013abc <_free_r>
 8013750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013752:	b111      	cbz	r1, 801375a <_reclaim_reent+0x72>
 8013754:	4620      	mov	r0, r4
 8013756:	f000 f9b1 	bl	8013abc <_free_r>
 801375a:	69a3      	ldr	r3, [r4, #24]
 801375c:	b1e3      	cbz	r3, 8013798 <_reclaim_reent+0xb0>
 801375e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013760:	4620      	mov	r0, r4
 8013762:	4798      	blx	r3
 8013764:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013766:	b1b9      	cbz	r1, 8013798 <_reclaim_reent+0xb0>
 8013768:	4620      	mov	r0, r4
 801376a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801376e:	f7ff bfad 	b.w	80136cc <cleanup_glue>
 8013772:	5949      	ldr	r1, [r1, r5]
 8013774:	b941      	cbnz	r1, 8013788 <_reclaim_reent+0xa0>
 8013776:	3504      	adds	r5, #4
 8013778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801377a:	2d80      	cmp	r5, #128	; 0x80
 801377c:	68d9      	ldr	r1, [r3, #12]
 801377e:	d1f8      	bne.n	8013772 <_reclaim_reent+0x8a>
 8013780:	4620      	mov	r0, r4
 8013782:	f000 f99b 	bl	8013abc <_free_r>
 8013786:	e7ba      	b.n	80136fe <_reclaim_reent+0x16>
 8013788:	680e      	ldr	r6, [r1, #0]
 801378a:	4620      	mov	r0, r4
 801378c:	f000 f996 	bl	8013abc <_free_r>
 8013790:	4631      	mov	r1, r6
 8013792:	e7ef      	b.n	8013774 <_reclaim_reent+0x8c>
 8013794:	2500      	movs	r5, #0
 8013796:	e7ef      	b.n	8013778 <_reclaim_reent+0x90>
 8013798:	bd70      	pop	{r4, r5, r6, pc}
 801379a:	bf00      	nop
 801379c:	20000030 	.word	0x20000030

080137a0 <_sbrk_r>:
 80137a0:	b538      	push	{r3, r4, r5, lr}
 80137a2:	4d06      	ldr	r5, [pc, #24]	; (80137bc <_sbrk_r+0x1c>)
 80137a4:	2300      	movs	r3, #0
 80137a6:	4604      	mov	r4, r0
 80137a8:	4608      	mov	r0, r1
 80137aa:	602b      	str	r3, [r5, #0]
 80137ac:	f7ed fb02 	bl	8000db4 <_sbrk>
 80137b0:	1c43      	adds	r3, r0, #1
 80137b2:	d102      	bne.n	80137ba <_sbrk_r+0x1a>
 80137b4:	682b      	ldr	r3, [r5, #0]
 80137b6:	b103      	cbz	r3, 80137ba <_sbrk_r+0x1a>
 80137b8:	6023      	str	r3, [r4, #0]
 80137ba:	bd38      	pop	{r3, r4, r5, pc}
 80137bc:	2000cb90 	.word	0x2000cb90

080137c0 <__sread>:
 80137c0:	b510      	push	{r4, lr}
 80137c2:	460c      	mov	r4, r1
 80137c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137c8:	f000 fcb2 	bl	8014130 <_read_r>
 80137cc:	2800      	cmp	r0, #0
 80137ce:	bfab      	itete	ge
 80137d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80137d2:	89a3      	ldrhlt	r3, [r4, #12]
 80137d4:	181b      	addge	r3, r3, r0
 80137d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80137da:	bfac      	ite	ge
 80137dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80137de:	81a3      	strhlt	r3, [r4, #12]
 80137e0:	bd10      	pop	{r4, pc}

080137e2 <__swrite>:
 80137e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137e6:	461f      	mov	r7, r3
 80137e8:	898b      	ldrh	r3, [r1, #12]
 80137ea:	05db      	lsls	r3, r3, #23
 80137ec:	4605      	mov	r5, r0
 80137ee:	460c      	mov	r4, r1
 80137f0:	4616      	mov	r6, r2
 80137f2:	d505      	bpl.n	8013800 <__swrite+0x1e>
 80137f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137f8:	2302      	movs	r3, #2
 80137fa:	2200      	movs	r2, #0
 80137fc:	f000 f938 	bl	8013a70 <_lseek_r>
 8013800:	89a3      	ldrh	r3, [r4, #12]
 8013802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013806:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801380a:	81a3      	strh	r3, [r4, #12]
 801380c:	4632      	mov	r2, r6
 801380e:	463b      	mov	r3, r7
 8013810:	4628      	mov	r0, r5
 8013812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013816:	f000 b817 	b.w	8013848 <_write_r>

0801381a <__sseek>:
 801381a:	b510      	push	{r4, lr}
 801381c:	460c      	mov	r4, r1
 801381e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013822:	f000 f925 	bl	8013a70 <_lseek_r>
 8013826:	1c43      	adds	r3, r0, #1
 8013828:	89a3      	ldrh	r3, [r4, #12]
 801382a:	bf15      	itete	ne
 801382c:	6560      	strne	r0, [r4, #84]	; 0x54
 801382e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013832:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013836:	81a3      	strheq	r3, [r4, #12]
 8013838:	bf18      	it	ne
 801383a:	81a3      	strhne	r3, [r4, #12]
 801383c:	bd10      	pop	{r4, pc}

0801383e <__sclose>:
 801383e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013842:	f000 b831 	b.w	80138a8 <_close_r>
	...

08013848 <_write_r>:
 8013848:	b538      	push	{r3, r4, r5, lr}
 801384a:	4d07      	ldr	r5, [pc, #28]	; (8013868 <_write_r+0x20>)
 801384c:	4604      	mov	r4, r0
 801384e:	4608      	mov	r0, r1
 8013850:	4611      	mov	r1, r2
 8013852:	2200      	movs	r2, #0
 8013854:	602a      	str	r2, [r5, #0]
 8013856:	461a      	mov	r2, r3
 8013858:	f7ed fa5b 	bl	8000d12 <_write>
 801385c:	1c43      	adds	r3, r0, #1
 801385e:	d102      	bne.n	8013866 <_write_r+0x1e>
 8013860:	682b      	ldr	r3, [r5, #0]
 8013862:	b103      	cbz	r3, 8013866 <_write_r+0x1e>
 8013864:	6023      	str	r3, [r4, #0]
 8013866:	bd38      	pop	{r3, r4, r5, pc}
 8013868:	2000cb90 	.word	0x2000cb90

0801386c <__assert_func>:
 801386c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801386e:	4614      	mov	r4, r2
 8013870:	461a      	mov	r2, r3
 8013872:	4b09      	ldr	r3, [pc, #36]	; (8013898 <__assert_func+0x2c>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	4605      	mov	r5, r0
 8013878:	68d8      	ldr	r0, [r3, #12]
 801387a:	b14c      	cbz	r4, 8013890 <__assert_func+0x24>
 801387c:	4b07      	ldr	r3, [pc, #28]	; (801389c <__assert_func+0x30>)
 801387e:	9100      	str	r1, [sp, #0]
 8013880:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013884:	4906      	ldr	r1, [pc, #24]	; (80138a0 <__assert_func+0x34>)
 8013886:	462b      	mov	r3, r5
 8013888:	f000 f8e0 	bl	8013a4c <fiprintf>
 801388c:	f000 fd22 	bl	80142d4 <abort>
 8013890:	4b04      	ldr	r3, [pc, #16]	; (80138a4 <__assert_func+0x38>)
 8013892:	461c      	mov	r4, r3
 8013894:	e7f3      	b.n	801387e <__assert_func+0x12>
 8013896:	bf00      	nop
 8013898:	20000030 	.word	0x20000030
 801389c:	0801720a 	.word	0x0801720a
 80138a0:	08017217 	.word	0x08017217
 80138a4:	08017245 	.word	0x08017245

080138a8 <_close_r>:
 80138a8:	b538      	push	{r3, r4, r5, lr}
 80138aa:	4d06      	ldr	r5, [pc, #24]	; (80138c4 <_close_r+0x1c>)
 80138ac:	2300      	movs	r3, #0
 80138ae:	4604      	mov	r4, r0
 80138b0:	4608      	mov	r0, r1
 80138b2:	602b      	str	r3, [r5, #0]
 80138b4:	f7ed fa49 	bl	8000d4a <_close>
 80138b8:	1c43      	adds	r3, r0, #1
 80138ba:	d102      	bne.n	80138c2 <_close_r+0x1a>
 80138bc:	682b      	ldr	r3, [r5, #0]
 80138be:	b103      	cbz	r3, 80138c2 <_close_r+0x1a>
 80138c0:	6023      	str	r3, [r4, #0]
 80138c2:	bd38      	pop	{r3, r4, r5, pc}
 80138c4:	2000cb90 	.word	0x2000cb90

080138c8 <__sflush_r>:
 80138c8:	898a      	ldrh	r2, [r1, #12]
 80138ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138ce:	4605      	mov	r5, r0
 80138d0:	0710      	lsls	r0, r2, #28
 80138d2:	460c      	mov	r4, r1
 80138d4:	d458      	bmi.n	8013988 <__sflush_r+0xc0>
 80138d6:	684b      	ldr	r3, [r1, #4]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	dc05      	bgt.n	80138e8 <__sflush_r+0x20>
 80138dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80138de:	2b00      	cmp	r3, #0
 80138e0:	dc02      	bgt.n	80138e8 <__sflush_r+0x20>
 80138e2:	2000      	movs	r0, #0
 80138e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80138ea:	2e00      	cmp	r6, #0
 80138ec:	d0f9      	beq.n	80138e2 <__sflush_r+0x1a>
 80138ee:	2300      	movs	r3, #0
 80138f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80138f4:	682f      	ldr	r7, [r5, #0]
 80138f6:	602b      	str	r3, [r5, #0]
 80138f8:	d032      	beq.n	8013960 <__sflush_r+0x98>
 80138fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80138fc:	89a3      	ldrh	r3, [r4, #12]
 80138fe:	075a      	lsls	r2, r3, #29
 8013900:	d505      	bpl.n	801390e <__sflush_r+0x46>
 8013902:	6863      	ldr	r3, [r4, #4]
 8013904:	1ac0      	subs	r0, r0, r3
 8013906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013908:	b10b      	cbz	r3, 801390e <__sflush_r+0x46>
 801390a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801390c:	1ac0      	subs	r0, r0, r3
 801390e:	2300      	movs	r3, #0
 8013910:	4602      	mov	r2, r0
 8013912:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013914:	6a21      	ldr	r1, [r4, #32]
 8013916:	4628      	mov	r0, r5
 8013918:	47b0      	blx	r6
 801391a:	1c43      	adds	r3, r0, #1
 801391c:	89a3      	ldrh	r3, [r4, #12]
 801391e:	d106      	bne.n	801392e <__sflush_r+0x66>
 8013920:	6829      	ldr	r1, [r5, #0]
 8013922:	291d      	cmp	r1, #29
 8013924:	d82c      	bhi.n	8013980 <__sflush_r+0xb8>
 8013926:	4a2a      	ldr	r2, [pc, #168]	; (80139d0 <__sflush_r+0x108>)
 8013928:	40ca      	lsrs	r2, r1
 801392a:	07d6      	lsls	r6, r2, #31
 801392c:	d528      	bpl.n	8013980 <__sflush_r+0xb8>
 801392e:	2200      	movs	r2, #0
 8013930:	6062      	str	r2, [r4, #4]
 8013932:	04d9      	lsls	r1, r3, #19
 8013934:	6922      	ldr	r2, [r4, #16]
 8013936:	6022      	str	r2, [r4, #0]
 8013938:	d504      	bpl.n	8013944 <__sflush_r+0x7c>
 801393a:	1c42      	adds	r2, r0, #1
 801393c:	d101      	bne.n	8013942 <__sflush_r+0x7a>
 801393e:	682b      	ldr	r3, [r5, #0]
 8013940:	b903      	cbnz	r3, 8013944 <__sflush_r+0x7c>
 8013942:	6560      	str	r0, [r4, #84]	; 0x54
 8013944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013946:	602f      	str	r7, [r5, #0]
 8013948:	2900      	cmp	r1, #0
 801394a:	d0ca      	beq.n	80138e2 <__sflush_r+0x1a>
 801394c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013950:	4299      	cmp	r1, r3
 8013952:	d002      	beq.n	801395a <__sflush_r+0x92>
 8013954:	4628      	mov	r0, r5
 8013956:	f000 f8b1 	bl	8013abc <_free_r>
 801395a:	2000      	movs	r0, #0
 801395c:	6360      	str	r0, [r4, #52]	; 0x34
 801395e:	e7c1      	b.n	80138e4 <__sflush_r+0x1c>
 8013960:	6a21      	ldr	r1, [r4, #32]
 8013962:	2301      	movs	r3, #1
 8013964:	4628      	mov	r0, r5
 8013966:	47b0      	blx	r6
 8013968:	1c41      	adds	r1, r0, #1
 801396a:	d1c7      	bne.n	80138fc <__sflush_r+0x34>
 801396c:	682b      	ldr	r3, [r5, #0]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d0c4      	beq.n	80138fc <__sflush_r+0x34>
 8013972:	2b1d      	cmp	r3, #29
 8013974:	d001      	beq.n	801397a <__sflush_r+0xb2>
 8013976:	2b16      	cmp	r3, #22
 8013978:	d101      	bne.n	801397e <__sflush_r+0xb6>
 801397a:	602f      	str	r7, [r5, #0]
 801397c:	e7b1      	b.n	80138e2 <__sflush_r+0x1a>
 801397e:	89a3      	ldrh	r3, [r4, #12]
 8013980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013984:	81a3      	strh	r3, [r4, #12]
 8013986:	e7ad      	b.n	80138e4 <__sflush_r+0x1c>
 8013988:	690f      	ldr	r7, [r1, #16]
 801398a:	2f00      	cmp	r7, #0
 801398c:	d0a9      	beq.n	80138e2 <__sflush_r+0x1a>
 801398e:	0793      	lsls	r3, r2, #30
 8013990:	680e      	ldr	r6, [r1, #0]
 8013992:	bf08      	it	eq
 8013994:	694b      	ldreq	r3, [r1, #20]
 8013996:	600f      	str	r7, [r1, #0]
 8013998:	bf18      	it	ne
 801399a:	2300      	movne	r3, #0
 801399c:	eba6 0807 	sub.w	r8, r6, r7
 80139a0:	608b      	str	r3, [r1, #8]
 80139a2:	f1b8 0f00 	cmp.w	r8, #0
 80139a6:	dd9c      	ble.n	80138e2 <__sflush_r+0x1a>
 80139a8:	6a21      	ldr	r1, [r4, #32]
 80139aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80139ac:	4643      	mov	r3, r8
 80139ae:	463a      	mov	r2, r7
 80139b0:	4628      	mov	r0, r5
 80139b2:	47b0      	blx	r6
 80139b4:	2800      	cmp	r0, #0
 80139b6:	dc06      	bgt.n	80139c6 <__sflush_r+0xfe>
 80139b8:	89a3      	ldrh	r3, [r4, #12]
 80139ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139be:	81a3      	strh	r3, [r4, #12]
 80139c0:	f04f 30ff 	mov.w	r0, #4294967295
 80139c4:	e78e      	b.n	80138e4 <__sflush_r+0x1c>
 80139c6:	4407      	add	r7, r0
 80139c8:	eba8 0800 	sub.w	r8, r8, r0
 80139cc:	e7e9      	b.n	80139a2 <__sflush_r+0xda>
 80139ce:	bf00      	nop
 80139d0:	20400001 	.word	0x20400001

080139d4 <_fflush_r>:
 80139d4:	b538      	push	{r3, r4, r5, lr}
 80139d6:	690b      	ldr	r3, [r1, #16]
 80139d8:	4605      	mov	r5, r0
 80139da:	460c      	mov	r4, r1
 80139dc:	b913      	cbnz	r3, 80139e4 <_fflush_r+0x10>
 80139de:	2500      	movs	r5, #0
 80139e0:	4628      	mov	r0, r5
 80139e2:	bd38      	pop	{r3, r4, r5, pc}
 80139e4:	b118      	cbz	r0, 80139ee <_fflush_r+0x1a>
 80139e6:	6983      	ldr	r3, [r0, #24]
 80139e8:	b90b      	cbnz	r3, 80139ee <_fflush_r+0x1a>
 80139ea:	f7ff fc99 	bl	8013320 <__sinit>
 80139ee:	4b14      	ldr	r3, [pc, #80]	; (8013a40 <_fflush_r+0x6c>)
 80139f0:	429c      	cmp	r4, r3
 80139f2:	d11b      	bne.n	8013a2c <_fflush_r+0x58>
 80139f4:	686c      	ldr	r4, [r5, #4]
 80139f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d0ef      	beq.n	80139de <_fflush_r+0xa>
 80139fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013a00:	07d0      	lsls	r0, r2, #31
 8013a02:	d404      	bmi.n	8013a0e <_fflush_r+0x3a>
 8013a04:	0599      	lsls	r1, r3, #22
 8013a06:	d402      	bmi.n	8013a0e <_fflush_r+0x3a>
 8013a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a0a:	f7ff fd4c 	bl	80134a6 <__retarget_lock_acquire_recursive>
 8013a0e:	4628      	mov	r0, r5
 8013a10:	4621      	mov	r1, r4
 8013a12:	f7ff ff59 	bl	80138c8 <__sflush_r>
 8013a16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a18:	07da      	lsls	r2, r3, #31
 8013a1a:	4605      	mov	r5, r0
 8013a1c:	d4e0      	bmi.n	80139e0 <_fflush_r+0xc>
 8013a1e:	89a3      	ldrh	r3, [r4, #12]
 8013a20:	059b      	lsls	r3, r3, #22
 8013a22:	d4dd      	bmi.n	80139e0 <_fflush_r+0xc>
 8013a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a26:	f7ff fd3f 	bl	80134a8 <__retarget_lock_release_recursive>
 8013a2a:	e7d9      	b.n	80139e0 <_fflush_r+0xc>
 8013a2c:	4b05      	ldr	r3, [pc, #20]	; (8013a44 <_fflush_r+0x70>)
 8013a2e:	429c      	cmp	r4, r3
 8013a30:	d101      	bne.n	8013a36 <_fflush_r+0x62>
 8013a32:	68ac      	ldr	r4, [r5, #8]
 8013a34:	e7df      	b.n	80139f6 <_fflush_r+0x22>
 8013a36:	4b04      	ldr	r3, [pc, #16]	; (8013a48 <_fflush_r+0x74>)
 8013a38:	429c      	cmp	r4, r3
 8013a3a:	bf08      	it	eq
 8013a3c:	68ec      	ldreq	r4, [r5, #12]
 8013a3e:	e7da      	b.n	80139f6 <_fflush_r+0x22>
 8013a40:	08017154 	.word	0x08017154
 8013a44:	08017174 	.word	0x08017174
 8013a48:	08017134 	.word	0x08017134

08013a4c <fiprintf>:
 8013a4c:	b40e      	push	{r1, r2, r3}
 8013a4e:	b503      	push	{r0, r1, lr}
 8013a50:	4601      	mov	r1, r0
 8013a52:	ab03      	add	r3, sp, #12
 8013a54:	4805      	ldr	r0, [pc, #20]	; (8013a6c <fiprintf+0x20>)
 8013a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a5a:	6800      	ldr	r0, [r0, #0]
 8013a5c:	9301      	str	r3, [sp, #4]
 8013a5e:	f000 f8a3 	bl	8013ba8 <_vfiprintf_r>
 8013a62:	b002      	add	sp, #8
 8013a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a68:	b003      	add	sp, #12
 8013a6a:	4770      	bx	lr
 8013a6c:	20000030 	.word	0x20000030

08013a70 <_lseek_r>:
 8013a70:	b538      	push	{r3, r4, r5, lr}
 8013a72:	4d07      	ldr	r5, [pc, #28]	; (8013a90 <_lseek_r+0x20>)
 8013a74:	4604      	mov	r4, r0
 8013a76:	4608      	mov	r0, r1
 8013a78:	4611      	mov	r1, r2
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	602a      	str	r2, [r5, #0]
 8013a7e:	461a      	mov	r2, r3
 8013a80:	f7ed f98a 	bl	8000d98 <_lseek>
 8013a84:	1c43      	adds	r3, r0, #1
 8013a86:	d102      	bne.n	8013a8e <_lseek_r+0x1e>
 8013a88:	682b      	ldr	r3, [r5, #0]
 8013a8a:	b103      	cbz	r3, 8013a8e <_lseek_r+0x1e>
 8013a8c:	6023      	str	r3, [r4, #0]
 8013a8e:	bd38      	pop	{r3, r4, r5, pc}
 8013a90:	2000cb90 	.word	0x2000cb90

08013a94 <malloc>:
 8013a94:	4b02      	ldr	r3, [pc, #8]	; (8013aa0 <malloc+0xc>)
 8013a96:	4601      	mov	r1, r0
 8013a98:	6818      	ldr	r0, [r3, #0]
 8013a9a:	f7ff bd4d 	b.w	8013538 <_malloc_r>
 8013a9e:	bf00      	nop
 8013aa0:	20000030 	.word	0x20000030

08013aa4 <__malloc_lock>:
 8013aa4:	4801      	ldr	r0, [pc, #4]	; (8013aac <__malloc_lock+0x8>)
 8013aa6:	f7ff bcfe 	b.w	80134a6 <__retarget_lock_acquire_recursive>
 8013aaa:	bf00      	nop
 8013aac:	2000cb84 	.word	0x2000cb84

08013ab0 <__malloc_unlock>:
 8013ab0:	4801      	ldr	r0, [pc, #4]	; (8013ab8 <__malloc_unlock+0x8>)
 8013ab2:	f7ff bcf9 	b.w	80134a8 <__retarget_lock_release_recursive>
 8013ab6:	bf00      	nop
 8013ab8:	2000cb84 	.word	0x2000cb84

08013abc <_free_r>:
 8013abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013abe:	2900      	cmp	r1, #0
 8013ac0:	d044      	beq.n	8013b4c <_free_r+0x90>
 8013ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ac6:	9001      	str	r0, [sp, #4]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	f1a1 0404 	sub.w	r4, r1, #4
 8013ace:	bfb8      	it	lt
 8013ad0:	18e4      	addlt	r4, r4, r3
 8013ad2:	f7ff ffe7 	bl	8013aa4 <__malloc_lock>
 8013ad6:	4a1e      	ldr	r2, [pc, #120]	; (8013b50 <_free_r+0x94>)
 8013ad8:	9801      	ldr	r0, [sp, #4]
 8013ada:	6813      	ldr	r3, [r2, #0]
 8013adc:	b933      	cbnz	r3, 8013aec <_free_r+0x30>
 8013ade:	6063      	str	r3, [r4, #4]
 8013ae0:	6014      	str	r4, [r2, #0]
 8013ae2:	b003      	add	sp, #12
 8013ae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ae8:	f7ff bfe2 	b.w	8013ab0 <__malloc_unlock>
 8013aec:	42a3      	cmp	r3, r4
 8013aee:	d908      	bls.n	8013b02 <_free_r+0x46>
 8013af0:	6825      	ldr	r5, [r4, #0]
 8013af2:	1961      	adds	r1, r4, r5
 8013af4:	428b      	cmp	r3, r1
 8013af6:	bf01      	itttt	eq
 8013af8:	6819      	ldreq	r1, [r3, #0]
 8013afa:	685b      	ldreq	r3, [r3, #4]
 8013afc:	1949      	addeq	r1, r1, r5
 8013afe:	6021      	streq	r1, [r4, #0]
 8013b00:	e7ed      	b.n	8013ade <_free_r+0x22>
 8013b02:	461a      	mov	r2, r3
 8013b04:	685b      	ldr	r3, [r3, #4]
 8013b06:	b10b      	cbz	r3, 8013b0c <_free_r+0x50>
 8013b08:	42a3      	cmp	r3, r4
 8013b0a:	d9fa      	bls.n	8013b02 <_free_r+0x46>
 8013b0c:	6811      	ldr	r1, [r2, #0]
 8013b0e:	1855      	adds	r5, r2, r1
 8013b10:	42a5      	cmp	r5, r4
 8013b12:	d10b      	bne.n	8013b2c <_free_r+0x70>
 8013b14:	6824      	ldr	r4, [r4, #0]
 8013b16:	4421      	add	r1, r4
 8013b18:	1854      	adds	r4, r2, r1
 8013b1a:	42a3      	cmp	r3, r4
 8013b1c:	6011      	str	r1, [r2, #0]
 8013b1e:	d1e0      	bne.n	8013ae2 <_free_r+0x26>
 8013b20:	681c      	ldr	r4, [r3, #0]
 8013b22:	685b      	ldr	r3, [r3, #4]
 8013b24:	6053      	str	r3, [r2, #4]
 8013b26:	4421      	add	r1, r4
 8013b28:	6011      	str	r1, [r2, #0]
 8013b2a:	e7da      	b.n	8013ae2 <_free_r+0x26>
 8013b2c:	d902      	bls.n	8013b34 <_free_r+0x78>
 8013b2e:	230c      	movs	r3, #12
 8013b30:	6003      	str	r3, [r0, #0]
 8013b32:	e7d6      	b.n	8013ae2 <_free_r+0x26>
 8013b34:	6825      	ldr	r5, [r4, #0]
 8013b36:	1961      	adds	r1, r4, r5
 8013b38:	428b      	cmp	r3, r1
 8013b3a:	bf04      	itt	eq
 8013b3c:	6819      	ldreq	r1, [r3, #0]
 8013b3e:	685b      	ldreq	r3, [r3, #4]
 8013b40:	6063      	str	r3, [r4, #4]
 8013b42:	bf04      	itt	eq
 8013b44:	1949      	addeq	r1, r1, r5
 8013b46:	6021      	streq	r1, [r4, #0]
 8013b48:	6054      	str	r4, [r2, #4]
 8013b4a:	e7ca      	b.n	8013ae2 <_free_r+0x26>
 8013b4c:	b003      	add	sp, #12
 8013b4e:	bd30      	pop	{r4, r5, pc}
 8013b50:	2000cb88 	.word	0x2000cb88

08013b54 <__sfputc_r>:
 8013b54:	6893      	ldr	r3, [r2, #8]
 8013b56:	3b01      	subs	r3, #1
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	b410      	push	{r4}
 8013b5c:	6093      	str	r3, [r2, #8]
 8013b5e:	da08      	bge.n	8013b72 <__sfputc_r+0x1e>
 8013b60:	6994      	ldr	r4, [r2, #24]
 8013b62:	42a3      	cmp	r3, r4
 8013b64:	db01      	blt.n	8013b6a <__sfputc_r+0x16>
 8013b66:	290a      	cmp	r1, #10
 8013b68:	d103      	bne.n	8013b72 <__sfputc_r+0x1e>
 8013b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b6e:	f000 baf1 	b.w	8014154 <__swbuf_r>
 8013b72:	6813      	ldr	r3, [r2, #0]
 8013b74:	1c58      	adds	r0, r3, #1
 8013b76:	6010      	str	r0, [r2, #0]
 8013b78:	7019      	strb	r1, [r3, #0]
 8013b7a:	4608      	mov	r0, r1
 8013b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b80:	4770      	bx	lr

08013b82 <__sfputs_r>:
 8013b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b84:	4606      	mov	r6, r0
 8013b86:	460f      	mov	r7, r1
 8013b88:	4614      	mov	r4, r2
 8013b8a:	18d5      	adds	r5, r2, r3
 8013b8c:	42ac      	cmp	r4, r5
 8013b8e:	d101      	bne.n	8013b94 <__sfputs_r+0x12>
 8013b90:	2000      	movs	r0, #0
 8013b92:	e007      	b.n	8013ba4 <__sfputs_r+0x22>
 8013b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b98:	463a      	mov	r2, r7
 8013b9a:	4630      	mov	r0, r6
 8013b9c:	f7ff ffda 	bl	8013b54 <__sfputc_r>
 8013ba0:	1c43      	adds	r3, r0, #1
 8013ba2:	d1f3      	bne.n	8013b8c <__sfputs_r+0xa>
 8013ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013ba8 <_vfiprintf_r>:
 8013ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bac:	460d      	mov	r5, r1
 8013bae:	b09d      	sub	sp, #116	; 0x74
 8013bb0:	4614      	mov	r4, r2
 8013bb2:	4698      	mov	r8, r3
 8013bb4:	4606      	mov	r6, r0
 8013bb6:	b118      	cbz	r0, 8013bc0 <_vfiprintf_r+0x18>
 8013bb8:	6983      	ldr	r3, [r0, #24]
 8013bba:	b90b      	cbnz	r3, 8013bc0 <_vfiprintf_r+0x18>
 8013bbc:	f7ff fbb0 	bl	8013320 <__sinit>
 8013bc0:	4b89      	ldr	r3, [pc, #548]	; (8013de8 <_vfiprintf_r+0x240>)
 8013bc2:	429d      	cmp	r5, r3
 8013bc4:	d11b      	bne.n	8013bfe <_vfiprintf_r+0x56>
 8013bc6:	6875      	ldr	r5, [r6, #4]
 8013bc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013bca:	07d9      	lsls	r1, r3, #31
 8013bcc:	d405      	bmi.n	8013bda <_vfiprintf_r+0x32>
 8013bce:	89ab      	ldrh	r3, [r5, #12]
 8013bd0:	059a      	lsls	r2, r3, #22
 8013bd2:	d402      	bmi.n	8013bda <_vfiprintf_r+0x32>
 8013bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bd6:	f7ff fc66 	bl	80134a6 <__retarget_lock_acquire_recursive>
 8013bda:	89ab      	ldrh	r3, [r5, #12]
 8013bdc:	071b      	lsls	r3, r3, #28
 8013bde:	d501      	bpl.n	8013be4 <_vfiprintf_r+0x3c>
 8013be0:	692b      	ldr	r3, [r5, #16]
 8013be2:	b9eb      	cbnz	r3, 8013c20 <_vfiprintf_r+0x78>
 8013be4:	4629      	mov	r1, r5
 8013be6:	4630      	mov	r0, r6
 8013be8:	f000 fb06 	bl	80141f8 <__swsetup_r>
 8013bec:	b1c0      	cbz	r0, 8013c20 <_vfiprintf_r+0x78>
 8013bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013bf0:	07dc      	lsls	r4, r3, #31
 8013bf2:	d50e      	bpl.n	8013c12 <_vfiprintf_r+0x6a>
 8013bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bf8:	b01d      	add	sp, #116	; 0x74
 8013bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bfe:	4b7b      	ldr	r3, [pc, #492]	; (8013dec <_vfiprintf_r+0x244>)
 8013c00:	429d      	cmp	r5, r3
 8013c02:	d101      	bne.n	8013c08 <_vfiprintf_r+0x60>
 8013c04:	68b5      	ldr	r5, [r6, #8]
 8013c06:	e7df      	b.n	8013bc8 <_vfiprintf_r+0x20>
 8013c08:	4b79      	ldr	r3, [pc, #484]	; (8013df0 <_vfiprintf_r+0x248>)
 8013c0a:	429d      	cmp	r5, r3
 8013c0c:	bf08      	it	eq
 8013c0e:	68f5      	ldreq	r5, [r6, #12]
 8013c10:	e7da      	b.n	8013bc8 <_vfiprintf_r+0x20>
 8013c12:	89ab      	ldrh	r3, [r5, #12]
 8013c14:	0598      	lsls	r0, r3, #22
 8013c16:	d4ed      	bmi.n	8013bf4 <_vfiprintf_r+0x4c>
 8013c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c1a:	f7ff fc45 	bl	80134a8 <__retarget_lock_release_recursive>
 8013c1e:	e7e9      	b.n	8013bf4 <_vfiprintf_r+0x4c>
 8013c20:	2300      	movs	r3, #0
 8013c22:	9309      	str	r3, [sp, #36]	; 0x24
 8013c24:	2320      	movs	r3, #32
 8013c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c2e:	2330      	movs	r3, #48	; 0x30
 8013c30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013df4 <_vfiprintf_r+0x24c>
 8013c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c38:	f04f 0901 	mov.w	r9, #1
 8013c3c:	4623      	mov	r3, r4
 8013c3e:	469a      	mov	sl, r3
 8013c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c44:	b10a      	cbz	r2, 8013c4a <_vfiprintf_r+0xa2>
 8013c46:	2a25      	cmp	r2, #37	; 0x25
 8013c48:	d1f9      	bne.n	8013c3e <_vfiprintf_r+0x96>
 8013c4a:	ebba 0b04 	subs.w	fp, sl, r4
 8013c4e:	d00b      	beq.n	8013c68 <_vfiprintf_r+0xc0>
 8013c50:	465b      	mov	r3, fp
 8013c52:	4622      	mov	r2, r4
 8013c54:	4629      	mov	r1, r5
 8013c56:	4630      	mov	r0, r6
 8013c58:	f7ff ff93 	bl	8013b82 <__sfputs_r>
 8013c5c:	3001      	adds	r0, #1
 8013c5e:	f000 80aa 	beq.w	8013db6 <_vfiprintf_r+0x20e>
 8013c62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c64:	445a      	add	r2, fp
 8013c66:	9209      	str	r2, [sp, #36]	; 0x24
 8013c68:	f89a 3000 	ldrb.w	r3, [sl]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	f000 80a2 	beq.w	8013db6 <_vfiprintf_r+0x20e>
 8013c72:	2300      	movs	r3, #0
 8013c74:	f04f 32ff 	mov.w	r2, #4294967295
 8013c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c7c:	f10a 0a01 	add.w	sl, sl, #1
 8013c80:	9304      	str	r3, [sp, #16]
 8013c82:	9307      	str	r3, [sp, #28]
 8013c84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c88:	931a      	str	r3, [sp, #104]	; 0x68
 8013c8a:	4654      	mov	r4, sl
 8013c8c:	2205      	movs	r2, #5
 8013c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c92:	4858      	ldr	r0, [pc, #352]	; (8013df4 <_vfiprintf_r+0x24c>)
 8013c94:	f7ec fabc 	bl	8000210 <memchr>
 8013c98:	9a04      	ldr	r2, [sp, #16]
 8013c9a:	b9d8      	cbnz	r0, 8013cd4 <_vfiprintf_r+0x12c>
 8013c9c:	06d1      	lsls	r1, r2, #27
 8013c9e:	bf44      	itt	mi
 8013ca0:	2320      	movmi	r3, #32
 8013ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ca6:	0713      	lsls	r3, r2, #28
 8013ca8:	bf44      	itt	mi
 8013caa:	232b      	movmi	r3, #43	; 0x2b
 8013cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8013cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8013cb6:	d015      	beq.n	8013ce4 <_vfiprintf_r+0x13c>
 8013cb8:	9a07      	ldr	r2, [sp, #28]
 8013cba:	4654      	mov	r4, sl
 8013cbc:	2000      	movs	r0, #0
 8013cbe:	f04f 0c0a 	mov.w	ip, #10
 8013cc2:	4621      	mov	r1, r4
 8013cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013cc8:	3b30      	subs	r3, #48	; 0x30
 8013cca:	2b09      	cmp	r3, #9
 8013ccc:	d94e      	bls.n	8013d6c <_vfiprintf_r+0x1c4>
 8013cce:	b1b0      	cbz	r0, 8013cfe <_vfiprintf_r+0x156>
 8013cd0:	9207      	str	r2, [sp, #28]
 8013cd2:	e014      	b.n	8013cfe <_vfiprintf_r+0x156>
 8013cd4:	eba0 0308 	sub.w	r3, r0, r8
 8013cd8:	fa09 f303 	lsl.w	r3, r9, r3
 8013cdc:	4313      	orrs	r3, r2
 8013cde:	9304      	str	r3, [sp, #16]
 8013ce0:	46a2      	mov	sl, r4
 8013ce2:	e7d2      	b.n	8013c8a <_vfiprintf_r+0xe2>
 8013ce4:	9b03      	ldr	r3, [sp, #12]
 8013ce6:	1d19      	adds	r1, r3, #4
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	9103      	str	r1, [sp, #12]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	bfbb      	ittet	lt
 8013cf0:	425b      	neglt	r3, r3
 8013cf2:	f042 0202 	orrlt.w	r2, r2, #2
 8013cf6:	9307      	strge	r3, [sp, #28]
 8013cf8:	9307      	strlt	r3, [sp, #28]
 8013cfa:	bfb8      	it	lt
 8013cfc:	9204      	strlt	r2, [sp, #16]
 8013cfe:	7823      	ldrb	r3, [r4, #0]
 8013d00:	2b2e      	cmp	r3, #46	; 0x2e
 8013d02:	d10c      	bne.n	8013d1e <_vfiprintf_r+0x176>
 8013d04:	7863      	ldrb	r3, [r4, #1]
 8013d06:	2b2a      	cmp	r3, #42	; 0x2a
 8013d08:	d135      	bne.n	8013d76 <_vfiprintf_r+0x1ce>
 8013d0a:	9b03      	ldr	r3, [sp, #12]
 8013d0c:	1d1a      	adds	r2, r3, #4
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	9203      	str	r2, [sp, #12]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	bfb8      	it	lt
 8013d16:	f04f 33ff 	movlt.w	r3, #4294967295
 8013d1a:	3402      	adds	r4, #2
 8013d1c:	9305      	str	r3, [sp, #20]
 8013d1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013e04 <_vfiprintf_r+0x25c>
 8013d22:	7821      	ldrb	r1, [r4, #0]
 8013d24:	2203      	movs	r2, #3
 8013d26:	4650      	mov	r0, sl
 8013d28:	f7ec fa72 	bl	8000210 <memchr>
 8013d2c:	b140      	cbz	r0, 8013d40 <_vfiprintf_r+0x198>
 8013d2e:	2340      	movs	r3, #64	; 0x40
 8013d30:	eba0 000a 	sub.w	r0, r0, sl
 8013d34:	fa03 f000 	lsl.w	r0, r3, r0
 8013d38:	9b04      	ldr	r3, [sp, #16]
 8013d3a:	4303      	orrs	r3, r0
 8013d3c:	3401      	adds	r4, #1
 8013d3e:	9304      	str	r3, [sp, #16]
 8013d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d44:	482c      	ldr	r0, [pc, #176]	; (8013df8 <_vfiprintf_r+0x250>)
 8013d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d4a:	2206      	movs	r2, #6
 8013d4c:	f7ec fa60 	bl	8000210 <memchr>
 8013d50:	2800      	cmp	r0, #0
 8013d52:	d03f      	beq.n	8013dd4 <_vfiprintf_r+0x22c>
 8013d54:	4b29      	ldr	r3, [pc, #164]	; (8013dfc <_vfiprintf_r+0x254>)
 8013d56:	bb1b      	cbnz	r3, 8013da0 <_vfiprintf_r+0x1f8>
 8013d58:	9b03      	ldr	r3, [sp, #12]
 8013d5a:	3307      	adds	r3, #7
 8013d5c:	f023 0307 	bic.w	r3, r3, #7
 8013d60:	3308      	adds	r3, #8
 8013d62:	9303      	str	r3, [sp, #12]
 8013d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d66:	443b      	add	r3, r7
 8013d68:	9309      	str	r3, [sp, #36]	; 0x24
 8013d6a:	e767      	b.n	8013c3c <_vfiprintf_r+0x94>
 8013d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d70:	460c      	mov	r4, r1
 8013d72:	2001      	movs	r0, #1
 8013d74:	e7a5      	b.n	8013cc2 <_vfiprintf_r+0x11a>
 8013d76:	2300      	movs	r3, #0
 8013d78:	3401      	adds	r4, #1
 8013d7a:	9305      	str	r3, [sp, #20]
 8013d7c:	4619      	mov	r1, r3
 8013d7e:	f04f 0c0a 	mov.w	ip, #10
 8013d82:	4620      	mov	r0, r4
 8013d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d88:	3a30      	subs	r2, #48	; 0x30
 8013d8a:	2a09      	cmp	r2, #9
 8013d8c:	d903      	bls.n	8013d96 <_vfiprintf_r+0x1ee>
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d0c5      	beq.n	8013d1e <_vfiprintf_r+0x176>
 8013d92:	9105      	str	r1, [sp, #20]
 8013d94:	e7c3      	b.n	8013d1e <_vfiprintf_r+0x176>
 8013d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d9a:	4604      	mov	r4, r0
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	e7f0      	b.n	8013d82 <_vfiprintf_r+0x1da>
 8013da0:	ab03      	add	r3, sp, #12
 8013da2:	9300      	str	r3, [sp, #0]
 8013da4:	462a      	mov	r2, r5
 8013da6:	4b16      	ldr	r3, [pc, #88]	; (8013e00 <_vfiprintf_r+0x258>)
 8013da8:	a904      	add	r1, sp, #16
 8013daa:	4630      	mov	r0, r6
 8013dac:	f3af 8000 	nop.w
 8013db0:	4607      	mov	r7, r0
 8013db2:	1c78      	adds	r0, r7, #1
 8013db4:	d1d6      	bne.n	8013d64 <_vfiprintf_r+0x1bc>
 8013db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013db8:	07d9      	lsls	r1, r3, #31
 8013dba:	d405      	bmi.n	8013dc8 <_vfiprintf_r+0x220>
 8013dbc:	89ab      	ldrh	r3, [r5, #12]
 8013dbe:	059a      	lsls	r2, r3, #22
 8013dc0:	d402      	bmi.n	8013dc8 <_vfiprintf_r+0x220>
 8013dc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013dc4:	f7ff fb70 	bl	80134a8 <__retarget_lock_release_recursive>
 8013dc8:	89ab      	ldrh	r3, [r5, #12]
 8013dca:	065b      	lsls	r3, r3, #25
 8013dcc:	f53f af12 	bmi.w	8013bf4 <_vfiprintf_r+0x4c>
 8013dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013dd2:	e711      	b.n	8013bf8 <_vfiprintf_r+0x50>
 8013dd4:	ab03      	add	r3, sp, #12
 8013dd6:	9300      	str	r3, [sp, #0]
 8013dd8:	462a      	mov	r2, r5
 8013dda:	4b09      	ldr	r3, [pc, #36]	; (8013e00 <_vfiprintf_r+0x258>)
 8013ddc:	a904      	add	r1, sp, #16
 8013dde:	4630      	mov	r0, r6
 8013de0:	f000 f880 	bl	8013ee4 <_printf_i>
 8013de4:	e7e4      	b.n	8013db0 <_vfiprintf_r+0x208>
 8013de6:	bf00      	nop
 8013de8:	08017154 	.word	0x08017154
 8013dec:	08017174 	.word	0x08017174
 8013df0:	08017134 	.word	0x08017134
 8013df4:	08017246 	.word	0x08017246
 8013df8:	08017250 	.word	0x08017250
 8013dfc:	00000000 	.word	0x00000000
 8013e00:	08013b83 	.word	0x08013b83
 8013e04:	0801724c 	.word	0x0801724c

08013e08 <_printf_common>:
 8013e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e0c:	4616      	mov	r6, r2
 8013e0e:	4699      	mov	r9, r3
 8013e10:	688a      	ldr	r2, [r1, #8]
 8013e12:	690b      	ldr	r3, [r1, #16]
 8013e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013e18:	4293      	cmp	r3, r2
 8013e1a:	bfb8      	it	lt
 8013e1c:	4613      	movlt	r3, r2
 8013e1e:	6033      	str	r3, [r6, #0]
 8013e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013e24:	4607      	mov	r7, r0
 8013e26:	460c      	mov	r4, r1
 8013e28:	b10a      	cbz	r2, 8013e2e <_printf_common+0x26>
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	6033      	str	r3, [r6, #0]
 8013e2e:	6823      	ldr	r3, [r4, #0]
 8013e30:	0699      	lsls	r1, r3, #26
 8013e32:	bf42      	ittt	mi
 8013e34:	6833      	ldrmi	r3, [r6, #0]
 8013e36:	3302      	addmi	r3, #2
 8013e38:	6033      	strmi	r3, [r6, #0]
 8013e3a:	6825      	ldr	r5, [r4, #0]
 8013e3c:	f015 0506 	ands.w	r5, r5, #6
 8013e40:	d106      	bne.n	8013e50 <_printf_common+0x48>
 8013e42:	f104 0a19 	add.w	sl, r4, #25
 8013e46:	68e3      	ldr	r3, [r4, #12]
 8013e48:	6832      	ldr	r2, [r6, #0]
 8013e4a:	1a9b      	subs	r3, r3, r2
 8013e4c:	42ab      	cmp	r3, r5
 8013e4e:	dc26      	bgt.n	8013e9e <_printf_common+0x96>
 8013e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013e54:	1e13      	subs	r3, r2, #0
 8013e56:	6822      	ldr	r2, [r4, #0]
 8013e58:	bf18      	it	ne
 8013e5a:	2301      	movne	r3, #1
 8013e5c:	0692      	lsls	r2, r2, #26
 8013e5e:	d42b      	bmi.n	8013eb8 <_printf_common+0xb0>
 8013e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013e64:	4649      	mov	r1, r9
 8013e66:	4638      	mov	r0, r7
 8013e68:	47c0      	blx	r8
 8013e6a:	3001      	adds	r0, #1
 8013e6c:	d01e      	beq.n	8013eac <_printf_common+0xa4>
 8013e6e:	6823      	ldr	r3, [r4, #0]
 8013e70:	68e5      	ldr	r5, [r4, #12]
 8013e72:	6832      	ldr	r2, [r6, #0]
 8013e74:	f003 0306 	and.w	r3, r3, #6
 8013e78:	2b04      	cmp	r3, #4
 8013e7a:	bf08      	it	eq
 8013e7c:	1aad      	subeq	r5, r5, r2
 8013e7e:	68a3      	ldr	r3, [r4, #8]
 8013e80:	6922      	ldr	r2, [r4, #16]
 8013e82:	bf0c      	ite	eq
 8013e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013e88:	2500      	movne	r5, #0
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	bfc4      	itt	gt
 8013e8e:	1a9b      	subgt	r3, r3, r2
 8013e90:	18ed      	addgt	r5, r5, r3
 8013e92:	2600      	movs	r6, #0
 8013e94:	341a      	adds	r4, #26
 8013e96:	42b5      	cmp	r5, r6
 8013e98:	d11a      	bne.n	8013ed0 <_printf_common+0xc8>
 8013e9a:	2000      	movs	r0, #0
 8013e9c:	e008      	b.n	8013eb0 <_printf_common+0xa8>
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	4652      	mov	r2, sl
 8013ea2:	4649      	mov	r1, r9
 8013ea4:	4638      	mov	r0, r7
 8013ea6:	47c0      	blx	r8
 8013ea8:	3001      	adds	r0, #1
 8013eaa:	d103      	bne.n	8013eb4 <_printf_common+0xac>
 8013eac:	f04f 30ff 	mov.w	r0, #4294967295
 8013eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013eb4:	3501      	adds	r5, #1
 8013eb6:	e7c6      	b.n	8013e46 <_printf_common+0x3e>
 8013eb8:	18e1      	adds	r1, r4, r3
 8013eba:	1c5a      	adds	r2, r3, #1
 8013ebc:	2030      	movs	r0, #48	; 0x30
 8013ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013ec2:	4422      	add	r2, r4
 8013ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013ecc:	3302      	adds	r3, #2
 8013ece:	e7c7      	b.n	8013e60 <_printf_common+0x58>
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	4622      	mov	r2, r4
 8013ed4:	4649      	mov	r1, r9
 8013ed6:	4638      	mov	r0, r7
 8013ed8:	47c0      	blx	r8
 8013eda:	3001      	adds	r0, #1
 8013edc:	d0e6      	beq.n	8013eac <_printf_common+0xa4>
 8013ede:	3601      	adds	r6, #1
 8013ee0:	e7d9      	b.n	8013e96 <_printf_common+0x8e>
	...

08013ee4 <_printf_i>:
 8013ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ee8:	7e0f      	ldrb	r7, [r1, #24]
 8013eea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013eec:	2f78      	cmp	r7, #120	; 0x78
 8013eee:	4691      	mov	r9, r2
 8013ef0:	4680      	mov	r8, r0
 8013ef2:	460c      	mov	r4, r1
 8013ef4:	469a      	mov	sl, r3
 8013ef6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013efa:	d807      	bhi.n	8013f0c <_printf_i+0x28>
 8013efc:	2f62      	cmp	r7, #98	; 0x62
 8013efe:	d80a      	bhi.n	8013f16 <_printf_i+0x32>
 8013f00:	2f00      	cmp	r7, #0
 8013f02:	f000 80d8 	beq.w	80140b6 <_printf_i+0x1d2>
 8013f06:	2f58      	cmp	r7, #88	; 0x58
 8013f08:	f000 80a3 	beq.w	8014052 <_printf_i+0x16e>
 8013f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013f14:	e03a      	b.n	8013f8c <_printf_i+0xa8>
 8013f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013f1a:	2b15      	cmp	r3, #21
 8013f1c:	d8f6      	bhi.n	8013f0c <_printf_i+0x28>
 8013f1e:	a101      	add	r1, pc, #4	; (adr r1, 8013f24 <_printf_i+0x40>)
 8013f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013f24:	08013f7d 	.word	0x08013f7d
 8013f28:	08013f91 	.word	0x08013f91
 8013f2c:	08013f0d 	.word	0x08013f0d
 8013f30:	08013f0d 	.word	0x08013f0d
 8013f34:	08013f0d 	.word	0x08013f0d
 8013f38:	08013f0d 	.word	0x08013f0d
 8013f3c:	08013f91 	.word	0x08013f91
 8013f40:	08013f0d 	.word	0x08013f0d
 8013f44:	08013f0d 	.word	0x08013f0d
 8013f48:	08013f0d 	.word	0x08013f0d
 8013f4c:	08013f0d 	.word	0x08013f0d
 8013f50:	0801409d 	.word	0x0801409d
 8013f54:	08013fc1 	.word	0x08013fc1
 8013f58:	0801407f 	.word	0x0801407f
 8013f5c:	08013f0d 	.word	0x08013f0d
 8013f60:	08013f0d 	.word	0x08013f0d
 8013f64:	080140bf 	.word	0x080140bf
 8013f68:	08013f0d 	.word	0x08013f0d
 8013f6c:	08013fc1 	.word	0x08013fc1
 8013f70:	08013f0d 	.word	0x08013f0d
 8013f74:	08013f0d 	.word	0x08013f0d
 8013f78:	08014087 	.word	0x08014087
 8013f7c:	682b      	ldr	r3, [r5, #0]
 8013f7e:	1d1a      	adds	r2, r3, #4
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	602a      	str	r2, [r5, #0]
 8013f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013f8c:	2301      	movs	r3, #1
 8013f8e:	e0a3      	b.n	80140d8 <_printf_i+0x1f4>
 8013f90:	6820      	ldr	r0, [r4, #0]
 8013f92:	6829      	ldr	r1, [r5, #0]
 8013f94:	0606      	lsls	r6, r0, #24
 8013f96:	f101 0304 	add.w	r3, r1, #4
 8013f9a:	d50a      	bpl.n	8013fb2 <_printf_i+0xce>
 8013f9c:	680e      	ldr	r6, [r1, #0]
 8013f9e:	602b      	str	r3, [r5, #0]
 8013fa0:	2e00      	cmp	r6, #0
 8013fa2:	da03      	bge.n	8013fac <_printf_i+0xc8>
 8013fa4:	232d      	movs	r3, #45	; 0x2d
 8013fa6:	4276      	negs	r6, r6
 8013fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fac:	485e      	ldr	r0, [pc, #376]	; (8014128 <_printf_i+0x244>)
 8013fae:	230a      	movs	r3, #10
 8013fb0:	e019      	b.n	8013fe6 <_printf_i+0x102>
 8013fb2:	680e      	ldr	r6, [r1, #0]
 8013fb4:	602b      	str	r3, [r5, #0]
 8013fb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013fba:	bf18      	it	ne
 8013fbc:	b236      	sxthne	r6, r6
 8013fbe:	e7ef      	b.n	8013fa0 <_printf_i+0xbc>
 8013fc0:	682b      	ldr	r3, [r5, #0]
 8013fc2:	6820      	ldr	r0, [r4, #0]
 8013fc4:	1d19      	adds	r1, r3, #4
 8013fc6:	6029      	str	r1, [r5, #0]
 8013fc8:	0601      	lsls	r1, r0, #24
 8013fca:	d501      	bpl.n	8013fd0 <_printf_i+0xec>
 8013fcc:	681e      	ldr	r6, [r3, #0]
 8013fce:	e002      	b.n	8013fd6 <_printf_i+0xf2>
 8013fd0:	0646      	lsls	r6, r0, #25
 8013fd2:	d5fb      	bpl.n	8013fcc <_printf_i+0xe8>
 8013fd4:	881e      	ldrh	r6, [r3, #0]
 8013fd6:	4854      	ldr	r0, [pc, #336]	; (8014128 <_printf_i+0x244>)
 8013fd8:	2f6f      	cmp	r7, #111	; 0x6f
 8013fda:	bf0c      	ite	eq
 8013fdc:	2308      	moveq	r3, #8
 8013fde:	230a      	movne	r3, #10
 8013fe0:	2100      	movs	r1, #0
 8013fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013fe6:	6865      	ldr	r5, [r4, #4]
 8013fe8:	60a5      	str	r5, [r4, #8]
 8013fea:	2d00      	cmp	r5, #0
 8013fec:	bfa2      	ittt	ge
 8013fee:	6821      	ldrge	r1, [r4, #0]
 8013ff0:	f021 0104 	bicge.w	r1, r1, #4
 8013ff4:	6021      	strge	r1, [r4, #0]
 8013ff6:	b90e      	cbnz	r6, 8013ffc <_printf_i+0x118>
 8013ff8:	2d00      	cmp	r5, #0
 8013ffa:	d04d      	beq.n	8014098 <_printf_i+0x1b4>
 8013ffc:	4615      	mov	r5, r2
 8013ffe:	fbb6 f1f3 	udiv	r1, r6, r3
 8014002:	fb03 6711 	mls	r7, r3, r1, r6
 8014006:	5dc7      	ldrb	r7, [r0, r7]
 8014008:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801400c:	4637      	mov	r7, r6
 801400e:	42bb      	cmp	r3, r7
 8014010:	460e      	mov	r6, r1
 8014012:	d9f4      	bls.n	8013ffe <_printf_i+0x11a>
 8014014:	2b08      	cmp	r3, #8
 8014016:	d10b      	bne.n	8014030 <_printf_i+0x14c>
 8014018:	6823      	ldr	r3, [r4, #0]
 801401a:	07de      	lsls	r6, r3, #31
 801401c:	d508      	bpl.n	8014030 <_printf_i+0x14c>
 801401e:	6923      	ldr	r3, [r4, #16]
 8014020:	6861      	ldr	r1, [r4, #4]
 8014022:	4299      	cmp	r1, r3
 8014024:	bfde      	ittt	le
 8014026:	2330      	movle	r3, #48	; 0x30
 8014028:	f805 3c01 	strble.w	r3, [r5, #-1]
 801402c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014030:	1b52      	subs	r2, r2, r5
 8014032:	6122      	str	r2, [r4, #16]
 8014034:	f8cd a000 	str.w	sl, [sp]
 8014038:	464b      	mov	r3, r9
 801403a:	aa03      	add	r2, sp, #12
 801403c:	4621      	mov	r1, r4
 801403e:	4640      	mov	r0, r8
 8014040:	f7ff fee2 	bl	8013e08 <_printf_common>
 8014044:	3001      	adds	r0, #1
 8014046:	d14c      	bne.n	80140e2 <_printf_i+0x1fe>
 8014048:	f04f 30ff 	mov.w	r0, #4294967295
 801404c:	b004      	add	sp, #16
 801404e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014052:	4835      	ldr	r0, [pc, #212]	; (8014128 <_printf_i+0x244>)
 8014054:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014058:	6829      	ldr	r1, [r5, #0]
 801405a:	6823      	ldr	r3, [r4, #0]
 801405c:	f851 6b04 	ldr.w	r6, [r1], #4
 8014060:	6029      	str	r1, [r5, #0]
 8014062:	061d      	lsls	r5, r3, #24
 8014064:	d514      	bpl.n	8014090 <_printf_i+0x1ac>
 8014066:	07df      	lsls	r7, r3, #31
 8014068:	bf44      	itt	mi
 801406a:	f043 0320 	orrmi.w	r3, r3, #32
 801406e:	6023      	strmi	r3, [r4, #0]
 8014070:	b91e      	cbnz	r6, 801407a <_printf_i+0x196>
 8014072:	6823      	ldr	r3, [r4, #0]
 8014074:	f023 0320 	bic.w	r3, r3, #32
 8014078:	6023      	str	r3, [r4, #0]
 801407a:	2310      	movs	r3, #16
 801407c:	e7b0      	b.n	8013fe0 <_printf_i+0xfc>
 801407e:	6823      	ldr	r3, [r4, #0]
 8014080:	f043 0320 	orr.w	r3, r3, #32
 8014084:	6023      	str	r3, [r4, #0]
 8014086:	2378      	movs	r3, #120	; 0x78
 8014088:	4828      	ldr	r0, [pc, #160]	; (801412c <_printf_i+0x248>)
 801408a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801408e:	e7e3      	b.n	8014058 <_printf_i+0x174>
 8014090:	0659      	lsls	r1, r3, #25
 8014092:	bf48      	it	mi
 8014094:	b2b6      	uxthmi	r6, r6
 8014096:	e7e6      	b.n	8014066 <_printf_i+0x182>
 8014098:	4615      	mov	r5, r2
 801409a:	e7bb      	b.n	8014014 <_printf_i+0x130>
 801409c:	682b      	ldr	r3, [r5, #0]
 801409e:	6826      	ldr	r6, [r4, #0]
 80140a0:	6961      	ldr	r1, [r4, #20]
 80140a2:	1d18      	adds	r0, r3, #4
 80140a4:	6028      	str	r0, [r5, #0]
 80140a6:	0635      	lsls	r5, r6, #24
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	d501      	bpl.n	80140b0 <_printf_i+0x1cc>
 80140ac:	6019      	str	r1, [r3, #0]
 80140ae:	e002      	b.n	80140b6 <_printf_i+0x1d2>
 80140b0:	0670      	lsls	r0, r6, #25
 80140b2:	d5fb      	bpl.n	80140ac <_printf_i+0x1c8>
 80140b4:	8019      	strh	r1, [r3, #0]
 80140b6:	2300      	movs	r3, #0
 80140b8:	6123      	str	r3, [r4, #16]
 80140ba:	4615      	mov	r5, r2
 80140bc:	e7ba      	b.n	8014034 <_printf_i+0x150>
 80140be:	682b      	ldr	r3, [r5, #0]
 80140c0:	1d1a      	adds	r2, r3, #4
 80140c2:	602a      	str	r2, [r5, #0]
 80140c4:	681d      	ldr	r5, [r3, #0]
 80140c6:	6862      	ldr	r2, [r4, #4]
 80140c8:	2100      	movs	r1, #0
 80140ca:	4628      	mov	r0, r5
 80140cc:	f7ec f8a0 	bl	8000210 <memchr>
 80140d0:	b108      	cbz	r0, 80140d6 <_printf_i+0x1f2>
 80140d2:	1b40      	subs	r0, r0, r5
 80140d4:	6060      	str	r0, [r4, #4]
 80140d6:	6863      	ldr	r3, [r4, #4]
 80140d8:	6123      	str	r3, [r4, #16]
 80140da:	2300      	movs	r3, #0
 80140dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140e0:	e7a8      	b.n	8014034 <_printf_i+0x150>
 80140e2:	6923      	ldr	r3, [r4, #16]
 80140e4:	462a      	mov	r2, r5
 80140e6:	4649      	mov	r1, r9
 80140e8:	4640      	mov	r0, r8
 80140ea:	47d0      	blx	sl
 80140ec:	3001      	adds	r0, #1
 80140ee:	d0ab      	beq.n	8014048 <_printf_i+0x164>
 80140f0:	6823      	ldr	r3, [r4, #0]
 80140f2:	079b      	lsls	r3, r3, #30
 80140f4:	d413      	bmi.n	801411e <_printf_i+0x23a>
 80140f6:	68e0      	ldr	r0, [r4, #12]
 80140f8:	9b03      	ldr	r3, [sp, #12]
 80140fa:	4298      	cmp	r0, r3
 80140fc:	bfb8      	it	lt
 80140fe:	4618      	movlt	r0, r3
 8014100:	e7a4      	b.n	801404c <_printf_i+0x168>
 8014102:	2301      	movs	r3, #1
 8014104:	4632      	mov	r2, r6
 8014106:	4649      	mov	r1, r9
 8014108:	4640      	mov	r0, r8
 801410a:	47d0      	blx	sl
 801410c:	3001      	adds	r0, #1
 801410e:	d09b      	beq.n	8014048 <_printf_i+0x164>
 8014110:	3501      	adds	r5, #1
 8014112:	68e3      	ldr	r3, [r4, #12]
 8014114:	9903      	ldr	r1, [sp, #12]
 8014116:	1a5b      	subs	r3, r3, r1
 8014118:	42ab      	cmp	r3, r5
 801411a:	dcf2      	bgt.n	8014102 <_printf_i+0x21e>
 801411c:	e7eb      	b.n	80140f6 <_printf_i+0x212>
 801411e:	2500      	movs	r5, #0
 8014120:	f104 0619 	add.w	r6, r4, #25
 8014124:	e7f5      	b.n	8014112 <_printf_i+0x22e>
 8014126:	bf00      	nop
 8014128:	08017257 	.word	0x08017257
 801412c:	08017268 	.word	0x08017268

08014130 <_read_r>:
 8014130:	b538      	push	{r3, r4, r5, lr}
 8014132:	4d07      	ldr	r5, [pc, #28]	; (8014150 <_read_r+0x20>)
 8014134:	4604      	mov	r4, r0
 8014136:	4608      	mov	r0, r1
 8014138:	4611      	mov	r1, r2
 801413a:	2200      	movs	r2, #0
 801413c:	602a      	str	r2, [r5, #0]
 801413e:	461a      	mov	r2, r3
 8014140:	f7ec fdca 	bl	8000cd8 <_read>
 8014144:	1c43      	adds	r3, r0, #1
 8014146:	d102      	bne.n	801414e <_read_r+0x1e>
 8014148:	682b      	ldr	r3, [r5, #0]
 801414a:	b103      	cbz	r3, 801414e <_read_r+0x1e>
 801414c:	6023      	str	r3, [r4, #0]
 801414e:	bd38      	pop	{r3, r4, r5, pc}
 8014150:	2000cb90 	.word	0x2000cb90

08014154 <__swbuf_r>:
 8014154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014156:	460e      	mov	r6, r1
 8014158:	4614      	mov	r4, r2
 801415a:	4605      	mov	r5, r0
 801415c:	b118      	cbz	r0, 8014166 <__swbuf_r+0x12>
 801415e:	6983      	ldr	r3, [r0, #24]
 8014160:	b90b      	cbnz	r3, 8014166 <__swbuf_r+0x12>
 8014162:	f7ff f8dd 	bl	8013320 <__sinit>
 8014166:	4b21      	ldr	r3, [pc, #132]	; (80141ec <__swbuf_r+0x98>)
 8014168:	429c      	cmp	r4, r3
 801416a:	d12b      	bne.n	80141c4 <__swbuf_r+0x70>
 801416c:	686c      	ldr	r4, [r5, #4]
 801416e:	69a3      	ldr	r3, [r4, #24]
 8014170:	60a3      	str	r3, [r4, #8]
 8014172:	89a3      	ldrh	r3, [r4, #12]
 8014174:	071a      	lsls	r2, r3, #28
 8014176:	d52f      	bpl.n	80141d8 <__swbuf_r+0x84>
 8014178:	6923      	ldr	r3, [r4, #16]
 801417a:	b36b      	cbz	r3, 80141d8 <__swbuf_r+0x84>
 801417c:	6923      	ldr	r3, [r4, #16]
 801417e:	6820      	ldr	r0, [r4, #0]
 8014180:	1ac0      	subs	r0, r0, r3
 8014182:	6963      	ldr	r3, [r4, #20]
 8014184:	b2f6      	uxtb	r6, r6
 8014186:	4283      	cmp	r3, r0
 8014188:	4637      	mov	r7, r6
 801418a:	dc04      	bgt.n	8014196 <__swbuf_r+0x42>
 801418c:	4621      	mov	r1, r4
 801418e:	4628      	mov	r0, r5
 8014190:	f7ff fc20 	bl	80139d4 <_fflush_r>
 8014194:	bb30      	cbnz	r0, 80141e4 <__swbuf_r+0x90>
 8014196:	68a3      	ldr	r3, [r4, #8]
 8014198:	3b01      	subs	r3, #1
 801419a:	60a3      	str	r3, [r4, #8]
 801419c:	6823      	ldr	r3, [r4, #0]
 801419e:	1c5a      	adds	r2, r3, #1
 80141a0:	6022      	str	r2, [r4, #0]
 80141a2:	701e      	strb	r6, [r3, #0]
 80141a4:	6963      	ldr	r3, [r4, #20]
 80141a6:	3001      	adds	r0, #1
 80141a8:	4283      	cmp	r3, r0
 80141aa:	d004      	beq.n	80141b6 <__swbuf_r+0x62>
 80141ac:	89a3      	ldrh	r3, [r4, #12]
 80141ae:	07db      	lsls	r3, r3, #31
 80141b0:	d506      	bpl.n	80141c0 <__swbuf_r+0x6c>
 80141b2:	2e0a      	cmp	r6, #10
 80141b4:	d104      	bne.n	80141c0 <__swbuf_r+0x6c>
 80141b6:	4621      	mov	r1, r4
 80141b8:	4628      	mov	r0, r5
 80141ba:	f7ff fc0b 	bl	80139d4 <_fflush_r>
 80141be:	b988      	cbnz	r0, 80141e4 <__swbuf_r+0x90>
 80141c0:	4638      	mov	r0, r7
 80141c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141c4:	4b0a      	ldr	r3, [pc, #40]	; (80141f0 <__swbuf_r+0x9c>)
 80141c6:	429c      	cmp	r4, r3
 80141c8:	d101      	bne.n	80141ce <__swbuf_r+0x7a>
 80141ca:	68ac      	ldr	r4, [r5, #8]
 80141cc:	e7cf      	b.n	801416e <__swbuf_r+0x1a>
 80141ce:	4b09      	ldr	r3, [pc, #36]	; (80141f4 <__swbuf_r+0xa0>)
 80141d0:	429c      	cmp	r4, r3
 80141d2:	bf08      	it	eq
 80141d4:	68ec      	ldreq	r4, [r5, #12]
 80141d6:	e7ca      	b.n	801416e <__swbuf_r+0x1a>
 80141d8:	4621      	mov	r1, r4
 80141da:	4628      	mov	r0, r5
 80141dc:	f000 f80c 	bl	80141f8 <__swsetup_r>
 80141e0:	2800      	cmp	r0, #0
 80141e2:	d0cb      	beq.n	801417c <__swbuf_r+0x28>
 80141e4:	f04f 37ff 	mov.w	r7, #4294967295
 80141e8:	e7ea      	b.n	80141c0 <__swbuf_r+0x6c>
 80141ea:	bf00      	nop
 80141ec:	08017154 	.word	0x08017154
 80141f0:	08017174 	.word	0x08017174
 80141f4:	08017134 	.word	0x08017134

080141f8 <__swsetup_r>:
 80141f8:	4b32      	ldr	r3, [pc, #200]	; (80142c4 <__swsetup_r+0xcc>)
 80141fa:	b570      	push	{r4, r5, r6, lr}
 80141fc:	681d      	ldr	r5, [r3, #0]
 80141fe:	4606      	mov	r6, r0
 8014200:	460c      	mov	r4, r1
 8014202:	b125      	cbz	r5, 801420e <__swsetup_r+0x16>
 8014204:	69ab      	ldr	r3, [r5, #24]
 8014206:	b913      	cbnz	r3, 801420e <__swsetup_r+0x16>
 8014208:	4628      	mov	r0, r5
 801420a:	f7ff f889 	bl	8013320 <__sinit>
 801420e:	4b2e      	ldr	r3, [pc, #184]	; (80142c8 <__swsetup_r+0xd0>)
 8014210:	429c      	cmp	r4, r3
 8014212:	d10f      	bne.n	8014234 <__swsetup_r+0x3c>
 8014214:	686c      	ldr	r4, [r5, #4]
 8014216:	89a3      	ldrh	r3, [r4, #12]
 8014218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801421c:	0719      	lsls	r1, r3, #28
 801421e:	d42c      	bmi.n	801427a <__swsetup_r+0x82>
 8014220:	06dd      	lsls	r5, r3, #27
 8014222:	d411      	bmi.n	8014248 <__swsetup_r+0x50>
 8014224:	2309      	movs	r3, #9
 8014226:	6033      	str	r3, [r6, #0]
 8014228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801422c:	81a3      	strh	r3, [r4, #12]
 801422e:	f04f 30ff 	mov.w	r0, #4294967295
 8014232:	e03e      	b.n	80142b2 <__swsetup_r+0xba>
 8014234:	4b25      	ldr	r3, [pc, #148]	; (80142cc <__swsetup_r+0xd4>)
 8014236:	429c      	cmp	r4, r3
 8014238:	d101      	bne.n	801423e <__swsetup_r+0x46>
 801423a:	68ac      	ldr	r4, [r5, #8]
 801423c:	e7eb      	b.n	8014216 <__swsetup_r+0x1e>
 801423e:	4b24      	ldr	r3, [pc, #144]	; (80142d0 <__swsetup_r+0xd8>)
 8014240:	429c      	cmp	r4, r3
 8014242:	bf08      	it	eq
 8014244:	68ec      	ldreq	r4, [r5, #12]
 8014246:	e7e6      	b.n	8014216 <__swsetup_r+0x1e>
 8014248:	0758      	lsls	r0, r3, #29
 801424a:	d512      	bpl.n	8014272 <__swsetup_r+0x7a>
 801424c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801424e:	b141      	cbz	r1, 8014262 <__swsetup_r+0x6a>
 8014250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014254:	4299      	cmp	r1, r3
 8014256:	d002      	beq.n	801425e <__swsetup_r+0x66>
 8014258:	4630      	mov	r0, r6
 801425a:	f7ff fc2f 	bl	8013abc <_free_r>
 801425e:	2300      	movs	r3, #0
 8014260:	6363      	str	r3, [r4, #52]	; 0x34
 8014262:	89a3      	ldrh	r3, [r4, #12]
 8014264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014268:	81a3      	strh	r3, [r4, #12]
 801426a:	2300      	movs	r3, #0
 801426c:	6063      	str	r3, [r4, #4]
 801426e:	6923      	ldr	r3, [r4, #16]
 8014270:	6023      	str	r3, [r4, #0]
 8014272:	89a3      	ldrh	r3, [r4, #12]
 8014274:	f043 0308 	orr.w	r3, r3, #8
 8014278:	81a3      	strh	r3, [r4, #12]
 801427a:	6923      	ldr	r3, [r4, #16]
 801427c:	b94b      	cbnz	r3, 8014292 <__swsetup_r+0x9a>
 801427e:	89a3      	ldrh	r3, [r4, #12]
 8014280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014288:	d003      	beq.n	8014292 <__swsetup_r+0x9a>
 801428a:	4621      	mov	r1, r4
 801428c:	4630      	mov	r0, r6
 801428e:	f000 f84d 	bl	801432c <__smakebuf_r>
 8014292:	89a0      	ldrh	r0, [r4, #12]
 8014294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014298:	f010 0301 	ands.w	r3, r0, #1
 801429c:	d00a      	beq.n	80142b4 <__swsetup_r+0xbc>
 801429e:	2300      	movs	r3, #0
 80142a0:	60a3      	str	r3, [r4, #8]
 80142a2:	6963      	ldr	r3, [r4, #20]
 80142a4:	425b      	negs	r3, r3
 80142a6:	61a3      	str	r3, [r4, #24]
 80142a8:	6923      	ldr	r3, [r4, #16]
 80142aa:	b943      	cbnz	r3, 80142be <__swsetup_r+0xc6>
 80142ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80142b0:	d1ba      	bne.n	8014228 <__swsetup_r+0x30>
 80142b2:	bd70      	pop	{r4, r5, r6, pc}
 80142b4:	0781      	lsls	r1, r0, #30
 80142b6:	bf58      	it	pl
 80142b8:	6963      	ldrpl	r3, [r4, #20]
 80142ba:	60a3      	str	r3, [r4, #8]
 80142bc:	e7f4      	b.n	80142a8 <__swsetup_r+0xb0>
 80142be:	2000      	movs	r0, #0
 80142c0:	e7f7      	b.n	80142b2 <__swsetup_r+0xba>
 80142c2:	bf00      	nop
 80142c4:	20000030 	.word	0x20000030
 80142c8:	08017154 	.word	0x08017154
 80142cc:	08017174 	.word	0x08017174
 80142d0:	08017134 	.word	0x08017134

080142d4 <abort>:
 80142d4:	b508      	push	{r3, lr}
 80142d6:	2006      	movs	r0, #6
 80142d8:	f000 f890 	bl	80143fc <raise>
 80142dc:	2001      	movs	r0, #1
 80142de:	f7ec fcf1 	bl	8000cc4 <_exit>

080142e2 <__swhatbuf_r>:
 80142e2:	b570      	push	{r4, r5, r6, lr}
 80142e4:	460e      	mov	r6, r1
 80142e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142ea:	2900      	cmp	r1, #0
 80142ec:	b096      	sub	sp, #88	; 0x58
 80142ee:	4614      	mov	r4, r2
 80142f0:	461d      	mov	r5, r3
 80142f2:	da08      	bge.n	8014306 <__swhatbuf_r+0x24>
 80142f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80142f8:	2200      	movs	r2, #0
 80142fa:	602a      	str	r2, [r5, #0]
 80142fc:	061a      	lsls	r2, r3, #24
 80142fe:	d410      	bmi.n	8014322 <__swhatbuf_r+0x40>
 8014300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014304:	e00e      	b.n	8014324 <__swhatbuf_r+0x42>
 8014306:	466a      	mov	r2, sp
 8014308:	f000 f894 	bl	8014434 <_fstat_r>
 801430c:	2800      	cmp	r0, #0
 801430e:	dbf1      	blt.n	80142f4 <__swhatbuf_r+0x12>
 8014310:	9a01      	ldr	r2, [sp, #4]
 8014312:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014316:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801431a:	425a      	negs	r2, r3
 801431c:	415a      	adcs	r2, r3
 801431e:	602a      	str	r2, [r5, #0]
 8014320:	e7ee      	b.n	8014300 <__swhatbuf_r+0x1e>
 8014322:	2340      	movs	r3, #64	; 0x40
 8014324:	2000      	movs	r0, #0
 8014326:	6023      	str	r3, [r4, #0]
 8014328:	b016      	add	sp, #88	; 0x58
 801432a:	bd70      	pop	{r4, r5, r6, pc}

0801432c <__smakebuf_r>:
 801432c:	898b      	ldrh	r3, [r1, #12]
 801432e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014330:	079d      	lsls	r5, r3, #30
 8014332:	4606      	mov	r6, r0
 8014334:	460c      	mov	r4, r1
 8014336:	d507      	bpl.n	8014348 <__smakebuf_r+0x1c>
 8014338:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801433c:	6023      	str	r3, [r4, #0]
 801433e:	6123      	str	r3, [r4, #16]
 8014340:	2301      	movs	r3, #1
 8014342:	6163      	str	r3, [r4, #20]
 8014344:	b002      	add	sp, #8
 8014346:	bd70      	pop	{r4, r5, r6, pc}
 8014348:	ab01      	add	r3, sp, #4
 801434a:	466a      	mov	r2, sp
 801434c:	f7ff ffc9 	bl	80142e2 <__swhatbuf_r>
 8014350:	9900      	ldr	r1, [sp, #0]
 8014352:	4605      	mov	r5, r0
 8014354:	4630      	mov	r0, r6
 8014356:	f7ff f8ef 	bl	8013538 <_malloc_r>
 801435a:	b948      	cbnz	r0, 8014370 <__smakebuf_r+0x44>
 801435c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014360:	059a      	lsls	r2, r3, #22
 8014362:	d4ef      	bmi.n	8014344 <__smakebuf_r+0x18>
 8014364:	f023 0303 	bic.w	r3, r3, #3
 8014368:	f043 0302 	orr.w	r3, r3, #2
 801436c:	81a3      	strh	r3, [r4, #12]
 801436e:	e7e3      	b.n	8014338 <__smakebuf_r+0xc>
 8014370:	4b0d      	ldr	r3, [pc, #52]	; (80143a8 <__smakebuf_r+0x7c>)
 8014372:	62b3      	str	r3, [r6, #40]	; 0x28
 8014374:	89a3      	ldrh	r3, [r4, #12]
 8014376:	6020      	str	r0, [r4, #0]
 8014378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801437c:	81a3      	strh	r3, [r4, #12]
 801437e:	9b00      	ldr	r3, [sp, #0]
 8014380:	6163      	str	r3, [r4, #20]
 8014382:	9b01      	ldr	r3, [sp, #4]
 8014384:	6120      	str	r0, [r4, #16]
 8014386:	b15b      	cbz	r3, 80143a0 <__smakebuf_r+0x74>
 8014388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801438c:	4630      	mov	r0, r6
 801438e:	f000 f863 	bl	8014458 <_isatty_r>
 8014392:	b128      	cbz	r0, 80143a0 <__smakebuf_r+0x74>
 8014394:	89a3      	ldrh	r3, [r4, #12]
 8014396:	f023 0303 	bic.w	r3, r3, #3
 801439a:	f043 0301 	orr.w	r3, r3, #1
 801439e:	81a3      	strh	r3, [r4, #12]
 80143a0:	89a0      	ldrh	r0, [r4, #12]
 80143a2:	4305      	orrs	r5, r0
 80143a4:	81a5      	strh	r5, [r4, #12]
 80143a6:	e7cd      	b.n	8014344 <__smakebuf_r+0x18>
 80143a8:	080132b9 	.word	0x080132b9

080143ac <_raise_r>:
 80143ac:	291f      	cmp	r1, #31
 80143ae:	b538      	push	{r3, r4, r5, lr}
 80143b0:	4604      	mov	r4, r0
 80143b2:	460d      	mov	r5, r1
 80143b4:	d904      	bls.n	80143c0 <_raise_r+0x14>
 80143b6:	2316      	movs	r3, #22
 80143b8:	6003      	str	r3, [r0, #0]
 80143ba:	f04f 30ff 	mov.w	r0, #4294967295
 80143be:	bd38      	pop	{r3, r4, r5, pc}
 80143c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80143c2:	b112      	cbz	r2, 80143ca <_raise_r+0x1e>
 80143c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80143c8:	b94b      	cbnz	r3, 80143de <_raise_r+0x32>
 80143ca:	4620      	mov	r0, r4
 80143cc:	f000 f830 	bl	8014430 <_getpid_r>
 80143d0:	462a      	mov	r2, r5
 80143d2:	4601      	mov	r1, r0
 80143d4:	4620      	mov	r0, r4
 80143d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80143da:	f000 b817 	b.w	801440c <_kill_r>
 80143de:	2b01      	cmp	r3, #1
 80143e0:	d00a      	beq.n	80143f8 <_raise_r+0x4c>
 80143e2:	1c59      	adds	r1, r3, #1
 80143e4:	d103      	bne.n	80143ee <_raise_r+0x42>
 80143e6:	2316      	movs	r3, #22
 80143e8:	6003      	str	r3, [r0, #0]
 80143ea:	2001      	movs	r0, #1
 80143ec:	e7e7      	b.n	80143be <_raise_r+0x12>
 80143ee:	2400      	movs	r4, #0
 80143f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80143f4:	4628      	mov	r0, r5
 80143f6:	4798      	blx	r3
 80143f8:	2000      	movs	r0, #0
 80143fa:	e7e0      	b.n	80143be <_raise_r+0x12>

080143fc <raise>:
 80143fc:	4b02      	ldr	r3, [pc, #8]	; (8014408 <raise+0xc>)
 80143fe:	4601      	mov	r1, r0
 8014400:	6818      	ldr	r0, [r3, #0]
 8014402:	f7ff bfd3 	b.w	80143ac <_raise_r>
 8014406:	bf00      	nop
 8014408:	20000030 	.word	0x20000030

0801440c <_kill_r>:
 801440c:	b538      	push	{r3, r4, r5, lr}
 801440e:	4d07      	ldr	r5, [pc, #28]	; (801442c <_kill_r+0x20>)
 8014410:	2300      	movs	r3, #0
 8014412:	4604      	mov	r4, r0
 8014414:	4608      	mov	r0, r1
 8014416:	4611      	mov	r1, r2
 8014418:	602b      	str	r3, [r5, #0]
 801441a:	f7ec fc41 	bl	8000ca0 <_kill>
 801441e:	1c43      	adds	r3, r0, #1
 8014420:	d102      	bne.n	8014428 <_kill_r+0x1c>
 8014422:	682b      	ldr	r3, [r5, #0]
 8014424:	b103      	cbz	r3, 8014428 <_kill_r+0x1c>
 8014426:	6023      	str	r3, [r4, #0]
 8014428:	bd38      	pop	{r3, r4, r5, pc}
 801442a:	bf00      	nop
 801442c:	2000cb90 	.word	0x2000cb90

08014430 <_getpid_r>:
 8014430:	f7ec bc2e 	b.w	8000c90 <_getpid>

08014434 <_fstat_r>:
 8014434:	b538      	push	{r3, r4, r5, lr}
 8014436:	4d07      	ldr	r5, [pc, #28]	; (8014454 <_fstat_r+0x20>)
 8014438:	2300      	movs	r3, #0
 801443a:	4604      	mov	r4, r0
 801443c:	4608      	mov	r0, r1
 801443e:	4611      	mov	r1, r2
 8014440:	602b      	str	r3, [r5, #0]
 8014442:	f7ec fc8e 	bl	8000d62 <_fstat>
 8014446:	1c43      	adds	r3, r0, #1
 8014448:	d102      	bne.n	8014450 <_fstat_r+0x1c>
 801444a:	682b      	ldr	r3, [r5, #0]
 801444c:	b103      	cbz	r3, 8014450 <_fstat_r+0x1c>
 801444e:	6023      	str	r3, [r4, #0]
 8014450:	bd38      	pop	{r3, r4, r5, pc}
 8014452:	bf00      	nop
 8014454:	2000cb90 	.word	0x2000cb90

08014458 <_isatty_r>:
 8014458:	b538      	push	{r3, r4, r5, lr}
 801445a:	4d06      	ldr	r5, [pc, #24]	; (8014474 <_isatty_r+0x1c>)
 801445c:	2300      	movs	r3, #0
 801445e:	4604      	mov	r4, r0
 8014460:	4608      	mov	r0, r1
 8014462:	602b      	str	r3, [r5, #0]
 8014464:	f7ec fc8d 	bl	8000d82 <_isatty>
 8014468:	1c43      	adds	r3, r0, #1
 801446a:	d102      	bne.n	8014472 <_isatty_r+0x1a>
 801446c:	682b      	ldr	r3, [r5, #0]
 801446e:	b103      	cbz	r3, 8014472 <_isatty_r+0x1a>
 8014470:	6023      	str	r3, [r4, #0]
 8014472:	bd38      	pop	{r3, r4, r5, pc}
 8014474:	2000cb90 	.word	0x2000cb90

08014478 <_init>:
 8014478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801447a:	bf00      	nop
 801447c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801447e:	bc08      	pop	{r3}
 8014480:	469e      	mov	lr, r3
 8014482:	4770      	bx	lr

08014484 <_fini>:
 8014484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014486:	bf00      	nop
 8014488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801448a:	bc08      	pop	{r3}
 801448c:	469e      	mov	lr, r3
 801448e:	4770      	bx	lr
