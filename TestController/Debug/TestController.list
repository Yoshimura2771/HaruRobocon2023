
TestController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a04  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08004be4  08004be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d14  08004d14  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d14  08004d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d1c  08004d1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d20  08004d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000070  08004d94  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08004d94  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcb1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb9  00000000  00000000  0002fd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00031d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  00032940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e3db  00000000  00000000  000334a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dec4  00000000  00000000  00051883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd4ef  00000000  00000000  0005f747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011cc36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003abc  00000000  00000000  0011cc88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004bcc 	.word	0x08004bcc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004bcc 	.word	0x08004bcc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	230a      	movs	r3, #10
 80005d6:	68b9      	ldr	r1, [r7, #8]
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <_write+0x24>)
 80005da:	f002 fbd1 	bl	8002d80 <HAL_UART_Transmit>
	return len;
 80005de:	687b      	ldr	r3, [r7, #4]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000f0 	.word	0x200000f0

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fc2a 	bl	8000e4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f8cb 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f9d9 	bl	80009b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f981 	bl	8000904 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000602:	f000 f911 	bl	8000828 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t TxData[3];

  printf("Initialized\r\n");
 8000606:	4855      	ldr	r0, [pc, #340]	; (800075c <main+0x170>)
 8000608:	f003 fa8c 	bl	8003b24 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int8_t RobotVel[3]={};
 800060c:	4b54      	ldr	r3, [pc, #336]	; (8000760 <main+0x174>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	703b      	strb	r3, [r7, #0]
 8000612:	1c7b      	adds	r3, r7, #1
 8000614:	2200      	movs	r2, #0
 8000616:	801a      	strh	r2, [r3, #0]
	   if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==GPIO_PIN_RESET){
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000620:	f001 fb7e 	bl	8001d20 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d105      	bne.n	8000636 <main+0x4a>
		  RobotVel[1]=127;
 800062a:	237f      	movs	r3, #127	; 0x7f
 800062c:	707b      	strb	r3, [r7, #1]
		  printf("Y+\r\n");
 800062e:	484d      	ldr	r0, [pc, #308]	; (8000764 <main+0x178>)
 8000630:	f003 fa78 	bl	8003b24 <puts>
 8000634:	e00b      	b.n	800064e <main+0x62>
	  }
	   else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)==GPIO_PIN_RESET){
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	484b      	ldr	r0, [pc, #300]	; (8000768 <main+0x17c>)
 800063a:	f001 fb71 	bl	8001d20 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d104      	bne.n	800064e <main+0x62>
		  RobotVel[1]=-127;
 8000644:	2381      	movs	r3, #129	; 0x81
 8000646:	707b      	strb	r3, [r7, #1]
		  printf("Y-\r\n");
 8000648:	4848      	ldr	r0, [pc, #288]	; (800076c <main+0x180>)
 800064a:	f003 fa6b 	bl	8003b24 <puts>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_RESET){
 800064e:	2120      	movs	r1, #32
 8000650:	4845      	ldr	r0, [pc, #276]	; (8000768 <main+0x17c>)
 8000652:	f001 fb65 	bl	8001d20 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d105      	bne.n	8000668 <main+0x7c>
		  RobotVel[0]=127;
 800065c:	237f      	movs	r3, #127	; 0x7f
 800065e:	703b      	strb	r3, [r7, #0]
		  printf("X+\r\n");
 8000660:	4843      	ldr	r0, [pc, #268]	; (8000770 <main+0x184>)
 8000662:	f003 fa5f 	bl	8003b24 <puts>
 8000666:	e00d      	b.n	8000684 <main+0x98>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)==GPIO_PIN_RESET){
 8000668:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800066c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000670:	f001 fb56 	bl	8001d20 <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d104      	bne.n	8000684 <main+0x98>
		  RobotVel[0]=-127;
 800067a:	2381      	movs	r3, #129	; 0x81
 800067c:	703b      	strb	r3, [r7, #0]
		  printf("X-\r\n");
 800067e:	483d      	ldr	r0, [pc, #244]	; (8000774 <main+0x188>)
 8000680:	f003 fa50 	bl	8003b24 <puts>
	  }
	 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==GPIO_PIN_RESET){
 8000684:	2102      	movs	r1, #2
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f001 fb49 	bl	8001d20 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d105      	bne.n	80006a0 <main+0xb4>
		  RobotVel[2]=127;
 8000694:	237f      	movs	r3, #127	; 0x7f
 8000696:	70bb      	strb	r3, [r7, #2]
		  printf("R+\r\n");
 8000698:	4837      	ldr	r0, [pc, #220]	; (8000778 <main+0x18c>)
 800069a:	f003 fa43 	bl	8003b24 <puts>
 800069e:	e00b      	b.n	80006b8 <main+0xcc>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==GPIO_PIN_RESET){
 80006a0:	2101      	movs	r1, #1
 80006a2:	4831      	ldr	r0, [pc, #196]	; (8000768 <main+0x17c>)
 80006a4:	f001 fb3c 	bl	8001d20 <HAL_GPIO_ReadPin>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d104      	bne.n	80006b8 <main+0xcc>
		  RobotVel[2]=-127;
 80006ae:	2381      	movs	r3, #129	; 0x81
 80006b0:	70bb      	strb	r3, [r7, #2]
		  printf("R-\r\n");
 80006b2:	4832      	ldr	r0, [pc, #200]	; (800077c <main+0x190>)
 80006b4:	f003 fa36 	bl	8003b24 <puts>
	  }
	   if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)==GPIO_PIN_RESET){
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f001 fb2f 	bl	8001d20 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d11c      	bne.n	8000702 <main+0x116>
		   for(uint8_t i=0; i<3; i++){
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]
 80006cc:	e013      	b.n	80006f6 <main+0x10a>
			   RobotVel[i]/=8;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	3310      	adds	r3, #16
 80006d2:	443b      	add	r3, r7
 80006d4:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 80006d8:	7bfa      	ldrb	r2, [r7, #15]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	da00      	bge.n	80006e0 <main+0xf4>
 80006de:	3307      	adds	r3, #7
 80006e0:	10db      	asrs	r3, r3, #3
 80006e2:	b259      	sxtb	r1, r3
 80006e4:	f102 0310 	add.w	r3, r2, #16
 80006e8:	443b      	add	r3, r7
 80006ea:	460a      	mov	r2, r1
 80006ec:	f803 2c10 	strb.w	r2, [r3, #-16]
		   for(uint8_t i=0; i<3; i++){
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	3301      	adds	r3, #1
 80006f4:	73fb      	strb	r3, [r7, #15]
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d9e8      	bls.n	80006ce <main+0xe2>
		   }
		   printf("Slow\r\n");
 80006fc:	4820      	ldr	r0, [pc, #128]	; (8000780 <main+0x194>)
 80006fe:	f003 fa11 	bl	8003b24 <puts>
	   }

	  for(int i=0; i<3; i++){
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	e00f      	b.n	8000728 <main+0x13c>
		  TxData[i] = RobotVel[i]+127;
 8000708:	463a      	mov	r2, r7
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	4413      	add	r3, r2
 800070e:	f993 3000 	ldrsb.w	r3, [r3]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	337f      	adds	r3, #127	; 0x7f
 8000716:	b2d9      	uxtb	r1, r3
 8000718:	1d3a      	adds	r2, r7, #4
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	4413      	add	r3, r2
 800071e:	460a      	mov	r2, r1
 8000720:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<3; i++){
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	3301      	adds	r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	2b02      	cmp	r3, #2
 800072c:	ddec      	ble.n	8000708 <main+0x11c>

	  }
	  printf("X:%d, Y%d, Om%d\r\n", TxData[0], TxData[1], TxData[2]);
 800072e:	793b      	ldrb	r3, [r7, #4]
 8000730:	4619      	mov	r1, r3
 8000732:	797b      	ldrb	r3, [r7, #5]
 8000734:	461a      	mov	r2, r3
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <main+0x198>)
 800073a:	f003 f96d 	bl	8003a18 <iprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	461a      	mov	r2, r3
 8000742:	4911      	ldr	r1, [pc, #68]	; (8000788 <main+0x19c>)
 8000744:	4811      	ldr	r0, [pc, #68]	; (800078c <main+0x1a0>)
 8000746:	f000 fea5 	bl	8001494 <HAL_FDCAN_AddMessageToTxFifoQ>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <main+0x168>

	  		Error_Handler();
 8000750:	f000 f98e 	bl	8000a70 <Error_Handler>
	  	}

	  HAL_Delay(15);
 8000754:	200f      	movs	r0, #15
 8000756:	f000 fbe9 	bl	8000f2c <HAL_Delay>
  {
 800075a:	e757      	b.n	800060c <main+0x20>
 800075c:	08004be4 	.word	0x08004be4
 8000760:	08004c28 	.word	0x08004c28
 8000764:	08004bf4 	.word	0x08004bf4
 8000768:	48000400 	.word	0x48000400
 800076c:	08004bf8 	.word	0x08004bf8
 8000770:	08004bfc 	.word	0x08004bfc
 8000774:	08004c00 	.word	0x08004c00
 8000778:	08004c04 	.word	0x08004c04
 800077c:	08004c08 	.word	0x08004c08
 8000780:	08004c0c 	.word	0x08004c0c
 8000784:	08004c14 	.word	0x08004c14
 8000788:	20000180 	.word	0x20000180
 800078c:	2000008c 	.word	0x2000008c

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	; 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0318 	add.w	r3, r7, #24
 800079a:	2238      	movs	r2, #56	; 0x38
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 f932 	bl	8003a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007b6:	f001 facb 	bl	8001d50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	2340      	movs	r3, #64	; 0x40
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007d4:	230a      	movs	r3, #10
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fb55 	bl	8001e98 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80007f4:	f000 f93c 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2303      	movs	r3, #3
 80007fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2102      	movs	r1, #2
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fe59 	bl	80024c8 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800081c:	f000 f928 	bl	8000a70 <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	; 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800082c:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 800082e:	4a33      	ldr	r2, [pc, #204]	; (80008fc <MX_FDCAN1_Init+0xd4>)
 8000830:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000832:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000838:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800083e:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000844:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 8000846:	2200      	movs	r2, #0
 8000848:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 800084c:	2200      	movs	r2, #0
 800084e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 8000852:	2200      	movs	r2, #0
 8000854:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 8000858:	2205      	movs	r2, #5
 800085a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 800085e:	2210      	movs	r2, #16
 8000860:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 8000864:	220d      	movs	r2, #13
 8000866:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 800086a:	2202      	movs	r2, #2
 800086c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 8000870:	2201      	movs	r2, #1
 8000872:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 8000876:	2204      	movs	r2, #4
 8000878:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 800087c:	2205      	movs	r2, #5
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 8000882:	2204      	movs	r2, #4
 8000884:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 8000888:	2201      	movs	r2, #1
 800088a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 800088e:	2200      	movs	r2, #0
 8000890:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 8000894:	2200      	movs	r2, #0
 8000896:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000898:	4817      	ldr	r0, [pc, #92]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 800089a:	f000 fc79 	bl	8001190 <HAL_FDCAN_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80008a4:	f000 f8e4 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80008a8:	4813      	ldr	r0, [pc, #76]	; (80008f8 <MX_FDCAN1_Init+0xd0>)
 80008aa:	f000 fdcb 	bl	8001444 <HAL_FDCAN_Start>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_FDCAN1_Init+0x90>
  		Error_Handler();
 80008b4:	f000 f8dc 	bl	8000a70 <Error_Handler>
  	}

  TxHeader.IdType = FDCAN_STANDARD_ID;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_FDCAN1_Init+0xd8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_FDCAN1_Init+0xd8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  	TxHeader.DataLength = FDCAN_DLC_BYTES_3;
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_FDCAN1_Init+0xd8>)
 80008c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008ca:	60da      	str	r2, [r3, #12]
  	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_FDCAN1_Init+0xd8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_FDCAN1_Init+0xd8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_FDCAN1_Init+0xd8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_FDCAN1_Init+0xd8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  	TxHeader.MessageMarker = 0;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_FDCAN1_Init+0xd8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  	TxHeader.Identifier = CANID_ROBOTVEL;
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <MX_FDCAN1_Init+0xd8>)
 80008ec:	f240 220f 	movw	r2, #527	; 0x20f
 80008f0:	601a      	str	r2, [r3, #0]

  /* USER CODE END FDCAN1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	40006400 	.word	0x40006400
 8000900:	20000180 	.word	0x20000180

08000904 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 800090a:	4a27      	ldr	r2, [pc, #156]	; (80009a8 <MX_USART2_UART_Init+0xa4>)
 800090c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090e:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094c:	4815      	ldr	r0, [pc, #84]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 800094e:	f002 f9c7 	bl	8002ce0 <HAL_UART_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000958:	f000 f88a 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095c:	2100      	movs	r1, #0
 800095e:	4811      	ldr	r0, [pc, #68]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 8000960:	f002 ff5e 	bl	8003820 <HAL_UARTEx_SetTxFifoThreshold>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800096a:	f000 f881 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096e:	2100      	movs	r1, #0
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 8000972:	f002 ff93 	bl	800389c <HAL_UARTEx_SetRxFifoThreshold>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800097c:	f000 f878 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <MX_USART2_UART_Init+0xa0>)
 8000982:	f002 ff14 	bl	80037ae <HAL_UARTEx_DisableFifoMode>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800098c:	f000 f870 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  setbuf(stdout, NULL);
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_USART2_UART_Init+0xa8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f003 f8cb 	bl	8003b34 <setbuf>

  /* USER CODE END USART2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000f0 	.word	0x200000f0
 80009a8:	40004400 	.word	0x40004400
 80009ac:	2000000c 	.word	0x2000000c

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a26      	ldr	r2, [pc, #152]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009cc:	f043 0320 	orr.w	r3, r3, #32
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0320 	and.w	r3, r3, #32
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <MX_GPIO_Init+0xb4>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_GPIO_Init+0xb4>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_GPIO_Init+0xb8>)
 8000a22:	f000 fffb 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 PA7 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 8000a26:	f248 13a2 	movw	r3, #33186	; 0x81a2
 8000a2a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f000 ffed 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_7;
 8000a42:	23a1      	movs	r3, #161	; 0xa1
 8000a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_GPIO_Init+0xbc>)
 8000a56:	f000 ffe1 	bl	8001a1c <HAL_GPIO_Init>

}
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48001400 	.word	0x48001400
 8000a6c:	48000400 	.word	0x48000400

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <Error_Handler+0x8>
	...

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_MspInit+0x44>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_MspInit+0x44>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09a      	sub	sp, #104	; 0x68
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	2244      	movs	r2, #68	; 0x44
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f002 ff8f 	bl	8003a08 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a28      	ldr	r2, [pc, #160]	; (8000b90 <HAL_FDCAN_MspInit+0xcc>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d149      	bne.n	8000b88 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 fefb 	bl	8002900 <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000b10:	f7ff ffae 	bl	8000a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <HAL_FDCAN_MspInit+0xd0>)
 8000b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b18:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <HAL_FDCAN_MspInit+0xd0>)
 8000b1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_FDCAN_MspInit+0xd0>)
 8000b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_FDCAN_MspInit+0xd0>)
 8000b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b30:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <HAL_FDCAN_MspInit+0xd0>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_FDCAN_MspInit+0xd0>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b48:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b56:	2309      	movs	r3, #9
 8000b58:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f000 ff5a 	bl	8001a1c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2015      	movs	r0, #21
 8000b6e:	f000 fada 	bl	8001126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000b72:	2015      	movs	r0, #21
 8000b74:	f000 faf1 	bl	800115a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2016      	movs	r0, #22
 8000b7e:	f000 fad2 	bl	8001126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000b82:	2016      	movs	r0, #22
 8000b84:	f000 fae9 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	3768      	adds	r7, #104	; 0x68
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40006400 	.word	0x40006400
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b09a      	sub	sp, #104	; 0x68
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	2244      	movs	r2, #68	; 0x44
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f002 ff25 	bl	8003a08 <memset>
  if(huart->Instance==USART2)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <HAL_UART_MspInit+0xa8>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d136      	bne.n	8000c36 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 fe93 	bl	8002900 <HAL_RCCEx_PeriphCLKConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be0:	f7ff ff46 	bl	8000a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_UART_MspInit+0xac>)
 8000be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be8:	4a16      	ldr	r2, [pc, #88]	; (8000c44 <HAL_UART_MspInit+0xac>)
 8000bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bee:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_UART_MspInit+0xac>)
 8000bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_UART_MspInit+0xac>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c00:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <HAL_UART_MspInit+0xac>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_UART_MspInit+0xac>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c14:	230c      	movs	r3, #12
 8000c16:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c24:	2307      	movs	r3, #7
 8000c26:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c32:	f000 fef3 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3768      	adds	r7, #104	; 0x68
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40004400 	.word	0x40004400
 8000c44:	40021000 	.word	0x40021000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f92c 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <FDCAN1_IT0_IRQHandler+0x10>)
 8000ca2:	f000 fc3b 	bl	800151c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000008c 	.word	0x2000008c

08000cb0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <FDCAN1_IT1_IRQHandler+0x10>)
 8000cb6:	f000 fc31 	bl	800151c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000008c 	.word	0x2000008c

08000cc4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	e00a      	b.n	8000cec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cd6:	f3af 8000 	nop.w
 8000cda:	4601      	mov	r1, r0
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	b2ca      	uxtb	r2, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf0      	blt.n	8000cd6 <_read+0x12>
	}

return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
	return -1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d26:	605a      	str	r2, [r3, #4]
	return 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_isatty>:

int _isatty(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
	return 0;
 8000d58:	2300      	movs	r3, #0
	}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f002 fe0c 	bl	80039b4 <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20008000 	.word	0x20008000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	200001a4 	.word	0x200001a4
 8000dd0:	200001c0 	.word	0x200001c0

08000dd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfe:	490e      	ldr	r1, [pc, #56]	; (8000e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e00:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <LoopForever+0xe>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e14:	4c0b      	ldr	r4, [pc, #44]	; (8000e44 <LoopForever+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e22:	f7ff ffd7 	bl	8000dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f002 fdcb 	bl	80039c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2a:	f7ff fbdf 	bl	80005ec <main>

08000e2e <LoopForever>:

LoopForever:
    b LoopForever
 8000e2e:	e7fe      	b.n	8000e2e <LoopForever>
  ldr   r0, =_estack
 8000e30:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e3c:	08004d24 	.word	0x08004d24
  ldr r2, =_sbss
 8000e40:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e44:	200001bc 	.word	0x200001bc

08000e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC1_2_IRQHandler>

08000e4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f95b 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f80e 	bl	8000e7c <HAL_InitTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	e001      	b.n	8000e70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6c:	f7ff fe06 	bl	8000a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e70:	79fb      	ldrb	r3, [r7, #7]

}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_InitTick+0x68>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d022      	beq.n	8000ed6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_InitTick+0x6c>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <HAL_InitTick+0x68>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 f966 	bl	8001176 <HAL_SYSTICK_Config>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10f      	bne.n	8000ed0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	d809      	bhi.n	8000eca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebe:	f000 f932 	bl	8001126 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_InitTick+0x70>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	e007      	b.n	8000eda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e004      	b.n	8000eda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e001      	b.n	8000eda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_IncTick+0x1c>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_IncTick+0x20>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <HAL_IncTick+0x1c>)
 8000f00:	6013      	str	r3, [r2, #0]
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	200001a8 	.word	0x200001a8
 8000f10:	20000008 	.word	0x20000008

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200001a8 	.word	0x200001a8

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f44:	d004      	beq.n	8000f50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_Delay+0x40>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f50:	bf00      	nop
 8000f52:	f7ff ffdf 	bl	8000f14 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d8f7      	bhi.n	8000f52 <HAL_Delay+0x26>
  {
  }
}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000008 	.word	0x20000008

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	; (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff8e 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff29 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff40 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff90 	bl	8001064 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5f 	bl	8001010 <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff33 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffa4 	bl	80010cc <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e147      	b.n	8001432 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d106      	bne.n	80011bc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fc84 	bl	8000ac4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699a      	ldr	r2, [r3, #24]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0210 	bic.w	r2, r2, #16
 80011ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011cc:	f7ff fea2 	bl	8000f14 <HAL_GetTick>
 80011d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80011d2:	e012      	b.n	80011fa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80011d4:	f7ff fe9e 	bl	8000f14 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b0a      	cmp	r3, #10
 80011e0:	d90b      	bls.n	80011fa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2203      	movs	r2, #3
 80011f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e11b      	b.n	8001432 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b08      	cmp	r3, #8
 8001206:	d0e5      	beq.n	80011d4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	699a      	ldr	r2, [r3, #24]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001218:	f7ff fe7c 	bl	8000f14 <HAL_GetTick>
 800121c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800121e:	e012      	b.n	8001246 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001220:	f7ff fe78 	bl	8000f14 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b0a      	cmp	r3, #10
 800122c:	d90b      	bls.n	8001246 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001232:	f043 0201 	orr.w	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2203      	movs	r2, #3
 800123e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e0f5      	b.n	8001432 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0e5      	beq.n	8001220 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	699a      	ldr	r2, [r3, #24]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0202 	orr.w	r2, r2, #2
 8001262:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a74      	ldr	r2, [pc, #464]	; (800143c <HAL_FDCAN_Init+0x2ac>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d103      	bne.n	8001276 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800126e:	4a74      	ldr	r2, [pc, #464]	; (8001440 <HAL_FDCAN_Init+0x2b0>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7c1b      	ldrb	r3, [r3, #16]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d108      	bne.n	8001290 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800128c:	619a      	str	r2, [r3, #24]
 800128e:	e007      	b.n	80012a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	699a      	ldr	r2, [r3, #24]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800129e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7c5b      	ldrb	r3, [r3, #17]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d108      	bne.n	80012ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	699a      	ldr	r2, [r3, #24]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012b6:	619a      	str	r2, [r3, #24]
 80012b8:	e007      	b.n	80012ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7c9b      	ldrb	r3, [r3, #18]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d108      	bne.n	80012e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	699a      	ldr	r2, [r3, #24]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012e0:	619a      	str	r2, [r3, #24]
 80012e2:	e007      	b.n	80012f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699a      	ldr	r2, [r3, #24]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	699a      	ldr	r2, [r3, #24]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001318:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0210 	bic.w	r2, r2, #16
 8001328:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d108      	bne.n	8001344 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	699a      	ldr	r2, [r3, #24]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0204 	orr.w	r2, r2, #4
 8001340:	619a      	str	r2, [r3, #24]
 8001342:	e02c      	b.n	800139e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d028      	beq.n	800139e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d01c      	beq.n	800138e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001362:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0210 	orr.w	r2, r2, #16
 8001372:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d110      	bne.n	800139e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	699a      	ldr	r2, [r3, #24]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0220 	orr.w	r2, r2, #32
 800138a:	619a      	str	r2, [r3, #24]
 800138c:	e007      	b.n	800139e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	699a      	ldr	r2, [r3, #24]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0220 	orr.w	r2, r2, #32
 800139c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80013b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	3b01      	subs	r3, #1
 80013c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80013c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80013d2:	d115      	bne.n	8001400 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	3b01      	subs	r3, #1
 80013e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	3b01      	subs	r3, #1
 80013ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80013ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	3b01      	subs	r3, #1
 80013f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80013fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 fa2e 	bl	8001878 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40006400 	.word	0x40006400
 8001440:	40006500 	.word	0x40006500

08001444 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d110      	bne.n	800147a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2202      	movs	r2, #2
 800145c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	e006      	b.n	8001488 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147e:	f043 0204 	orr.w	r2, r3, #4
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
  }
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d12c      	bne.n	8001506 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d007      	beq.n	80014cc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e023      	b.n	8001514 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80014d4:	0c1b      	lsrs	r3, r3, #16
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 fa1e 	bl	8001924 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	fa01 f202 	lsl.w	r2, r1, r2
 80014f4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80014f8:	2201      	movs	r2, #1
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	409a      	lsls	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e006      	b.n	8001514 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150a:	f043 0208 	orr.w	r2, r3, #8
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
  }
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800152a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001538:	4013      	ands	r3, r2
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154e:	6a3a      	ldr	r2, [r7, #32]
 8001550:	4013      	ands	r3, r2
 8001552:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800155a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800155e:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	4013      	ands	r3, r2
 800156a:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001572:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001576:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800158e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4013      	ands	r3, r2
 800159a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00d      	beq.n	80015c6 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2240      	movs	r2, #64	; 0x40
 80015be:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f939 	bl	8001838 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d01b      	beq.n	800160c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d014      	beq.n	800160c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ea:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001602:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001604:	6939      	ldr	r1, [r7, #16]
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f8f7 	bl	80017fa <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800161a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f8b6 	bl	800178e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d007      	beq.n	8001638 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6a3a      	ldr	r2, [r7, #32]
 800162e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001630:	6a39      	ldr	r1, [r7, #32]
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f8b6 	bl	80017a4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001646:	69f9      	ldr	r1, [r7, #28]
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f8b6 	bl	80017ba <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00e      	beq.n	800167a <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001666:	2b00      	cmp	r3, #0
 8001668:	d007      	beq.n	800167a <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001672:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f8ab 	bl	80017d0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01a      	beq.n	80016be <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001692:	2b00      	cmp	r3, #0
 8001694:	d013      	beq.n	80016be <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800169e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80016b6:	68f9      	ldr	r1, [r7, #12]
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f893 	bl	80017e4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00e      	beq.n	80016ea <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d007      	beq.n	80016ea <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f893 	bl	8001810 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00e      	beq.n	8001716 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800170e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f887 	bl	8001824 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d011      	beq.n	8001748 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00a      	beq.n	8001748 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800173a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001740:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001756:	6979      	ldr	r1, [r7, #20]
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f881 	bl	8001860 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d009      	beq.n	8001778 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f863 	bl	800184c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001882:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189a:	041a      	lsls	r2, r3, #16
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018b8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c0:	061a      	lsls	r2, r3, #24
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	e005      	b.n	8001906 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3304      	adds	r3, #4
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	429a      	cmp	r2, r3
 8001910:	d3f3      	bcc.n	80018fa <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	4000a400 	.word	0x4000a400

08001924 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10a      	bne.n	8001950 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001942:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800194a:	4313      	orrs	r3, r2
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e00a      	b.n	8001966 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001958:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800195e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001964:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001970:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001976:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800197c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	3304      	adds	r3, #4
 80019a2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	3304      	adds	r3, #4
 80019ae:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	e020      	b.n	80019f8 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3303      	adds	r3, #3
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3302      	adds	r3, #2
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	440b      	add	r3, r1
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80019ce:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3301      	adds	r3, #1
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	440b      	add	r3, r1
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80019dc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	440a      	add	r2, r1
 80019e4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80019e6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	3304      	adds	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3304      	adds	r3, #4
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0c1b      	lsrs	r3, r3, #16
 80019fe:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <FDCAN_CopyMessageToRAM+0xf4>)
 8001a00:	5cd3      	ldrb	r3, [r2, r3]
 8001a02:	461a      	mov	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d3d5      	bcc.n	80019b6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	3724      	adds	r7, #36	; 0x24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	08004c44 	.word	0x08004c44

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a2a:	e15a      	b.n	8001ce2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 814c 	beq.w	8001cdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d005      	beq.n	8001a5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d130      	bne.n	8001abe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a92:	2201      	movs	r2, #1
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	f003 0201 	and.w	r2, r3, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d017      	beq.n	8001afa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d123      	bne.n	8001b4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	6939      	ldr	r1, [r7, #16]
 8001b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0203 	and.w	r2, r3, #3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80a6 	beq.w	8001cdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b90:	4b5b      	ldr	r3, [pc, #364]	; (8001d00 <HAL_GPIO_Init+0x2e4>)
 8001b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b94:	4a5a      	ldr	r2, [pc, #360]	; (8001d00 <HAL_GPIO_Init+0x2e4>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b9c:	4b58      	ldr	r3, [pc, #352]	; (8001d00 <HAL_GPIO_Init+0x2e4>)
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba8:	4a56      	ldr	r2, [pc, #344]	; (8001d04 <HAL_GPIO_Init+0x2e8>)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bd2:	d01f      	beq.n	8001c14 <HAL_GPIO_Init+0x1f8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_GPIO_Init+0x2ec>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d019      	beq.n	8001c10 <HAL_GPIO_Init+0x1f4>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a4b      	ldr	r2, [pc, #300]	; (8001d0c <HAL_GPIO_Init+0x2f0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <HAL_GPIO_Init+0x1f0>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a4a      	ldr	r2, [pc, #296]	; (8001d10 <HAL_GPIO_Init+0x2f4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00d      	beq.n	8001c08 <HAL_GPIO_Init+0x1ec>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <HAL_GPIO_Init+0x2f8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d007      	beq.n	8001c04 <HAL_GPIO_Init+0x1e8>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a48      	ldr	r2, [pc, #288]	; (8001d18 <HAL_GPIO_Init+0x2fc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_GPIO_Init+0x1e4>
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	e00a      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c00:	2306      	movs	r3, #6
 8001c02:	e008      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c04:	2304      	movs	r3, #4
 8001c06:	e006      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e004      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e002      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c14:	2300      	movs	r3, #0
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	f002 0203 	and.w	r2, r2, #3
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	4093      	lsls	r3, r2
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c26:	4937      	ldr	r1, [pc, #220]	; (8001d04 <HAL_GPIO_Init+0x2e8>)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c34:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c58:	4a30      	ldr	r2, [pc, #192]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c82:	4a26      	ldr	r2, [pc, #152]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cac:	4a1b      	ldr	r2, [pc, #108]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cd6:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f47f ae9d 	bne.w	8001a2c <HAL_GPIO_Init+0x10>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010000 	.word	0x40010000
 8001d08:	48000400 	.word	0x48000400
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	48000c00 	.word	0x48000c00
 8001d14:	48001000 	.word	0x48001000
 8001d18:	48001400 	.word	0x48001400
 8001d1c:	40010400 	.word	0x40010400

08001d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
 8001d3c:	e001      	b.n	8001d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d141      	bne.n	8001de2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d5e:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6a:	d131      	bne.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d6c:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d72:	4a46      	ldr	r2, [pc, #280]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d7c:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d84:	4a41      	ldr	r2, [pc, #260]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d8c:	4b40      	ldr	r3, [pc, #256]	; (8001e90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2232      	movs	r2, #50	; 0x32
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	4a3f      	ldr	r2, [pc, #252]	; (8001e94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	0c9b      	lsrs	r3, r3, #18
 8001d9e:	3301      	adds	r3, #1
 8001da0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001da2:	e002      	b.n	8001daa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001daa:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db6:	d102      	bne.n	8001dbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f2      	bne.n	8001da4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dbe:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dca:	d158      	bne.n	8001e7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e057      	b.n	8001e80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dd0:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dd6:	4a2d      	ldr	r2, [pc, #180]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ddc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001de0:	e04d      	b.n	8001e7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de8:	d141      	bne.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dea:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df6:	d131      	bne.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dfe:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e10:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2232      	movs	r2, #50	; 0x32
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	0c9b      	lsrs	r3, r3, #18
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e2e:	e002      	b.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e42:	d102      	bne.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f2      	bne.n	8001e30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e56:	d112      	bne.n	8001e7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e011      	b.n	8001e80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e6c:	e007      	b.n	8001e7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40007000 	.word	0x40007000
 8001e90:	20000000 	.word	0x20000000
 8001e94:	431bde83 	.word	0x431bde83

08001e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e306      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d075      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb6:	4b97      	ldr	r3, [pc, #604]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec0:	4b94      	ldr	r3, [pc, #592]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	d102      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x3e>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d002      	beq.n	8001edc <HAL_RCC_OscConfig+0x44>
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d10b      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	4b8d      	ldr	r3, [pc, #564]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d05b      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x108>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d157      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e2e1      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efc:	d106      	bne.n	8001f0c <HAL_RCC_OscConfig+0x74>
 8001efe:	4b85      	ldr	r3, [pc, #532]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a84      	ldr	r2, [pc, #528]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e01d      	b.n	8001f48 <HAL_RCC_OscConfig+0xb0>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x98>
 8001f16:	4b7f      	ldr	r3, [pc, #508]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a7e      	ldr	r2, [pc, #504]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b7c      	ldr	r3, [pc, #496]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a7b      	ldr	r2, [pc, #492]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0xb0>
 8001f30:	4b78      	ldr	r3, [pc, #480]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a77      	ldr	r2, [pc, #476]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b75      	ldr	r3, [pc, #468]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a74      	ldr	r2, [pc, #464]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7fe ffe0 	bl	8000f14 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7fe ffdc 	bl	8000f14 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e2a6      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f6a:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0xc0>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7fe ffcc 	bl	8000f14 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7fe ffc8 	bl	8000f14 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e292      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f92:	4b60      	ldr	r3, [pc, #384]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0xe8>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d075      	beq.n	800209a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fae:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb8:	4b56      	ldr	r3, [pc, #344]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	2b0c      	cmp	r3, #12
 8001fc6:	d102      	bne.n	8001fce <HAL_RCC_OscConfig+0x136>
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d002      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x13c>
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d11f      	bne.n	8002014 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd4:	4b4f      	ldr	r3, [pc, #316]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_OscConfig+0x154>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e265      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4b49      	ldr	r3, [pc, #292]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	061b      	lsls	r3, r3, #24
 8001ffa:	4946      	ldr	r1, [pc, #280]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002000:	4b45      	ldr	r3, [pc, #276]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe ff39 	bl	8000e7c <HAL_InitTick>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d043      	beq.n	8002098 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e251      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d023      	beq.n	8002064 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800201c:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a3c      	ldr	r2, [pc, #240]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7fe ff74 	bl	8000f14 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002030:	f7fe ff70 	bl	8000f14 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e23a      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002042:	4b34      	ldr	r3, [pc, #208]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	4b31      	ldr	r3, [pc, #196]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	061b      	lsls	r3, r3, #24
 800205c:	492d      	ldr	r1, [pc, #180]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
 8002062:	e01a      	b.n	800209a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2a      	ldr	r2, [pc, #168]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 800206a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800206e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7fe ff50 	bl	8000f14 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002078:	f7fe ff4c 	bl	8000f14 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e216      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800208a:	4b22      	ldr	r3, [pc, #136]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x1e0>
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002098:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d041      	beq.n	800212a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01c      	beq.n	80020e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ae:	4b19      	ldr	r3, [pc, #100]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 80020b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b4:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020be:	f7fe ff29 	bl	8000f14 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c6:	f7fe ff25 	bl	8000f14 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e1ef      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0ef      	beq.n	80020c6 <HAL_RCC_OscConfig+0x22e>
 80020e6:	e020      	b.n	800212a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 80020ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ee:	4a09      	ldr	r2, [pc, #36]	; (8002114 <HAL_RCC_OscConfig+0x27c>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7fe ff0c 	bl	8000f14 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020fe:	e00d      	b.n	800211c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002100:	f7fe ff08 	bl	8000f14 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d906      	bls.n	800211c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e1d2      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800211c:	4b8c      	ldr	r3, [pc, #560]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 800211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ea      	bne.n	8002100 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80a6 	beq.w	8002284 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800213c:	4b84      	ldr	r3, [pc, #528]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x2b4>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x2b6>
 800214c:	2300      	movs	r3, #0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00d      	beq.n	800216e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	4b7f      	ldr	r3, [pc, #508]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	4a7e      	ldr	r2, [pc, #504]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215c:	6593      	str	r3, [r2, #88]	; 0x58
 800215e:	4b7c      	ldr	r3, [pc, #496]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800216a:	2301      	movs	r3, #1
 800216c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216e:	4b79      	ldr	r3, [pc, #484]	; (8002354 <HAL_RCC_OscConfig+0x4bc>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d118      	bne.n	80021ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800217a:	4b76      	ldr	r3, [pc, #472]	; (8002354 <HAL_RCC_OscConfig+0x4bc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a75      	ldr	r2, [pc, #468]	; (8002354 <HAL_RCC_OscConfig+0x4bc>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002186:	f7fe fec5 	bl	8000f14 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218e:	f7fe fec1 	bl	8000f14 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e18b      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a0:	4b6c      	ldr	r3, [pc, #432]	; (8002354 <HAL_RCC_OscConfig+0x4bc>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d108      	bne.n	80021c6 <HAL_RCC_OscConfig+0x32e>
 80021b4:	4b66      	ldr	r3, [pc, #408]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ba:	4a65      	ldr	r2, [pc, #404]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021c4:	e024      	b.n	8002210 <HAL_RCC_OscConfig+0x378>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d110      	bne.n	80021f0 <HAL_RCC_OscConfig+0x358>
 80021ce:	4b60      	ldr	r3, [pc, #384]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	4a5e      	ldr	r2, [pc, #376]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021de:	4b5c      	ldr	r3, [pc, #368]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e4:	4a5a      	ldr	r2, [pc, #360]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ee:	e00f      	b.n	8002210 <HAL_RCC_OscConfig+0x378>
 80021f0:	4b57      	ldr	r3, [pc, #348]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	4a56      	ldr	r2, [pc, #344]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002200:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	4a52      	ldr	r2, [pc, #328]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d016      	beq.n	8002246 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7fe fe7c 	bl	8000f14 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221e:	e00a      	b.n	8002236 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7fe fe78 	bl	8000f14 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e140      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ed      	beq.n	8002220 <HAL_RCC_OscConfig+0x388>
 8002244:	e015      	b.n	8002272 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002246:	f7fe fe65 	bl	8000f14 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7fe fe61 	bl	8000f14 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e129      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002264:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 8002266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1ed      	bne.n	800224e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002272:	7ffb      	ldrb	r3, [r7, #31]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d105      	bne.n	8002284 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	4a34      	ldr	r2, [pc, #208]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 800227e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002282:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0320 	and.w	r3, r3, #32
 800228c:	2b00      	cmp	r3, #0
 800228e:	d03c      	beq.n	800230a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01c      	beq.n	80022d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002298:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 800229a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800229e:	4a2c      	ldr	r2, [pc, #176]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a8:	f7fe fe34 	bl	8000f14 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022b0:	f7fe fe30 	bl	8000f14 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e0fa      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022c2:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 80022c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0ef      	beq.n	80022b0 <HAL_RCC_OscConfig+0x418>
 80022d0:	e01b      	b.n	800230a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 80022d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022d8:	4a1d      	ldr	r2, [pc, #116]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 80022da:	f023 0301 	bic.w	r3, r3, #1
 80022de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e2:	f7fe fe17 	bl	8000f14 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ea:	f7fe fe13 	bl	8000f14 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0dd      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 80022fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1ef      	bne.n	80022ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80d1 	beq.w	80024b6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b0c      	cmp	r3, #12
 800231e:	f000 808b 	beq.w	8002438 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d15e      	bne.n	80023e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a08      	ldr	r2, [pc, #32]	; (8002350 <HAL_RCC_OscConfig+0x4b8>)
 8002330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe fded 	bl	8000f14 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233c:	e00c      	b.n	8002358 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233e:	f7fe fde9 	bl	8000f14 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d905      	bls.n	8002358 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e0b3      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
 8002350:	40021000 	.word	0x40021000
 8002354:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ec      	bne.n	800233e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002364:	4b56      	ldr	r3, [pc, #344]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	4b56      	ldr	r3, [pc, #344]	; (80024c4 <HAL_RCC_OscConfig+0x62c>)
 800236a:	4013      	ands	r3, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6a11      	ldr	r1, [r2, #32]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002374:	3a01      	subs	r2, #1
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	4311      	orrs	r1, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800237e:	0212      	lsls	r2, r2, #8
 8002380:	4311      	orrs	r1, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002386:	0852      	lsrs	r2, r2, #1
 8002388:	3a01      	subs	r2, #1
 800238a:	0552      	lsls	r2, r2, #21
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002392:	0852      	lsrs	r2, r2, #1
 8002394:	3a01      	subs	r2, #1
 8002396:	0652      	lsls	r2, r2, #25
 8002398:	4311      	orrs	r1, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800239e:	06d2      	lsls	r2, r2, #27
 80023a0:	430a      	orrs	r2, r1
 80023a2:	4947      	ldr	r1, [pc, #284]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a8:	4b45      	ldr	r3, [pc, #276]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a44      	ldr	r2, [pc, #272]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 80023ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b4:	4b42      	ldr	r3, [pc, #264]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a41      	ldr	r2, [pc, #260]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 80023ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fda8 	bl	8000f14 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fda4 	bl	8000f14 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e06e      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x530>
 80023e6:	e066      	b.n	80024b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e8:	4b35      	ldr	r3, [pc, #212]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a34      	ldr	r2, [pc, #208]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 80023ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023f4:	4b32      	ldr	r3, [pc, #200]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a31      	ldr	r2, [pc, #196]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002400:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4a2e      	ldr	r2, [pc, #184]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 8002406:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800240a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7fe fd80 	bl	8000f14 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fd7c 	bl	8000f14 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e046      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800242a:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x580>
 8002436:	e03e      	b.n	80024b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e039      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0203 	and.w	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	429a      	cmp	r2, r3
 8002456:	d12c      	bne.n	80024b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	3b01      	subs	r3, #1
 8002464:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d123      	bne.n	80024b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d11b      	bne.n	80024b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d113      	bne.n	80024b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	3b01      	subs	r3, #1
 8002498:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	3b01      	subs	r3, #1
 80024ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3720      	adds	r7, #32
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	019f800c 	.word	0x019f800c

080024c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e11e      	b.n	800271e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b91      	ldr	r3, [pc, #580]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d910      	bls.n	8002510 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 020f 	bic.w	r2, r3, #15
 80024f6:	498c      	ldr	r1, [pc, #560]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b8a      	ldr	r3, [pc, #552]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e106      	b.n	800271e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d073      	beq.n	8002604 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d129      	bne.n	8002578 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002524:	4b81      	ldr	r3, [pc, #516]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0f4      	b.n	800271e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002534:	f000 f99e 	bl	8002874 <RCC_GetSysClockFreqFromPLLSource>
 8002538:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4a7c      	ldr	r2, [pc, #496]	; (8002730 <HAL_RCC_ClockConfig+0x268>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d93f      	bls.n	80025c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002542:	4b7a      	ldr	r3, [pc, #488]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002556:	2b00      	cmp	r3, #0
 8002558:	d033      	beq.n	80025c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800255e:	2b00      	cmp	r3, #0
 8002560:	d12f      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002562:	4b72      	ldr	r3, [pc, #456]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800256a:	4a70      	ldr	r2, [pc, #448]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 800256c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002570:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	e024      	b.n	80025c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d107      	bne.n	8002590 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0c6      	b.n	800271e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002590:	4b66      	ldr	r3, [pc, #408]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0be      	b.n	800271e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80025a0:	f000 f8ce 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4a61      	ldr	r2, [pc, #388]	; (8002730 <HAL_RCC_ClockConfig+0x268>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d909      	bls.n	80025c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025ae:	4b5f      	ldr	r3, [pc, #380]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025b6:	4a5d      	ldr	r2, [pc, #372]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80025b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025c2:	4b5a      	ldr	r3, [pc, #360]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f023 0203 	bic.w	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4957      	ldr	r1, [pc, #348]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d4:	f7fe fc9e 	bl	8000f14 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f7fe fc9a 	bl	8000f14 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e095      	b.n	800271e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	4b4e      	ldr	r3, [pc, #312]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 020c 	and.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	429a      	cmp	r2, r3
 8002602:	d1eb      	bne.n	80025dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d023      	beq.n	8002658 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800261c:	4b43      	ldr	r3, [pc, #268]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4a42      	ldr	r2, [pc, #264]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002622:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002626:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002634:	4b3d      	ldr	r3, [pc, #244]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800263c:	4a3b      	ldr	r2, [pc, #236]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 800263e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002642:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002644:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4936      	ldr	r1, [pc, #216]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
 8002656:	e008      	b.n	800266a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b80      	cmp	r3, #128	; 0x80
 800265c:	d105      	bne.n	800266a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800265e:	4b33      	ldr	r3, [pc, #204]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4a32      	ldr	r2, [pc, #200]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002668:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800266a:	4b2f      	ldr	r3, [pc, #188]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d21d      	bcs.n	80026b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002678:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 020f 	bic.w	r2, r3, #15
 8002680:	4929      	ldr	r1, [pc, #164]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002688:	f7fe fc44 	bl	8000f14 <HAL_GetTick>
 800268c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002690:	f7fe fc40 	bl	8000f14 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e03b      	b.n	800271e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d1ed      	bne.n	8002690 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4917      	ldr	r1, [pc, #92]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	490f      	ldr	r1, [pc, #60]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026f2:	f000 f825 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026f6:	4602      	mov	r2, r0
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	490c      	ldr	r1, [pc, #48]	; (8002734 <HAL_RCC_ClockConfig+0x26c>)
 8002704:	5ccb      	ldrb	r3, [r1, r3]
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <HAL_RCC_ClockConfig+0x270>)
 8002710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_RCC_ClockConfig+0x274>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fbb0 	bl	8000e7c <HAL_InitTick>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40022000 	.word	0x40022000
 800272c:	40021000 	.word	0x40021000
 8002730:	04c4b400 	.word	0x04c4b400
 8002734:	08004c2c 	.word	0x08004c2c
 8002738:	20000000 	.word	0x20000000
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002746:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b04      	cmp	r3, #4
 8002750:	d102      	bne.n	8002758 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002752:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	e047      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002758:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b08      	cmp	r3, #8
 8002762:	d102      	bne.n	800276a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002764:	4b26      	ldr	r3, [pc, #152]	; (8002800 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	e03e      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800276a:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d136      	bne.n	80027e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	3301      	adds	r3, #1
 800278c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d10c      	bne.n	80027ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002794:	4a1a      	ldr	r2, [pc, #104]	; (8002800 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	fbb2 f3f3 	udiv	r3, r2, r3
 800279c:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800279e:	68d2      	ldr	r2, [r2, #12]
 80027a0:	0a12      	lsrs	r2, r2, #8
 80027a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	617b      	str	r3, [r7, #20]
      break;
 80027ac:	e00c      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027ae:	4a13      	ldr	r2, [pc, #76]	; (80027fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b8:	68d2      	ldr	r2, [r2, #12]
 80027ba:	0a12      	lsrs	r2, r2, #8
 80027bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	617b      	str	r3, [r7, #20]
      break;
 80027c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0e5b      	lsrs	r3, r3, #25
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	e001      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027e8:	693b      	ldr	r3, [r7, #16]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	007a1200 	.word	0x007a1200

08002804 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_RCC_GetHCLKFreq+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000000 	.word	0x20000000

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002820:	f7ff fff0 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4904      	ldr	r1, [pc, #16]	; (8002844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	08004c3c 	.word	0x08004c3c

08002848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800284c:	f7ff ffda 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	0adb      	lsrs	r3, r3, #11
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4904      	ldr	r1, [pc, #16]	; (8002870 <HAL_RCC_GetPCLK2Freq+0x28>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	08004c3c 	.word	0x08004c3c

08002874 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800287a:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	3301      	adds	r3, #1
 8002890:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d10c      	bne.n	80028b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002898:	4a17      	ldr	r2, [pc, #92]	; (80028f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028a2:	68d2      	ldr	r2, [r2, #12]
 80028a4:	0a12      	lsrs	r2, r2, #8
 80028a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	617b      	str	r3, [r7, #20]
    break;
 80028b0:	e00c      	b.n	80028cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028b2:	4a12      	ldr	r2, [pc, #72]	; (80028fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028bc:	68d2      	ldr	r2, [r2, #12]
 80028be:	0a12      	lsrs	r2, r2, #8
 80028c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028c4:	fb02 f303 	mul.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
    break;
 80028ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	0e5b      	lsrs	r3, r3, #25
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	3301      	adds	r3, #1
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80028e6:	687b      	ldr	r3, [r7, #4]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40021000 	.word	0x40021000
 80028f8:	007a1200 	.word	0x007a1200
 80028fc:	00f42400 	.word	0x00f42400

08002900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002908:	2300      	movs	r3, #0
 800290a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800290c:	2300      	movs	r3, #0
 800290e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8098 	beq.w	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002922:	4b43      	ldr	r3, [pc, #268]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10d      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	4b40      	ldr	r3, [pc, #256]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	4a3f      	ldr	r2, [pc, #252]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	6593      	str	r3, [r2, #88]	; 0x58
 800293a:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002946:	2301      	movs	r3, #1
 8002948:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800294a:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a39      	ldr	r2, [pc, #228]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002956:	f7fe fadd 	bl	8000f14 <HAL_GetTick>
 800295a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800295c:	e009      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295e:	f7fe fad9 	bl	8000f14 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d902      	bls.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	74fb      	strb	r3, [r7, #19]
        break;
 8002970:	e005      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002972:	4b30      	ldr	r3, [pc, #192]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0ef      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800297e:	7cfb      	ldrb	r3, [r7, #19]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d159      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002984:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01e      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	429a      	cmp	r2, r3
 800299e:	d019      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029a0:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029ac:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029cc:	4a18      	ldr	r2, [pc, #96]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7fe fa99 	bl	8000f14 <HAL_GetTick>
 80029e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e4:	e00b      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7fe fa95 	bl	8000f14 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d902      	bls.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	74fb      	strb	r3, [r7, #19]
            break;
 80029fc:	e006      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ec      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a0c:	7cfb      	ldrb	r3, [r7, #19]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10b      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	4903      	ldr	r1, [pc, #12]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a28:	e008      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a2a:	7cfb      	ldrb	r3, [r7, #19]
 8002a2c:	74bb      	strb	r3, [r7, #18]
 8002a2e:	e005      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a3c:	7c7b      	ldrb	r3, [r7, #17]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a42:	4ba6      	ldr	r3, [pc, #664]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	4aa5      	ldr	r2, [pc, #660]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a5a:	4ba0      	ldr	r3, [pc, #640]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a60:	f023 0203 	bic.w	r2, r3, #3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	499c      	ldr	r1, [pc, #624]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a7c:	4b97      	ldr	r3, [pc, #604]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f023 020c 	bic.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4994      	ldr	r1, [pc, #592]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a9e:	4b8f      	ldr	r3, [pc, #572]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	498b      	ldr	r1, [pc, #556]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ac0:	4b86      	ldr	r3, [pc, #536]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	4983      	ldr	r1, [pc, #524]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ae2:	4b7e      	ldr	r3, [pc, #504]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	497a      	ldr	r1, [pc, #488]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b04:	4b75      	ldr	r3, [pc, #468]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	4972      	ldr	r1, [pc, #456]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b26:	4b6d      	ldr	r3, [pc, #436]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4969      	ldr	r1, [pc, #420]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b48:	4b64      	ldr	r3, [pc, #400]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	4961      	ldr	r1, [pc, #388]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b6a:	4b5c      	ldr	r3, [pc, #368]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	4958      	ldr	r1, [pc, #352]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d015      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b8c:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	4950      	ldr	r1, [pc, #320]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002baa:	d105      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bac:	4b4b      	ldr	r3, [pc, #300]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4a4a      	ldr	r2, [pc, #296]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bc4:	4b45      	ldr	r3, [pc, #276]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	4942      	ldr	r1, [pc, #264]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be4:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a3c      	ldr	r2, [pc, #240]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d015      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bfc:	4b37      	ldr	r3, [pc, #220]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4934      	ldr	r1, [pc, #208]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c1c:	4b2f      	ldr	r3, [pc, #188]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4a2e      	ldr	r2, [pc, #184]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c34:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c42:	4926      	ldr	r1, [pc, #152]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c52:	d105      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c54:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4a20      	ldr	r2, [pc, #128]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d015      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	4918      	ldr	r1, [pc, #96]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c8c:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d015      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ca4:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	490a      	ldr	r1, [pc, #40]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cc2:	d105      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002cd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e042      	b.n	8002d78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d106      	bne.n	8002d0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7fd ff47 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2224      	movs	r2, #36	; 0x24
 8002d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f8c2 	bl	8002eac <UART_SetConfig>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e022      	b.n	8002d78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fb82 	bl	8003444 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fc09 	bl	8003588 <UART_CheckIdleState>
 8002d76:	4603      	mov	r3, r0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	f040 8083 	bne.w	8002ea2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_UART_Transmit+0x28>
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e07b      	b.n	8002ea4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Transmit+0x3a>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e074      	b.n	8002ea4 <HAL_UART_Transmit+0x124>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2221      	movs	r2, #33	; 0x21
 8002dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dd2:	f7fe f89f 	bl	8000f14 <HAL_GetTick>
 8002dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	88fa      	ldrh	r2, [r7, #6]
 8002de4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df0:	d108      	bne.n	8002e04 <HAL_UART_Transmit+0x84>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d104      	bne.n	8002e04 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	e003      	b.n	8002e0c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002e14:	e02c      	b.n	8002e70 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fbfc 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e039      	b.n	8002ea4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10b      	bne.n	8002e4e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	3302      	adds	r3, #2
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	e007      	b.n	8002e5e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1cc      	bne.n	8002e16 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2200      	movs	r2, #0
 8002e84:	2140      	movs	r1, #64	; 0x40
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fbc9 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e006      	b.n	8002ea4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	e000      	b.n	8002ea4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002ea2:	2302      	movs	r3, #2
  }
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3720      	adds	r7, #32
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb0:	b08c      	sub	sp, #48	; 0x30
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4bab      	ldr	r3, [pc, #684]	; (8003188 <UART_SetConfig+0x2dc>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4aa0      	ldr	r2, [pc, #640]	; (800318c <UART_SetConfig+0x2e0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f14:	4313      	orrs	r3, r2
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002f22:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	6812      	ldr	r2, [r2, #0]
 8002f2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	f023 010f 	bic.w	r1, r3, #15
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a91      	ldr	r2, [pc, #580]	; (8003190 <UART_SetConfig+0x2e4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d125      	bne.n	8002f9c <UART_SetConfig+0xf0>
 8002f50:	4b90      	ldr	r3, [pc, #576]	; (8003194 <UART_SetConfig+0x2e8>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d81a      	bhi.n	8002f94 <UART_SetConfig+0xe8>
 8002f5e:	a201      	add	r2, pc, #4	; (adr r2, 8002f64 <UART_SetConfig+0xb8>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002f75 	.word	0x08002f75
 8002f68:	08002f85 	.word	0x08002f85
 8002f6c:	08002f7d 	.word	0x08002f7d
 8002f70:	08002f8d 	.word	0x08002f8d
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f7a:	e0d6      	b.n	800312a <UART_SetConfig+0x27e>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f82:	e0d2      	b.n	800312a <UART_SetConfig+0x27e>
 8002f84:	2304      	movs	r3, #4
 8002f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f8a:	e0ce      	b.n	800312a <UART_SetConfig+0x27e>
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f92:	e0ca      	b.n	800312a <UART_SetConfig+0x27e>
 8002f94:	2310      	movs	r3, #16
 8002f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f9a:	e0c6      	b.n	800312a <UART_SetConfig+0x27e>
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a7d      	ldr	r2, [pc, #500]	; (8003198 <UART_SetConfig+0x2ec>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d138      	bne.n	8003018 <UART_SetConfig+0x16c>
 8002fa6:	4b7b      	ldr	r3, [pc, #492]	; (8003194 <UART_SetConfig+0x2e8>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	d82d      	bhi.n	8003010 <UART_SetConfig+0x164>
 8002fb4:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <UART_SetConfig+0x110>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08002ff1 	.word	0x08002ff1
 8002fc0:	08003011 	.word	0x08003011
 8002fc4:	08003011 	.word	0x08003011
 8002fc8:	08003011 	.word	0x08003011
 8002fcc:	08003001 	.word	0x08003001
 8002fd0:	08003011 	.word	0x08003011
 8002fd4:	08003011 	.word	0x08003011
 8002fd8:	08003011 	.word	0x08003011
 8002fdc:	08002ff9 	.word	0x08002ff9
 8002fe0:	08003011 	.word	0x08003011
 8002fe4:	08003011 	.word	0x08003011
 8002fe8:	08003011 	.word	0x08003011
 8002fec:	08003009 	.word	0x08003009
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ff6:	e098      	b.n	800312a <UART_SetConfig+0x27e>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ffe:	e094      	b.n	800312a <UART_SetConfig+0x27e>
 8003000:	2304      	movs	r3, #4
 8003002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003006:	e090      	b.n	800312a <UART_SetConfig+0x27e>
 8003008:	2308      	movs	r3, #8
 800300a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800300e:	e08c      	b.n	800312a <UART_SetConfig+0x27e>
 8003010:	2310      	movs	r3, #16
 8003012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003016:	e088      	b.n	800312a <UART_SetConfig+0x27e>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a5f      	ldr	r2, [pc, #380]	; (800319c <UART_SetConfig+0x2f0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d125      	bne.n	800306e <UART_SetConfig+0x1c2>
 8003022:	4b5c      	ldr	r3, [pc, #368]	; (8003194 <UART_SetConfig+0x2e8>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003028:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800302c:	2b30      	cmp	r3, #48	; 0x30
 800302e:	d016      	beq.n	800305e <UART_SetConfig+0x1b2>
 8003030:	2b30      	cmp	r3, #48	; 0x30
 8003032:	d818      	bhi.n	8003066 <UART_SetConfig+0x1ba>
 8003034:	2b20      	cmp	r3, #32
 8003036:	d00a      	beq.n	800304e <UART_SetConfig+0x1a2>
 8003038:	2b20      	cmp	r3, #32
 800303a:	d814      	bhi.n	8003066 <UART_SetConfig+0x1ba>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <UART_SetConfig+0x19a>
 8003040:	2b10      	cmp	r3, #16
 8003042:	d008      	beq.n	8003056 <UART_SetConfig+0x1aa>
 8003044:	e00f      	b.n	8003066 <UART_SetConfig+0x1ba>
 8003046:	2300      	movs	r3, #0
 8003048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800304c:	e06d      	b.n	800312a <UART_SetConfig+0x27e>
 800304e:	2302      	movs	r3, #2
 8003050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003054:	e069      	b.n	800312a <UART_SetConfig+0x27e>
 8003056:	2304      	movs	r3, #4
 8003058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800305c:	e065      	b.n	800312a <UART_SetConfig+0x27e>
 800305e:	2308      	movs	r3, #8
 8003060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003064:	e061      	b.n	800312a <UART_SetConfig+0x27e>
 8003066:	2310      	movs	r3, #16
 8003068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800306c:	e05d      	b.n	800312a <UART_SetConfig+0x27e>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a4b      	ldr	r2, [pc, #300]	; (80031a0 <UART_SetConfig+0x2f4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d125      	bne.n	80030c4 <UART_SetConfig+0x218>
 8003078:	4b46      	ldr	r3, [pc, #280]	; (8003194 <UART_SetConfig+0x2e8>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003082:	2bc0      	cmp	r3, #192	; 0xc0
 8003084:	d016      	beq.n	80030b4 <UART_SetConfig+0x208>
 8003086:	2bc0      	cmp	r3, #192	; 0xc0
 8003088:	d818      	bhi.n	80030bc <UART_SetConfig+0x210>
 800308a:	2b80      	cmp	r3, #128	; 0x80
 800308c:	d00a      	beq.n	80030a4 <UART_SetConfig+0x1f8>
 800308e:	2b80      	cmp	r3, #128	; 0x80
 8003090:	d814      	bhi.n	80030bc <UART_SetConfig+0x210>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <UART_SetConfig+0x1f0>
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d008      	beq.n	80030ac <UART_SetConfig+0x200>
 800309a:	e00f      	b.n	80030bc <UART_SetConfig+0x210>
 800309c:	2300      	movs	r3, #0
 800309e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030a2:	e042      	b.n	800312a <UART_SetConfig+0x27e>
 80030a4:	2302      	movs	r3, #2
 80030a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030aa:	e03e      	b.n	800312a <UART_SetConfig+0x27e>
 80030ac:	2304      	movs	r3, #4
 80030ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030b2:	e03a      	b.n	800312a <UART_SetConfig+0x27e>
 80030b4:	2308      	movs	r3, #8
 80030b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ba:	e036      	b.n	800312a <UART_SetConfig+0x27e>
 80030bc:	2310      	movs	r3, #16
 80030be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030c2:	e032      	b.n	800312a <UART_SetConfig+0x27e>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a30      	ldr	r2, [pc, #192]	; (800318c <UART_SetConfig+0x2e0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d12a      	bne.n	8003124 <UART_SetConfig+0x278>
 80030ce:	4b31      	ldr	r3, [pc, #196]	; (8003194 <UART_SetConfig+0x2e8>)
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030dc:	d01a      	beq.n	8003114 <UART_SetConfig+0x268>
 80030de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030e2:	d81b      	bhi.n	800311c <UART_SetConfig+0x270>
 80030e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e8:	d00c      	beq.n	8003104 <UART_SetConfig+0x258>
 80030ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ee:	d815      	bhi.n	800311c <UART_SetConfig+0x270>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <UART_SetConfig+0x250>
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f8:	d008      	beq.n	800310c <UART_SetConfig+0x260>
 80030fa:	e00f      	b.n	800311c <UART_SetConfig+0x270>
 80030fc:	2300      	movs	r3, #0
 80030fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003102:	e012      	b.n	800312a <UART_SetConfig+0x27e>
 8003104:	2302      	movs	r3, #2
 8003106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800310a:	e00e      	b.n	800312a <UART_SetConfig+0x27e>
 800310c:	2304      	movs	r3, #4
 800310e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003112:	e00a      	b.n	800312a <UART_SetConfig+0x27e>
 8003114:	2308      	movs	r3, #8
 8003116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800311a:	e006      	b.n	800312a <UART_SetConfig+0x27e>
 800311c:	2310      	movs	r3, #16
 800311e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003122:	e002      	b.n	800312a <UART_SetConfig+0x27e>
 8003124:	2310      	movs	r3, #16
 8003126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <UART_SetConfig+0x2e0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	f040 80a8 	bne.w	8003286 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003136:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800313a:	2b08      	cmp	r3, #8
 800313c:	d834      	bhi.n	80031a8 <UART_SetConfig+0x2fc>
 800313e:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <UART_SetConfig+0x298>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	08003169 	.word	0x08003169
 8003148:	080031a9 	.word	0x080031a9
 800314c:	08003171 	.word	0x08003171
 8003150:	080031a9 	.word	0x080031a9
 8003154:	08003177 	.word	0x08003177
 8003158:	080031a9 	.word	0x080031a9
 800315c:	080031a9 	.word	0x080031a9
 8003160:	080031a9 	.word	0x080031a9
 8003164:	0800317f 	.word	0x0800317f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003168:	f7ff fb58 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 800316c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800316e:	e021      	b.n	80031b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <UART_SetConfig+0x2f8>)
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003174:	e01e      	b.n	80031b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003176:	f7ff fae3 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 800317a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800317c:	e01a      	b.n	80031b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003184:	e016      	b.n	80031b4 <UART_SetConfig+0x308>
 8003186:	bf00      	nop
 8003188:	cfff69f3 	.word	0xcfff69f3
 800318c:	40008000 	.word	0x40008000
 8003190:	40013800 	.word	0x40013800
 8003194:	40021000 	.word	0x40021000
 8003198:	40004400 	.word	0x40004400
 800319c:	40004800 	.word	0x40004800
 80031a0:	40004c00 	.word	0x40004c00
 80031a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80031b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 812a 	beq.w	8003410 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	4a9e      	ldr	r2, [pc, #632]	; (800343c <UART_SetConfig+0x590>)
 80031c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031c6:	461a      	mov	r2, r3
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d305      	bcc.n	80031ec <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d903      	bls.n	80031f4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80031f2:	e10d      	b.n	8003410 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	2200      	movs	r2, #0
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	60fa      	str	r2, [r7, #12]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	4a8e      	ldr	r2, [pc, #568]	; (800343c <UART_SetConfig+0x590>)
 8003202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003206:	b29b      	uxth	r3, r3
 8003208:	2200      	movs	r2, #0
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003212:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003216:	f7fd f853 	bl	80002c0 <__aeabi_uldivmod>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	020b      	lsls	r3, r1, #8
 800322c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003230:	0202      	lsls	r2, r0, #8
 8003232:	6979      	ldr	r1, [r7, #20]
 8003234:	6849      	ldr	r1, [r1, #4]
 8003236:	0849      	lsrs	r1, r1, #1
 8003238:	2000      	movs	r0, #0
 800323a:	460c      	mov	r4, r1
 800323c:	4605      	mov	r5, r0
 800323e:	eb12 0804 	adds.w	r8, r2, r4
 8003242:	eb43 0905 	adc.w	r9, r3, r5
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	469a      	mov	sl, r3
 800324e:	4693      	mov	fp, r2
 8003250:	4652      	mov	r2, sl
 8003252:	465b      	mov	r3, fp
 8003254:	4640      	mov	r0, r8
 8003256:	4649      	mov	r1, r9
 8003258:	f7fd f832 	bl	80002c0 <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4613      	mov	r3, r2
 8003262:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800326a:	d308      	bcc.n	800327e <UART_SetConfig+0x3d2>
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003272:	d204      	bcs.n	800327e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6a3a      	ldr	r2, [r7, #32]
 800327a:	60da      	str	r2, [r3, #12]
 800327c:	e0c8      	b.n	8003410 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003284:	e0c4      	b.n	8003410 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800328e:	d167      	bne.n	8003360 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003290:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003294:	2b08      	cmp	r3, #8
 8003296:	d828      	bhi.n	80032ea <UART_SetConfig+0x43e>
 8003298:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <UART_SetConfig+0x3f4>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032c5 	.word	0x080032c5
 80032a4:	080032cd 	.word	0x080032cd
 80032a8:	080032d5 	.word	0x080032d5
 80032ac:	080032eb 	.word	0x080032eb
 80032b0:	080032db 	.word	0x080032db
 80032b4:	080032eb 	.word	0x080032eb
 80032b8:	080032eb 	.word	0x080032eb
 80032bc:	080032eb 	.word	0x080032eb
 80032c0:	080032e3 	.word	0x080032e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c4:	f7ff faaa 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 80032c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032ca:	e014      	b.n	80032f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032cc:	f7ff fabc 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 80032d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032d2:	e010      	b.n	80032f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d4:	4b5a      	ldr	r3, [pc, #360]	; (8003440 <UART_SetConfig+0x594>)
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032d8:	e00d      	b.n	80032f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032da:	f7ff fa31 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80032de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032e0:	e009      	b.n	80032f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032e8:	e005      	b.n	80032f6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80032f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8089 	beq.w	8003410 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	4a4e      	ldr	r2, [pc, #312]	; (800343c <UART_SetConfig+0x590>)
 8003304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003308:	461a      	mov	r2, r3
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003310:	005a      	lsls	r2, r3, #1
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	441a      	add	r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003322:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	2b0f      	cmp	r3, #15
 8003328:	d916      	bls.n	8003358 <UART_SetConfig+0x4ac>
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003330:	d212      	bcs.n	8003358 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f023 030f 	bic.w	r3, r3, #15
 800333a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	b29b      	uxth	r3, r3
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	b29a      	uxth	r2, r3
 8003348:	8bfb      	ldrh	r3, [r7, #30]
 800334a:	4313      	orrs	r3, r2
 800334c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	8bfa      	ldrh	r2, [r7, #30]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	e05b      	b.n	8003410 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800335e:	e057      	b.n	8003410 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003360:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003364:	2b08      	cmp	r3, #8
 8003366:	d828      	bhi.n	80033ba <UART_SetConfig+0x50e>
 8003368:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <UART_SetConfig+0x4c4>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	08003395 	.word	0x08003395
 8003374:	0800339d 	.word	0x0800339d
 8003378:	080033a5 	.word	0x080033a5
 800337c:	080033bb 	.word	0x080033bb
 8003380:	080033ab 	.word	0x080033ab
 8003384:	080033bb 	.word	0x080033bb
 8003388:	080033bb 	.word	0x080033bb
 800338c:	080033bb 	.word	0x080033bb
 8003390:	080033b3 	.word	0x080033b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003394:	f7ff fa42 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8003398:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800339a:	e014      	b.n	80033c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800339c:	f7ff fa54 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 80033a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033a2:	e010      	b.n	80033c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a4:	4b26      	ldr	r3, [pc, #152]	; (8003440 <UART_SetConfig+0x594>)
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033a8:	e00d      	b.n	80033c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033aa:	f7ff f9c9 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80033ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033b0:	e009      	b.n	80033c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033b8:	e005      	b.n	80033c6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80033c4:	bf00      	nop
    }

    if (pclk != 0U)
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d021      	beq.n	8003410 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	4a1a      	ldr	r2, [pc, #104]	; (800343c <UART_SetConfig+0x590>)
 80033d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d6:	461a      	mov	r2, r3
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	fbb3 f2f2 	udiv	r2, r3, r2
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	441a      	add	r2, r3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	2b0f      	cmp	r3, #15
 80033f4:	d909      	bls.n	800340a <UART_SetConfig+0x55e>
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d205      	bcs.n	800340a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	b29a      	uxth	r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	e002      	b.n	8003410 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2201      	movs	r2, #1
 8003414:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2201      	movs	r2, #1
 800341c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2200      	movs	r2, #0
 8003424:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2200      	movs	r2, #0
 800342a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800342c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003430:	4618      	mov	r0, r3
 8003432:	3730      	adds	r7, #48	; 0x30
 8003434:	46bd      	mov	sp, r7
 8003436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800343a:	bf00      	nop
 800343c:	08004c54 	.word	0x08004c54
 8003440:	00f42400 	.word	0x00f42400

08003444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01a      	beq.n	800355a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003542:	d10a      	bne.n	800355a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  }
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af02      	add	r7, sp, #8
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003598:	f7fd fcbc 	bl	8000f14 <HAL_GetTick>
 800359c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d10e      	bne.n	80035ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f82f 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e025      	b.n	8003616 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d10e      	bne.n	80035f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f819 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e00f      	b.n	8003616 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b09c      	sub	sp, #112	; 0x70
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	4613      	mov	r3, r2
 800362c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362e:	e0a9      	b.n	8003784 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	f000 80a5 	beq.w	8003784 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363a:	f7fd fc6b 	bl	8000f14 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003646:	429a      	cmp	r2, r3
 8003648:	d302      	bcc.n	8003650 <UART_WaitOnFlagUntilTimeout+0x32>
 800364a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800364c:	2b00      	cmp	r3, #0
 800364e:	d140      	bne.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800365e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003660:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003664:	667b      	str	r3, [r7, #100]	; 0x64
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800366e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003670:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003674:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800367c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e6      	bne.n	8003650 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3308      	adds	r3, #8
 8003688:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	663b      	str	r3, [r7, #96]	; 0x60
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3308      	adds	r3, #8
 80036a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80036a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e5      	bne.n	8003682 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e069      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d051      	beq.n	8003784 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ee:	d149      	bne.n	8003784 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800370e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003718:	637b      	str	r3, [r7, #52]	; 0x34
 800371a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e6      	bne.n	80036fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3308      	adds	r3, #8
 8003732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	e853 3f00 	ldrex	r3, [r3]
 800373a:	613b      	str	r3, [r7, #16]
   return(result);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	66bb      	str	r3, [r7, #104]	; 0x68
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3308      	adds	r3, #8
 800374a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800374c:	623a      	str	r2, [r7, #32]
 800374e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	69f9      	ldr	r1, [r7, #28]
 8003752:	6a3a      	ldr	r2, [r7, #32]
 8003754:	e841 2300 	strex	r3, r2, [r1]
 8003758:	61bb      	str	r3, [r7, #24]
   return(result);
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e5      	bne.n	800372c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e010      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4013      	ands	r3, r2
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	429a      	cmp	r2, r3
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	429a      	cmp	r2, r3
 80037a0:	f43f af46 	beq.w	8003630 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3770      	adds	r7, #112	; 0x70
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e027      	b.n	8003814 <HAL_UARTEx_DisableFifoMode+0x66>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	; 0x24
 80037d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80037f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003834:	2302      	movs	r3, #2
 8003836:	e02d      	b.n	8003894 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2224      	movs	r2, #36	; 0x24
 8003844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0201 	bic.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f84f 	bl	8003918 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e02d      	b.n	8003910 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	; 0x24
 80038c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f811 	bl	8003918 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003924:	2b00      	cmp	r3, #0
 8003926:	d108      	bne.n	800393a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003938:	e031      	b.n	800399e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800393a:	2308      	movs	r3, #8
 800393c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800393e:	2308      	movs	r3, #8
 8003940:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	0e5b      	lsrs	r3, r3, #25
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	0f5b      	lsrs	r3, r3, #29
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003962:	7bbb      	ldrb	r3, [r7, #14]
 8003964:	7b3a      	ldrb	r2, [r7, #12]
 8003966:	4911      	ldr	r1, [pc, #68]	; (80039ac <UARTEx_SetNbDataToProcess+0x94>)
 8003968:	5c8a      	ldrb	r2, [r1, r2]
 800396a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800396e:	7b3a      	ldrb	r2, [r7, #12]
 8003970:	490f      	ldr	r1, [pc, #60]	; (80039b0 <UARTEx_SetNbDataToProcess+0x98>)
 8003972:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003974:	fb93 f3f2 	sdiv	r3, r3, r2
 8003978:	b29a      	uxth	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	7b7a      	ldrb	r2, [r7, #13]
 8003984:	4909      	ldr	r1, [pc, #36]	; (80039ac <UARTEx_SetNbDataToProcess+0x94>)
 8003986:	5c8a      	ldrb	r2, [r1, r2]
 8003988:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800398c:	7b7a      	ldrb	r2, [r7, #13]
 800398e:	4908      	ldr	r1, [pc, #32]	; (80039b0 <UARTEx_SetNbDataToProcess+0x98>)
 8003990:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003992:	fb93 f3f2 	sdiv	r3, r3, r2
 8003996:	b29a      	uxth	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	08004c6c 	.word	0x08004c6c
 80039b0:	08004c74 	.word	0x08004c74

080039b4 <__errno>:
 80039b4:	4b01      	ldr	r3, [pc, #4]	; (80039bc <__errno+0x8>)
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	2000000c 	.word	0x2000000c

080039c0 <__libc_init_array>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	4d0d      	ldr	r5, [pc, #52]	; (80039f8 <__libc_init_array+0x38>)
 80039c4:	4c0d      	ldr	r4, [pc, #52]	; (80039fc <__libc_init_array+0x3c>)
 80039c6:	1b64      	subs	r4, r4, r5
 80039c8:	10a4      	asrs	r4, r4, #2
 80039ca:	2600      	movs	r6, #0
 80039cc:	42a6      	cmp	r6, r4
 80039ce:	d109      	bne.n	80039e4 <__libc_init_array+0x24>
 80039d0:	4d0b      	ldr	r5, [pc, #44]	; (8003a00 <__libc_init_array+0x40>)
 80039d2:	4c0c      	ldr	r4, [pc, #48]	; (8003a04 <__libc_init_array+0x44>)
 80039d4:	f001 f8fa 	bl	8004bcc <_init>
 80039d8:	1b64      	subs	r4, r4, r5
 80039da:	10a4      	asrs	r4, r4, #2
 80039dc:	2600      	movs	r6, #0
 80039de:	42a6      	cmp	r6, r4
 80039e0:	d105      	bne.n	80039ee <__libc_init_array+0x2e>
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e8:	4798      	blx	r3
 80039ea:	3601      	adds	r6, #1
 80039ec:	e7ee      	b.n	80039cc <__libc_init_array+0xc>
 80039ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f2:	4798      	blx	r3
 80039f4:	3601      	adds	r6, #1
 80039f6:	e7f2      	b.n	80039de <__libc_init_array+0x1e>
 80039f8:	08004d1c 	.word	0x08004d1c
 80039fc:	08004d1c 	.word	0x08004d1c
 8003a00:	08004d1c 	.word	0x08004d1c
 8003a04:	08004d20 	.word	0x08004d20

08003a08 <memset>:
 8003a08:	4402      	add	r2, r0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d100      	bne.n	8003a12 <memset+0xa>
 8003a10:	4770      	bx	lr
 8003a12:	f803 1b01 	strb.w	r1, [r3], #1
 8003a16:	e7f9      	b.n	8003a0c <memset+0x4>

08003a18 <iprintf>:
 8003a18:	b40f      	push	{r0, r1, r2, r3}
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <iprintf+0x2c>)
 8003a1c:	b513      	push	{r0, r1, r4, lr}
 8003a1e:	681c      	ldr	r4, [r3, #0]
 8003a20:	b124      	cbz	r4, 8003a2c <iprintf+0x14>
 8003a22:	69a3      	ldr	r3, [r4, #24]
 8003a24:	b913      	cbnz	r3, 8003a2c <iprintf+0x14>
 8003a26:	4620      	mov	r0, r4
 8003a28:	f000 fb2c 	bl	8004084 <__sinit>
 8003a2c:	ab05      	add	r3, sp, #20
 8003a2e:	9a04      	ldr	r2, [sp, #16]
 8003a30:	68a1      	ldr	r1, [r4, #8]
 8003a32:	9301      	str	r3, [sp, #4]
 8003a34:	4620      	mov	r0, r4
 8003a36:	f000 fd3d 	bl	80044b4 <_vfiprintf_r>
 8003a3a:	b002      	add	sp, #8
 8003a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a40:	b004      	add	sp, #16
 8003a42:	4770      	bx	lr
 8003a44:	2000000c 	.word	0x2000000c

08003a48 <_puts_r>:
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	460e      	mov	r6, r1
 8003a4c:	4605      	mov	r5, r0
 8003a4e:	b118      	cbz	r0, 8003a58 <_puts_r+0x10>
 8003a50:	6983      	ldr	r3, [r0, #24]
 8003a52:	b90b      	cbnz	r3, 8003a58 <_puts_r+0x10>
 8003a54:	f000 fb16 	bl	8004084 <__sinit>
 8003a58:	69ab      	ldr	r3, [r5, #24]
 8003a5a:	68ac      	ldr	r4, [r5, #8]
 8003a5c:	b913      	cbnz	r3, 8003a64 <_puts_r+0x1c>
 8003a5e:	4628      	mov	r0, r5
 8003a60:	f000 fb10 	bl	8004084 <__sinit>
 8003a64:	4b2c      	ldr	r3, [pc, #176]	; (8003b18 <_puts_r+0xd0>)
 8003a66:	429c      	cmp	r4, r3
 8003a68:	d120      	bne.n	8003aac <_puts_r+0x64>
 8003a6a:	686c      	ldr	r4, [r5, #4]
 8003a6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a6e:	07db      	lsls	r3, r3, #31
 8003a70:	d405      	bmi.n	8003a7e <_puts_r+0x36>
 8003a72:	89a3      	ldrh	r3, [r4, #12]
 8003a74:	0598      	lsls	r0, r3, #22
 8003a76:	d402      	bmi.n	8003a7e <_puts_r+0x36>
 8003a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a7a:	f000 fba1 	bl	80041c0 <__retarget_lock_acquire_recursive>
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	0719      	lsls	r1, r3, #28
 8003a82:	d51d      	bpl.n	8003ac0 <_puts_r+0x78>
 8003a84:	6923      	ldr	r3, [r4, #16]
 8003a86:	b1db      	cbz	r3, 8003ac0 <_puts_r+0x78>
 8003a88:	3e01      	subs	r6, #1
 8003a8a:	68a3      	ldr	r3, [r4, #8]
 8003a8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a90:	3b01      	subs	r3, #1
 8003a92:	60a3      	str	r3, [r4, #8]
 8003a94:	bb39      	cbnz	r1, 8003ae6 <_puts_r+0x9e>
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	da38      	bge.n	8003b0c <_puts_r+0xc4>
 8003a9a:	4622      	mov	r2, r4
 8003a9c:	210a      	movs	r1, #10
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	f000 f916 	bl	8003cd0 <__swbuf_r>
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d011      	beq.n	8003acc <_puts_r+0x84>
 8003aa8:	250a      	movs	r5, #10
 8003aaa:	e011      	b.n	8003ad0 <_puts_r+0x88>
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <_puts_r+0xd4>)
 8003aae:	429c      	cmp	r4, r3
 8003ab0:	d101      	bne.n	8003ab6 <_puts_r+0x6e>
 8003ab2:	68ac      	ldr	r4, [r5, #8]
 8003ab4:	e7da      	b.n	8003a6c <_puts_r+0x24>
 8003ab6:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <_puts_r+0xd8>)
 8003ab8:	429c      	cmp	r4, r3
 8003aba:	bf08      	it	eq
 8003abc:	68ec      	ldreq	r4, [r5, #12]
 8003abe:	e7d5      	b.n	8003a6c <_puts_r+0x24>
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	f000 f956 	bl	8003d74 <__swsetup_r>
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	d0dd      	beq.n	8003a88 <_puts_r+0x40>
 8003acc:	f04f 35ff 	mov.w	r5, #4294967295
 8003ad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ad2:	07da      	lsls	r2, r3, #31
 8003ad4:	d405      	bmi.n	8003ae2 <_puts_r+0x9a>
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	059b      	lsls	r3, r3, #22
 8003ada:	d402      	bmi.n	8003ae2 <_puts_r+0x9a>
 8003adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ade:	f000 fb70 	bl	80041c2 <__retarget_lock_release_recursive>
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	bd70      	pop	{r4, r5, r6, pc}
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	da04      	bge.n	8003af4 <_puts_r+0xac>
 8003aea:	69a2      	ldr	r2, [r4, #24]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	dc06      	bgt.n	8003afe <_puts_r+0xb6>
 8003af0:	290a      	cmp	r1, #10
 8003af2:	d004      	beq.n	8003afe <_puts_r+0xb6>
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	6022      	str	r2, [r4, #0]
 8003afa:	7019      	strb	r1, [r3, #0]
 8003afc:	e7c5      	b.n	8003a8a <_puts_r+0x42>
 8003afe:	4622      	mov	r2, r4
 8003b00:	4628      	mov	r0, r5
 8003b02:	f000 f8e5 	bl	8003cd0 <__swbuf_r>
 8003b06:	3001      	adds	r0, #1
 8003b08:	d1bf      	bne.n	8003a8a <_puts_r+0x42>
 8003b0a:	e7df      	b.n	8003acc <_puts_r+0x84>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	250a      	movs	r5, #10
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	6022      	str	r2, [r4, #0]
 8003b14:	701d      	strb	r5, [r3, #0]
 8003b16:	e7db      	b.n	8003ad0 <_puts_r+0x88>
 8003b18:	08004ca0 	.word	0x08004ca0
 8003b1c:	08004cc0 	.word	0x08004cc0
 8003b20:	08004c80 	.word	0x08004c80

08003b24 <puts>:
 8003b24:	4b02      	ldr	r3, [pc, #8]	; (8003b30 <puts+0xc>)
 8003b26:	4601      	mov	r1, r0
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	f7ff bf8d 	b.w	8003a48 <_puts_r>
 8003b2e:	bf00      	nop
 8003b30:	2000000c 	.word	0x2000000c

08003b34 <setbuf>:
 8003b34:	2900      	cmp	r1, #0
 8003b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2202      	moveq	r2, #2
 8003b3e:	2200      	movne	r2, #0
 8003b40:	f000 b800 	b.w	8003b44 <setvbuf>

08003b44 <setvbuf>:
 8003b44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003b48:	461d      	mov	r5, r3
 8003b4a:	4b5d      	ldr	r3, [pc, #372]	; (8003cc0 <setvbuf+0x17c>)
 8003b4c:	681f      	ldr	r7, [r3, #0]
 8003b4e:	4604      	mov	r4, r0
 8003b50:	460e      	mov	r6, r1
 8003b52:	4690      	mov	r8, r2
 8003b54:	b127      	cbz	r7, 8003b60 <setvbuf+0x1c>
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	b913      	cbnz	r3, 8003b60 <setvbuf+0x1c>
 8003b5a:	4638      	mov	r0, r7
 8003b5c:	f000 fa92 	bl	8004084 <__sinit>
 8003b60:	4b58      	ldr	r3, [pc, #352]	; (8003cc4 <setvbuf+0x180>)
 8003b62:	429c      	cmp	r4, r3
 8003b64:	d167      	bne.n	8003c36 <setvbuf+0xf2>
 8003b66:	687c      	ldr	r4, [r7, #4]
 8003b68:	f1b8 0f02 	cmp.w	r8, #2
 8003b6c:	d006      	beq.n	8003b7c <setvbuf+0x38>
 8003b6e:	f1b8 0f01 	cmp.w	r8, #1
 8003b72:	f200 809f 	bhi.w	8003cb4 <setvbuf+0x170>
 8003b76:	2d00      	cmp	r5, #0
 8003b78:	f2c0 809c 	blt.w	8003cb4 <setvbuf+0x170>
 8003b7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b7e:	07db      	lsls	r3, r3, #31
 8003b80:	d405      	bmi.n	8003b8e <setvbuf+0x4a>
 8003b82:	89a3      	ldrh	r3, [r4, #12]
 8003b84:	0598      	lsls	r0, r3, #22
 8003b86:	d402      	bmi.n	8003b8e <setvbuf+0x4a>
 8003b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b8a:	f000 fb19 	bl	80041c0 <__retarget_lock_acquire_recursive>
 8003b8e:	4621      	mov	r1, r4
 8003b90:	4638      	mov	r0, r7
 8003b92:	f000 f9e3 	bl	8003f5c <_fflush_r>
 8003b96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b98:	b141      	cbz	r1, 8003bac <setvbuf+0x68>
 8003b9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b9e:	4299      	cmp	r1, r3
 8003ba0:	d002      	beq.n	8003ba8 <setvbuf+0x64>
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	f000 fb7c 	bl	80042a0 <_free_r>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	6363      	str	r3, [r4, #52]	; 0x34
 8003bac:	2300      	movs	r3, #0
 8003bae:	61a3      	str	r3, [r4, #24]
 8003bb0:	6063      	str	r3, [r4, #4]
 8003bb2:	89a3      	ldrh	r3, [r4, #12]
 8003bb4:	0619      	lsls	r1, r3, #24
 8003bb6:	d503      	bpl.n	8003bc0 <setvbuf+0x7c>
 8003bb8:	6921      	ldr	r1, [r4, #16]
 8003bba:	4638      	mov	r0, r7
 8003bbc:	f000 fb70 	bl	80042a0 <_free_r>
 8003bc0:	89a3      	ldrh	r3, [r4, #12]
 8003bc2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	f1b8 0f02 	cmp.w	r8, #2
 8003bce:	81a3      	strh	r3, [r4, #12]
 8003bd0:	d06c      	beq.n	8003cac <setvbuf+0x168>
 8003bd2:	ab01      	add	r3, sp, #4
 8003bd4:	466a      	mov	r2, sp
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	4638      	mov	r0, r7
 8003bda:	f000 faf3 	bl	80041c4 <__swhatbuf_r>
 8003bde:	89a3      	ldrh	r3, [r4, #12]
 8003be0:	4318      	orrs	r0, r3
 8003be2:	81a0      	strh	r0, [r4, #12]
 8003be4:	2d00      	cmp	r5, #0
 8003be6:	d130      	bne.n	8003c4a <setvbuf+0x106>
 8003be8:	9d00      	ldr	r5, [sp, #0]
 8003bea:	4628      	mov	r0, r5
 8003bec:	f000 fb50 	bl	8004290 <malloc>
 8003bf0:	4606      	mov	r6, r0
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d155      	bne.n	8003ca2 <setvbuf+0x15e>
 8003bf6:	f8dd 9000 	ldr.w	r9, [sp]
 8003bfa:	45a9      	cmp	r9, r5
 8003bfc:	d14a      	bne.n	8003c94 <setvbuf+0x150>
 8003bfe:	f04f 35ff 	mov.w	r5, #4294967295
 8003c02:	2200      	movs	r2, #0
 8003c04:	60a2      	str	r2, [r4, #8]
 8003c06:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003c0a:	6022      	str	r2, [r4, #0]
 8003c0c:	6122      	str	r2, [r4, #16]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c14:	6162      	str	r2, [r4, #20]
 8003c16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c18:	f043 0302 	orr.w	r3, r3, #2
 8003c1c:	07d2      	lsls	r2, r2, #31
 8003c1e:	81a3      	strh	r3, [r4, #12]
 8003c20:	d405      	bmi.n	8003c2e <setvbuf+0xea>
 8003c22:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003c26:	d102      	bne.n	8003c2e <setvbuf+0xea>
 8003c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c2a:	f000 faca 	bl	80041c2 <__retarget_lock_release_recursive>
 8003c2e:	4628      	mov	r0, r5
 8003c30:	b003      	add	sp, #12
 8003c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c36:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <setvbuf+0x184>)
 8003c38:	429c      	cmp	r4, r3
 8003c3a:	d101      	bne.n	8003c40 <setvbuf+0xfc>
 8003c3c:	68bc      	ldr	r4, [r7, #8]
 8003c3e:	e793      	b.n	8003b68 <setvbuf+0x24>
 8003c40:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <setvbuf+0x188>)
 8003c42:	429c      	cmp	r4, r3
 8003c44:	bf08      	it	eq
 8003c46:	68fc      	ldreq	r4, [r7, #12]
 8003c48:	e78e      	b.n	8003b68 <setvbuf+0x24>
 8003c4a:	2e00      	cmp	r6, #0
 8003c4c:	d0cd      	beq.n	8003bea <setvbuf+0xa6>
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	b913      	cbnz	r3, 8003c58 <setvbuf+0x114>
 8003c52:	4638      	mov	r0, r7
 8003c54:	f000 fa16 	bl	8004084 <__sinit>
 8003c58:	f1b8 0f01 	cmp.w	r8, #1
 8003c5c:	bf08      	it	eq
 8003c5e:	89a3      	ldrheq	r3, [r4, #12]
 8003c60:	6026      	str	r6, [r4, #0]
 8003c62:	bf04      	itt	eq
 8003c64:	f043 0301 	orreq.w	r3, r3, #1
 8003c68:	81a3      	strheq	r3, [r4, #12]
 8003c6a:	89a2      	ldrh	r2, [r4, #12]
 8003c6c:	f012 0308 	ands.w	r3, r2, #8
 8003c70:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003c74:	d01c      	beq.n	8003cb0 <setvbuf+0x16c>
 8003c76:	07d3      	lsls	r3, r2, #31
 8003c78:	bf41      	itttt	mi
 8003c7a:	2300      	movmi	r3, #0
 8003c7c:	426d      	negmi	r5, r5
 8003c7e:	60a3      	strmi	r3, [r4, #8]
 8003c80:	61a5      	strmi	r5, [r4, #24]
 8003c82:	bf58      	it	pl
 8003c84:	60a5      	strpl	r5, [r4, #8]
 8003c86:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003c88:	f015 0501 	ands.w	r5, r5, #1
 8003c8c:	d115      	bne.n	8003cba <setvbuf+0x176>
 8003c8e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003c92:	e7c8      	b.n	8003c26 <setvbuf+0xe2>
 8003c94:	4648      	mov	r0, r9
 8003c96:	f000 fafb 	bl	8004290 <malloc>
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	d0ae      	beq.n	8003bfe <setvbuf+0xba>
 8003ca0:	464d      	mov	r5, r9
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca8:	81a3      	strh	r3, [r4, #12]
 8003caa:	e7d0      	b.n	8003c4e <setvbuf+0x10a>
 8003cac:	2500      	movs	r5, #0
 8003cae:	e7a8      	b.n	8003c02 <setvbuf+0xbe>
 8003cb0:	60a3      	str	r3, [r4, #8]
 8003cb2:	e7e8      	b.n	8003c86 <setvbuf+0x142>
 8003cb4:	f04f 35ff 	mov.w	r5, #4294967295
 8003cb8:	e7b9      	b.n	8003c2e <setvbuf+0xea>
 8003cba:	2500      	movs	r5, #0
 8003cbc:	e7b7      	b.n	8003c2e <setvbuf+0xea>
 8003cbe:	bf00      	nop
 8003cc0:	2000000c 	.word	0x2000000c
 8003cc4:	08004ca0 	.word	0x08004ca0
 8003cc8:	08004cc0 	.word	0x08004cc0
 8003ccc:	08004c80 	.word	0x08004c80

08003cd0 <__swbuf_r>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	460e      	mov	r6, r1
 8003cd4:	4614      	mov	r4, r2
 8003cd6:	4605      	mov	r5, r0
 8003cd8:	b118      	cbz	r0, 8003ce2 <__swbuf_r+0x12>
 8003cda:	6983      	ldr	r3, [r0, #24]
 8003cdc:	b90b      	cbnz	r3, 8003ce2 <__swbuf_r+0x12>
 8003cde:	f000 f9d1 	bl	8004084 <__sinit>
 8003ce2:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <__swbuf_r+0x98>)
 8003ce4:	429c      	cmp	r4, r3
 8003ce6:	d12b      	bne.n	8003d40 <__swbuf_r+0x70>
 8003ce8:	686c      	ldr	r4, [r5, #4]
 8003cea:	69a3      	ldr	r3, [r4, #24]
 8003cec:	60a3      	str	r3, [r4, #8]
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	071a      	lsls	r2, r3, #28
 8003cf2:	d52f      	bpl.n	8003d54 <__swbuf_r+0x84>
 8003cf4:	6923      	ldr	r3, [r4, #16]
 8003cf6:	b36b      	cbz	r3, 8003d54 <__swbuf_r+0x84>
 8003cf8:	6923      	ldr	r3, [r4, #16]
 8003cfa:	6820      	ldr	r0, [r4, #0]
 8003cfc:	1ac0      	subs	r0, r0, r3
 8003cfe:	6963      	ldr	r3, [r4, #20]
 8003d00:	b2f6      	uxtb	r6, r6
 8003d02:	4283      	cmp	r3, r0
 8003d04:	4637      	mov	r7, r6
 8003d06:	dc04      	bgt.n	8003d12 <__swbuf_r+0x42>
 8003d08:	4621      	mov	r1, r4
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f000 f926 	bl	8003f5c <_fflush_r>
 8003d10:	bb30      	cbnz	r0, 8003d60 <__swbuf_r+0x90>
 8003d12:	68a3      	ldr	r3, [r4, #8]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	60a3      	str	r3, [r4, #8]
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	6022      	str	r2, [r4, #0]
 8003d1e:	701e      	strb	r6, [r3, #0]
 8003d20:	6963      	ldr	r3, [r4, #20]
 8003d22:	3001      	adds	r0, #1
 8003d24:	4283      	cmp	r3, r0
 8003d26:	d004      	beq.n	8003d32 <__swbuf_r+0x62>
 8003d28:	89a3      	ldrh	r3, [r4, #12]
 8003d2a:	07db      	lsls	r3, r3, #31
 8003d2c:	d506      	bpl.n	8003d3c <__swbuf_r+0x6c>
 8003d2e:	2e0a      	cmp	r6, #10
 8003d30:	d104      	bne.n	8003d3c <__swbuf_r+0x6c>
 8003d32:	4621      	mov	r1, r4
 8003d34:	4628      	mov	r0, r5
 8003d36:	f000 f911 	bl	8003f5c <_fflush_r>
 8003d3a:	b988      	cbnz	r0, 8003d60 <__swbuf_r+0x90>
 8003d3c:	4638      	mov	r0, r7
 8003d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <__swbuf_r+0x9c>)
 8003d42:	429c      	cmp	r4, r3
 8003d44:	d101      	bne.n	8003d4a <__swbuf_r+0x7a>
 8003d46:	68ac      	ldr	r4, [r5, #8]
 8003d48:	e7cf      	b.n	8003cea <__swbuf_r+0x1a>
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <__swbuf_r+0xa0>)
 8003d4c:	429c      	cmp	r4, r3
 8003d4e:	bf08      	it	eq
 8003d50:	68ec      	ldreq	r4, [r5, #12]
 8003d52:	e7ca      	b.n	8003cea <__swbuf_r+0x1a>
 8003d54:	4621      	mov	r1, r4
 8003d56:	4628      	mov	r0, r5
 8003d58:	f000 f80c 	bl	8003d74 <__swsetup_r>
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d0cb      	beq.n	8003cf8 <__swbuf_r+0x28>
 8003d60:	f04f 37ff 	mov.w	r7, #4294967295
 8003d64:	e7ea      	b.n	8003d3c <__swbuf_r+0x6c>
 8003d66:	bf00      	nop
 8003d68:	08004ca0 	.word	0x08004ca0
 8003d6c:	08004cc0 	.word	0x08004cc0
 8003d70:	08004c80 	.word	0x08004c80

08003d74 <__swsetup_r>:
 8003d74:	4b32      	ldr	r3, [pc, #200]	; (8003e40 <__swsetup_r+0xcc>)
 8003d76:	b570      	push	{r4, r5, r6, lr}
 8003d78:	681d      	ldr	r5, [r3, #0]
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	b125      	cbz	r5, 8003d8a <__swsetup_r+0x16>
 8003d80:	69ab      	ldr	r3, [r5, #24]
 8003d82:	b913      	cbnz	r3, 8003d8a <__swsetup_r+0x16>
 8003d84:	4628      	mov	r0, r5
 8003d86:	f000 f97d 	bl	8004084 <__sinit>
 8003d8a:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <__swsetup_r+0xd0>)
 8003d8c:	429c      	cmp	r4, r3
 8003d8e:	d10f      	bne.n	8003db0 <__swsetup_r+0x3c>
 8003d90:	686c      	ldr	r4, [r5, #4]
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d98:	0719      	lsls	r1, r3, #28
 8003d9a:	d42c      	bmi.n	8003df6 <__swsetup_r+0x82>
 8003d9c:	06dd      	lsls	r5, r3, #27
 8003d9e:	d411      	bmi.n	8003dc4 <__swsetup_r+0x50>
 8003da0:	2309      	movs	r3, #9
 8003da2:	6033      	str	r3, [r6, #0]
 8003da4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003da8:	81a3      	strh	r3, [r4, #12]
 8003daa:	f04f 30ff 	mov.w	r0, #4294967295
 8003dae:	e03e      	b.n	8003e2e <__swsetup_r+0xba>
 8003db0:	4b25      	ldr	r3, [pc, #148]	; (8003e48 <__swsetup_r+0xd4>)
 8003db2:	429c      	cmp	r4, r3
 8003db4:	d101      	bne.n	8003dba <__swsetup_r+0x46>
 8003db6:	68ac      	ldr	r4, [r5, #8]
 8003db8:	e7eb      	b.n	8003d92 <__swsetup_r+0x1e>
 8003dba:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <__swsetup_r+0xd8>)
 8003dbc:	429c      	cmp	r4, r3
 8003dbe:	bf08      	it	eq
 8003dc0:	68ec      	ldreq	r4, [r5, #12]
 8003dc2:	e7e6      	b.n	8003d92 <__swsetup_r+0x1e>
 8003dc4:	0758      	lsls	r0, r3, #29
 8003dc6:	d512      	bpl.n	8003dee <__swsetup_r+0x7a>
 8003dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dca:	b141      	cbz	r1, 8003dde <__swsetup_r+0x6a>
 8003dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dd0:	4299      	cmp	r1, r3
 8003dd2:	d002      	beq.n	8003dda <__swsetup_r+0x66>
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f000 fa63 	bl	80042a0 <_free_r>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	6363      	str	r3, [r4, #52]	; 0x34
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003de4:	81a3      	strh	r3, [r4, #12]
 8003de6:	2300      	movs	r3, #0
 8003de8:	6063      	str	r3, [r4, #4]
 8003dea:	6923      	ldr	r3, [r4, #16]
 8003dec:	6023      	str	r3, [r4, #0]
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	f043 0308 	orr.w	r3, r3, #8
 8003df4:	81a3      	strh	r3, [r4, #12]
 8003df6:	6923      	ldr	r3, [r4, #16]
 8003df8:	b94b      	cbnz	r3, 8003e0e <__swsetup_r+0x9a>
 8003dfa:	89a3      	ldrh	r3, [r4, #12]
 8003dfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e04:	d003      	beq.n	8003e0e <__swsetup_r+0x9a>
 8003e06:	4621      	mov	r1, r4
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f000 fa01 	bl	8004210 <__smakebuf_r>
 8003e0e:	89a0      	ldrh	r0, [r4, #12]
 8003e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e14:	f010 0301 	ands.w	r3, r0, #1
 8003e18:	d00a      	beq.n	8003e30 <__swsetup_r+0xbc>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60a3      	str	r3, [r4, #8]
 8003e1e:	6963      	ldr	r3, [r4, #20]
 8003e20:	425b      	negs	r3, r3
 8003e22:	61a3      	str	r3, [r4, #24]
 8003e24:	6923      	ldr	r3, [r4, #16]
 8003e26:	b943      	cbnz	r3, 8003e3a <__swsetup_r+0xc6>
 8003e28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e2c:	d1ba      	bne.n	8003da4 <__swsetup_r+0x30>
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	0781      	lsls	r1, r0, #30
 8003e32:	bf58      	it	pl
 8003e34:	6963      	ldrpl	r3, [r4, #20]
 8003e36:	60a3      	str	r3, [r4, #8]
 8003e38:	e7f4      	b.n	8003e24 <__swsetup_r+0xb0>
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	e7f7      	b.n	8003e2e <__swsetup_r+0xba>
 8003e3e:	bf00      	nop
 8003e40:	2000000c 	.word	0x2000000c
 8003e44:	08004ca0 	.word	0x08004ca0
 8003e48:	08004cc0 	.word	0x08004cc0
 8003e4c:	08004c80 	.word	0x08004c80

08003e50 <__sflush_r>:
 8003e50:	898a      	ldrh	r2, [r1, #12]
 8003e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e56:	4605      	mov	r5, r0
 8003e58:	0710      	lsls	r0, r2, #28
 8003e5a:	460c      	mov	r4, r1
 8003e5c:	d458      	bmi.n	8003f10 <__sflush_r+0xc0>
 8003e5e:	684b      	ldr	r3, [r1, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	dc05      	bgt.n	8003e70 <__sflush_r+0x20>
 8003e64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	dc02      	bgt.n	8003e70 <__sflush_r+0x20>
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e72:	2e00      	cmp	r6, #0
 8003e74:	d0f9      	beq.n	8003e6a <__sflush_r+0x1a>
 8003e76:	2300      	movs	r3, #0
 8003e78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e7c:	682f      	ldr	r7, [r5, #0]
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	d032      	beq.n	8003ee8 <__sflush_r+0x98>
 8003e82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e84:	89a3      	ldrh	r3, [r4, #12]
 8003e86:	075a      	lsls	r2, r3, #29
 8003e88:	d505      	bpl.n	8003e96 <__sflush_r+0x46>
 8003e8a:	6863      	ldr	r3, [r4, #4]
 8003e8c:	1ac0      	subs	r0, r0, r3
 8003e8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e90:	b10b      	cbz	r3, 8003e96 <__sflush_r+0x46>
 8003e92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e94:	1ac0      	subs	r0, r0, r3
 8003e96:	2300      	movs	r3, #0
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e9c:	6a21      	ldr	r1, [r4, #32]
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	47b0      	blx	r6
 8003ea2:	1c43      	adds	r3, r0, #1
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	d106      	bne.n	8003eb6 <__sflush_r+0x66>
 8003ea8:	6829      	ldr	r1, [r5, #0]
 8003eaa:	291d      	cmp	r1, #29
 8003eac:	d82c      	bhi.n	8003f08 <__sflush_r+0xb8>
 8003eae:	4a2a      	ldr	r2, [pc, #168]	; (8003f58 <__sflush_r+0x108>)
 8003eb0:	40ca      	lsrs	r2, r1
 8003eb2:	07d6      	lsls	r6, r2, #31
 8003eb4:	d528      	bpl.n	8003f08 <__sflush_r+0xb8>
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	6062      	str	r2, [r4, #4]
 8003eba:	04d9      	lsls	r1, r3, #19
 8003ebc:	6922      	ldr	r2, [r4, #16]
 8003ebe:	6022      	str	r2, [r4, #0]
 8003ec0:	d504      	bpl.n	8003ecc <__sflush_r+0x7c>
 8003ec2:	1c42      	adds	r2, r0, #1
 8003ec4:	d101      	bne.n	8003eca <__sflush_r+0x7a>
 8003ec6:	682b      	ldr	r3, [r5, #0]
 8003ec8:	b903      	cbnz	r3, 8003ecc <__sflush_r+0x7c>
 8003eca:	6560      	str	r0, [r4, #84]	; 0x54
 8003ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ece:	602f      	str	r7, [r5, #0]
 8003ed0:	2900      	cmp	r1, #0
 8003ed2:	d0ca      	beq.n	8003e6a <__sflush_r+0x1a>
 8003ed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ed8:	4299      	cmp	r1, r3
 8003eda:	d002      	beq.n	8003ee2 <__sflush_r+0x92>
 8003edc:	4628      	mov	r0, r5
 8003ede:	f000 f9df 	bl	80042a0 <_free_r>
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	6360      	str	r0, [r4, #52]	; 0x34
 8003ee6:	e7c1      	b.n	8003e6c <__sflush_r+0x1c>
 8003ee8:	6a21      	ldr	r1, [r4, #32]
 8003eea:	2301      	movs	r3, #1
 8003eec:	4628      	mov	r0, r5
 8003eee:	47b0      	blx	r6
 8003ef0:	1c41      	adds	r1, r0, #1
 8003ef2:	d1c7      	bne.n	8003e84 <__sflush_r+0x34>
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0c4      	beq.n	8003e84 <__sflush_r+0x34>
 8003efa:	2b1d      	cmp	r3, #29
 8003efc:	d001      	beq.n	8003f02 <__sflush_r+0xb2>
 8003efe:	2b16      	cmp	r3, #22
 8003f00:	d101      	bne.n	8003f06 <__sflush_r+0xb6>
 8003f02:	602f      	str	r7, [r5, #0]
 8003f04:	e7b1      	b.n	8003e6a <__sflush_r+0x1a>
 8003f06:	89a3      	ldrh	r3, [r4, #12]
 8003f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f0c:	81a3      	strh	r3, [r4, #12]
 8003f0e:	e7ad      	b.n	8003e6c <__sflush_r+0x1c>
 8003f10:	690f      	ldr	r7, [r1, #16]
 8003f12:	2f00      	cmp	r7, #0
 8003f14:	d0a9      	beq.n	8003e6a <__sflush_r+0x1a>
 8003f16:	0793      	lsls	r3, r2, #30
 8003f18:	680e      	ldr	r6, [r1, #0]
 8003f1a:	bf08      	it	eq
 8003f1c:	694b      	ldreq	r3, [r1, #20]
 8003f1e:	600f      	str	r7, [r1, #0]
 8003f20:	bf18      	it	ne
 8003f22:	2300      	movne	r3, #0
 8003f24:	eba6 0807 	sub.w	r8, r6, r7
 8003f28:	608b      	str	r3, [r1, #8]
 8003f2a:	f1b8 0f00 	cmp.w	r8, #0
 8003f2e:	dd9c      	ble.n	8003e6a <__sflush_r+0x1a>
 8003f30:	6a21      	ldr	r1, [r4, #32]
 8003f32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f34:	4643      	mov	r3, r8
 8003f36:	463a      	mov	r2, r7
 8003f38:	4628      	mov	r0, r5
 8003f3a:	47b0      	blx	r6
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	dc06      	bgt.n	8003f4e <__sflush_r+0xfe>
 8003f40:	89a3      	ldrh	r3, [r4, #12]
 8003f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f46:	81a3      	strh	r3, [r4, #12]
 8003f48:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4c:	e78e      	b.n	8003e6c <__sflush_r+0x1c>
 8003f4e:	4407      	add	r7, r0
 8003f50:	eba8 0800 	sub.w	r8, r8, r0
 8003f54:	e7e9      	b.n	8003f2a <__sflush_r+0xda>
 8003f56:	bf00      	nop
 8003f58:	20400001 	.word	0x20400001

08003f5c <_fflush_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	690b      	ldr	r3, [r1, #16]
 8003f60:	4605      	mov	r5, r0
 8003f62:	460c      	mov	r4, r1
 8003f64:	b913      	cbnz	r3, 8003f6c <_fflush_r+0x10>
 8003f66:	2500      	movs	r5, #0
 8003f68:	4628      	mov	r0, r5
 8003f6a:	bd38      	pop	{r3, r4, r5, pc}
 8003f6c:	b118      	cbz	r0, 8003f76 <_fflush_r+0x1a>
 8003f6e:	6983      	ldr	r3, [r0, #24]
 8003f70:	b90b      	cbnz	r3, 8003f76 <_fflush_r+0x1a>
 8003f72:	f000 f887 	bl	8004084 <__sinit>
 8003f76:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <_fflush_r+0x6c>)
 8003f78:	429c      	cmp	r4, r3
 8003f7a:	d11b      	bne.n	8003fb4 <_fflush_r+0x58>
 8003f7c:	686c      	ldr	r4, [r5, #4]
 8003f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0ef      	beq.n	8003f66 <_fflush_r+0xa>
 8003f86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f88:	07d0      	lsls	r0, r2, #31
 8003f8a:	d404      	bmi.n	8003f96 <_fflush_r+0x3a>
 8003f8c:	0599      	lsls	r1, r3, #22
 8003f8e:	d402      	bmi.n	8003f96 <_fflush_r+0x3a>
 8003f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f92:	f000 f915 	bl	80041c0 <__retarget_lock_acquire_recursive>
 8003f96:	4628      	mov	r0, r5
 8003f98:	4621      	mov	r1, r4
 8003f9a:	f7ff ff59 	bl	8003e50 <__sflush_r>
 8003f9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fa0:	07da      	lsls	r2, r3, #31
 8003fa2:	4605      	mov	r5, r0
 8003fa4:	d4e0      	bmi.n	8003f68 <_fflush_r+0xc>
 8003fa6:	89a3      	ldrh	r3, [r4, #12]
 8003fa8:	059b      	lsls	r3, r3, #22
 8003faa:	d4dd      	bmi.n	8003f68 <_fflush_r+0xc>
 8003fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fae:	f000 f908 	bl	80041c2 <__retarget_lock_release_recursive>
 8003fb2:	e7d9      	b.n	8003f68 <_fflush_r+0xc>
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <_fflush_r+0x70>)
 8003fb6:	429c      	cmp	r4, r3
 8003fb8:	d101      	bne.n	8003fbe <_fflush_r+0x62>
 8003fba:	68ac      	ldr	r4, [r5, #8]
 8003fbc:	e7df      	b.n	8003f7e <_fflush_r+0x22>
 8003fbe:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <_fflush_r+0x74>)
 8003fc0:	429c      	cmp	r4, r3
 8003fc2:	bf08      	it	eq
 8003fc4:	68ec      	ldreq	r4, [r5, #12]
 8003fc6:	e7da      	b.n	8003f7e <_fflush_r+0x22>
 8003fc8:	08004ca0 	.word	0x08004ca0
 8003fcc:	08004cc0 	.word	0x08004cc0
 8003fd0:	08004c80 	.word	0x08004c80

08003fd4 <std>:
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	b510      	push	{r4, lr}
 8003fd8:	4604      	mov	r4, r0
 8003fda:	e9c0 3300 	strd	r3, r3, [r0]
 8003fde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fe2:	6083      	str	r3, [r0, #8]
 8003fe4:	8181      	strh	r1, [r0, #12]
 8003fe6:	6643      	str	r3, [r0, #100]	; 0x64
 8003fe8:	81c2      	strh	r2, [r0, #14]
 8003fea:	6183      	str	r3, [r0, #24]
 8003fec:	4619      	mov	r1, r3
 8003fee:	2208      	movs	r2, #8
 8003ff0:	305c      	adds	r0, #92	; 0x5c
 8003ff2:	f7ff fd09 	bl	8003a08 <memset>
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <std+0x38>)
 8003ff8:	6263      	str	r3, [r4, #36]	; 0x24
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <std+0x3c>)
 8003ffc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ffe:	4b05      	ldr	r3, [pc, #20]	; (8004014 <std+0x40>)
 8004000:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <std+0x44>)
 8004004:	6224      	str	r4, [r4, #32]
 8004006:	6323      	str	r3, [r4, #48]	; 0x30
 8004008:	bd10      	pop	{r4, pc}
 800400a:	bf00      	nop
 800400c:	08004a5d 	.word	0x08004a5d
 8004010:	08004a7f 	.word	0x08004a7f
 8004014:	08004ab7 	.word	0x08004ab7
 8004018:	08004adb 	.word	0x08004adb

0800401c <_cleanup_r>:
 800401c:	4901      	ldr	r1, [pc, #4]	; (8004024 <_cleanup_r+0x8>)
 800401e:	f000 b8af 	b.w	8004180 <_fwalk_reent>
 8004022:	bf00      	nop
 8004024:	08003f5d 	.word	0x08003f5d

08004028 <__sfmoreglue>:
 8004028:	b570      	push	{r4, r5, r6, lr}
 800402a:	2268      	movs	r2, #104	; 0x68
 800402c:	1e4d      	subs	r5, r1, #1
 800402e:	4355      	muls	r5, r2
 8004030:	460e      	mov	r6, r1
 8004032:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004036:	f000 f99f 	bl	8004378 <_malloc_r>
 800403a:	4604      	mov	r4, r0
 800403c:	b140      	cbz	r0, 8004050 <__sfmoreglue+0x28>
 800403e:	2100      	movs	r1, #0
 8004040:	e9c0 1600 	strd	r1, r6, [r0]
 8004044:	300c      	adds	r0, #12
 8004046:	60a0      	str	r0, [r4, #8]
 8004048:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800404c:	f7ff fcdc 	bl	8003a08 <memset>
 8004050:	4620      	mov	r0, r4
 8004052:	bd70      	pop	{r4, r5, r6, pc}

08004054 <__sfp_lock_acquire>:
 8004054:	4801      	ldr	r0, [pc, #4]	; (800405c <__sfp_lock_acquire+0x8>)
 8004056:	f000 b8b3 	b.w	80041c0 <__retarget_lock_acquire_recursive>
 800405a:	bf00      	nop
 800405c:	200001ad 	.word	0x200001ad

08004060 <__sfp_lock_release>:
 8004060:	4801      	ldr	r0, [pc, #4]	; (8004068 <__sfp_lock_release+0x8>)
 8004062:	f000 b8ae 	b.w	80041c2 <__retarget_lock_release_recursive>
 8004066:	bf00      	nop
 8004068:	200001ad 	.word	0x200001ad

0800406c <__sinit_lock_acquire>:
 800406c:	4801      	ldr	r0, [pc, #4]	; (8004074 <__sinit_lock_acquire+0x8>)
 800406e:	f000 b8a7 	b.w	80041c0 <__retarget_lock_acquire_recursive>
 8004072:	bf00      	nop
 8004074:	200001ae 	.word	0x200001ae

08004078 <__sinit_lock_release>:
 8004078:	4801      	ldr	r0, [pc, #4]	; (8004080 <__sinit_lock_release+0x8>)
 800407a:	f000 b8a2 	b.w	80041c2 <__retarget_lock_release_recursive>
 800407e:	bf00      	nop
 8004080:	200001ae 	.word	0x200001ae

08004084 <__sinit>:
 8004084:	b510      	push	{r4, lr}
 8004086:	4604      	mov	r4, r0
 8004088:	f7ff fff0 	bl	800406c <__sinit_lock_acquire>
 800408c:	69a3      	ldr	r3, [r4, #24]
 800408e:	b11b      	cbz	r3, 8004098 <__sinit+0x14>
 8004090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004094:	f7ff bff0 	b.w	8004078 <__sinit_lock_release>
 8004098:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800409c:	6523      	str	r3, [r4, #80]	; 0x50
 800409e:	4b13      	ldr	r3, [pc, #76]	; (80040ec <__sinit+0x68>)
 80040a0:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <__sinit+0x6c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80040a6:	42a3      	cmp	r3, r4
 80040a8:	bf04      	itt	eq
 80040aa:	2301      	moveq	r3, #1
 80040ac:	61a3      	streq	r3, [r4, #24]
 80040ae:	4620      	mov	r0, r4
 80040b0:	f000 f820 	bl	80040f4 <__sfp>
 80040b4:	6060      	str	r0, [r4, #4]
 80040b6:	4620      	mov	r0, r4
 80040b8:	f000 f81c 	bl	80040f4 <__sfp>
 80040bc:	60a0      	str	r0, [r4, #8]
 80040be:	4620      	mov	r0, r4
 80040c0:	f000 f818 	bl	80040f4 <__sfp>
 80040c4:	2200      	movs	r2, #0
 80040c6:	60e0      	str	r0, [r4, #12]
 80040c8:	2104      	movs	r1, #4
 80040ca:	6860      	ldr	r0, [r4, #4]
 80040cc:	f7ff ff82 	bl	8003fd4 <std>
 80040d0:	68a0      	ldr	r0, [r4, #8]
 80040d2:	2201      	movs	r2, #1
 80040d4:	2109      	movs	r1, #9
 80040d6:	f7ff ff7d 	bl	8003fd4 <std>
 80040da:	68e0      	ldr	r0, [r4, #12]
 80040dc:	2202      	movs	r2, #2
 80040de:	2112      	movs	r1, #18
 80040e0:	f7ff ff78 	bl	8003fd4 <std>
 80040e4:	2301      	movs	r3, #1
 80040e6:	61a3      	str	r3, [r4, #24]
 80040e8:	e7d2      	b.n	8004090 <__sinit+0xc>
 80040ea:	bf00      	nop
 80040ec:	08004c7c 	.word	0x08004c7c
 80040f0:	0800401d 	.word	0x0800401d

080040f4 <__sfp>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	4607      	mov	r7, r0
 80040f8:	f7ff ffac 	bl	8004054 <__sfp_lock_acquire>
 80040fc:	4b1e      	ldr	r3, [pc, #120]	; (8004178 <__sfp+0x84>)
 80040fe:	681e      	ldr	r6, [r3, #0]
 8004100:	69b3      	ldr	r3, [r6, #24]
 8004102:	b913      	cbnz	r3, 800410a <__sfp+0x16>
 8004104:	4630      	mov	r0, r6
 8004106:	f7ff ffbd 	bl	8004084 <__sinit>
 800410a:	3648      	adds	r6, #72	; 0x48
 800410c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004110:	3b01      	subs	r3, #1
 8004112:	d503      	bpl.n	800411c <__sfp+0x28>
 8004114:	6833      	ldr	r3, [r6, #0]
 8004116:	b30b      	cbz	r3, 800415c <__sfp+0x68>
 8004118:	6836      	ldr	r6, [r6, #0]
 800411a:	e7f7      	b.n	800410c <__sfp+0x18>
 800411c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004120:	b9d5      	cbnz	r5, 8004158 <__sfp+0x64>
 8004122:	4b16      	ldr	r3, [pc, #88]	; (800417c <__sfp+0x88>)
 8004124:	60e3      	str	r3, [r4, #12]
 8004126:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800412a:	6665      	str	r5, [r4, #100]	; 0x64
 800412c:	f000 f847 	bl	80041be <__retarget_lock_init_recursive>
 8004130:	f7ff ff96 	bl	8004060 <__sfp_lock_release>
 8004134:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004138:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800413c:	6025      	str	r5, [r4, #0]
 800413e:	61a5      	str	r5, [r4, #24]
 8004140:	2208      	movs	r2, #8
 8004142:	4629      	mov	r1, r5
 8004144:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004148:	f7ff fc5e 	bl	8003a08 <memset>
 800414c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004150:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004154:	4620      	mov	r0, r4
 8004156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004158:	3468      	adds	r4, #104	; 0x68
 800415a:	e7d9      	b.n	8004110 <__sfp+0x1c>
 800415c:	2104      	movs	r1, #4
 800415e:	4638      	mov	r0, r7
 8004160:	f7ff ff62 	bl	8004028 <__sfmoreglue>
 8004164:	4604      	mov	r4, r0
 8004166:	6030      	str	r0, [r6, #0]
 8004168:	2800      	cmp	r0, #0
 800416a:	d1d5      	bne.n	8004118 <__sfp+0x24>
 800416c:	f7ff ff78 	bl	8004060 <__sfp_lock_release>
 8004170:	230c      	movs	r3, #12
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	e7ee      	b.n	8004154 <__sfp+0x60>
 8004176:	bf00      	nop
 8004178:	08004c7c 	.word	0x08004c7c
 800417c:	ffff0001 	.word	0xffff0001

08004180 <_fwalk_reent>:
 8004180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004184:	4606      	mov	r6, r0
 8004186:	4688      	mov	r8, r1
 8004188:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800418c:	2700      	movs	r7, #0
 800418e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004192:	f1b9 0901 	subs.w	r9, r9, #1
 8004196:	d505      	bpl.n	80041a4 <_fwalk_reent+0x24>
 8004198:	6824      	ldr	r4, [r4, #0]
 800419a:	2c00      	cmp	r4, #0
 800419c:	d1f7      	bne.n	800418e <_fwalk_reent+0xe>
 800419e:	4638      	mov	r0, r7
 80041a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041a4:	89ab      	ldrh	r3, [r5, #12]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d907      	bls.n	80041ba <_fwalk_reent+0x3a>
 80041aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041ae:	3301      	adds	r3, #1
 80041b0:	d003      	beq.n	80041ba <_fwalk_reent+0x3a>
 80041b2:	4629      	mov	r1, r5
 80041b4:	4630      	mov	r0, r6
 80041b6:	47c0      	blx	r8
 80041b8:	4307      	orrs	r7, r0
 80041ba:	3568      	adds	r5, #104	; 0x68
 80041bc:	e7e9      	b.n	8004192 <_fwalk_reent+0x12>

080041be <__retarget_lock_init_recursive>:
 80041be:	4770      	bx	lr

080041c0 <__retarget_lock_acquire_recursive>:
 80041c0:	4770      	bx	lr

080041c2 <__retarget_lock_release_recursive>:
 80041c2:	4770      	bx	lr

080041c4 <__swhatbuf_r>:
 80041c4:	b570      	push	{r4, r5, r6, lr}
 80041c6:	460e      	mov	r6, r1
 80041c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041cc:	2900      	cmp	r1, #0
 80041ce:	b096      	sub	sp, #88	; 0x58
 80041d0:	4614      	mov	r4, r2
 80041d2:	461d      	mov	r5, r3
 80041d4:	da08      	bge.n	80041e8 <__swhatbuf_r+0x24>
 80041d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	602a      	str	r2, [r5, #0]
 80041de:	061a      	lsls	r2, r3, #24
 80041e0:	d410      	bmi.n	8004204 <__swhatbuf_r+0x40>
 80041e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041e6:	e00e      	b.n	8004206 <__swhatbuf_r+0x42>
 80041e8:	466a      	mov	r2, sp
 80041ea:	f000 fc9d 	bl	8004b28 <_fstat_r>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	dbf1      	blt.n	80041d6 <__swhatbuf_r+0x12>
 80041f2:	9a01      	ldr	r2, [sp, #4]
 80041f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80041f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80041fc:	425a      	negs	r2, r3
 80041fe:	415a      	adcs	r2, r3
 8004200:	602a      	str	r2, [r5, #0]
 8004202:	e7ee      	b.n	80041e2 <__swhatbuf_r+0x1e>
 8004204:	2340      	movs	r3, #64	; 0x40
 8004206:	2000      	movs	r0, #0
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	b016      	add	sp, #88	; 0x58
 800420c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004210 <__smakebuf_r>:
 8004210:	898b      	ldrh	r3, [r1, #12]
 8004212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004214:	079d      	lsls	r5, r3, #30
 8004216:	4606      	mov	r6, r0
 8004218:	460c      	mov	r4, r1
 800421a:	d507      	bpl.n	800422c <__smakebuf_r+0x1c>
 800421c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	6123      	str	r3, [r4, #16]
 8004224:	2301      	movs	r3, #1
 8004226:	6163      	str	r3, [r4, #20]
 8004228:	b002      	add	sp, #8
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	ab01      	add	r3, sp, #4
 800422e:	466a      	mov	r2, sp
 8004230:	f7ff ffc8 	bl	80041c4 <__swhatbuf_r>
 8004234:	9900      	ldr	r1, [sp, #0]
 8004236:	4605      	mov	r5, r0
 8004238:	4630      	mov	r0, r6
 800423a:	f000 f89d 	bl	8004378 <_malloc_r>
 800423e:	b948      	cbnz	r0, 8004254 <__smakebuf_r+0x44>
 8004240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004244:	059a      	lsls	r2, r3, #22
 8004246:	d4ef      	bmi.n	8004228 <__smakebuf_r+0x18>
 8004248:	f023 0303 	bic.w	r3, r3, #3
 800424c:	f043 0302 	orr.w	r3, r3, #2
 8004250:	81a3      	strh	r3, [r4, #12]
 8004252:	e7e3      	b.n	800421c <__smakebuf_r+0xc>
 8004254:	4b0d      	ldr	r3, [pc, #52]	; (800428c <__smakebuf_r+0x7c>)
 8004256:	62b3      	str	r3, [r6, #40]	; 0x28
 8004258:	89a3      	ldrh	r3, [r4, #12]
 800425a:	6020      	str	r0, [r4, #0]
 800425c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004260:	81a3      	strh	r3, [r4, #12]
 8004262:	9b00      	ldr	r3, [sp, #0]
 8004264:	6163      	str	r3, [r4, #20]
 8004266:	9b01      	ldr	r3, [sp, #4]
 8004268:	6120      	str	r0, [r4, #16]
 800426a:	b15b      	cbz	r3, 8004284 <__smakebuf_r+0x74>
 800426c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004270:	4630      	mov	r0, r6
 8004272:	f000 fc6b 	bl	8004b4c <_isatty_r>
 8004276:	b128      	cbz	r0, 8004284 <__smakebuf_r+0x74>
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	81a3      	strh	r3, [r4, #12]
 8004284:	89a0      	ldrh	r0, [r4, #12]
 8004286:	4305      	orrs	r5, r0
 8004288:	81a5      	strh	r5, [r4, #12]
 800428a:	e7cd      	b.n	8004228 <__smakebuf_r+0x18>
 800428c:	0800401d 	.word	0x0800401d

08004290 <malloc>:
 8004290:	4b02      	ldr	r3, [pc, #8]	; (800429c <malloc+0xc>)
 8004292:	4601      	mov	r1, r0
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	f000 b86f 	b.w	8004378 <_malloc_r>
 800429a:	bf00      	nop
 800429c:	2000000c 	.word	0x2000000c

080042a0 <_free_r>:
 80042a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042a2:	2900      	cmp	r1, #0
 80042a4:	d044      	beq.n	8004330 <_free_r+0x90>
 80042a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042aa:	9001      	str	r0, [sp, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f1a1 0404 	sub.w	r4, r1, #4
 80042b2:	bfb8      	it	lt
 80042b4:	18e4      	addlt	r4, r4, r3
 80042b6:	f000 fc6b 	bl	8004b90 <__malloc_lock>
 80042ba:	4a1e      	ldr	r2, [pc, #120]	; (8004334 <_free_r+0x94>)
 80042bc:	9801      	ldr	r0, [sp, #4]
 80042be:	6813      	ldr	r3, [r2, #0]
 80042c0:	b933      	cbnz	r3, 80042d0 <_free_r+0x30>
 80042c2:	6063      	str	r3, [r4, #4]
 80042c4:	6014      	str	r4, [r2, #0]
 80042c6:	b003      	add	sp, #12
 80042c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042cc:	f000 bc66 	b.w	8004b9c <__malloc_unlock>
 80042d0:	42a3      	cmp	r3, r4
 80042d2:	d908      	bls.n	80042e6 <_free_r+0x46>
 80042d4:	6825      	ldr	r5, [r4, #0]
 80042d6:	1961      	adds	r1, r4, r5
 80042d8:	428b      	cmp	r3, r1
 80042da:	bf01      	itttt	eq
 80042dc:	6819      	ldreq	r1, [r3, #0]
 80042de:	685b      	ldreq	r3, [r3, #4]
 80042e0:	1949      	addeq	r1, r1, r5
 80042e2:	6021      	streq	r1, [r4, #0]
 80042e4:	e7ed      	b.n	80042c2 <_free_r+0x22>
 80042e6:	461a      	mov	r2, r3
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	b10b      	cbz	r3, 80042f0 <_free_r+0x50>
 80042ec:	42a3      	cmp	r3, r4
 80042ee:	d9fa      	bls.n	80042e6 <_free_r+0x46>
 80042f0:	6811      	ldr	r1, [r2, #0]
 80042f2:	1855      	adds	r5, r2, r1
 80042f4:	42a5      	cmp	r5, r4
 80042f6:	d10b      	bne.n	8004310 <_free_r+0x70>
 80042f8:	6824      	ldr	r4, [r4, #0]
 80042fa:	4421      	add	r1, r4
 80042fc:	1854      	adds	r4, r2, r1
 80042fe:	42a3      	cmp	r3, r4
 8004300:	6011      	str	r1, [r2, #0]
 8004302:	d1e0      	bne.n	80042c6 <_free_r+0x26>
 8004304:	681c      	ldr	r4, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	6053      	str	r3, [r2, #4]
 800430a:	4421      	add	r1, r4
 800430c:	6011      	str	r1, [r2, #0]
 800430e:	e7da      	b.n	80042c6 <_free_r+0x26>
 8004310:	d902      	bls.n	8004318 <_free_r+0x78>
 8004312:	230c      	movs	r3, #12
 8004314:	6003      	str	r3, [r0, #0]
 8004316:	e7d6      	b.n	80042c6 <_free_r+0x26>
 8004318:	6825      	ldr	r5, [r4, #0]
 800431a:	1961      	adds	r1, r4, r5
 800431c:	428b      	cmp	r3, r1
 800431e:	bf04      	itt	eq
 8004320:	6819      	ldreq	r1, [r3, #0]
 8004322:	685b      	ldreq	r3, [r3, #4]
 8004324:	6063      	str	r3, [r4, #4]
 8004326:	bf04      	itt	eq
 8004328:	1949      	addeq	r1, r1, r5
 800432a:	6021      	streq	r1, [r4, #0]
 800432c:	6054      	str	r4, [r2, #4]
 800432e:	e7ca      	b.n	80042c6 <_free_r+0x26>
 8004330:	b003      	add	sp, #12
 8004332:	bd30      	pop	{r4, r5, pc}
 8004334:	200001b0 	.word	0x200001b0

08004338 <sbrk_aligned>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	4e0e      	ldr	r6, [pc, #56]	; (8004374 <sbrk_aligned+0x3c>)
 800433c:	460c      	mov	r4, r1
 800433e:	6831      	ldr	r1, [r6, #0]
 8004340:	4605      	mov	r5, r0
 8004342:	b911      	cbnz	r1, 800434a <sbrk_aligned+0x12>
 8004344:	f000 fb7a 	bl	8004a3c <_sbrk_r>
 8004348:	6030      	str	r0, [r6, #0]
 800434a:	4621      	mov	r1, r4
 800434c:	4628      	mov	r0, r5
 800434e:	f000 fb75 	bl	8004a3c <_sbrk_r>
 8004352:	1c43      	adds	r3, r0, #1
 8004354:	d00a      	beq.n	800436c <sbrk_aligned+0x34>
 8004356:	1cc4      	adds	r4, r0, #3
 8004358:	f024 0403 	bic.w	r4, r4, #3
 800435c:	42a0      	cmp	r0, r4
 800435e:	d007      	beq.n	8004370 <sbrk_aligned+0x38>
 8004360:	1a21      	subs	r1, r4, r0
 8004362:	4628      	mov	r0, r5
 8004364:	f000 fb6a 	bl	8004a3c <_sbrk_r>
 8004368:	3001      	adds	r0, #1
 800436a:	d101      	bne.n	8004370 <sbrk_aligned+0x38>
 800436c:	f04f 34ff 	mov.w	r4, #4294967295
 8004370:	4620      	mov	r0, r4
 8004372:	bd70      	pop	{r4, r5, r6, pc}
 8004374:	200001b4 	.word	0x200001b4

08004378 <_malloc_r>:
 8004378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800437c:	1ccd      	adds	r5, r1, #3
 800437e:	f025 0503 	bic.w	r5, r5, #3
 8004382:	3508      	adds	r5, #8
 8004384:	2d0c      	cmp	r5, #12
 8004386:	bf38      	it	cc
 8004388:	250c      	movcc	r5, #12
 800438a:	2d00      	cmp	r5, #0
 800438c:	4607      	mov	r7, r0
 800438e:	db01      	blt.n	8004394 <_malloc_r+0x1c>
 8004390:	42a9      	cmp	r1, r5
 8004392:	d905      	bls.n	80043a0 <_malloc_r+0x28>
 8004394:	230c      	movs	r3, #12
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	2600      	movs	r6, #0
 800439a:	4630      	mov	r0, r6
 800439c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a0:	4e2e      	ldr	r6, [pc, #184]	; (800445c <_malloc_r+0xe4>)
 80043a2:	f000 fbf5 	bl	8004b90 <__malloc_lock>
 80043a6:	6833      	ldr	r3, [r6, #0]
 80043a8:	461c      	mov	r4, r3
 80043aa:	bb34      	cbnz	r4, 80043fa <_malloc_r+0x82>
 80043ac:	4629      	mov	r1, r5
 80043ae:	4638      	mov	r0, r7
 80043b0:	f7ff ffc2 	bl	8004338 <sbrk_aligned>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	4604      	mov	r4, r0
 80043b8:	d14d      	bne.n	8004456 <_malloc_r+0xde>
 80043ba:	6834      	ldr	r4, [r6, #0]
 80043bc:	4626      	mov	r6, r4
 80043be:	2e00      	cmp	r6, #0
 80043c0:	d140      	bne.n	8004444 <_malloc_r+0xcc>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	4631      	mov	r1, r6
 80043c6:	4638      	mov	r0, r7
 80043c8:	eb04 0803 	add.w	r8, r4, r3
 80043cc:	f000 fb36 	bl	8004a3c <_sbrk_r>
 80043d0:	4580      	cmp	r8, r0
 80043d2:	d13a      	bne.n	800444a <_malloc_r+0xd2>
 80043d4:	6821      	ldr	r1, [r4, #0]
 80043d6:	3503      	adds	r5, #3
 80043d8:	1a6d      	subs	r5, r5, r1
 80043da:	f025 0503 	bic.w	r5, r5, #3
 80043de:	3508      	adds	r5, #8
 80043e0:	2d0c      	cmp	r5, #12
 80043e2:	bf38      	it	cc
 80043e4:	250c      	movcc	r5, #12
 80043e6:	4629      	mov	r1, r5
 80043e8:	4638      	mov	r0, r7
 80043ea:	f7ff ffa5 	bl	8004338 <sbrk_aligned>
 80043ee:	3001      	adds	r0, #1
 80043f0:	d02b      	beq.n	800444a <_malloc_r+0xd2>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	442b      	add	r3, r5
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	e00e      	b.n	8004418 <_malloc_r+0xa0>
 80043fa:	6822      	ldr	r2, [r4, #0]
 80043fc:	1b52      	subs	r2, r2, r5
 80043fe:	d41e      	bmi.n	800443e <_malloc_r+0xc6>
 8004400:	2a0b      	cmp	r2, #11
 8004402:	d916      	bls.n	8004432 <_malloc_r+0xba>
 8004404:	1961      	adds	r1, r4, r5
 8004406:	42a3      	cmp	r3, r4
 8004408:	6025      	str	r5, [r4, #0]
 800440a:	bf18      	it	ne
 800440c:	6059      	strne	r1, [r3, #4]
 800440e:	6863      	ldr	r3, [r4, #4]
 8004410:	bf08      	it	eq
 8004412:	6031      	streq	r1, [r6, #0]
 8004414:	5162      	str	r2, [r4, r5]
 8004416:	604b      	str	r3, [r1, #4]
 8004418:	4638      	mov	r0, r7
 800441a:	f104 060b 	add.w	r6, r4, #11
 800441e:	f000 fbbd 	bl	8004b9c <__malloc_unlock>
 8004422:	f026 0607 	bic.w	r6, r6, #7
 8004426:	1d23      	adds	r3, r4, #4
 8004428:	1af2      	subs	r2, r6, r3
 800442a:	d0b6      	beq.n	800439a <_malloc_r+0x22>
 800442c:	1b9b      	subs	r3, r3, r6
 800442e:	50a3      	str	r3, [r4, r2]
 8004430:	e7b3      	b.n	800439a <_malloc_r+0x22>
 8004432:	6862      	ldr	r2, [r4, #4]
 8004434:	42a3      	cmp	r3, r4
 8004436:	bf0c      	ite	eq
 8004438:	6032      	streq	r2, [r6, #0]
 800443a:	605a      	strne	r2, [r3, #4]
 800443c:	e7ec      	b.n	8004418 <_malloc_r+0xa0>
 800443e:	4623      	mov	r3, r4
 8004440:	6864      	ldr	r4, [r4, #4]
 8004442:	e7b2      	b.n	80043aa <_malloc_r+0x32>
 8004444:	4634      	mov	r4, r6
 8004446:	6876      	ldr	r6, [r6, #4]
 8004448:	e7b9      	b.n	80043be <_malloc_r+0x46>
 800444a:	230c      	movs	r3, #12
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	4638      	mov	r0, r7
 8004450:	f000 fba4 	bl	8004b9c <__malloc_unlock>
 8004454:	e7a1      	b.n	800439a <_malloc_r+0x22>
 8004456:	6025      	str	r5, [r4, #0]
 8004458:	e7de      	b.n	8004418 <_malloc_r+0xa0>
 800445a:	bf00      	nop
 800445c:	200001b0 	.word	0x200001b0

08004460 <__sfputc_r>:
 8004460:	6893      	ldr	r3, [r2, #8]
 8004462:	3b01      	subs	r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	b410      	push	{r4}
 8004468:	6093      	str	r3, [r2, #8]
 800446a:	da08      	bge.n	800447e <__sfputc_r+0x1e>
 800446c:	6994      	ldr	r4, [r2, #24]
 800446e:	42a3      	cmp	r3, r4
 8004470:	db01      	blt.n	8004476 <__sfputc_r+0x16>
 8004472:	290a      	cmp	r1, #10
 8004474:	d103      	bne.n	800447e <__sfputc_r+0x1e>
 8004476:	f85d 4b04 	ldr.w	r4, [sp], #4
 800447a:	f7ff bc29 	b.w	8003cd0 <__swbuf_r>
 800447e:	6813      	ldr	r3, [r2, #0]
 8004480:	1c58      	adds	r0, r3, #1
 8004482:	6010      	str	r0, [r2, #0]
 8004484:	7019      	strb	r1, [r3, #0]
 8004486:	4608      	mov	r0, r1
 8004488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800448c:	4770      	bx	lr

0800448e <__sfputs_r>:
 800448e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004490:	4606      	mov	r6, r0
 8004492:	460f      	mov	r7, r1
 8004494:	4614      	mov	r4, r2
 8004496:	18d5      	adds	r5, r2, r3
 8004498:	42ac      	cmp	r4, r5
 800449a:	d101      	bne.n	80044a0 <__sfputs_r+0x12>
 800449c:	2000      	movs	r0, #0
 800449e:	e007      	b.n	80044b0 <__sfputs_r+0x22>
 80044a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a4:	463a      	mov	r2, r7
 80044a6:	4630      	mov	r0, r6
 80044a8:	f7ff ffda 	bl	8004460 <__sfputc_r>
 80044ac:	1c43      	adds	r3, r0, #1
 80044ae:	d1f3      	bne.n	8004498 <__sfputs_r+0xa>
 80044b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044b4 <_vfiprintf_r>:
 80044b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b8:	460d      	mov	r5, r1
 80044ba:	b09d      	sub	sp, #116	; 0x74
 80044bc:	4614      	mov	r4, r2
 80044be:	4698      	mov	r8, r3
 80044c0:	4606      	mov	r6, r0
 80044c2:	b118      	cbz	r0, 80044cc <_vfiprintf_r+0x18>
 80044c4:	6983      	ldr	r3, [r0, #24]
 80044c6:	b90b      	cbnz	r3, 80044cc <_vfiprintf_r+0x18>
 80044c8:	f7ff fddc 	bl	8004084 <__sinit>
 80044cc:	4b89      	ldr	r3, [pc, #548]	; (80046f4 <_vfiprintf_r+0x240>)
 80044ce:	429d      	cmp	r5, r3
 80044d0:	d11b      	bne.n	800450a <_vfiprintf_r+0x56>
 80044d2:	6875      	ldr	r5, [r6, #4]
 80044d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044d6:	07d9      	lsls	r1, r3, #31
 80044d8:	d405      	bmi.n	80044e6 <_vfiprintf_r+0x32>
 80044da:	89ab      	ldrh	r3, [r5, #12]
 80044dc:	059a      	lsls	r2, r3, #22
 80044de:	d402      	bmi.n	80044e6 <_vfiprintf_r+0x32>
 80044e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044e2:	f7ff fe6d 	bl	80041c0 <__retarget_lock_acquire_recursive>
 80044e6:	89ab      	ldrh	r3, [r5, #12]
 80044e8:	071b      	lsls	r3, r3, #28
 80044ea:	d501      	bpl.n	80044f0 <_vfiprintf_r+0x3c>
 80044ec:	692b      	ldr	r3, [r5, #16]
 80044ee:	b9eb      	cbnz	r3, 800452c <_vfiprintf_r+0x78>
 80044f0:	4629      	mov	r1, r5
 80044f2:	4630      	mov	r0, r6
 80044f4:	f7ff fc3e 	bl	8003d74 <__swsetup_r>
 80044f8:	b1c0      	cbz	r0, 800452c <_vfiprintf_r+0x78>
 80044fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044fc:	07dc      	lsls	r4, r3, #31
 80044fe:	d50e      	bpl.n	800451e <_vfiprintf_r+0x6a>
 8004500:	f04f 30ff 	mov.w	r0, #4294967295
 8004504:	b01d      	add	sp, #116	; 0x74
 8004506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450a:	4b7b      	ldr	r3, [pc, #492]	; (80046f8 <_vfiprintf_r+0x244>)
 800450c:	429d      	cmp	r5, r3
 800450e:	d101      	bne.n	8004514 <_vfiprintf_r+0x60>
 8004510:	68b5      	ldr	r5, [r6, #8]
 8004512:	e7df      	b.n	80044d4 <_vfiprintf_r+0x20>
 8004514:	4b79      	ldr	r3, [pc, #484]	; (80046fc <_vfiprintf_r+0x248>)
 8004516:	429d      	cmp	r5, r3
 8004518:	bf08      	it	eq
 800451a:	68f5      	ldreq	r5, [r6, #12]
 800451c:	e7da      	b.n	80044d4 <_vfiprintf_r+0x20>
 800451e:	89ab      	ldrh	r3, [r5, #12]
 8004520:	0598      	lsls	r0, r3, #22
 8004522:	d4ed      	bmi.n	8004500 <_vfiprintf_r+0x4c>
 8004524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004526:	f7ff fe4c 	bl	80041c2 <__retarget_lock_release_recursive>
 800452a:	e7e9      	b.n	8004500 <_vfiprintf_r+0x4c>
 800452c:	2300      	movs	r3, #0
 800452e:	9309      	str	r3, [sp, #36]	; 0x24
 8004530:	2320      	movs	r3, #32
 8004532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004536:	f8cd 800c 	str.w	r8, [sp, #12]
 800453a:	2330      	movs	r3, #48	; 0x30
 800453c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004700 <_vfiprintf_r+0x24c>
 8004540:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004544:	f04f 0901 	mov.w	r9, #1
 8004548:	4623      	mov	r3, r4
 800454a:	469a      	mov	sl, r3
 800454c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004550:	b10a      	cbz	r2, 8004556 <_vfiprintf_r+0xa2>
 8004552:	2a25      	cmp	r2, #37	; 0x25
 8004554:	d1f9      	bne.n	800454a <_vfiprintf_r+0x96>
 8004556:	ebba 0b04 	subs.w	fp, sl, r4
 800455a:	d00b      	beq.n	8004574 <_vfiprintf_r+0xc0>
 800455c:	465b      	mov	r3, fp
 800455e:	4622      	mov	r2, r4
 8004560:	4629      	mov	r1, r5
 8004562:	4630      	mov	r0, r6
 8004564:	f7ff ff93 	bl	800448e <__sfputs_r>
 8004568:	3001      	adds	r0, #1
 800456a:	f000 80aa 	beq.w	80046c2 <_vfiprintf_r+0x20e>
 800456e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004570:	445a      	add	r2, fp
 8004572:	9209      	str	r2, [sp, #36]	; 0x24
 8004574:	f89a 3000 	ldrb.w	r3, [sl]
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80a2 	beq.w	80046c2 <_vfiprintf_r+0x20e>
 800457e:	2300      	movs	r3, #0
 8004580:	f04f 32ff 	mov.w	r2, #4294967295
 8004584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004588:	f10a 0a01 	add.w	sl, sl, #1
 800458c:	9304      	str	r3, [sp, #16]
 800458e:	9307      	str	r3, [sp, #28]
 8004590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004594:	931a      	str	r3, [sp, #104]	; 0x68
 8004596:	4654      	mov	r4, sl
 8004598:	2205      	movs	r2, #5
 800459a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800459e:	4858      	ldr	r0, [pc, #352]	; (8004700 <_vfiprintf_r+0x24c>)
 80045a0:	f7fb fe3e 	bl	8000220 <memchr>
 80045a4:	9a04      	ldr	r2, [sp, #16]
 80045a6:	b9d8      	cbnz	r0, 80045e0 <_vfiprintf_r+0x12c>
 80045a8:	06d1      	lsls	r1, r2, #27
 80045aa:	bf44      	itt	mi
 80045ac:	2320      	movmi	r3, #32
 80045ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045b2:	0713      	lsls	r3, r2, #28
 80045b4:	bf44      	itt	mi
 80045b6:	232b      	movmi	r3, #43	; 0x2b
 80045b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045bc:	f89a 3000 	ldrb.w	r3, [sl]
 80045c0:	2b2a      	cmp	r3, #42	; 0x2a
 80045c2:	d015      	beq.n	80045f0 <_vfiprintf_r+0x13c>
 80045c4:	9a07      	ldr	r2, [sp, #28]
 80045c6:	4654      	mov	r4, sl
 80045c8:	2000      	movs	r0, #0
 80045ca:	f04f 0c0a 	mov.w	ip, #10
 80045ce:	4621      	mov	r1, r4
 80045d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045d4:	3b30      	subs	r3, #48	; 0x30
 80045d6:	2b09      	cmp	r3, #9
 80045d8:	d94e      	bls.n	8004678 <_vfiprintf_r+0x1c4>
 80045da:	b1b0      	cbz	r0, 800460a <_vfiprintf_r+0x156>
 80045dc:	9207      	str	r2, [sp, #28]
 80045de:	e014      	b.n	800460a <_vfiprintf_r+0x156>
 80045e0:	eba0 0308 	sub.w	r3, r0, r8
 80045e4:	fa09 f303 	lsl.w	r3, r9, r3
 80045e8:	4313      	orrs	r3, r2
 80045ea:	9304      	str	r3, [sp, #16]
 80045ec:	46a2      	mov	sl, r4
 80045ee:	e7d2      	b.n	8004596 <_vfiprintf_r+0xe2>
 80045f0:	9b03      	ldr	r3, [sp, #12]
 80045f2:	1d19      	adds	r1, r3, #4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	9103      	str	r1, [sp, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bfbb      	ittet	lt
 80045fc:	425b      	neglt	r3, r3
 80045fe:	f042 0202 	orrlt.w	r2, r2, #2
 8004602:	9307      	strge	r3, [sp, #28]
 8004604:	9307      	strlt	r3, [sp, #28]
 8004606:	bfb8      	it	lt
 8004608:	9204      	strlt	r2, [sp, #16]
 800460a:	7823      	ldrb	r3, [r4, #0]
 800460c:	2b2e      	cmp	r3, #46	; 0x2e
 800460e:	d10c      	bne.n	800462a <_vfiprintf_r+0x176>
 8004610:	7863      	ldrb	r3, [r4, #1]
 8004612:	2b2a      	cmp	r3, #42	; 0x2a
 8004614:	d135      	bne.n	8004682 <_vfiprintf_r+0x1ce>
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	1d1a      	adds	r2, r3, #4
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	9203      	str	r2, [sp, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	bfb8      	it	lt
 8004622:	f04f 33ff 	movlt.w	r3, #4294967295
 8004626:	3402      	adds	r4, #2
 8004628:	9305      	str	r3, [sp, #20]
 800462a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004710 <_vfiprintf_r+0x25c>
 800462e:	7821      	ldrb	r1, [r4, #0]
 8004630:	2203      	movs	r2, #3
 8004632:	4650      	mov	r0, sl
 8004634:	f7fb fdf4 	bl	8000220 <memchr>
 8004638:	b140      	cbz	r0, 800464c <_vfiprintf_r+0x198>
 800463a:	2340      	movs	r3, #64	; 0x40
 800463c:	eba0 000a 	sub.w	r0, r0, sl
 8004640:	fa03 f000 	lsl.w	r0, r3, r0
 8004644:	9b04      	ldr	r3, [sp, #16]
 8004646:	4303      	orrs	r3, r0
 8004648:	3401      	adds	r4, #1
 800464a:	9304      	str	r3, [sp, #16]
 800464c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004650:	482c      	ldr	r0, [pc, #176]	; (8004704 <_vfiprintf_r+0x250>)
 8004652:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004656:	2206      	movs	r2, #6
 8004658:	f7fb fde2 	bl	8000220 <memchr>
 800465c:	2800      	cmp	r0, #0
 800465e:	d03f      	beq.n	80046e0 <_vfiprintf_r+0x22c>
 8004660:	4b29      	ldr	r3, [pc, #164]	; (8004708 <_vfiprintf_r+0x254>)
 8004662:	bb1b      	cbnz	r3, 80046ac <_vfiprintf_r+0x1f8>
 8004664:	9b03      	ldr	r3, [sp, #12]
 8004666:	3307      	adds	r3, #7
 8004668:	f023 0307 	bic.w	r3, r3, #7
 800466c:	3308      	adds	r3, #8
 800466e:	9303      	str	r3, [sp, #12]
 8004670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004672:	443b      	add	r3, r7
 8004674:	9309      	str	r3, [sp, #36]	; 0x24
 8004676:	e767      	b.n	8004548 <_vfiprintf_r+0x94>
 8004678:	fb0c 3202 	mla	r2, ip, r2, r3
 800467c:	460c      	mov	r4, r1
 800467e:	2001      	movs	r0, #1
 8004680:	e7a5      	b.n	80045ce <_vfiprintf_r+0x11a>
 8004682:	2300      	movs	r3, #0
 8004684:	3401      	adds	r4, #1
 8004686:	9305      	str	r3, [sp, #20]
 8004688:	4619      	mov	r1, r3
 800468a:	f04f 0c0a 	mov.w	ip, #10
 800468e:	4620      	mov	r0, r4
 8004690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004694:	3a30      	subs	r2, #48	; 0x30
 8004696:	2a09      	cmp	r2, #9
 8004698:	d903      	bls.n	80046a2 <_vfiprintf_r+0x1ee>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0c5      	beq.n	800462a <_vfiprintf_r+0x176>
 800469e:	9105      	str	r1, [sp, #20]
 80046a0:	e7c3      	b.n	800462a <_vfiprintf_r+0x176>
 80046a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80046a6:	4604      	mov	r4, r0
 80046a8:	2301      	movs	r3, #1
 80046aa:	e7f0      	b.n	800468e <_vfiprintf_r+0x1da>
 80046ac:	ab03      	add	r3, sp, #12
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	462a      	mov	r2, r5
 80046b2:	4b16      	ldr	r3, [pc, #88]	; (800470c <_vfiprintf_r+0x258>)
 80046b4:	a904      	add	r1, sp, #16
 80046b6:	4630      	mov	r0, r6
 80046b8:	f3af 8000 	nop.w
 80046bc:	4607      	mov	r7, r0
 80046be:	1c78      	adds	r0, r7, #1
 80046c0:	d1d6      	bne.n	8004670 <_vfiprintf_r+0x1bc>
 80046c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046c4:	07d9      	lsls	r1, r3, #31
 80046c6:	d405      	bmi.n	80046d4 <_vfiprintf_r+0x220>
 80046c8:	89ab      	ldrh	r3, [r5, #12]
 80046ca:	059a      	lsls	r2, r3, #22
 80046cc:	d402      	bmi.n	80046d4 <_vfiprintf_r+0x220>
 80046ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046d0:	f7ff fd77 	bl	80041c2 <__retarget_lock_release_recursive>
 80046d4:	89ab      	ldrh	r3, [r5, #12]
 80046d6:	065b      	lsls	r3, r3, #25
 80046d8:	f53f af12 	bmi.w	8004500 <_vfiprintf_r+0x4c>
 80046dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046de:	e711      	b.n	8004504 <_vfiprintf_r+0x50>
 80046e0:	ab03      	add	r3, sp, #12
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	462a      	mov	r2, r5
 80046e6:	4b09      	ldr	r3, [pc, #36]	; (800470c <_vfiprintf_r+0x258>)
 80046e8:	a904      	add	r1, sp, #16
 80046ea:	4630      	mov	r0, r6
 80046ec:	f000 f880 	bl	80047f0 <_printf_i>
 80046f0:	e7e4      	b.n	80046bc <_vfiprintf_r+0x208>
 80046f2:	bf00      	nop
 80046f4:	08004ca0 	.word	0x08004ca0
 80046f8:	08004cc0 	.word	0x08004cc0
 80046fc:	08004c80 	.word	0x08004c80
 8004700:	08004ce0 	.word	0x08004ce0
 8004704:	08004cea 	.word	0x08004cea
 8004708:	00000000 	.word	0x00000000
 800470c:	0800448f 	.word	0x0800448f
 8004710:	08004ce6 	.word	0x08004ce6

08004714 <_printf_common>:
 8004714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004718:	4616      	mov	r6, r2
 800471a:	4699      	mov	r9, r3
 800471c:	688a      	ldr	r2, [r1, #8]
 800471e:	690b      	ldr	r3, [r1, #16]
 8004720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004724:	4293      	cmp	r3, r2
 8004726:	bfb8      	it	lt
 8004728:	4613      	movlt	r3, r2
 800472a:	6033      	str	r3, [r6, #0]
 800472c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004730:	4607      	mov	r7, r0
 8004732:	460c      	mov	r4, r1
 8004734:	b10a      	cbz	r2, 800473a <_printf_common+0x26>
 8004736:	3301      	adds	r3, #1
 8004738:	6033      	str	r3, [r6, #0]
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	0699      	lsls	r1, r3, #26
 800473e:	bf42      	ittt	mi
 8004740:	6833      	ldrmi	r3, [r6, #0]
 8004742:	3302      	addmi	r3, #2
 8004744:	6033      	strmi	r3, [r6, #0]
 8004746:	6825      	ldr	r5, [r4, #0]
 8004748:	f015 0506 	ands.w	r5, r5, #6
 800474c:	d106      	bne.n	800475c <_printf_common+0x48>
 800474e:	f104 0a19 	add.w	sl, r4, #25
 8004752:	68e3      	ldr	r3, [r4, #12]
 8004754:	6832      	ldr	r2, [r6, #0]
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	42ab      	cmp	r3, r5
 800475a:	dc26      	bgt.n	80047aa <_printf_common+0x96>
 800475c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004760:	1e13      	subs	r3, r2, #0
 8004762:	6822      	ldr	r2, [r4, #0]
 8004764:	bf18      	it	ne
 8004766:	2301      	movne	r3, #1
 8004768:	0692      	lsls	r2, r2, #26
 800476a:	d42b      	bmi.n	80047c4 <_printf_common+0xb0>
 800476c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004770:	4649      	mov	r1, r9
 8004772:	4638      	mov	r0, r7
 8004774:	47c0      	blx	r8
 8004776:	3001      	adds	r0, #1
 8004778:	d01e      	beq.n	80047b8 <_printf_common+0xa4>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	68e5      	ldr	r5, [r4, #12]
 800477e:	6832      	ldr	r2, [r6, #0]
 8004780:	f003 0306 	and.w	r3, r3, #6
 8004784:	2b04      	cmp	r3, #4
 8004786:	bf08      	it	eq
 8004788:	1aad      	subeq	r5, r5, r2
 800478a:	68a3      	ldr	r3, [r4, #8]
 800478c:	6922      	ldr	r2, [r4, #16]
 800478e:	bf0c      	ite	eq
 8004790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004794:	2500      	movne	r5, #0
 8004796:	4293      	cmp	r3, r2
 8004798:	bfc4      	itt	gt
 800479a:	1a9b      	subgt	r3, r3, r2
 800479c:	18ed      	addgt	r5, r5, r3
 800479e:	2600      	movs	r6, #0
 80047a0:	341a      	adds	r4, #26
 80047a2:	42b5      	cmp	r5, r6
 80047a4:	d11a      	bne.n	80047dc <_printf_common+0xc8>
 80047a6:	2000      	movs	r0, #0
 80047a8:	e008      	b.n	80047bc <_printf_common+0xa8>
 80047aa:	2301      	movs	r3, #1
 80047ac:	4652      	mov	r2, sl
 80047ae:	4649      	mov	r1, r9
 80047b0:	4638      	mov	r0, r7
 80047b2:	47c0      	blx	r8
 80047b4:	3001      	adds	r0, #1
 80047b6:	d103      	bne.n	80047c0 <_printf_common+0xac>
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295
 80047bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c0:	3501      	adds	r5, #1
 80047c2:	e7c6      	b.n	8004752 <_printf_common+0x3e>
 80047c4:	18e1      	adds	r1, r4, r3
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	2030      	movs	r0, #48	; 0x30
 80047ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047ce:	4422      	add	r2, r4
 80047d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047d8:	3302      	adds	r3, #2
 80047da:	e7c7      	b.n	800476c <_printf_common+0x58>
 80047dc:	2301      	movs	r3, #1
 80047de:	4622      	mov	r2, r4
 80047e0:	4649      	mov	r1, r9
 80047e2:	4638      	mov	r0, r7
 80047e4:	47c0      	blx	r8
 80047e6:	3001      	adds	r0, #1
 80047e8:	d0e6      	beq.n	80047b8 <_printf_common+0xa4>
 80047ea:	3601      	adds	r6, #1
 80047ec:	e7d9      	b.n	80047a2 <_printf_common+0x8e>
	...

080047f0 <_printf_i>:
 80047f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047f4:	7e0f      	ldrb	r7, [r1, #24]
 80047f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047f8:	2f78      	cmp	r7, #120	; 0x78
 80047fa:	4691      	mov	r9, r2
 80047fc:	4680      	mov	r8, r0
 80047fe:	460c      	mov	r4, r1
 8004800:	469a      	mov	sl, r3
 8004802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004806:	d807      	bhi.n	8004818 <_printf_i+0x28>
 8004808:	2f62      	cmp	r7, #98	; 0x62
 800480a:	d80a      	bhi.n	8004822 <_printf_i+0x32>
 800480c:	2f00      	cmp	r7, #0
 800480e:	f000 80d8 	beq.w	80049c2 <_printf_i+0x1d2>
 8004812:	2f58      	cmp	r7, #88	; 0x58
 8004814:	f000 80a3 	beq.w	800495e <_printf_i+0x16e>
 8004818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800481c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004820:	e03a      	b.n	8004898 <_printf_i+0xa8>
 8004822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004826:	2b15      	cmp	r3, #21
 8004828:	d8f6      	bhi.n	8004818 <_printf_i+0x28>
 800482a:	a101      	add	r1, pc, #4	; (adr r1, 8004830 <_printf_i+0x40>)
 800482c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004830:	08004889 	.word	0x08004889
 8004834:	0800489d 	.word	0x0800489d
 8004838:	08004819 	.word	0x08004819
 800483c:	08004819 	.word	0x08004819
 8004840:	08004819 	.word	0x08004819
 8004844:	08004819 	.word	0x08004819
 8004848:	0800489d 	.word	0x0800489d
 800484c:	08004819 	.word	0x08004819
 8004850:	08004819 	.word	0x08004819
 8004854:	08004819 	.word	0x08004819
 8004858:	08004819 	.word	0x08004819
 800485c:	080049a9 	.word	0x080049a9
 8004860:	080048cd 	.word	0x080048cd
 8004864:	0800498b 	.word	0x0800498b
 8004868:	08004819 	.word	0x08004819
 800486c:	08004819 	.word	0x08004819
 8004870:	080049cb 	.word	0x080049cb
 8004874:	08004819 	.word	0x08004819
 8004878:	080048cd 	.word	0x080048cd
 800487c:	08004819 	.word	0x08004819
 8004880:	08004819 	.word	0x08004819
 8004884:	08004993 	.word	0x08004993
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	1d1a      	adds	r2, r3, #4
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	602a      	str	r2, [r5, #0]
 8004890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004898:	2301      	movs	r3, #1
 800489a:	e0a3      	b.n	80049e4 <_printf_i+0x1f4>
 800489c:	6820      	ldr	r0, [r4, #0]
 800489e:	6829      	ldr	r1, [r5, #0]
 80048a0:	0606      	lsls	r6, r0, #24
 80048a2:	f101 0304 	add.w	r3, r1, #4
 80048a6:	d50a      	bpl.n	80048be <_printf_i+0xce>
 80048a8:	680e      	ldr	r6, [r1, #0]
 80048aa:	602b      	str	r3, [r5, #0]
 80048ac:	2e00      	cmp	r6, #0
 80048ae:	da03      	bge.n	80048b8 <_printf_i+0xc8>
 80048b0:	232d      	movs	r3, #45	; 0x2d
 80048b2:	4276      	negs	r6, r6
 80048b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b8:	485e      	ldr	r0, [pc, #376]	; (8004a34 <_printf_i+0x244>)
 80048ba:	230a      	movs	r3, #10
 80048bc:	e019      	b.n	80048f2 <_printf_i+0x102>
 80048be:	680e      	ldr	r6, [r1, #0]
 80048c0:	602b      	str	r3, [r5, #0]
 80048c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048c6:	bf18      	it	ne
 80048c8:	b236      	sxthne	r6, r6
 80048ca:	e7ef      	b.n	80048ac <_printf_i+0xbc>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	6820      	ldr	r0, [r4, #0]
 80048d0:	1d19      	adds	r1, r3, #4
 80048d2:	6029      	str	r1, [r5, #0]
 80048d4:	0601      	lsls	r1, r0, #24
 80048d6:	d501      	bpl.n	80048dc <_printf_i+0xec>
 80048d8:	681e      	ldr	r6, [r3, #0]
 80048da:	e002      	b.n	80048e2 <_printf_i+0xf2>
 80048dc:	0646      	lsls	r6, r0, #25
 80048de:	d5fb      	bpl.n	80048d8 <_printf_i+0xe8>
 80048e0:	881e      	ldrh	r6, [r3, #0]
 80048e2:	4854      	ldr	r0, [pc, #336]	; (8004a34 <_printf_i+0x244>)
 80048e4:	2f6f      	cmp	r7, #111	; 0x6f
 80048e6:	bf0c      	ite	eq
 80048e8:	2308      	moveq	r3, #8
 80048ea:	230a      	movne	r3, #10
 80048ec:	2100      	movs	r1, #0
 80048ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048f2:	6865      	ldr	r5, [r4, #4]
 80048f4:	60a5      	str	r5, [r4, #8]
 80048f6:	2d00      	cmp	r5, #0
 80048f8:	bfa2      	ittt	ge
 80048fa:	6821      	ldrge	r1, [r4, #0]
 80048fc:	f021 0104 	bicge.w	r1, r1, #4
 8004900:	6021      	strge	r1, [r4, #0]
 8004902:	b90e      	cbnz	r6, 8004908 <_printf_i+0x118>
 8004904:	2d00      	cmp	r5, #0
 8004906:	d04d      	beq.n	80049a4 <_printf_i+0x1b4>
 8004908:	4615      	mov	r5, r2
 800490a:	fbb6 f1f3 	udiv	r1, r6, r3
 800490e:	fb03 6711 	mls	r7, r3, r1, r6
 8004912:	5dc7      	ldrb	r7, [r0, r7]
 8004914:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004918:	4637      	mov	r7, r6
 800491a:	42bb      	cmp	r3, r7
 800491c:	460e      	mov	r6, r1
 800491e:	d9f4      	bls.n	800490a <_printf_i+0x11a>
 8004920:	2b08      	cmp	r3, #8
 8004922:	d10b      	bne.n	800493c <_printf_i+0x14c>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	07de      	lsls	r6, r3, #31
 8004928:	d508      	bpl.n	800493c <_printf_i+0x14c>
 800492a:	6923      	ldr	r3, [r4, #16]
 800492c:	6861      	ldr	r1, [r4, #4]
 800492e:	4299      	cmp	r1, r3
 8004930:	bfde      	ittt	le
 8004932:	2330      	movle	r3, #48	; 0x30
 8004934:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004938:	f105 35ff 	addle.w	r5, r5, #4294967295
 800493c:	1b52      	subs	r2, r2, r5
 800493e:	6122      	str	r2, [r4, #16]
 8004940:	f8cd a000 	str.w	sl, [sp]
 8004944:	464b      	mov	r3, r9
 8004946:	aa03      	add	r2, sp, #12
 8004948:	4621      	mov	r1, r4
 800494a:	4640      	mov	r0, r8
 800494c:	f7ff fee2 	bl	8004714 <_printf_common>
 8004950:	3001      	adds	r0, #1
 8004952:	d14c      	bne.n	80049ee <_printf_i+0x1fe>
 8004954:	f04f 30ff 	mov.w	r0, #4294967295
 8004958:	b004      	add	sp, #16
 800495a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800495e:	4835      	ldr	r0, [pc, #212]	; (8004a34 <_printf_i+0x244>)
 8004960:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004964:	6829      	ldr	r1, [r5, #0]
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	f851 6b04 	ldr.w	r6, [r1], #4
 800496c:	6029      	str	r1, [r5, #0]
 800496e:	061d      	lsls	r5, r3, #24
 8004970:	d514      	bpl.n	800499c <_printf_i+0x1ac>
 8004972:	07df      	lsls	r7, r3, #31
 8004974:	bf44      	itt	mi
 8004976:	f043 0320 	orrmi.w	r3, r3, #32
 800497a:	6023      	strmi	r3, [r4, #0]
 800497c:	b91e      	cbnz	r6, 8004986 <_printf_i+0x196>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	f023 0320 	bic.w	r3, r3, #32
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	2310      	movs	r3, #16
 8004988:	e7b0      	b.n	80048ec <_printf_i+0xfc>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	f043 0320 	orr.w	r3, r3, #32
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	2378      	movs	r3, #120	; 0x78
 8004994:	4828      	ldr	r0, [pc, #160]	; (8004a38 <_printf_i+0x248>)
 8004996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800499a:	e7e3      	b.n	8004964 <_printf_i+0x174>
 800499c:	0659      	lsls	r1, r3, #25
 800499e:	bf48      	it	mi
 80049a0:	b2b6      	uxthmi	r6, r6
 80049a2:	e7e6      	b.n	8004972 <_printf_i+0x182>
 80049a4:	4615      	mov	r5, r2
 80049a6:	e7bb      	b.n	8004920 <_printf_i+0x130>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	6826      	ldr	r6, [r4, #0]
 80049ac:	6961      	ldr	r1, [r4, #20]
 80049ae:	1d18      	adds	r0, r3, #4
 80049b0:	6028      	str	r0, [r5, #0]
 80049b2:	0635      	lsls	r5, r6, #24
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	d501      	bpl.n	80049bc <_printf_i+0x1cc>
 80049b8:	6019      	str	r1, [r3, #0]
 80049ba:	e002      	b.n	80049c2 <_printf_i+0x1d2>
 80049bc:	0670      	lsls	r0, r6, #25
 80049be:	d5fb      	bpl.n	80049b8 <_printf_i+0x1c8>
 80049c0:	8019      	strh	r1, [r3, #0]
 80049c2:	2300      	movs	r3, #0
 80049c4:	6123      	str	r3, [r4, #16]
 80049c6:	4615      	mov	r5, r2
 80049c8:	e7ba      	b.n	8004940 <_printf_i+0x150>
 80049ca:	682b      	ldr	r3, [r5, #0]
 80049cc:	1d1a      	adds	r2, r3, #4
 80049ce:	602a      	str	r2, [r5, #0]
 80049d0:	681d      	ldr	r5, [r3, #0]
 80049d2:	6862      	ldr	r2, [r4, #4]
 80049d4:	2100      	movs	r1, #0
 80049d6:	4628      	mov	r0, r5
 80049d8:	f7fb fc22 	bl	8000220 <memchr>
 80049dc:	b108      	cbz	r0, 80049e2 <_printf_i+0x1f2>
 80049de:	1b40      	subs	r0, r0, r5
 80049e0:	6060      	str	r0, [r4, #4]
 80049e2:	6863      	ldr	r3, [r4, #4]
 80049e4:	6123      	str	r3, [r4, #16]
 80049e6:	2300      	movs	r3, #0
 80049e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ec:	e7a8      	b.n	8004940 <_printf_i+0x150>
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	462a      	mov	r2, r5
 80049f2:	4649      	mov	r1, r9
 80049f4:	4640      	mov	r0, r8
 80049f6:	47d0      	blx	sl
 80049f8:	3001      	adds	r0, #1
 80049fa:	d0ab      	beq.n	8004954 <_printf_i+0x164>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	079b      	lsls	r3, r3, #30
 8004a00:	d413      	bmi.n	8004a2a <_printf_i+0x23a>
 8004a02:	68e0      	ldr	r0, [r4, #12]
 8004a04:	9b03      	ldr	r3, [sp, #12]
 8004a06:	4298      	cmp	r0, r3
 8004a08:	bfb8      	it	lt
 8004a0a:	4618      	movlt	r0, r3
 8004a0c:	e7a4      	b.n	8004958 <_printf_i+0x168>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	4632      	mov	r2, r6
 8004a12:	4649      	mov	r1, r9
 8004a14:	4640      	mov	r0, r8
 8004a16:	47d0      	blx	sl
 8004a18:	3001      	adds	r0, #1
 8004a1a:	d09b      	beq.n	8004954 <_printf_i+0x164>
 8004a1c:	3501      	adds	r5, #1
 8004a1e:	68e3      	ldr	r3, [r4, #12]
 8004a20:	9903      	ldr	r1, [sp, #12]
 8004a22:	1a5b      	subs	r3, r3, r1
 8004a24:	42ab      	cmp	r3, r5
 8004a26:	dcf2      	bgt.n	8004a0e <_printf_i+0x21e>
 8004a28:	e7eb      	b.n	8004a02 <_printf_i+0x212>
 8004a2a:	2500      	movs	r5, #0
 8004a2c:	f104 0619 	add.w	r6, r4, #25
 8004a30:	e7f5      	b.n	8004a1e <_printf_i+0x22e>
 8004a32:	bf00      	nop
 8004a34:	08004cf1 	.word	0x08004cf1
 8004a38:	08004d02 	.word	0x08004d02

08004a3c <_sbrk_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4d06      	ldr	r5, [pc, #24]	; (8004a58 <_sbrk_r+0x1c>)
 8004a40:	2300      	movs	r3, #0
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	602b      	str	r3, [r5, #0]
 8004a48:	f7fc f98e 	bl	8000d68 <_sbrk>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d102      	bne.n	8004a56 <_sbrk_r+0x1a>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	b103      	cbz	r3, 8004a56 <_sbrk_r+0x1a>
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	bd38      	pop	{r3, r4, r5, pc}
 8004a58:	200001b8 	.word	0x200001b8

08004a5c <__sread>:
 8004a5c:	b510      	push	{r4, lr}
 8004a5e:	460c      	mov	r4, r1
 8004a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a64:	f000 f8a0 	bl	8004ba8 <_read_r>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	bfab      	itete	ge
 8004a6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8004a70:	181b      	addge	r3, r3, r0
 8004a72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a76:	bfac      	ite	ge
 8004a78:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a7a:	81a3      	strhlt	r3, [r4, #12]
 8004a7c:	bd10      	pop	{r4, pc}

08004a7e <__swrite>:
 8004a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a82:	461f      	mov	r7, r3
 8004a84:	898b      	ldrh	r3, [r1, #12]
 8004a86:	05db      	lsls	r3, r3, #23
 8004a88:	4605      	mov	r5, r0
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	4616      	mov	r6, r2
 8004a8e:	d505      	bpl.n	8004a9c <__swrite+0x1e>
 8004a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a94:	2302      	movs	r3, #2
 8004a96:	2200      	movs	r2, #0
 8004a98:	f000 f868 	bl	8004b6c <_lseek_r>
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aa6:	81a3      	strh	r3, [r4, #12]
 8004aa8:	4632      	mov	r2, r6
 8004aaa:	463b      	mov	r3, r7
 8004aac:	4628      	mov	r0, r5
 8004aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab2:	f000 b817 	b.w	8004ae4 <_write_r>

08004ab6 <__sseek>:
 8004ab6:	b510      	push	{r4, lr}
 8004ab8:	460c      	mov	r4, r1
 8004aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004abe:	f000 f855 	bl	8004b6c <_lseek_r>
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	89a3      	ldrh	r3, [r4, #12]
 8004ac6:	bf15      	itete	ne
 8004ac8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004aca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ace:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ad2:	81a3      	strheq	r3, [r4, #12]
 8004ad4:	bf18      	it	ne
 8004ad6:	81a3      	strhne	r3, [r4, #12]
 8004ad8:	bd10      	pop	{r4, pc}

08004ada <__sclose>:
 8004ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ade:	f000 b813 	b.w	8004b08 <_close_r>
	...

08004ae4 <_write_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4d07      	ldr	r5, [pc, #28]	; (8004b04 <_write_r+0x20>)
 8004ae8:	4604      	mov	r4, r0
 8004aea:	4608      	mov	r0, r1
 8004aec:	4611      	mov	r1, r2
 8004aee:	2200      	movs	r2, #0
 8004af0:	602a      	str	r2, [r5, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f7fb fd66 	bl	80005c4 <_write>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d102      	bne.n	8004b02 <_write_r+0x1e>
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	b103      	cbz	r3, 8004b02 <_write_r+0x1e>
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	bd38      	pop	{r3, r4, r5, pc}
 8004b04:	200001b8 	.word	0x200001b8

08004b08 <_close_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4d06      	ldr	r5, [pc, #24]	; (8004b24 <_close_r+0x1c>)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	4604      	mov	r4, r0
 8004b10:	4608      	mov	r0, r1
 8004b12:	602b      	str	r3, [r5, #0]
 8004b14:	f7fc f8f3 	bl	8000cfe <_close>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d102      	bne.n	8004b22 <_close_r+0x1a>
 8004b1c:	682b      	ldr	r3, [r5, #0]
 8004b1e:	b103      	cbz	r3, 8004b22 <_close_r+0x1a>
 8004b20:	6023      	str	r3, [r4, #0]
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	200001b8 	.word	0x200001b8

08004b28 <_fstat_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4d07      	ldr	r5, [pc, #28]	; (8004b48 <_fstat_r+0x20>)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4604      	mov	r4, r0
 8004b30:	4608      	mov	r0, r1
 8004b32:	4611      	mov	r1, r2
 8004b34:	602b      	str	r3, [r5, #0]
 8004b36:	f7fc f8ee 	bl	8000d16 <_fstat>
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	d102      	bne.n	8004b44 <_fstat_r+0x1c>
 8004b3e:	682b      	ldr	r3, [r5, #0]
 8004b40:	b103      	cbz	r3, 8004b44 <_fstat_r+0x1c>
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	bd38      	pop	{r3, r4, r5, pc}
 8004b46:	bf00      	nop
 8004b48:	200001b8 	.word	0x200001b8

08004b4c <_isatty_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	4d06      	ldr	r5, [pc, #24]	; (8004b68 <_isatty_r+0x1c>)
 8004b50:	2300      	movs	r3, #0
 8004b52:	4604      	mov	r4, r0
 8004b54:	4608      	mov	r0, r1
 8004b56:	602b      	str	r3, [r5, #0]
 8004b58:	f7fc f8ed 	bl	8000d36 <_isatty>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d102      	bne.n	8004b66 <_isatty_r+0x1a>
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	b103      	cbz	r3, 8004b66 <_isatty_r+0x1a>
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	200001b8 	.word	0x200001b8

08004b6c <_lseek_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4d07      	ldr	r5, [pc, #28]	; (8004b8c <_lseek_r+0x20>)
 8004b70:	4604      	mov	r4, r0
 8004b72:	4608      	mov	r0, r1
 8004b74:	4611      	mov	r1, r2
 8004b76:	2200      	movs	r2, #0
 8004b78:	602a      	str	r2, [r5, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f7fc f8e6 	bl	8000d4c <_lseek>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d102      	bne.n	8004b8a <_lseek_r+0x1e>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	b103      	cbz	r3, 8004b8a <_lseek_r+0x1e>
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	200001b8 	.word	0x200001b8

08004b90 <__malloc_lock>:
 8004b90:	4801      	ldr	r0, [pc, #4]	; (8004b98 <__malloc_lock+0x8>)
 8004b92:	f7ff bb15 	b.w	80041c0 <__retarget_lock_acquire_recursive>
 8004b96:	bf00      	nop
 8004b98:	200001ac 	.word	0x200001ac

08004b9c <__malloc_unlock>:
 8004b9c:	4801      	ldr	r0, [pc, #4]	; (8004ba4 <__malloc_unlock+0x8>)
 8004b9e:	f7ff bb10 	b.w	80041c2 <__retarget_lock_release_recursive>
 8004ba2:	bf00      	nop
 8004ba4:	200001ac 	.word	0x200001ac

08004ba8 <_read_r>:
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 8004baa:	4d07      	ldr	r5, [pc, #28]	; (8004bc8 <_read_r+0x20>)
 8004bac:	4604      	mov	r4, r0
 8004bae:	4608      	mov	r0, r1
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	602a      	str	r2, [r5, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f7fc f884 	bl	8000cc4 <_read>
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	d102      	bne.n	8004bc6 <_read_r+0x1e>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	b103      	cbz	r3, 8004bc6 <_read_r+0x1e>
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
 8004bc8:	200001b8 	.word	0x200001b8

08004bcc <_init>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	bf00      	nop
 8004bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd2:	bc08      	pop	{r3}
 8004bd4:	469e      	mov	lr, r3
 8004bd6:	4770      	bx	lr

08004bd8 <_fini>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	bf00      	nop
 8004bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bde:	bc08      	pop	{r3}
 8004be0:	469e      	mov	lr, r3
 8004be2:	4770      	bx	lr
