
CANReceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f3c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d0  080061d0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061d8  080061d8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d8  080061d8  000161d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061dc  080061dc  000161dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080061e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000078  08006258  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08006258  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f77  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e1  00000000  00000000  0003101f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00033200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00033ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e66b  00000000  00000000  00034ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0af  00000000  00000000  00053143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd988  00000000  00000000  000621f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011fb7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b1c  00000000  00000000  0011fbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080060fc 	.word	0x080060fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	080060fc 	.word	0x080060fc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
	//if(PFlag == 2){
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	b29a      	uxth	r2, r3
 800052c:	230a      	movs	r3, #10
 800052e:	68b9      	ldr	r1, [r7, #8]
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <_write+0x24>)
 8000532:	f003 f96d 	bl	8003810 <HAL_UART_Transmit>
		return len;
 8000536:	687b      	ldr	r3, [r7, #4]
	else if(PFlag ==1){
		HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 10);
		return len;
	}
	*/
}
 8000538:	4618      	mov	r0, r3
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000188 	.word	0x20000188

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
	FDCAN_TxHeaderTypeDef TxHeader;



	//printf("Initialized\r\n");
	uint8_t Flag1 = 1;
 800054a:	2301      	movs	r3, #1
 800054c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t Flag2 = 1;
 8000550:	2301      	movs	r3, #1
 8000552:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t FlagL = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	uint8_t FlagR = 1;
 800055c:	2301      	movs	r3, #1
 800055e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	uint8_t _inputs[11]={};
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	f8c3 2003 	str.w	r2, [r3, #3]
	uint8_t inputs[11]={};
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	f8c3 2003 	str.w	r2, [r3, #3]

	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000582:	2300      	movs	r3, #0
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000586:	2300      	movs	r3, #0
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.DataLength = FDCAN_DLC_BYTES_3;
 800058a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000590:	2300      	movs	r3, #0
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000594:	2300      	movs	r3, #0
 8000596:	637b      	str	r3, [r7, #52]	; 0x34
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000598:	2300      	movs	r3, #0
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800059c:	2300      	movs	r3, #0
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
	TxHeader.MessageMarker = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
	TxHeader.Identifier = CANID_ROBOTVEL;
 80005a4:	f240 230f 	movw	r3, #527	; 0x20f
 80005a8:	623b      	str	r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 ff66 	bl	800147a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 fb0d 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 fc81 	bl	8000eb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b6:	f000 fc29 	bl	8000e0c <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 80005ba:	f000 fb53 	bl	8000c64 <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 80005be:	f000 fbd1 	bl	8000d64 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for(i=0; i<3; i++){
 80005c2:	2300      	movs	r3, #0
 80005c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80005c8:	e027      	b.n	800061a <main+0xd6>
		  TxData[i] = 127+(float)(UART_RxData[i]-80)*127/40;
 80005ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005ce:	4acf      	ldr	r2, [pc, #828]	; (800090c <main+0x3c8>)
 80005d0:	56d3      	ldrsb	r3, [r2, r3]
 80005d2:	3b50      	subs	r3, #80	; 0x50
 80005d4:	ee07 3a90 	vmov	s15, r3
 80005d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005dc:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8000910 <main+0x3cc>
 80005e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005e4:	eddf 6acb 	vldr	s13, [pc, #812]	; 8000914 <main+0x3d0>
 80005e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005ec:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 8000910 <main+0x3cc>
 80005f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8000600:	793a      	ldrb	r2, [r7, #4]
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	3348      	adds	r3, #72	; 0x48
 8000606:	f107 0108 	add.w	r1, r7, #8
 800060a:	440b      	add	r3, r1
 800060c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  for(i=0; i<3; i++){
 8000610:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000614:	3301      	adds	r3, #1
 8000616:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800061a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800061e:	2b02      	cmp	r3, #2
 8000620:	d9d3      	bls.n	80005ca <main+0x86>
	  }
	  TxHeader.Identifier = CANID_ROBOTVEL;
 8000622:	f240 230f 	movw	r3, #527	; 0x20f
 8000626:	623b      	str	r3, [r7, #32]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_3;
 8000628:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800062c:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //printf("X:%d, Y%d, Om%d\r\n", TxData[0], TxData[1], TxData[2]);

	  if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 800062e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	4619      	mov	r1, r3
 8000638:	48b7      	ldr	r0, [pc, #732]	; (8000918 <main+0x3d4>)
 800063a:	f001 fb8e 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <main+0x104>
		  Error_Handler();
 8000644:	f000 fce6 	bl	8001014 <Error_Handler>
	  }




	  TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c

	  for(i=0; i<11; i++){
 800064e:	2300      	movs	r3, #0
 8000650:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000654:	e033      	b.n	80006be <main+0x17a>
		  if(i<6){
 8000656:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800065a:	2b05      	cmp	r3, #5
 800065c:	d815      	bhi.n	800068a <main+0x146>
			  inputs[i] = (UART_RxData[3]>>(i+2))&1;
 800065e:	4bab      	ldr	r3, [pc, #684]	; (800090c <main+0x3c8>)
 8000660:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000664:	461a      	mov	r2, r3
 8000666:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800066a:	3302      	adds	r3, #2
 800066c:	fa42 f303 	asr.w	r3, r2, r3
 8000670:	b2da      	uxtb	r2, r3
 8000672:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000676:	f002 0201 	and.w	r2, r2, #1
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	3348      	adds	r3, #72	; 0x48
 800067e:	f107 0108 	add.w	r1, r7, #8
 8000682:	440b      	add	r3, r1
 8000684:	f803 2c48 	strb.w	r2, [r3, #-72]
 8000688:	e014      	b.n	80006b4 <main+0x170>
		  }
		  else{
			  inputs[i] = (UART_RxData[4]>>(i-4))&1;
 800068a:	4ba0      	ldr	r3, [pc, #640]	; (800090c <main+0x3c8>)
 800068c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000690:	461a      	mov	r2, r3
 8000692:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000696:	3b04      	subs	r3, #4
 8000698:	fa42 f303 	asr.w	r3, r2, r3
 800069c:	b2da      	uxtb	r2, r3
 800069e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80006a2:	f002 0201 	and.w	r2, r2, #1
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	3348      	adds	r3, #72	; 0x48
 80006aa:	f107 0108 	add.w	r1, r7, #8
 80006ae:	440b      	add	r3, r1
 80006b0:	f803 2c48 	strb.w	r2, [r3, #-72]
	  for(i=0; i<11; i++){
 80006b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80006b8:	3301      	adds	r3, #1
 80006ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80006be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d9c7      	bls.n	8000656 <main+0x112>

		  //printf("%d: %d\r\n", i, inputs[i]);
	  }


	  for(uint8_t i=0; i<11; i++){
 80006c6:	2300      	movs	r3, #0
 80006c8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80006cc:	e272      	b.n	8000bb4 <main+0x670>
		  if(inputs[i] != _inputs[i]){
 80006ce:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80006d2:	3348      	adds	r3, #72	; 0x48
 80006d4:	f107 0208 	add.w	r2, r7, #8
 80006d8:	4413      	add	r3, r2
 80006da:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 80006de:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80006e2:	3348      	adds	r3, #72	; 0x48
 80006e4:	f107 0108 	add.w	r1, r7, #8
 80006e8:	440b      	add	r3, r1
 80006ea:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	f000 8234 	beq.w	8000b5c <main+0x618>
			  switch(i){
 80006f4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80006f8:	2b0a      	cmp	r3, #10
 80006fa:	f200 8246 	bhi.w	8000b8a <main+0x646>
 80006fe:	a201      	add	r2, pc, #4	; (adr r2, 8000704 <main+0x1c0>)
 8000700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000704:	08000771 	.word	0x08000771
 8000708:	0800097d 	.word	0x0800097d
 800070c:	080007ef 	.word	0x080007ef
 8000710:	08000a91 	.word	0x08000a91
 8000714:	08000a3b 	.word	0x08000a3b
 8000718:	08000b09 	.word	0x08000b09
 800071c:	08000731 	.word	0x08000731
 8000720:	0800086d 	.word	0x0800086d
 8000724:	080008ad 	.word	0x080008ad
 8000728:	0800091d 	.word	0x0800091d
 800072c:	080009fb 	.word	0x080009fb
			  case 6:
				  if(inputs[i]==ON){
 8000730:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000734:	3348      	adds	r3, #72	; 0x48
 8000736:	f107 0208 	add.w	r2, r7, #8
 800073a:	4413      	add	r3, r2
 800073c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000740:	2b01      	cmp	r3, #1
 8000742:	f040 820d 	bne.w	8000b60 <main+0x61c>
					  TxHeader.Identifier = CANID_CYL_SET;
 8000746:	f44f 738a 	mov.w	r3, #276	; 0x114
 800074a:	623b      	str	r3, [r7, #32]
					  TxData[0] = 7;
 800074c:	2307      	movs	r3, #7
 800074e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000752:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4619      	mov	r1, r3
 800075c:	486e      	ldr	r0, [pc, #440]	; (8000918 <main+0x3d4>)
 800075e:	f001 fafc 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	f000 81fb 	beq.w	8000b60 <main+0x61c>

							Error_Handler();
 800076a:	f000 fc53 	bl	8001014 <Error_Handler>
					  }
				  }
				  //printf("Set\r\n");

				  break;
 800076e:	e1f7      	b.n	8000b60 <main+0x61c>


			  case 0:
				  if(inputs[i]==ON){
 8000770:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000774:	3348      	adds	r3, #72	; 0x48
 8000776:	f107 0208 	add.w	r2, r7, #8
 800077a:	4413      	add	r3, r2
 800077c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d114      	bne.n	80007ae <main+0x26a>
					  TxHeader.Identifier = CANID_BAL_SPL_1;
 8000784:	f240 131b 	movw	r3, #283	; 0x11b
 8000788:	623b      	str	r3, [r7, #32]
					  TxData[0] = 7;
 800078a:	2307      	movs	r3, #7
 800078c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  //printf("BAL1 supply\r\n");
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000790:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4619      	mov	r1, r3
 800079a:	485f      	ldr	r0, [pc, #380]	; (8000918 <main+0x3d4>)
 800079c:	f001 fadd 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	f000 81de 	beq.w	8000b64 <main+0x620>

							Error_Handler();
 80007a8:	f000 fc34 	bl	8001014 <Error_Handler>

							Error_Handler();
					  }
				  }

				  break;
 80007ac:	e1da      	b.n	8000b64 <main+0x620>
				  else if(inputs[i] == OFF) {
 80007ae:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80007b2:	3348      	adds	r3, #72	; 0x48
 80007b4:	f107 0208 	add.w	r2, r7, #8
 80007b8:	4413      	add	r3, r2
 80007ba:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f040 81d0 	bne.w	8000b64 <main+0x620>
					  TxHeader.Identifier = CANID_BAL_SPL_1;
 80007c4:	f240 131b 	movw	r3, #283	; 0x11b
 80007c8:	623b      	str	r3, [r7, #32]
					  TxData[0] = 6;
 80007ca:	2306      	movs	r3, #6
 80007cc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80007d0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	4619      	mov	r1, r3
 80007da:	484f      	ldr	r0, [pc, #316]	; (8000918 <main+0x3d4>)
 80007dc:	f001 fabd 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 81be 	beq.w	8000b64 <main+0x620>
							Error_Handler();
 80007e8:	f000 fc14 	bl	8001014 <Error_Handler>
				  break;
 80007ec:	e1ba      	b.n	8000b64 <main+0x620>


			  case 2:
				  if(inputs[i]==ON){
 80007ee:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80007f2:	3348      	adds	r3, #72	; 0x48
 80007f4:	f107 0208 	add.w	r2, r7, #8
 80007f8:	4413      	add	r3, r2
 80007fa:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d114      	bne.n	800082c <main+0x2e8>
					  TxHeader.Identifier = CANID_BAL_SPL_2;
 8000802:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8000806:	623b      	str	r3, [r7, #32]
					  TxData[0] = 7;
 8000808:	2307      	movs	r3, #7
 800080a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  //printf("BAL2 Supply\r\n");
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 800080e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	4619      	mov	r1, r3
 8000818:	483f      	ldr	r0, [pc, #252]	; (8000918 <main+0x3d4>)
 800081a:	f001 fa9e 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	f000 81a1 	beq.w	8000b68 <main+0x624>

							Error_Handler();
 8000826:	f000 fbf5 	bl	8001014 <Error_Handler>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {

							Error_Handler();
					  }
				  }
				  break;
 800082a:	e19d      	b.n	8000b68 <main+0x624>
				  else if(inputs[i] == OFF) {
 800082c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000830:	3348      	adds	r3, #72	; 0x48
 8000832:	f107 0208 	add.w	r2, r7, #8
 8000836:	4413      	add	r3, r2
 8000838:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800083c:	2b00      	cmp	r3, #0
 800083e:	f040 8193 	bne.w	8000b68 <main+0x624>
					  TxHeader.Identifier = CANID_BAL_SPL_2;
 8000842:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8000846:	623b      	str	r3, [r7, #32]
					  TxData[0] = 6;
 8000848:	2306      	movs	r3, #6
 800084a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 800084e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	4619      	mov	r1, r3
 8000858:	482f      	ldr	r0, [pc, #188]	; (8000918 <main+0x3d4>)
 800085a:	f001 fa7e 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	f000 8181 	beq.w	8000b68 <main+0x624>
							Error_Handler();
 8000866:	f000 fbd5 	bl	8001014 <Error_Handler>
				  break;
 800086a:	e17d      	b.n	8000b68 <main+0x624>


			  case 7:
				  if(inputs[i]==ON){
 800086c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000870:	3348      	adds	r3, #72	; 0x48
 8000872:	f107 0208 	add.w	r2, r7, #8
 8000876:	4413      	add	r3, r2
 8000878:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 8175 	bne.w	8000b6c <main+0x628>
					  TxHeader.Identifier = CANID_CYL_PICK;
 8000882:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000886:	623b      	str	r3, [r7, #32]
					  TxData[0] = 3;
 8000888:	2303      	movs	r3, #3
 800088a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

					  //printf("Pick\r\n");
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 800088e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000892:	f107 0320 	add.w	r3, r7, #32
 8000896:	4619      	mov	r1, r3
 8000898:	481f      	ldr	r0, [pc, #124]	; (8000918 <main+0x3d4>)
 800089a:	f001 fa5e 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	f000 8163 	beq.w	8000b6c <main+0x628>

							Error_Handler();
 80008a6:	f000 fbb5 	bl	8001014 <Error_Handler>
					  }
				  }
				  break;
 80008aa:	e15f      	b.n	8000b6c <main+0x628>


			  case 8:
				  if(inputs[i]==ON){
 80008ac:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80008b0:	3348      	adds	r3, #72	; 0x48
 80008b2:	f107 0208 	add.w	r2, r7, #8
 80008b6:	4413      	add	r3, r2
 80008b8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	f040 8157 	bne.w	8000b70 <main+0x62c>
					  TxHeader.Identifier = CANID_LED;
 80008c2:	f44f 738d 	mov.w	r3, #282	; 0x11a
 80008c6:	623b      	str	r3, [r7, #32]

					  if(FlagL==0)FlagL=1;
 80008c8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d103      	bne.n	80008d8 <main+0x394>
 80008d0:	2301      	movs	r3, #1
 80008d2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80008d6:	e006      	b.n	80008e6 <main+0x3a2>
					  else if(FlagL==1)FlagL=0;
 80008d8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d102      	bne.n	80008e6 <main+0x3a2>
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

					  TxData[0] = FlagL;
 80008e6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80008ea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  //printf("LED\r\n");
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80008ee:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80008f2:	f107 0320 	add.w	r3, r7, #32
 80008f6:	4619      	mov	r1, r3
 80008f8:	4807      	ldr	r0, [pc, #28]	; (8000918 <main+0x3d4>)
 80008fa:	f001 fa2e 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	f000 8135 	beq.w	8000b70 <main+0x62c>

							Error_Handler();
 8000906:	f000 fb85 	bl	8001014 <Error_Handler>
					  }
				  }
				  break;
 800090a:	e131      	b.n	8000b70 <main+0x62c>
 800090c:	20000000 	.word	0x20000000
 8000910:	42fe0000 	.word	0x42fe0000
 8000914:	42200000 	.word	0x42200000
 8000918:	20000094 	.word	0x20000094


			  case 9:
				  if(inputs[i]==ON){
 800091c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000920:	3348      	adds	r3, #72	; 0x48
 8000922:	f107 0208 	add.w	r2, r7, #8
 8000926:	4413      	add	r3, r2
 8000928:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800092c:	2b01      	cmp	r3, #1
 800092e:	f040 8121 	bne.w	8000b74 <main+0x630>
					  TxHeader.Identifier = CANID_CYL_RELEASE;
 8000932:	f240 1319 	movw	r3, #281	; 0x119
 8000936:	623b      	str	r3, [r7, #32]

					  if(FlagR==1)FlagR=2;
 8000938:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800093c:	2b01      	cmp	r3, #1
 800093e:	d103      	bne.n	8000948 <main+0x404>
 8000940:	2302      	movs	r3, #2
 8000942:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000946:	e006      	b.n	8000956 <main+0x412>
					  else if(FlagR==2)FlagR=1;
 8000948:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800094c:	2b02      	cmp	r3, #2
 800094e:	d102      	bne.n	8000956 <main+0x412>
 8000950:	2301      	movs	r3, #1
 8000952:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

					  TxData[0] = FlagR;
 8000956:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800095a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  //printf("Release%d\r\n", FlagR);
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 800095e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	4619      	mov	r1, r3
 8000968:	4897      	ldr	r0, [pc, #604]	; (8000bc8 <main+0x684>)
 800096a:	f001 f9f6 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	f000 80ff 	beq.w	8000b74 <main+0x630>

							Error_Handler();
 8000976:	f000 fb4d 	bl	8001014 <Error_Handler>
					  }
				  }
				  break;
 800097a:	e0fb      	b.n	8000b74 <main+0x630>


			  case 1:
				  if(inputs[i]==ON){
 800097c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000980:	3348      	adds	r3, #72	; 0x48
 8000982:	f107 0208 	add.w	r2, r7, #8
 8000986:	4413      	add	r3, r2
 8000988:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d114      	bne.n	80009ba <main+0x476>
					  TxHeader.Identifier = CANID_BAL_DSC_2;
 8000990:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8000994:	623b      	str	r3, [r7, #32]
					  TxData[0] = 7;
 8000996:	2307      	movs	r3, #7
 8000998:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

					  //printf("BAL2 Discharge\r\n");
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 800099c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80009a0:	f107 0320 	add.w	r3, r7, #32
 80009a4:	4619      	mov	r1, r3
 80009a6:	4888      	ldr	r0, [pc, #544]	; (8000bc8 <main+0x684>)
 80009a8:	f001 f9d7 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 80e2 	beq.w	8000b78 <main+0x634>

							Error_Handler();
 80009b4:	f000 fb2e 	bl	8001014 <Error_Handler>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {

							Error_Handler();
					  }
				  }
				  break;
 80009b8:	e0de      	b.n	8000b78 <main+0x634>
				  else if(inputs[i] == OFF) {
 80009ba:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80009be:	3348      	adds	r3, #72	; 0x48
 80009c0:	f107 0208 	add.w	r2, r7, #8
 80009c4:	4413      	add	r3, r2
 80009c6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f040 80d4 	bne.w	8000b78 <main+0x634>
					  TxHeader.Identifier = CANID_BAL_DSC_2;
 80009d0:	f44f 738f 	mov.w	r3, #286	; 0x11e
 80009d4:	623b      	str	r3, [r7, #32]
					  TxData[0] = 6;
 80009d6:	2306      	movs	r3, #6
 80009d8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80009dc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	4619      	mov	r1, r3
 80009e6:	4878      	ldr	r0, [pc, #480]	; (8000bc8 <main+0x684>)
 80009e8:	f001 f9b7 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 80c2 	beq.w	8000b78 <main+0x634>
							Error_Handler();
 80009f4:	f000 fb0e 	bl	8001014 <Error_Handler>
				  break;
 80009f8:	e0be      	b.n	8000b78 <main+0x634>


			  case 10:
				  if(inputs[i]==ON){
 80009fa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80009fe:	3348      	adds	r3, #72	; 0x48
 8000a00:	f107 0208 	add.w	r2, r7, #8
 8000a04:	4413      	add	r3, r2
 8000a06:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	f040 80b6 	bne.w	8000b7c <main+0x638>
					  TxHeader.Identifier = CANID_CYL_THROW;
 8000a10:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a14:	623b      	str	r3, [r7, #32]
					  TxData[0] = 3;
 8000a16:	2303      	movs	r3, #3
 8000a18:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  //printf("Throw\r\n");
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000a1c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000a20:	f107 0320 	add.w	r3, r7, #32
 8000a24:	4619      	mov	r1, r3
 8000a26:	4868      	ldr	r0, [pc, #416]	; (8000bc8 <main+0x684>)
 8000a28:	f001 f997 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 80a4 	beq.w	8000b7c <main+0x638>

							Error_Handler();
 8000a34:	f000 faee 	bl	8001014 <Error_Handler>
					  }
				  }
				  break;
 8000a38:	e0a0      	b.n	8000b7c <main+0x638>


			  case 4:
				  if(inputs[i]==ON){
 8000a3a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000a3e:	3348      	adds	r3, #72	; 0x48
 8000a40:	f107 0208 	add.w	r2, r7, #8
 8000a44:	4413      	add	r3, r2
 8000a46:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	f040 8098 	bne.w	8000b80 <main+0x63c>
					  TxHeader.Identifier = CANID_CYL_BLARM_2;
 8000a50:	f240 1317 	movw	r3, #279	; 0x117
 8000a54:	623b      	str	r3, [r7, #32]
					  if(Flag2 == 1)Flag2=6;
 8000a56:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d103      	bne.n	8000a66 <main+0x522>
 8000a5e:	2306      	movs	r3, #6
 8000a60:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000a64:	e002      	b.n	8000a6c <main+0x528>
					  else Flag2=1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

					  TxData[0] = Flag2;
 8000a6c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a70:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

					  //printf("Arm2-%d\r\n",Flag2);
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000a74:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000a78:	f107 0320 	add.w	r3, r7, #32
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4852      	ldr	r0, [pc, #328]	; (8000bc8 <main+0x684>)
 8000a80:	f001 f96b 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d07a      	beq.n	8000b80 <main+0x63c>

							Error_Handler();
 8000a8a:	f000 fac3 	bl	8001014 <Error_Handler>
					  }

				  }

				  break;
 8000a8e:	e077      	b.n	8000b80 <main+0x63c>


			  case 3:
				  if(inputs[i]==ON){
 8000a90:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000a94:	3348      	adds	r3, #72	; 0x48
 8000a96:	f107 0208 	add.w	r2, r7, #8
 8000a9a:	4413      	add	r3, r2
 8000a9c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d113      	bne.n	8000acc <main+0x588>
					  TxHeader.Identifier = CANID_BAL_DSC_1;
 8000aa4:	f240 131d 	movw	r3, #285	; 0x11d
 8000aa8:	623b      	str	r3, [r7, #32]
					  TxData[0] = 7;
 8000aaa:	2307      	movs	r3, #7
 8000aac:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

					  //printf("BAL1 Discharge\r\n");
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000ab0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000ab4:	f107 0320 	add.w	r3, r7, #32
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4843      	ldr	r0, [pc, #268]	; (8000bc8 <main+0x684>)
 8000abc:	f001 f94d 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d05e      	beq.n	8000b84 <main+0x640>

							Error_Handler();
 8000ac6:	f000 faa5 	bl	8001014 <Error_Handler>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {

							Error_Handler();
					  }
				  }
				  break;
 8000aca:	e05b      	b.n	8000b84 <main+0x640>
				  else if(inputs[i] == OFF) {
 8000acc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000ad0:	3348      	adds	r3, #72	; 0x48
 8000ad2:	f107 0208 	add.w	r2, r7, #8
 8000ad6:	4413      	add	r3, r2
 8000ad8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d151      	bne.n	8000b84 <main+0x640>
					  TxHeader.Identifier = CANID_BAL_DSC_1;
 8000ae0:	f240 131d 	movw	r3, #285	; 0x11d
 8000ae4:	623b      	str	r3, [r7, #32]
					  TxData[0] = 6;
 8000ae6:	2306      	movs	r3, #6
 8000ae8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000aec:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4619      	mov	r1, r3
 8000af6:	4834      	ldr	r0, [pc, #208]	; (8000bc8 <main+0x684>)
 8000af8:	f001 f92f 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d040      	beq.n	8000b84 <main+0x640>
							Error_Handler();
 8000b02:	f000 fa87 	bl	8001014 <Error_Handler>
				  break;
 8000b06:	e03d      	b.n	8000b84 <main+0x640>


			  case 5:

				  if(inputs[i]==OFF){
 8000b08:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000b0c:	3348      	adds	r3, #72	; 0x48
 8000b0e:	f107 0208 	add.w	r2, r7, #8
 8000b12:	4413      	add	r3, r2
 8000b14:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d135      	bne.n	8000b88 <main+0x644>
					  TxHeader.Identifier = CANID_CYL_BLARM_1;
 8000b1c:	f44f 738b 	mov.w	r3, #278	; 0x116
 8000b20:	623b      	str	r3, [r7, #32]
					  if(Flag1 == 1)Flag1=6;
 8000b22:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d103      	bne.n	8000b32 <main+0x5ee>
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000b30:	e002      	b.n	8000b38 <main+0x5f4>
					  else Flag1=1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
					  //printf("arm1-%d\r\n",Flag1);

					  TxData[0] = Flag1;
 8000b38:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000b3c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000b40:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481f      	ldr	r0, [pc, #124]	; (8000bc8 <main+0x684>)
 8000b4c:	f001 f905 	bl	8001d5a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d018      	beq.n	8000b88 <main+0x644>

							Error_Handler();
 8000b56:	f000 fa5d 	bl	8001014 <Error_Handler>
					  }

				  }
				  break;
 8000b5a:	e015      	b.n	8000b88 <main+0x644>
			  }
		  }
 8000b5c:	bf00      	nop
 8000b5e:	e014      	b.n	8000b8a <main+0x646>
				  break;
 8000b60:	bf00      	nop
 8000b62:	e012      	b.n	8000b8a <main+0x646>
				  break;
 8000b64:	bf00      	nop
 8000b66:	e010      	b.n	8000b8a <main+0x646>
				  break;
 8000b68:	bf00      	nop
 8000b6a:	e00e      	b.n	8000b8a <main+0x646>
				  break;
 8000b6c:	bf00      	nop
 8000b6e:	e00c      	b.n	8000b8a <main+0x646>
				  break;
 8000b70:	bf00      	nop
 8000b72:	e00a      	b.n	8000b8a <main+0x646>
				  break;
 8000b74:	bf00      	nop
 8000b76:	e008      	b.n	8000b8a <main+0x646>
				  break;
 8000b78:	bf00      	nop
 8000b7a:	e006      	b.n	8000b8a <main+0x646>
				  break;
 8000b7c:	bf00      	nop
 8000b7e:	e004      	b.n	8000b8a <main+0x646>
				  break;
 8000b80:	bf00      	nop
 8000b82:	e002      	b.n	8000b8a <main+0x646>
				  break;
 8000b84:	bf00      	nop
 8000b86:	e000      	b.n	8000b8a <main+0x646>
				  break;
 8000b88:	bf00      	nop
		  _inputs[i] = inputs[i];
 8000b8a:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8000b8e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000b92:	3248      	adds	r2, #72	; 0x48
 8000b94:	f107 0108 	add.w	r1, r7, #8
 8000b98:	440a      	add	r2, r1
 8000b9a:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8000b9e:	3348      	adds	r3, #72	; 0x48
 8000ba0:	f107 0108 	add.w	r1, r7, #8
 8000ba4:	440b      	add	r3, r1
 8000ba6:	f803 2c3c 	strb.w	r2, [r3, #-60]
	  for(uint8_t i=0; i<11; i++){
 8000baa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000bae:	3301      	adds	r3, #1
 8000bb0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8000bb4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000bb8:	2b0a      	cmp	r3, #10
 8000bba:	f67f ad88 	bls.w	80006ce <main+0x18a>
	  }
	  HAL_Delay(20);
 8000bbe:	2014      	movs	r0, #20
 8000bc0:	f000 fccc 	bl	800155c <HAL_Delay>
	  for(i=0; i<3; i++){
 8000bc4:	e4fd      	b.n	80005c2 <main+0x7e>
 8000bc6:	bf00      	nop
 8000bc8:	20000094 	.word	0x20000094

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b094      	sub	sp, #80	; 0x50
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 0318 	add.w	r3, r7, #24
 8000bd6:	2238      	movs	r2, #56	; 0x38
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 fe38 	bl	8005850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bf2:	f001 fdf5 	bl	80027e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c00:	2340      	movs	r3, #64	; 0x40
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c04:	2302      	movs	r3, #2
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c10:	230a      	movs	r3, #10
 8000c12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 fe7f 	bl	8002928 <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000c30:	f000 f9f0 	bl	8001014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	230f      	movs	r3, #15
 8000c36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 f983 	bl	8002f58 <HAL_RCC_ClockConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c58:	f000 f9dc 	bl	8001014 <Error_Handler>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3750      	adds	r7, #80	; 0x50
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000c6c:	4a3c      	ldr	r2, [pc, #240]	; (8000d60 <MX_FDCAN1_Init+0xfc>)
 8000c6e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000c70:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c76:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c7c:	4b37      	ldr	r3, [pc, #220]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c82:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c88:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c8e:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000c94:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000c96:	2205      	movs	r2, #5
 8000c98:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000c9a:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000c9c:	2210      	movs	r2, #16
 8000c9e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000ca0:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000ca2:	220d      	movs	r2, #13
 8000ca4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000ca8:	2202      	movs	r2, #2
 8000caa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000cac:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000cb8:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000cba:	2205      	movs	r2, #5
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000cc4:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000cca:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000cd6:	4821      	ldr	r0, [pc, #132]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000cd8:	f000 fe32 	bl	8001940 <HAL_FDCAN_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000ce2:	f000 f997 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x700;
 8000cf6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000cfa:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8000cfc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d00:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000d02:	463b      	mov	r3, r7
 8000d04:	4619      	mov	r1, r3
 8000d06:	4815      	ldr	r0, [pc, #84]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000d08:	f000 ff74 	bl	8001bf4 <HAL_FDCAN_ConfigFilter>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_FDCAN1_Init+0xb2>
		Error_Handler();
 8000d12:	f000 f97f 	bl	8001014 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8000d16:	2300      	movs	r3, #0
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	2102      	movs	r1, #2
 8000d20:	480e      	ldr	r0, [pc, #56]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000d22:	f000 ffc1 	bl	8001ca8 <HAL_FDCAN_ConfigGlobalFilter>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_FDCAN1_Init+0xcc>
		Error_Handler();
 8000d2c:	f000 f972 	bl	8001014 <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000d30:	480a      	ldr	r0, [pc, #40]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000d32:	f000 ffea 	bl	8001d0a <HAL_FDCAN_Start>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_FDCAN1_Init+0xdc>
		Error_Handler();
 8000d3c:	f000 f96a 	bl	8001014 <Error_Handler>
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000d40:	2200      	movs	r2, #0
 8000d42:	2101      	movs	r1, #1
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_FDCAN1_Init+0xf8>)
 8000d46:	f001 f84c 	bl	8001de2 <HAL_FDCAN_ActivateNotification>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_FDCAN1_Init+0xf0>
	  Error_Handler();
 8000d50:	f000 f960 	bl	8001014 <Error_Handler>
	}

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000094 	.word	0x20000094
 8000d60:	40006400 	.word	0x40006400

08000d64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d68:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000d6a:	4a26      	ldr	r2, [pc, #152]	; (8000e04 <MX_USART1_UART_Init+0xa0>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d6e:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dac:	4814      	ldr	r0, [pc, #80]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000dae:	f002 fcdf 	bl	8003770 <HAL_UART_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000db8:	f000 f92c 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4810      	ldr	r0, [pc, #64]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000dc0:	f004 fc51 	bl	8005666 <HAL_UARTEx_SetTxFifoThreshold>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dca:	f000 f923 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	480b      	ldr	r0, [pc, #44]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000dd2:	f004 fc86 	bl	80056e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ddc:	f000 f91a 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000de2:	f004 fc07 	bl	80055f4 <HAL_UARTEx_DisableFifoMode>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000dec:	f000 f912 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, byte, BUF_SIZE);
 8000df0:	222c      	movs	r2, #44	; 0x2c
 8000df2:	4905      	ldr	r1, [pc, #20]	; (8000e08 <MX_USART1_UART_Init+0xa4>)
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000df6:	f002 fda1 	bl	800393c <HAL_UART_Receive_IT>

  /* USER CODE END USART1_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000f8 	.word	0x200000f8
 8000e04:	40013800 	.word	0x40013800
 8000e08:	20000218 	.word	0x20000218

08000e0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e10:	4b26      	ldr	r3, [pc, #152]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e12:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <MX_USART2_UART_Init+0xa4>)
 8000e14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e24:	4b21      	ldr	r3, [pc, #132]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e30:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e32:	220c      	movs	r2, #12
 8000e34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e54:	4815      	ldr	r0, [pc, #84]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e56:	f002 fc8b 	bl	8003770 <HAL_UART_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e60:	f000 f8d8 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e64:	2100      	movs	r1, #0
 8000e66:	4811      	ldr	r0, [pc, #68]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e68:	f004 fbfd 	bl	8005666 <HAL_UARTEx_SetTxFifoThreshold>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e72:	f000 f8cf 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e7a:	f004 fc32 	bl	80056e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e84:	f000 f8c6 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e88:	4808      	ldr	r0, [pc, #32]	; (8000eac <MX_USART2_UART_Init+0xa0>)
 8000e8a:	f004 fbb3 	bl	80055f4 <HAL_UARTEx_DisableFifoMode>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e94:	f000 f8be 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  setbuf(stdout, NULL);
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_USART2_UART_Init+0xa8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f004 fcdd 	bl	8005860 <setbuf>

  /* USER CODE END USART2_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000188 	.word	0x20000188
 8000eb0:	40004400 	.word	0x40004400
 8000eb4:	20000014 	.word	0x20000014

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_GPIO_Init+0x78>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <MX_GPIO_Init+0x78>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_GPIO_Init+0x78>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_GPIO_Init+0x78>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <MX_GPIO_Init+0x78>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_GPIO_Init+0x78>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <MX_GPIO_Init+0x7c>)
 8000f06:	f001 fc53 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_GPIO_Init+0x7c>)
 8000f24:	f001 fac2 	bl	80024ac <HAL_GPIO_Init>

}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48000400 	.word	0x48000400

08000f38 <HAL_UART_RxCpltCallback>:
		}

	}
}*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart1, byte, BUF_SIZE, 100);
		//HAL_UART_Transmit(&huart2, "hello", BUF_SIZE, 100);

		HAL_UART_Receive_IT(&huart2, byte, BUF_SIZE);
	}*/
	if(huart->Instance == USART1){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a2d      	ldr	r2, [pc, #180]	; (8000ffc <HAL_UART_RxCpltCallback+0xc4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d153      	bne.n	8000ff2 <HAL_UART_RxCpltCallback+0xba>
		uint8_t ID[] = "202753F";
 8000f4a:	4a2d      	ldr	r2, [pc, #180]	; (8001000 <HAL_UART_RxCpltCallback+0xc8>)
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f54:	e883 0003 	stmia.w	r3, {r0, r1}
		uint8_t IDFlag = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	75fb      	strb	r3, [r7, #23]
		//printf("Get Message\r\n");
		for(uint8_t i=0; i<7; i++){
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	75bb      	strb	r3, [r7, #22]
 8000f60:	e013      	b.n	8000f8a <HAL_UART_RxCpltCallback+0x52>
			if(ID[i] == byte[16+i]){
 8000f62:	7dbb      	ldrb	r3, [r7, #22]
 8000f64:	3318      	adds	r3, #24
 8000f66:	443b      	add	r3, r7
 8000f68:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000f6c:	7dbb      	ldrb	r3, [r7, #22]
 8000f6e:	3310      	adds	r3, #16
 8000f70:	4924      	ldr	r1, [pc, #144]	; (8001004 <HAL_UART_RxCpltCallback+0xcc>)
 8000f72:	5ccb      	ldrb	r3, [r1, r3]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d102      	bne.n	8000f7e <HAL_UART_RxCpltCallback+0x46>
				IDFlag = 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	75fb      	strb	r3, [r7, #23]
 8000f7c:	e002      	b.n	8000f84 <HAL_UART_RxCpltCallback+0x4c>
			}
			else {
				IDFlag = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	75fb      	strb	r3, [r7, #23]
				break;
 8000f82:	e005      	b.n	8000f90 <HAL_UART_RxCpltCallback+0x58>
		for(uint8_t i=0; i<7; i++){
 8000f84:	7dbb      	ldrb	r3, [r7, #22]
 8000f86:	3301      	adds	r3, #1
 8000f88:	75bb      	strb	r3, [r7, #22]
 8000f8a:	7dbb      	ldrb	r3, [r7, #22]
 8000f8c:	2b06      	cmp	r3, #6
 8000f8e:	d9e8      	bls.n	8000f62 <HAL_UART_RxCpltCallback+0x2a>
			}
		}
		if(IDFlag==1){
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d114      	bne.n	8000fc0 <HAL_UART_RxCpltCallback+0x88>
			for(uint8_t i=0; i<5; i++){
 8000f96:	2300      	movs	r3, #0
 8000f98:	757b      	strb	r3, [r7, #21]
 8000f9a:	e00d      	b.n	8000fb8 <HAL_UART_RxCpltCallback+0x80>
				UART_RxData[i] = byte[32+i];
 8000f9c:	7d7b      	ldrb	r3, [r7, #21]
 8000f9e:	3320      	adds	r3, #32
 8000fa0:	4a18      	ldr	r2, [pc, #96]	; (8001004 <HAL_UART_RxCpltCallback+0xcc>)
 8000fa2:	5cd2      	ldrb	r2, [r2, r3]
 8000fa4:	7d7b      	ldrb	r3, [r7, #21]
 8000fa6:	b251      	sxtb	r1, r2
 8000fa8:	4a17      	ldr	r2, [pc, #92]	; (8001008 <HAL_UART_RxCpltCallback+0xd0>)
 8000faa:	54d1      	strb	r1, [r2, r3]
				PFlag=2;
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_UART_RxCpltCallback+0xd4>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<5; i++){
 8000fb2:	7d7b      	ldrb	r3, [r7, #21]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	757b      	strb	r3, [r7, #21]
 8000fb8:	7d7b      	ldrb	r3, [r7, #21]
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d9ee      	bls.n	8000f9c <HAL_UART_RxCpltCallback+0x64>
 8000fbe:	e013      	b.n	8000fe8 <HAL_UART_RxCpltCallback+0xb0>
				//printf("%d: %x\r\n", i, UART_RxData[i]);
			}
		}
		else {
			memset(byte, 0, BUF_SIZE + 10);
 8000fc0:	2236      	movs	r2, #54	; 0x36
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	480f      	ldr	r0, [pc, #60]	; (8001004 <HAL_UART_RxCpltCallback+0xcc>)
 8000fc6:	f004 fc43 	bl	8005850 <memset>

			UART_RxData[0] = 80;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_UART_RxCpltCallback+0xd0>)
 8000fcc:	2250      	movs	r2, #80	; 0x50
 8000fce:	701a      	strb	r2, [r3, #0]
			UART_RxData[1] = 80;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_UART_RxCpltCallback+0xd0>)
 8000fd2:	2250      	movs	r2, #80	; 0x50
 8000fd4:	705a      	strb	r2, [r3, #1]
			UART_RxData[2] = 80;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_UART_RxCpltCallback+0xd0>)
 8000fd8:	2250      	movs	r2, #80	; 0x50
 8000fda:	709a      	strb	r2, [r3, #2]
			UART_RxData[3] = 0x00;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_UART_RxCpltCallback+0xd0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	70da      	strb	r2, [r3, #3]
			UART_RxData[4] = 0x00;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <HAL_UART_RxCpltCallback+0xd0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	711a      	strb	r2, [r3, #4]
		//HAL_UART_Transmit(&huart2, byte, BUF_SIZE, 100);
		//printf("%s",inputs[0]);
		//HAL_UART_Transmit(&huart1, byte, BUF_SIZE, 100);
		//HAL_UART_Transmit(&huart2, "hello", BUF_SIZE, 100);

		HAL_UART_Receive_IT(&huart1, byte, BUF_SIZE);
 8000fe8:	222c      	movs	r2, #44	; 0x2c
 8000fea:	4906      	ldr	r1, [pc, #24]	; (8001004 <HAL_UART_RxCpltCallback+0xcc>)
 8000fec:	4808      	ldr	r0, [pc, #32]	; (8001010 <HAL_UART_RxCpltCallback+0xd8>)
 8000fee:	f002 fca5 	bl	800393c <HAL_UART_Receive_IT>
	}
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40013800 	.word	0x40013800
 8001000:	08006114 	.word	0x08006114
 8001004:	20000218 	.word	0x20000218
 8001008:	20000000 	.word	0x20000000
 800100c:	20000005 	.word	0x20000005
 8001010:	200000f8 	.word	0x200000f8

08001014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001018:	b672      	cpsid	i
}
 800101a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800101c:	e7fe      	b.n	800101c <Error_Handler+0x8>
	...

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_MspInit+0x44>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <HAL_MspInit+0x44>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6613      	str	r3, [r2, #96]	; 0x60
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_MspInit+0x44>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_MspInit+0x44>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_MspInit+0x44>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	6593      	str	r3, [r2, #88]	; 0x58
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_MspInit+0x44>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b09a      	sub	sp, #104	; 0x68
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	2244      	movs	r2, #68	; 0x44
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f004 fbe1 	bl	8005850 <memset>
  if(hfdcan->Instance==FDCAN1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a28      	ldr	r2, [pc, #160]	; (8001134 <HAL_FDCAN_MspInit+0xcc>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d149      	bne.n	800112c <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800109e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010a2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 f971 	bl	8003390 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80010b4:	f7ff ffae 	bl	8001014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <HAL_FDCAN_MspInit+0xd0>)
 80010ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010bc:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <HAL_FDCAN_MspInit+0xd0>)
 80010be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010c2:	6593      	str	r3, [r2, #88]	; 0x58
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_FDCAN_MspInit+0xd0>)
 80010c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_FDCAN_MspInit+0xd0>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <HAL_FDCAN_MspInit+0xd0>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_FDCAN_MspInit+0xd0>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010ec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80010fa:	2309      	movs	r3, #9
 80010fc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f001 f9d0 	bl	80024ac <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2101      	movs	r1, #1
 8001110:	2015      	movs	r0, #21
 8001112:	f000 fb20 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001116:	2015      	movs	r0, #21
 8001118:	f000 fb37 	bl	800178a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 1, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2101      	movs	r1, #1
 8001120:	2016      	movs	r0, #22
 8001122:	f000 fb18 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001126:	2016      	movs	r0, #22
 8001128:	f000 fb2f 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3768      	adds	r7, #104	; 0x68
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40006400 	.word	0x40006400
 8001138:	40021000 	.word	0x40021000

0800113c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b09c      	sub	sp, #112	; 0x70
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	2244      	movs	r2, #68	; 0x44
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f004 fb77 	bl	8005850 <memset>
  if(huart->Instance==USART1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a42      	ldr	r2, [pc, #264]	; (8001270 <HAL_UART_MspInit+0x134>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d140      	bne.n	80011ee <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800116c:	2301      	movs	r3, #1
 800116e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001174:	f107 0318 	add.w	r3, r7, #24
 8001178:	4618      	mov	r0, r3
 800117a:	f002 f909 	bl	8003390 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001184:	f7ff ff46 	bl	8001014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001188:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <HAL_UART_MspInit+0x138>)
 800118a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118c:	4a39      	ldr	r2, [pc, #228]	; (8001274 <HAL_UART_MspInit+0x138>)
 800118e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001192:	6613      	str	r3, [r2, #96]	; 0x60
 8001194:	4b37      	ldr	r3, [pc, #220]	; (8001274 <HAL_UART_MspInit+0x138>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	4b34      	ldr	r3, [pc, #208]	; (8001274 <HAL_UART_MspInit+0x138>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a4:	4a33      	ldr	r2, [pc, #204]	; (8001274 <HAL_UART_MspInit+0x138>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ac:	4b31      	ldr	r3, [pc, #196]	; (8001274 <HAL_UART_MspInit+0x138>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ca:	2307      	movs	r3, #7
 80011cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f001 f968 	bl	80024ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2102      	movs	r1, #2
 80011e0:	2025      	movs	r0, #37	; 0x25
 80011e2:	f000 fab8 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011e6:	2025      	movs	r0, #37	; 0x25
 80011e8:	f000 facf 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ec:	e03b      	b.n	8001266 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a21      	ldr	r2, [pc, #132]	; (8001278 <HAL_UART_MspInit+0x13c>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d136      	bne.n	8001266 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	4618      	mov	r0, r3
 8001206:	f002 f8c3 	bl	8003390 <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001210:	f7ff ff00 	bl	8001014 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_UART_MspInit+0x138>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	4a16      	ldr	r2, [pc, #88]	; (8001274 <HAL_UART_MspInit+0x138>)
 800121a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121e:	6593      	str	r3, [r2, #88]	; 0x58
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_UART_MspInit+0x138>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_UART_MspInit+0x138>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	4a10      	ldr	r2, [pc, #64]	; (8001274 <HAL_UART_MspInit+0x138>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_UART_MspInit+0x138>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001244:	230c      	movs	r3, #12
 8001246:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001254:	2307      	movs	r3, #7
 8001256:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f001 f923 	bl	80024ac <HAL_GPIO_Init>
}
 8001266:	bf00      	nop
 8001268:	3770      	adds	r7, #112	; 0x70
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40013800 	.word	0x40013800
 8001274:	40021000 	.word	0x40021000
 8001278:	40004400 	.word	0x40004400

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <NMI_Handler+0x4>

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f000 f92a 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <FDCAN1_IT0_IRQHandler+0x10>)
 80012d6:	f000 fe6a 	bl	8001fae <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000094 	.word	0x20000094

080012e4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <FDCAN1_IT1_IRQHandler+0x10>)
 80012ea:	f000 fe60 	bl	8001fae <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000094 	.word	0x20000094

080012f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <USART1_IRQHandler+0x10>)
 80012fe:	f002 fb73 	bl	80039e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000f8 	.word	0x200000f8

0800130c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e00a      	b.n	8001334 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800131e:	f3af 8000 	nop.w
 8001322:	4601      	mov	r1, r0
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	60ba      	str	r2, [r7, #8]
 800132a:	b2ca      	uxtb	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	dbf0      	blt.n	800131e <_read+0x12>
	}

return len;
 800133c:	687b      	ldr	r3, [r7, #4]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
	return -1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800136e:	605a      	str	r2, [r3, #4]
	return 0;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
	return 0;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f004 fa18 	bl	80057fc <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20008000 	.word	0x20008000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	20000250 	.word	0x20000250
 8001400:	20000268 	.word	0x20000268

08001404 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800142a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <LoopForever+0x6>)
  ldr r1, =_edata
 800142e:	490e      	ldr	r1, [pc, #56]	; (8001468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <LoopForever+0xe>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001444:	4c0b      	ldr	r4, [pc, #44]	; (8001474 <LoopForever+0x16>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001452:	f7ff ffd7 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f004 f9d7 	bl	8005808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800145a:	f7ff f873 	bl	8000544 <main>

0800145e <LoopForever>:

LoopForever:
    b LoopForever
 800145e:	e7fe      	b.n	800145e <LoopForever>
  ldr   r0, =_estack
 8001460:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800146c:	080061e0 	.word	0x080061e0
  ldr r2, =_sbss
 8001470:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001474:	20000268 	.word	0x20000268

08001478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC1_2_IRQHandler>

0800147a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001484:	2003      	movs	r0, #3
 8001486:	f000 f95b 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800148a:	2003      	movs	r0, #3
 800148c:	f000 f80e 	bl	80014ac <HAL_InitTick>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	71fb      	strb	r3, [r7, #7]
 800149a:	e001      	b.n	80014a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800149c:	f7ff fdc0 	bl	8001020 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014a0:	79fb      	ldrb	r3, [r7, #7]

}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_InitTick+0x68>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d022      	beq.n	8001506 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_InitTick+0x6c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_InitTick+0x68>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f966 	bl	80017a6 <HAL_SYSTICK_Config>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10f      	bne.n	8001500 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	d809      	bhi.n	80014fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e6:	2200      	movs	r2, #0
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	f04f 30ff 	mov.w	r0, #4294967295
 80014ee:	f000 f932 	bl	8001756 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <HAL_InitTick+0x70>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	e007      	b.n	800150a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	e004      	b.n	800150a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e001      	b.n	800150a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000010 	.word	0x20000010
 8001518:	20000008 	.word	0x20000008
 800151c:	2000000c 	.word	0x2000000c

08001520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_IncTick+0x1c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_IncTick+0x20>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4413      	add	r3, r2
 800152e:	4a03      	ldr	r2, [pc, #12]	; (800153c <HAL_IncTick+0x1c>)
 8001530:	6013      	str	r3, [r2, #0]
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20000254 	.word	0x20000254
 8001540:	20000010 	.word	0x20000010

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000254 	.word	0x20000254

0800155c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff ffee 	bl	8001544 <HAL_GetTick>
 8001568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d004      	beq.n	8001580 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_Delay+0x40>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4413      	add	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001580:	bf00      	nop
 8001582:	f7ff ffdf 	bl	8001544 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	429a      	cmp	r2, r3
 8001590:	d8f7      	bhi.n	8001582 <HAL_Delay+0x26>
  {
  }
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000010 	.word	0x20000010

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4907      	ldr	r1, [pc, #28]	; (800163c <__NVIC_EnableIRQ+0x38>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f7ff ff8e 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff29 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff40 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff90 	bl	8001694 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5f 	bl	8001640 <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff33 	bl	8001604 <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffa4 	bl	80016fc <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d005      	beq.n	80017e2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2204      	movs	r2, #4
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e037      	b.n	8001852 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 020e 	bic.w	r2, r2, #14
 80017f0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001800:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f003 021f 	and.w	r2, r3, #31
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	2101      	movs	r1, #1
 8001820:	fa01 f202 	lsl.w	r2, r1, r2
 8001824:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800182e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00c      	beq.n	8001852 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001842:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001846:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001850:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d00d      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2204      	movs	r2, #4
 800188c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	e047      	b.n	8001934 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 020e 	bic.w	r2, r2, #14
 80018b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	2101      	movs	r1, #1
 80018e2:	fa01 f202 	lsl.w	r2, r1, r2
 80018e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00c      	beq.n	8001914 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001908:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001912:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
    }
  }
  return status;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e147      	b.n	8001be2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fb7e 	bl	8001068 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699a      	ldr	r2, [r3, #24]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0210 	bic.w	r2, r2, #16
 800197a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800197c:	f7ff fde2 	bl	8001544 <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001982:	e012      	b.n	80019aa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001984:	f7ff fdde 	bl	8001544 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b0a      	cmp	r3, #10
 8001990:	d90b      	bls.n	80019aa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001996:	f043 0201 	orr.w	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2203      	movs	r2, #3
 80019a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e11b      	b.n	8001be2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d0e5      	beq.n	8001984 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c8:	f7ff fdbc 	bl	8001544 <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80019ce:	e012      	b.n	80019f6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80019d0:	f7ff fdb8 	bl	8001544 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b0a      	cmp	r3, #10
 80019dc:	d90b      	bls.n	80019f6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	f043 0201 	orr.w	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0f5      	b.n	8001be2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0e5      	beq.n	80019d0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	699a      	ldr	r2, [r3, #24]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0202 	orr.w	r2, r2, #2
 8001a12:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a74      	ldr	r2, [pc, #464]	; (8001bec <HAL_FDCAN_Init+0x2ac>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d103      	bne.n	8001a26 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001a1e:	4a74      	ldr	r2, [pc, #464]	; (8001bf0 <HAL_FDCAN_Init+0x2b0>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7c1b      	ldrb	r3, [r3, #16]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d108      	bne.n	8001a40 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699a      	ldr	r2, [r3, #24]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a3c:	619a      	str	r2, [r3, #24]
 8001a3e:	e007      	b.n	8001a50 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699a      	ldr	r2, [r3, #24]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a4e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7c5b      	ldrb	r3, [r3, #17]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d108      	bne.n	8001a6a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a66:	619a      	str	r2, [r3, #24]
 8001a68:	e007      	b.n	8001a7a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a78:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7c9b      	ldrb	r3, [r3, #18]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699a      	ldr	r2, [r3, #24]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a90:	619a      	str	r2, [r3, #24]
 8001a92:	e007      	b.n	8001aa4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699a      	ldr	r2, [r3, #24]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001aa2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699a      	ldr	r2, [r3, #24]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001ac8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0210 	bic.w	r2, r2, #16
 8001ad8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d108      	bne.n	8001af4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0204 	orr.w	r2, r2, #4
 8001af0:	619a      	str	r2, [r3, #24]
 8001af2:	e02c      	b.n	8001b4e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d028      	beq.n	8001b4e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d01c      	beq.n	8001b3e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b12:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0210 	orr.w	r2, r2, #16
 8001b22:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d110      	bne.n	8001b4e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0220 	orr.w	r2, r2, #32
 8001b3a:	619a      	str	r2, [r3, #24]
 8001b3c:	e007      	b.n	8001b4e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699a      	ldr	r2, [r3, #24]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0220 	orr.w	r2, r2, #32
 8001b4c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b5e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b66:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b76:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b78:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b82:	d115      	bne.n	8001bb0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b92:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001b9c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001bac:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001bae:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 fb9e 	bl	8002308 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40006400 	.word	0x40006400
 8001bf0:	40006500 	.word	0x40006500

08001bf4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c04:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d002      	beq.n	8001c12 <HAL_FDCAN_ConfigFilter+0x1e>
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d13d      	bne.n	8001c8e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d119      	bne.n	8001c4e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001c26:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001c2e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e01d      	b.n	8001c8a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	075a      	lsls	r2, r3, #29
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	079a      	lsls	r2, r3, #30
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	3304      	adds	r3, #4
 8001c82:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e006      	b.n	8001c9c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c92:	f043 0202 	orr.w	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
  }
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d116      	bne.n	8001cf0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cca:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	011a      	lsls	r2, r3, #4
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e006      	b.n	8001cfe <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf4:	f043 0204 	orr.w	r2, r3, #4
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
  }
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d110      	bne.n	8001d40 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2202      	movs	r2, #2
 8001d22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0201 	bic.w	r2, r2, #1
 8001d34:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e006      	b.n	8001d4e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d44:	f043 0204 	orr.w	r2, r3, #4
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
  }
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d12c      	bne.n	8001dcc <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d007      	beq.n	8001d92 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e023      	b.n	8001dda <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d9a:	0c1b      	lsrs	r3, r3, #16
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	68b9      	ldr	r1, [r7, #8]
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 fb03 	bl	80023b4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2101      	movs	r1, #1
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dba:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e006      	b.n	8001dda <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd0:	f043 0208 	orr.w	r2, r3, #8
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
  }
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b087      	sub	sp, #28
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001df4:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d003      	beq.n	8001e04 <HAL_FDCAN_ActivateNotification+0x22>
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	f040 80c8 	bne.w	8001f94 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d004      	beq.n	8001e20 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d03b      	beq.n	8001e98 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d031      	beq.n	8001e98 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d027      	beq.n	8001e98 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d004      	beq.n	8001e5c <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01d      	beq.n	8001e98 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d013      	beq.n	8001e98 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d009      	beq.n	8001e98 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00c      	beq.n	8001ea8 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d13b      	bne.n	8001f34 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d004      	beq.n	8001ed0 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d131      	bne.n	8001f34 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d127      	bne.n	8001f34 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d004      	beq.n	8001ef8 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d11d      	bne.n	8001f34 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d004      	beq.n	8001f0c <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d113      	bne.n	8001f34 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00c      	beq.n	8001f44 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0202 	orr.w	r2, r2, #2
 8001f42:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d009      	beq.n	8001f80 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e006      	b.n	8001fa2 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f98:	f043 0202 	orr.w	r2, r3, #2
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	371c      	adds	r7, #28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b08a      	sub	sp, #40	; 0x28
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fbc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fca:	4013      	ands	r3, r2
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	6a3a      	ldr	r2, [r7, #32]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ff0:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002004:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8002008:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800201c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002020:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4013      	ands	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00d      	beq.n	8002058 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d006      	beq.n	8002058 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2240      	movs	r2, #64	; 0x40
 8002050:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f939 	bl	80022ca <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d01b      	beq.n	800209e <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d014      	beq.n	800209e <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800207c:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002094:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002096:	6939      	ldr	r1, [r7, #16]
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f8f7 	bl	800228c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020aa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80020ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8b6 	bl	8002220 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d007      	beq.n	80020ca <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6a3a      	ldr	r2, [r7, #32]
 80020c0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80020c2:	6a39      	ldr	r1, [r7, #32]
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f8b6 	bl	8002236 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80020d8:	69f9      	ldr	r1, [r7, #28]
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f8b6 	bl	800224c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00e      	beq.n	800210c <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002104:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f8ab 	bl	8002262 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01a      	beq.n	8002150 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002130:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4013      	ands	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002148:	68f9      	ldr	r1, [r7, #12]
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f893 	bl	8002276 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00e      	beq.n	800217c <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002174:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f893 	bl	80022a2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00e      	beq.n	80021a8 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021a0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f887 	bl	80022b6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d011      	beq.n	80021da <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80021e8:	6979      	ldr	r1, [r7, #20]
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f881 	bl	80022f2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f863 	bl	80022de <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	; 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002312:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002322:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232a:	041a      	lsls	r2, r3, #16
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002348:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	061a      	lsls	r2, r3, #24
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e005      	b.n	8002396 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3304      	adds	r3, #4
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d3f3      	bcc.n	800238a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	4000a400 	.word	0x4000a400

080023b4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80023d2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80023da:	4313      	orrs	r3, r2
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e00a      	b.n	80023f6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80023e8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80023ee:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80023f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023f4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002400:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002406:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800240c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	3304      	adds	r3, #4
 8002432:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	3304      	adds	r3, #4
 800243e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	e020      	b.n	8002488 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	3303      	adds	r3, #3
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	3302      	adds	r3, #2
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	440b      	add	r3, r1
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800245e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3301      	adds	r3, #1
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	440b      	add	r3, r1
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800246c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	440a      	add	r2, r1
 8002474:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002476:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	3304      	adds	r3, #4
 8002480:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	3304      	adds	r3, #4
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	0c1b      	lsrs	r3, r3, #16
 800248e:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <FDCAN_CopyMessageToRAM+0xf4>)
 8002490:	5cd3      	ldrb	r3, [r2, r3]
 8002492:	461a      	mov	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	4293      	cmp	r3, r2
 8002498:	d3d5      	bcc.n	8002446 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800249a:	bf00      	nop
 800249c:	bf00      	nop
 800249e:	3724      	adds	r7, #36	; 0x24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	08006134 	.word	0x08006134

080024ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024ba:	e15a      	b.n	8002772 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2101      	movs	r1, #1
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	fa01 f303 	lsl.w	r3, r1, r3
 80024c8:	4013      	ands	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 814c 	beq.w	800276c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d005      	beq.n	80024ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d130      	bne.n	800254e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002522:	2201      	movs	r2, #1
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	f003 0201 	and.w	r2, r3, #1
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b03      	cmp	r3, #3
 8002558:	d017      	beq.n	800258a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d123      	bne.n	80025de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	08da      	lsrs	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3208      	adds	r2, #8
 800259e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	220f      	movs	r2, #15
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	08da      	lsrs	r2, r3, #3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3208      	adds	r2, #8
 80025d8:	6939      	ldr	r1, [r7, #16]
 80025da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0203 	and.w	r2, r3, #3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80a6 	beq.w	800276c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002620:	4b5b      	ldr	r3, [pc, #364]	; (8002790 <HAL_GPIO_Init+0x2e4>)
 8002622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002624:	4a5a      	ldr	r2, [pc, #360]	; (8002790 <HAL_GPIO_Init+0x2e4>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6613      	str	r3, [r2, #96]	; 0x60
 800262c:	4b58      	ldr	r3, [pc, #352]	; (8002790 <HAL_GPIO_Init+0x2e4>)
 800262e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002638:	4a56      	ldr	r2, [pc, #344]	; (8002794 <HAL_GPIO_Init+0x2e8>)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	3302      	adds	r3, #2
 8002640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002662:	d01f      	beq.n	80026a4 <HAL_GPIO_Init+0x1f8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a4c      	ldr	r2, [pc, #304]	; (8002798 <HAL_GPIO_Init+0x2ec>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d019      	beq.n	80026a0 <HAL_GPIO_Init+0x1f4>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a4b      	ldr	r2, [pc, #300]	; (800279c <HAL_GPIO_Init+0x2f0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d013      	beq.n	800269c <HAL_GPIO_Init+0x1f0>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a4a      	ldr	r2, [pc, #296]	; (80027a0 <HAL_GPIO_Init+0x2f4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00d      	beq.n	8002698 <HAL_GPIO_Init+0x1ec>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a49      	ldr	r2, [pc, #292]	; (80027a4 <HAL_GPIO_Init+0x2f8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d007      	beq.n	8002694 <HAL_GPIO_Init+0x1e8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a48      	ldr	r2, [pc, #288]	; (80027a8 <HAL_GPIO_Init+0x2fc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d101      	bne.n	8002690 <HAL_GPIO_Init+0x1e4>
 800268c:	2305      	movs	r3, #5
 800268e:	e00a      	b.n	80026a6 <HAL_GPIO_Init+0x1fa>
 8002690:	2306      	movs	r3, #6
 8002692:	e008      	b.n	80026a6 <HAL_GPIO_Init+0x1fa>
 8002694:	2304      	movs	r3, #4
 8002696:	e006      	b.n	80026a6 <HAL_GPIO_Init+0x1fa>
 8002698:	2303      	movs	r3, #3
 800269a:	e004      	b.n	80026a6 <HAL_GPIO_Init+0x1fa>
 800269c:	2302      	movs	r3, #2
 800269e:	e002      	b.n	80026a6 <HAL_GPIO_Init+0x1fa>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <HAL_GPIO_Init+0x1fa>
 80026a4:	2300      	movs	r3, #0
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	f002 0203 	and.w	r2, r2, #3
 80026ac:	0092      	lsls	r2, r2, #2
 80026ae:	4093      	lsls	r3, r2
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b6:	4937      	ldr	r1, [pc, #220]	; (8002794 <HAL_GPIO_Init+0x2e8>)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026c4:	4b39      	ldr	r3, [pc, #228]	; (80027ac <HAL_GPIO_Init+0x300>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026e8:	4a30      	ldr	r2, [pc, #192]	; (80027ac <HAL_GPIO_Init+0x300>)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026ee:	4b2f      	ldr	r3, [pc, #188]	; (80027ac <HAL_GPIO_Init+0x300>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002712:	4a26      	ldr	r2, [pc, #152]	; (80027ac <HAL_GPIO_Init+0x300>)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_GPIO_Init+0x300>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800273c:	4a1b      	ldr	r2, [pc, #108]	; (80027ac <HAL_GPIO_Init+0x300>)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_GPIO_Init+0x300>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	43db      	mvns	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002766:	4a11      	ldr	r2, [pc, #68]	; (80027ac <HAL_GPIO_Init+0x300>)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3301      	adds	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	f47f ae9d 	bne.w	80024bc <HAL_GPIO_Init+0x10>
  }
}
 8002782:	bf00      	nop
 8002784:	bf00      	nop
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40021000 	.word	0x40021000
 8002794:	40010000 	.word	0x40010000
 8002798:	48000400 	.word	0x48000400
 800279c:	48000800 	.word	0x48000800
 80027a0:	48000c00 	.word	0x48000c00
 80027a4:	48001000 	.word	0x48001000
 80027a8:	48001400 	.word	0x48001400
 80027ac:	40010400 	.word	0x40010400

080027b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027cc:	e002      	b.n	80027d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d141      	bne.n	8002872 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ee:	4b4b      	ldr	r3, [pc, #300]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fa:	d131      	bne.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027fc:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002802:	4a46      	ldr	r2, [pc, #280]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002808:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800280c:	4b43      	ldr	r3, [pc, #268]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002814:	4a41      	ldr	r2, [pc, #260]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800281a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800281c:	4b40      	ldr	r3, [pc, #256]	; (8002920 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2232      	movs	r2, #50	; 0x32
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	4a3f      	ldr	r2, [pc, #252]	; (8002924 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	0c9b      	lsrs	r3, r3, #18
 800282e:	3301      	adds	r3, #1
 8002830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002832:	e002      	b.n	800283a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3b01      	subs	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800283a:	4b38      	ldr	r3, [pc, #224]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002846:	d102      	bne.n	800284e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f2      	bne.n	8002834 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800284e:	4b33      	ldr	r3, [pc, #204]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285a:	d158      	bne.n	800290e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e057      	b.n	8002910 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002860:	4b2e      	ldr	r3, [pc, #184]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002866:	4a2d      	ldr	r2, [pc, #180]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800286c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002870:	e04d      	b.n	800290e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002878:	d141      	bne.n	80028fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800287a:	4b28      	ldr	r3, [pc, #160]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002886:	d131      	bne.n	80028ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800288a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800288e:	4a23      	ldr	r2, [pc, #140]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002898:	4b20      	ldr	r3, [pc, #128]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028a0:	4a1e      	ldr	r2, [pc, #120]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028a8:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2232      	movs	r2, #50	; 0x32
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	0c9b      	lsrs	r3, r3, #18
 80028ba:	3301      	adds	r3, #1
 80028bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028be:	e002      	b.n	80028c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d2:	d102      	bne.n	80028da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f2      	bne.n	80028c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e6:	d112      	bne.n	800290e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e011      	b.n	8002910 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028f2:	4a0a      	ldr	r2, [pc, #40]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80028fc:	e007      	b.n	800290e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002906:	4a05      	ldr	r2, [pc, #20]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002908:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800290c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	40007000 	.word	0x40007000
 8002920:	20000008 	.word	0x20000008
 8002924:	431bde83 	.word	0x431bde83

08002928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e306      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d075      	beq.n	8002a32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002946:	4b97      	ldr	r3, [pc, #604]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002950:	4b94      	ldr	r3, [pc, #592]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b0c      	cmp	r3, #12
 800295e:	d102      	bne.n	8002966 <HAL_RCC_OscConfig+0x3e>
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2b03      	cmp	r3, #3
 8002964:	d002      	beq.n	800296c <HAL_RCC_OscConfig+0x44>
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d10b      	bne.n	8002984 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296c:	4b8d      	ldr	r3, [pc, #564]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d05b      	beq.n	8002a30 <HAL_RCC_OscConfig+0x108>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d157      	bne.n	8002a30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e2e1      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298c:	d106      	bne.n	800299c <HAL_RCC_OscConfig+0x74>
 800298e:	4b85      	ldr	r3, [pc, #532]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a84      	ldr	r2, [pc, #528]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e01d      	b.n	80029d8 <HAL_RCC_OscConfig+0xb0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x98>
 80029a6:	4b7f      	ldr	r3, [pc, #508]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a7e      	ldr	r2, [pc, #504]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 80029ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b7c      	ldr	r3, [pc, #496]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7b      	ldr	r2, [pc, #492]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e00b      	b.n	80029d8 <HAL_RCC_OscConfig+0xb0>
 80029c0:	4b78      	ldr	r3, [pc, #480]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a77      	ldr	r2, [pc, #476]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 80029c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b75      	ldr	r3, [pc, #468]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a74      	ldr	r2, [pc, #464]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 80029d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d013      	beq.n	8002a08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7fe fdb0 	bl	8001544 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e8:	f7fe fdac 	bl	8001544 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e2a6      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fa:	4b6a      	ldr	r3, [pc, #424]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0xc0>
 8002a06:	e014      	b.n	8002a32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fd9c 	bl	8001544 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fe fd98 	bl	8001544 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e292      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a22:	4b60      	ldr	r3, [pc, #384]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0xe8>
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d075      	beq.n	8002b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3e:	4b59      	ldr	r3, [pc, #356]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a48:	4b56      	ldr	r3, [pc, #344]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b0c      	cmp	r3, #12
 8002a56:	d102      	bne.n	8002a5e <HAL_RCC_OscConfig+0x136>
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d002      	beq.n	8002a64 <HAL_RCC_OscConfig+0x13c>
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d11f      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a64:	4b4f      	ldr	r3, [pc, #316]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_OscConfig+0x154>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e265      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7c:	4b49      	ldr	r3, [pc, #292]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	4946      	ldr	r1, [pc, #280]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a90:	4b45      	ldr	r3, [pc, #276]	; (8002ba8 <HAL_RCC_OscConfig+0x280>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe fd09 	bl	80014ac <HAL_InitTick>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d043      	beq.n	8002b28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e251      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d023      	beq.n	8002af4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aac:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a3c      	ldr	r2, [pc, #240]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fd44 	bl	8001544 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac0:	f7fe fd40 	bl	8001544 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e23a      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad2:	4b34      	ldr	r3, [pc, #208]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	4b31      	ldr	r3, [pc, #196]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	061b      	lsls	r3, r3, #24
 8002aec:	492d      	ldr	r1, [pc, #180]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
 8002af2:	e01a      	b.n	8002b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af4:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a2a      	ldr	r2, [pc, #168]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe fd20 	bl	8001544 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b08:	f7fe fd1c 	bl	8001544 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e216      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b1a:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x1e0>
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d041      	beq.n	8002bba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b44:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fcf9 	bl	8001544 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b56:	f7fe fcf5 	bl	8001544 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e1ef      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b68:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0ef      	beq.n	8002b56 <HAL_RCC_OscConfig+0x22e>
 8002b76:	e020      	b.n	8002bba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_RCC_OscConfig+0x27c>)
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fe fcdc 	bl	8001544 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b8e:	e00d      	b.n	8002bac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b90:	f7fe fcd8 	bl	8001544 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d906      	bls.n	8002bac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1d2      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bac:	4b8c      	ldr	r3, [pc, #560]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ea      	bne.n	8002b90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80a6 	beq.w	8002d14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bcc:	4b84      	ldr	r3, [pc, #528]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2b4>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x2b6>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00d      	beq.n	8002bfe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	4b7f      	ldr	r3, [pc, #508]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be6:	4a7e      	ldr	r2, [pc, #504]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bec:	6593      	str	r3, [r2, #88]	; 0x58
 8002bee:	4b7c      	ldr	r3, [pc, #496]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfe:	4b79      	ldr	r3, [pc, #484]	; (8002de4 <HAL_RCC_OscConfig+0x4bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d118      	bne.n	8002c3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c0a:	4b76      	ldr	r3, [pc, #472]	; (8002de4 <HAL_RCC_OscConfig+0x4bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a75      	ldr	r2, [pc, #468]	; (8002de4 <HAL_RCC_OscConfig+0x4bc>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c16:	f7fe fc95 	bl	8001544 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1e:	f7fe fc91 	bl	8001544 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e18b      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c30:	4b6c      	ldr	r3, [pc, #432]	; (8002de4 <HAL_RCC_OscConfig+0x4bc>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d108      	bne.n	8002c56 <HAL_RCC_OscConfig+0x32e>
 8002c44:	4b66      	ldr	r3, [pc, #408]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4a:	4a65      	ldr	r2, [pc, #404]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c54:	e024      	b.n	8002ca0 <HAL_RCC_OscConfig+0x378>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d110      	bne.n	8002c80 <HAL_RCC_OscConfig+0x358>
 8002c5e:	4b60      	ldr	r3, [pc, #384]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c64:	4a5e      	ldr	r2, [pc, #376]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c6e:	4b5c      	ldr	r3, [pc, #368]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	4a5a      	ldr	r2, [pc, #360]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c7e:	e00f      	b.n	8002ca0 <HAL_RCC_OscConfig+0x378>
 8002c80:	4b57      	ldr	r3, [pc, #348]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	4a56      	ldr	r2, [pc, #344]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c90:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	4a52      	ldr	r2, [pc, #328]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002c98:	f023 0304 	bic.w	r3, r3, #4
 8002c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d016      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe fc4c 	bl	8001544 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb0:	f7fe fc48 	bl	8001544 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e140      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc6:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0ed      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x388>
 8002cd4:	e015      	b.n	8002d02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fc35 	bl	8001544 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe fc31 	bl	8001544 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e129      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cf4:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1ed      	bne.n	8002cde <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d02:	7ffb      	ldrb	r3, [r7, #31]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d105      	bne.n	8002d14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d08:	4b35      	ldr	r3, [pc, #212]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	4a34      	ldr	r2, [pc, #208]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d03c      	beq.n	8002d9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01c      	beq.n	8002d62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d28:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d2e:	4a2c      	ldr	r2, [pc, #176]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe fc04 	bl	8001544 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d40:	f7fe fc00 	bl	8001544 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e0fa      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d52:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002d54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ef      	beq.n	8002d40 <HAL_RCC_OscConfig+0x418>
 8002d60:	e01b      	b.n	8002d9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d62:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d68:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7fe fbe7 	bl	8001544 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d7a:	f7fe fbe3 	bl	8001544 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e0dd      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d8c:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1ef      	bne.n	8002d7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80d1 	beq.w	8002f46 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 030c 	and.w	r3, r3, #12
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	f000 808b 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d15e      	bne.n	8002e78 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <HAL_RCC_OscConfig+0x4b8>)
 8002dc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc6:	f7fe fbbd 	bl	8001544 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dcc:	e00c      	b.n	8002de8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fe fbb9 	bl	8001544 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d905      	bls.n	8002de8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e0b3      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de8:	4b59      	ldr	r3, [pc, #356]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1ec      	bne.n	8002dce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df4:	4b56      	ldr	r3, [pc, #344]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	4b56      	ldr	r3, [pc, #344]	; (8002f54 <HAL_RCC_OscConfig+0x62c>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6a11      	ldr	r1, [r2, #32]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e04:	3a01      	subs	r2, #1
 8002e06:	0112      	lsls	r2, r2, #4
 8002e08:	4311      	orrs	r1, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e0e:	0212      	lsls	r2, r2, #8
 8002e10:	4311      	orrs	r1, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e16:	0852      	lsrs	r2, r2, #1
 8002e18:	3a01      	subs	r2, #1
 8002e1a:	0552      	lsls	r2, r2, #21
 8002e1c:	4311      	orrs	r1, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e22:	0852      	lsrs	r2, r2, #1
 8002e24:	3a01      	subs	r2, #1
 8002e26:	0652      	lsls	r2, r2, #25
 8002e28:	4311      	orrs	r1, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e2e:	06d2      	lsls	r2, r2, #27
 8002e30:	430a      	orrs	r2, r1
 8002e32:	4947      	ldr	r1, [pc, #284]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e38:	4b45      	ldr	r3, [pc, #276]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a44      	ldr	r2, [pc, #272]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e44:	4b42      	ldr	r3, [pc, #264]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4a41      	ldr	r2, [pc, #260]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe fb78 	bl	8001544 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe fb74 	bl	8001544 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e06e      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6a:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x530>
 8002e76:	e066      	b.n	8002f46 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e78:	4b35      	ldr	r3, [pc, #212]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a34      	ldr	r2, [pc, #208]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e82:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e84:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a31      	ldr	r2, [pc, #196]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e90:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a2e      	ldr	r2, [pc, #184]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002e96:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fb50 	bl	8001544 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7fe fb4c 	bl	8001544 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e046      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eba:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x580>
 8002ec6:	e03e      	b.n	8002f46 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e039      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <HAL_RCC_OscConfig+0x628>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f003 0203 	and.w	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d12c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d123      	bne.n	8002f42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d11b      	bne.n	8002f42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d113      	bne.n	8002f42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	3b01      	subs	r3, #1
 8002f28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3720      	adds	r7, #32
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	019f800c 	.word	0x019f800c

08002f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e11e      	b.n	80031ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b91      	ldr	r3, [pc, #580]	; (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d910      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b8e      	ldr	r3, [pc, #568]	; (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 020f 	bic.w	r2, r3, #15
 8002f86:	498c      	ldr	r1, [pc, #560]	; (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b8a      	ldr	r3, [pc, #552]	; (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e106      	b.n	80031ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d073      	beq.n	8003094 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d129      	bne.n	8003008 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb4:	4b81      	ldr	r3, [pc, #516]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0f4      	b.n	80031ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002fc4:	f000 f99e 	bl	8003304 <RCC_GetSysClockFreqFromPLLSource>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4a7c      	ldr	r2, [pc, #496]	; (80031c0 <HAL_RCC_ClockConfig+0x268>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d93f      	bls.n	8003052 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fd2:	4b7a      	ldr	r3, [pc, #488]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d033      	beq.n	8003052 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d12f      	bne.n	8003052 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ff2:	4b72      	ldr	r3, [pc, #456]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ffa:	4a70      	ldr	r2, [pc, #448]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 8002ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003000:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	e024      	b.n	8003052 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d107      	bne.n	8003020 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003010:	4b6a      	ldr	r3, [pc, #424]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d109      	bne.n	8003030 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0c6      	b.n	80031ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003020:	4b66      	ldr	r3, [pc, #408]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0be      	b.n	80031ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003030:	f000 f8ce 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 8003034:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4a61      	ldr	r2, [pc, #388]	; (80031c0 <HAL_RCC_ClockConfig+0x268>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d909      	bls.n	8003052 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800303e:	4b5f      	ldr	r3, [pc, #380]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003046:	4a5d      	ldr	r2, [pc, #372]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 8003048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b5a      	ldr	r3, [pc, #360]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4957      	ldr	r1, [pc, #348]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 8003060:	4313      	orrs	r3, r2
 8003062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003064:	f7fe fa6e 	bl	8001544 <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fe fa6a 	bl	8001544 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e095      	b.n	80031ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b4e      	ldr	r3, [pc, #312]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d023      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ac:	4b43      	ldr	r3, [pc, #268]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a42      	ldr	r2, [pc, #264]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 80030b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d007      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80030c4:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030cc:	4a3b      	ldr	r2, [pc, #236]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 80030ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b39      	ldr	r3, [pc, #228]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4936      	ldr	r1, [pc, #216]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
 80030e6:	e008      	b.n	80030fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2b80      	cmp	r3, #128	; 0x80
 80030ec:	d105      	bne.n	80030fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030ee:	4b33      	ldr	r3, [pc, #204]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	4a32      	ldr	r2, [pc, #200]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 80030f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030fa:	4b2f      	ldr	r3, [pc, #188]	; (80031b8 <HAL_RCC_ClockConfig+0x260>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d21d      	bcs.n	8003144 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003108:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <HAL_RCC_ClockConfig+0x260>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f023 020f 	bic.w	r2, r3, #15
 8003110:	4929      	ldr	r1, [pc, #164]	; (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	4313      	orrs	r3, r2
 8003116:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003118:	f7fe fa14 	bl	8001544 <HAL_GetTick>
 800311c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	e00a      	b.n	8003136 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003120:	f7fe fa10 	bl	8001544 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	; 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e03b      	b.n	80031ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d1ed      	bne.n	8003120 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003150:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4917      	ldr	r1, [pc, #92]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800316e:	4b13      	ldr	r3, [pc, #76]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	490f      	ldr	r1, [pc, #60]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003182:	f000 f825 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 8003186:	4602      	mov	r2, r0
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <HAL_RCC_ClockConfig+0x264>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	490c      	ldr	r1, [pc, #48]	; (80031c4 <HAL_RCC_ClockConfig+0x26c>)
 8003194:	5ccb      	ldrb	r3, [r1, r3]
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <HAL_RCC_ClockConfig+0x270>)
 80031a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_RCC_ClockConfig+0x274>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe f980 	bl	80014ac <HAL_InitTick>
 80031ac:	4603      	mov	r3, r0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40022000 	.word	0x40022000
 80031bc:	40021000 	.word	0x40021000
 80031c0:	04c4b400 	.word	0x04c4b400
 80031c4:	0800611c 	.word	0x0800611c
 80031c8:	20000008 	.word	0x20000008
 80031cc:	2000000c 	.word	0x2000000c

080031d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031d6:	4b2c      	ldr	r3, [pc, #176]	; (8003288 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d102      	bne.n	80031e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031e2:	4b2a      	ldr	r3, [pc, #168]	; (800328c <HAL_RCC_GetSysClockFreq+0xbc>)
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	e047      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031e8:	4b27      	ldr	r3, [pc, #156]	; (8003288 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d102      	bne.n	80031fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031f4:	4b26      	ldr	r3, [pc, #152]	; (8003290 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	e03e      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80031fa:	4b23      	ldr	r3, [pc, #140]	; (8003288 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b0c      	cmp	r3, #12
 8003204:	d136      	bne.n	8003274 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003210:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	3301      	adds	r3, #1
 800321c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d10c      	bne.n	800323e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003224:	4a1a      	ldr	r2, [pc, #104]	; (8003290 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	4a16      	ldr	r2, [pc, #88]	; (8003288 <HAL_RCC_GetSysClockFreq+0xb8>)
 800322e:	68d2      	ldr	r2, [r2, #12]
 8003230:	0a12      	lsrs	r2, r2, #8
 8003232:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003236:	fb02 f303 	mul.w	r3, r2, r3
 800323a:	617b      	str	r3, [r7, #20]
      break;
 800323c:	e00c      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800323e:	4a13      	ldr	r2, [pc, #76]	; (800328c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	fbb2 f3f3 	udiv	r3, r2, r3
 8003246:	4a10      	ldr	r2, [pc, #64]	; (8003288 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003248:	68d2      	ldr	r2, [r2, #12]
 800324a:	0a12      	lsrs	r2, r2, #8
 800324c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003250:	fb02 f303 	mul.w	r3, r2, r3
 8003254:	617b      	str	r3, [r7, #20]
      break;
 8003256:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_GetSysClockFreq+0xb8>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	0e5b      	lsrs	r3, r3, #25
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	3301      	adds	r3, #1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	e001      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003278:	693b      	ldr	r3, [r7, #16]
}
 800327a:	4618      	mov	r0, r3
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000
 800328c:	00f42400 	.word	0x00f42400
 8003290:	007a1200 	.word	0x007a1200

08003294 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000008 	.word	0x20000008

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032b0:	f7ff fff0 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4904      	ldr	r1, [pc, #16]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	0800612c 	.word	0x0800612c

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032dc:	f7ff ffda 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0adb      	lsrs	r3, r3, #11
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4904      	ldr	r1, [pc, #16]	; (8003300 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000
 8003300:	0800612c 	.word	0x0800612c

08003304 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800330a:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	3301      	adds	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d10c      	bne.n	8003342 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003328:	4a17      	ldr	r2, [pc, #92]	; (8003388 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	4a14      	ldr	r2, [pc, #80]	; (8003384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003332:	68d2      	ldr	r2, [r2, #12]
 8003334:	0a12      	lsrs	r2, r2, #8
 8003336:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	617b      	str	r3, [r7, #20]
    break;
 8003340:	e00c      	b.n	800335c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	fbb2 f3f3 	udiv	r3, r2, r3
 800334a:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800334c:	68d2      	ldr	r2, [r2, #12]
 800334e:	0a12      	lsrs	r2, r2, #8
 8003350:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003354:	fb02 f303 	mul.w	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]
    break;
 800335a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800335c:	4b09      	ldr	r3, [pc, #36]	; (8003384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	0e5b      	lsrs	r3, r3, #25
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	3301      	adds	r3, #1
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003376:	687b      	ldr	r3, [r7, #4]
}
 8003378:	4618      	mov	r0, r3
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40021000 	.word	0x40021000
 8003388:	007a1200 	.word	0x007a1200
 800338c:	00f42400 	.word	0x00f42400

08003390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003398:	2300      	movs	r3, #0
 800339a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800339c:	2300      	movs	r3, #0
 800339e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8098 	beq.w	80034de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b2:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10d      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	4a3f      	ldr	r2, [pc, #252]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6593      	str	r3, [r2, #88]	; 0x58
 80033ca:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d6:	2301      	movs	r3, #1
 80033d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033da:	4b3a      	ldr	r3, [pc, #232]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a39      	ldr	r2, [pc, #228]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033e6:	f7fe f8ad 	bl	8001544 <HAL_GetTick>
 80033ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ec:	e009      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fe f8a9 	bl	8001544 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d902      	bls.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	74fb      	strb	r3, [r7, #19]
        break;
 8003400:	e005      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003402:	4b30      	ldr	r3, [pc, #192]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0ef      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d159      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003414:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01e      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	429a      	cmp	r2, r3
 800342e:	d019      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003430:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800343c:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800344c:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800345c:	4a18      	ldr	r2, [pc, #96]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d016      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346e:	f7fe f869 	bl	8001544 <HAL_GetTick>
 8003472:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003474:	e00b      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003476:	f7fe f865 	bl	8001544 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	f241 3288 	movw	r2, #5000	; 0x1388
 8003484:	4293      	cmp	r3, r2
 8003486:	d902      	bls.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	74fb      	strb	r3, [r7, #19]
            break;
 800348c:	e006      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348e:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ec      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10b      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a2:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	4903      	ldr	r1, [pc, #12]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034b8:	e008      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034ba:	7cfb      	ldrb	r3, [r7, #19]
 80034bc:	74bb      	strb	r3, [r7, #18]
 80034be:	e005      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034cc:	7c7b      	ldrb	r3, [r7, #17]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d105      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d2:	4ba6      	ldr	r3, [pc, #664]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	4aa5      	ldr	r2, [pc, #660]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ea:	4ba0      	ldr	r3, [pc, #640]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	f023 0203 	bic.w	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	499c      	ldr	r1, [pc, #624]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800350c:	4b97      	ldr	r3, [pc, #604]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f023 020c 	bic.w	r2, r3, #12
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	4994      	ldr	r1, [pc, #592]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800352e:	4b8f      	ldr	r3, [pc, #572]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	498b      	ldr	r1, [pc, #556]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003550:	4b86      	ldr	r3, [pc, #536]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	4983      	ldr	r1, [pc, #524]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003572:	4b7e      	ldr	r3, [pc, #504]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	497a      	ldr	r1, [pc, #488]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003594:	4b75      	ldr	r3, [pc, #468]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	4972      	ldr	r1, [pc, #456]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b6:	4b6d      	ldr	r3, [pc, #436]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	4969      	ldr	r1, [pc, #420]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d8:	4b64      	ldr	r3, [pc, #400]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	4961      	ldr	r1, [pc, #388]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035fa:	4b5c      	ldr	r3, [pc, #368]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	4958      	ldr	r1, [pc, #352]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	2b00      	cmp	r3, #0
 800361a:	d015      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800361c:	4b53      	ldr	r3, [pc, #332]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	4950      	ldr	r1, [pc, #320]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800363a:	d105      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800363c:	4b4b      	ldr	r3, [pc, #300]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a4a      	ldr	r2, [pc, #296]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003646:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003650:	2b00      	cmp	r3, #0
 8003652:	d015      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003654:	4b45      	ldr	r3, [pc, #276]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	4942      	ldr	r1, [pc, #264]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003672:	d105      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003674:	4b3d      	ldr	r3, [pc, #244]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a3c      	ldr	r2, [pc, #240]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800367a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800367e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d015      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800368c:	4b37      	ldr	r3, [pc, #220]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4934      	ldr	r1, [pc, #208]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036aa:	d105      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ac:	4b2f      	ldr	r3, [pc, #188]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4a2e      	ldr	r2, [pc, #184]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d015      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036c4:	4b29      	ldr	r3, [pc, #164]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d2:	4926      	ldr	r1, [pc, #152]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036e2:	d105      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e4:	4b21      	ldr	r3, [pc, #132]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a20      	ldr	r2, [pc, #128]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d015      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	4918      	ldr	r1, [pc, #96]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800371a:	d105      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800371c:	4b13      	ldr	r3, [pc, #76]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4a12      	ldr	r2, [pc, #72]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003726:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d015      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003734:	4b0d      	ldr	r3, [pc, #52]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	490a      	ldr	r1, [pc, #40]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003752:	d105      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4a04      	ldr	r2, [pc, #16]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003760:	7cbb      	ldrb	r3, [r7, #18]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000

08003770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e042      	b.n	8003808 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003788:	2b00      	cmp	r3, #0
 800378a:	d106      	bne.n	800379a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7fd fcd1 	bl	800113c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2224      	movs	r2, #36	; 0x24
 800379e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fc50 	bl	8004058 <UART_SetConfig>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e022      	b.n	8003808 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 ff10 	bl	80045f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 ff97 	bl	8004734 <UART_CheckIdleState>
 8003806:	4603      	mov	r3, r0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003826:	2b20      	cmp	r3, #32
 8003828:	f040 8083 	bne.w	8003932 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_UART_Transmit+0x28>
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e07b      	b.n	8003934 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_UART_Transmit+0x3a>
 8003846:	2302      	movs	r3, #2
 8003848:	e074      	b.n	8003934 <HAL_UART_Transmit+0x124>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2221      	movs	r2, #33	; 0x21
 800385e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003862:	f7fd fe6f 	bl	8001544 <HAL_GetTick>
 8003866:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	88fa      	ldrh	r2, [r7, #6]
 800386c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	88fa      	ldrh	r2, [r7, #6]
 8003874:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003880:	d108      	bne.n	8003894 <HAL_UART_Transmit+0x84>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d104      	bne.n	8003894 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	e003      	b.n	800389c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003898:	2300      	movs	r3, #0
 800389a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80038a4:	e02c      	b.n	8003900 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2200      	movs	r2, #0
 80038ae:	2180      	movs	r1, #128	; 0x80
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 ff8a 	bl	80047ca <UART_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e039      	b.n	8003934 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10b      	bne.n	80038de <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	3302      	adds	r3, #2
 80038da:	61bb      	str	r3, [r7, #24]
 80038dc:	e007      	b.n	80038ee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	3301      	adds	r3, #1
 80038ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1cc      	bne.n	80038a6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2200      	movs	r2, #0
 8003914:	2140      	movs	r1, #64	; 0x40
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 ff57 	bl	80047ca <UART_WaitOnFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e006      	b.n	8003934 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e000      	b.n	8003934 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003932:	2302      	movs	r3, #2
  }
}
 8003934:	4618      	mov	r0, r3
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003950:	2b20      	cmp	r3, #32
 8003952:	d142      	bne.n	80039da <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_UART_Receive_IT+0x24>
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e03b      	b.n	80039dc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_UART_Receive_IT+0x36>
 800396e:	2302      	movs	r3, #2
 8003970:	e034      	b.n	80039dc <HAL_UART_Receive_IT+0xa0>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <HAL_UART_Receive_IT+0xa8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01f      	beq.n	80039ca <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d018      	beq.n	80039ca <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	613b      	str	r3, [r7, #16]
   return(result);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	623b      	str	r3, [r7, #32]
 80039b8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	69f9      	ldr	r1, [r7, #28]
 80039bc:	6a3a      	ldr	r2, [r7, #32]
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e6      	bne.n	8003998 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	461a      	mov	r2, r3
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 ffc3 	bl	800495c <UART_Start_Receive_IT>
 80039d6:	4603      	mov	r3, r0
 80039d8:	e000      	b.n	80039dc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80039da:	2302      	movs	r3, #2
  }
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3728      	adds	r7, #40	; 0x28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40008000 	.word	0x40008000

080039e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b0ba      	sub	sp, #232	; 0xe8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a12:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a16:	4013      	ands	r3, r2
 8003a18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d11b      	bne.n	8003a5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d105      	bne.n	8003a48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d009      	beq.n	8003a5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 82d6 	beq.w	8003ffe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	4798      	blx	r3
      }
      return;
 8003a5a:	e2d0      	b.n	8003ffe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 811f 	beq.w	8003ca4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003a66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003a6a:	4b8b      	ldr	r3, [pc, #556]	; (8003c98 <HAL_UART_IRQHandler+0x2b0>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003a72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a76:	4b89      	ldr	r3, [pc, #548]	; (8003c9c <HAL_UART_IRQHandler+0x2b4>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8112 	beq.w	8003ca4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d011      	beq.n	8003ab0 <HAL_UART_IRQHandler+0xc8>
 8003a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00b      	beq.n	8003ab0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa6:	f043 0201 	orr.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d011      	beq.n	8003ae0 <HAL_UART_IRQHandler+0xf8>
 8003abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2202      	movs	r2, #2
 8003ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad6:	f043 0204 	orr.w	r2, r3, #4
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d011      	beq.n	8003b10 <HAL_UART_IRQHandler+0x128>
 8003aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2204      	movs	r2, #4
 8003afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b06:	f043 0202 	orr.w	r2, r3, #2
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d017      	beq.n	8003b4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003b28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003b2c:	4b5a      	ldr	r3, [pc, #360]	; (8003c98 <HAL_UART_IRQHandler+0x2b0>)
 8003b2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2208      	movs	r2, #8
 8003b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b42:	f043 0208 	orr.w	r2, r3, #8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d012      	beq.n	8003b7e <HAL_UART_IRQHandler+0x196>
 8003b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00c      	beq.n	8003b7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 823c 	beq.w	8004002 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d013      	beq.n	8003bbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd2:	2b40      	cmp	r3, #64	; 0x40
 8003bd4:	d005      	beq.n	8003be2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d04f      	beq.n	8003c82 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 ffe4 	bl	8004bb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d141      	bne.n	8003c7a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1d9      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d013      	beq.n	8003c72 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c4e:	4a14      	ldr	r2, [pc, #80]	; (8003ca0 <HAL_UART_IRQHandler+0x2b8>)
 8003c50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fd fe0a 	bl	8001870 <HAL_DMA_Abort_IT>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d017      	beq.n	8003c92 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c70:	e00f      	b.n	8003c92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f9da 	bl	800402c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c78:	e00b      	b.n	8003c92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f9d6 	bl	800402c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c80:	e007      	b.n	8003c92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f9d2 	bl	800402c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003c90:	e1b7      	b.n	8004002 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c92:	bf00      	nop
    return;
 8003c94:	e1b5      	b.n	8004002 <HAL_UART_IRQHandler+0x61a>
 8003c96:	bf00      	nop
 8003c98:	10000001 	.word	0x10000001
 8003c9c:	04000120 	.word	0x04000120
 8003ca0:	08004c7d 	.word	0x08004c7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	f040 814a 	bne.w	8003f42 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 8143 	beq.w	8003f42 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 813c 	beq.w	8003f42 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2210      	movs	r2, #16
 8003cd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b40      	cmp	r3, #64	; 0x40
 8003cde:	f040 80b5 	bne.w	8003e4c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8187 	beq.w	8004006 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d02:	429a      	cmp	r2, r3
 8003d04:	f080 817f 	bcs.w	8004006 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f040 8086 	bne.w	8003e30 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1da      	bne.n	8003d24 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3308      	adds	r3, #8
 8003d74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3308      	adds	r3, #8
 8003d8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e1      	bne.n	8003d6e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3308      	adds	r3, #8
 8003db0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3308      	adds	r3, #8
 8003dca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e3      	bne.n	8003daa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e00:	f023 0310 	bic.w	r3, r3, #16
 8003e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e12:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e4      	bne.n	8003df0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fd fcc7 	bl	80017be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f8fb 	bl	8004040 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e4a:	e0dc      	b.n	8004006 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80ce 	beq.w	800400a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003e6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80c9 	beq.w	800400a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e4      	bne.n	8003e78 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ed6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e1      	bne.n	8003eae <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0310 	bic.w	r3, r3, #16
 8003f12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	69b9      	ldr	r1, [r7, #24]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e4      	bne.n	8003efe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f880 	bl	8004040 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f40:	e063      	b.n	800400a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00e      	beq.n	8003f6c <HAL_UART_IRQHandler+0x584>
 8003f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d008      	beq.n	8003f6c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f001 fb27 	bl	80055b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f6a:	e051      	b.n	8004010 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d014      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d105      	bne.n	8003f90 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d03a      	beq.n	800400e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	4798      	blx	r3
    }
    return;
 8003fa0:	e035      	b.n	800400e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x5da>
 8003fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fe74 	bl	8004ca8 <UART_EndTransmit_IT>
    return;
 8003fc0:	e026      	b.n	8004010 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x5fa>
 8003fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f001 fb00 	bl	80055e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fe0:	e016      	b.n	8004010 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d010      	beq.n	8004010 <HAL_UART_IRQHandler+0x628>
 8003fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	da0c      	bge.n	8004010 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f001 fae8 	bl	80055cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ffc:	e008      	b.n	8004010 <HAL_UART_IRQHandler+0x628>
      return;
 8003ffe:	bf00      	nop
 8004000:	e006      	b.n	8004010 <HAL_UART_IRQHandler+0x628>
    return;
 8004002:	bf00      	nop
 8004004:	e004      	b.n	8004010 <HAL_UART_IRQHandler+0x628>
      return;
 8004006:	bf00      	nop
 8004008:	e002      	b.n	8004010 <HAL_UART_IRQHandler+0x628>
      return;
 800400a:	bf00      	nop
 800400c:	e000      	b.n	8004010 <HAL_UART_IRQHandler+0x628>
    return;
 800400e:	bf00      	nop
  }
}
 8004010:	37e8      	adds	r7, #232	; 0xe8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop

08004018 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800405c:	b08c      	sub	sp, #48	; 0x30
 800405e:	af00      	add	r7, sp, #0
 8004060:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	431a      	orrs	r2, r3
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	431a      	orrs	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	4313      	orrs	r3, r2
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4bab      	ldr	r3, [pc, #684]	; (8004334 <UART_SetConfig+0x2dc>)
 8004088:	4013      	ands	r3, r2
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004090:	430b      	orrs	r3, r1
 8004092:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4aa0      	ldr	r2, [pc, #640]	; (8004338 <UART_SetConfig+0x2e0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d004      	beq.n	80040c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c0:	4313      	orrs	r3, r2
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80040ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040d8:	430b      	orrs	r3, r1
 80040da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	f023 010f 	bic.w	r1, r3, #15
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a91      	ldr	r2, [pc, #580]	; (800433c <UART_SetConfig+0x2e4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d125      	bne.n	8004148 <UART_SetConfig+0xf0>
 80040fc:	4b90      	ldr	r3, [pc, #576]	; (8004340 <UART_SetConfig+0x2e8>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	2b03      	cmp	r3, #3
 8004108:	d81a      	bhi.n	8004140 <UART_SetConfig+0xe8>
 800410a:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <UART_SetConfig+0xb8>)
 800410c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004110:	08004121 	.word	0x08004121
 8004114:	08004131 	.word	0x08004131
 8004118:	08004129 	.word	0x08004129
 800411c:	08004139 	.word	0x08004139
 8004120:	2301      	movs	r3, #1
 8004122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004126:	e0d6      	b.n	80042d6 <UART_SetConfig+0x27e>
 8004128:	2302      	movs	r3, #2
 800412a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800412e:	e0d2      	b.n	80042d6 <UART_SetConfig+0x27e>
 8004130:	2304      	movs	r3, #4
 8004132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004136:	e0ce      	b.n	80042d6 <UART_SetConfig+0x27e>
 8004138:	2308      	movs	r3, #8
 800413a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800413e:	e0ca      	b.n	80042d6 <UART_SetConfig+0x27e>
 8004140:	2310      	movs	r3, #16
 8004142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004146:	e0c6      	b.n	80042d6 <UART_SetConfig+0x27e>
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a7d      	ldr	r2, [pc, #500]	; (8004344 <UART_SetConfig+0x2ec>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d138      	bne.n	80041c4 <UART_SetConfig+0x16c>
 8004152:	4b7b      	ldr	r3, [pc, #492]	; (8004340 <UART_SetConfig+0x2e8>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b0c      	cmp	r3, #12
 800415e:	d82d      	bhi.n	80041bc <UART_SetConfig+0x164>
 8004160:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <UART_SetConfig+0x110>)
 8004162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004166:	bf00      	nop
 8004168:	0800419d 	.word	0x0800419d
 800416c:	080041bd 	.word	0x080041bd
 8004170:	080041bd 	.word	0x080041bd
 8004174:	080041bd 	.word	0x080041bd
 8004178:	080041ad 	.word	0x080041ad
 800417c:	080041bd 	.word	0x080041bd
 8004180:	080041bd 	.word	0x080041bd
 8004184:	080041bd 	.word	0x080041bd
 8004188:	080041a5 	.word	0x080041a5
 800418c:	080041bd 	.word	0x080041bd
 8004190:	080041bd 	.word	0x080041bd
 8004194:	080041bd 	.word	0x080041bd
 8004198:	080041b5 	.word	0x080041b5
 800419c:	2300      	movs	r3, #0
 800419e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041a2:	e098      	b.n	80042d6 <UART_SetConfig+0x27e>
 80041a4:	2302      	movs	r3, #2
 80041a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041aa:	e094      	b.n	80042d6 <UART_SetConfig+0x27e>
 80041ac:	2304      	movs	r3, #4
 80041ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041b2:	e090      	b.n	80042d6 <UART_SetConfig+0x27e>
 80041b4:	2308      	movs	r3, #8
 80041b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ba:	e08c      	b.n	80042d6 <UART_SetConfig+0x27e>
 80041bc:	2310      	movs	r3, #16
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041c2:	e088      	b.n	80042d6 <UART_SetConfig+0x27e>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5f      	ldr	r2, [pc, #380]	; (8004348 <UART_SetConfig+0x2f0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d125      	bne.n	800421a <UART_SetConfig+0x1c2>
 80041ce:	4b5c      	ldr	r3, [pc, #368]	; (8004340 <UART_SetConfig+0x2e8>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041d8:	2b30      	cmp	r3, #48	; 0x30
 80041da:	d016      	beq.n	800420a <UART_SetConfig+0x1b2>
 80041dc:	2b30      	cmp	r3, #48	; 0x30
 80041de:	d818      	bhi.n	8004212 <UART_SetConfig+0x1ba>
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d00a      	beq.n	80041fa <UART_SetConfig+0x1a2>
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d814      	bhi.n	8004212 <UART_SetConfig+0x1ba>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <UART_SetConfig+0x19a>
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d008      	beq.n	8004202 <UART_SetConfig+0x1aa>
 80041f0:	e00f      	b.n	8004212 <UART_SetConfig+0x1ba>
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041f8:	e06d      	b.n	80042d6 <UART_SetConfig+0x27e>
 80041fa:	2302      	movs	r3, #2
 80041fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004200:	e069      	b.n	80042d6 <UART_SetConfig+0x27e>
 8004202:	2304      	movs	r3, #4
 8004204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004208:	e065      	b.n	80042d6 <UART_SetConfig+0x27e>
 800420a:	2308      	movs	r3, #8
 800420c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004210:	e061      	b.n	80042d6 <UART_SetConfig+0x27e>
 8004212:	2310      	movs	r3, #16
 8004214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004218:	e05d      	b.n	80042d6 <UART_SetConfig+0x27e>
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a4b      	ldr	r2, [pc, #300]	; (800434c <UART_SetConfig+0x2f4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d125      	bne.n	8004270 <UART_SetConfig+0x218>
 8004224:	4b46      	ldr	r3, [pc, #280]	; (8004340 <UART_SetConfig+0x2e8>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800422e:	2bc0      	cmp	r3, #192	; 0xc0
 8004230:	d016      	beq.n	8004260 <UART_SetConfig+0x208>
 8004232:	2bc0      	cmp	r3, #192	; 0xc0
 8004234:	d818      	bhi.n	8004268 <UART_SetConfig+0x210>
 8004236:	2b80      	cmp	r3, #128	; 0x80
 8004238:	d00a      	beq.n	8004250 <UART_SetConfig+0x1f8>
 800423a:	2b80      	cmp	r3, #128	; 0x80
 800423c:	d814      	bhi.n	8004268 <UART_SetConfig+0x210>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <UART_SetConfig+0x1f0>
 8004242:	2b40      	cmp	r3, #64	; 0x40
 8004244:	d008      	beq.n	8004258 <UART_SetConfig+0x200>
 8004246:	e00f      	b.n	8004268 <UART_SetConfig+0x210>
 8004248:	2300      	movs	r3, #0
 800424a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800424e:	e042      	b.n	80042d6 <UART_SetConfig+0x27e>
 8004250:	2302      	movs	r3, #2
 8004252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004256:	e03e      	b.n	80042d6 <UART_SetConfig+0x27e>
 8004258:	2304      	movs	r3, #4
 800425a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800425e:	e03a      	b.n	80042d6 <UART_SetConfig+0x27e>
 8004260:	2308      	movs	r3, #8
 8004262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004266:	e036      	b.n	80042d6 <UART_SetConfig+0x27e>
 8004268:	2310      	movs	r3, #16
 800426a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800426e:	e032      	b.n	80042d6 <UART_SetConfig+0x27e>
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a30      	ldr	r2, [pc, #192]	; (8004338 <UART_SetConfig+0x2e0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d12a      	bne.n	80042d0 <UART_SetConfig+0x278>
 800427a:	4b31      	ldr	r3, [pc, #196]	; (8004340 <UART_SetConfig+0x2e8>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004280:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004284:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004288:	d01a      	beq.n	80042c0 <UART_SetConfig+0x268>
 800428a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800428e:	d81b      	bhi.n	80042c8 <UART_SetConfig+0x270>
 8004290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004294:	d00c      	beq.n	80042b0 <UART_SetConfig+0x258>
 8004296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800429a:	d815      	bhi.n	80042c8 <UART_SetConfig+0x270>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <UART_SetConfig+0x250>
 80042a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a4:	d008      	beq.n	80042b8 <UART_SetConfig+0x260>
 80042a6:	e00f      	b.n	80042c8 <UART_SetConfig+0x270>
 80042a8:	2300      	movs	r3, #0
 80042aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ae:	e012      	b.n	80042d6 <UART_SetConfig+0x27e>
 80042b0:	2302      	movs	r3, #2
 80042b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042b6:	e00e      	b.n	80042d6 <UART_SetConfig+0x27e>
 80042b8:	2304      	movs	r3, #4
 80042ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042be:	e00a      	b.n	80042d6 <UART_SetConfig+0x27e>
 80042c0:	2308      	movs	r3, #8
 80042c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042c6:	e006      	b.n	80042d6 <UART_SetConfig+0x27e>
 80042c8:	2310      	movs	r3, #16
 80042ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ce:	e002      	b.n	80042d6 <UART_SetConfig+0x27e>
 80042d0:	2310      	movs	r3, #16
 80042d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a17      	ldr	r2, [pc, #92]	; (8004338 <UART_SetConfig+0x2e0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	f040 80a8 	bne.w	8004432 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d834      	bhi.n	8004354 <UART_SetConfig+0x2fc>
 80042ea:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <UART_SetConfig+0x298>)
 80042ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f0:	08004315 	.word	0x08004315
 80042f4:	08004355 	.word	0x08004355
 80042f8:	0800431d 	.word	0x0800431d
 80042fc:	08004355 	.word	0x08004355
 8004300:	08004323 	.word	0x08004323
 8004304:	08004355 	.word	0x08004355
 8004308:	08004355 	.word	0x08004355
 800430c:	08004355 	.word	0x08004355
 8004310:	0800432b 	.word	0x0800432b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004314:	f7fe ffca 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004318:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800431a:	e021      	b.n	8004360 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800431c:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <UART_SetConfig+0x2f8>)
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004320:	e01e      	b.n	8004360 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004322:	f7fe ff55 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 8004326:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004328:	e01a      	b.n	8004360 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800432a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004330:	e016      	b.n	8004360 <UART_SetConfig+0x308>
 8004332:	bf00      	nop
 8004334:	cfff69f3 	.word	0xcfff69f3
 8004338:	40008000 	.word	0x40008000
 800433c:	40013800 	.word	0x40013800
 8004340:	40021000 	.word	0x40021000
 8004344:	40004400 	.word	0x40004400
 8004348:	40004800 	.word	0x40004800
 800434c:	40004c00 	.word	0x40004c00
 8004350:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800435e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 812a 	beq.w	80045bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	4a9e      	ldr	r2, [pc, #632]	; (80045e8 <UART_SetConfig+0x590>)
 800436e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004372:	461a      	mov	r2, r3
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	fbb3 f3f2 	udiv	r3, r3, r2
 800437a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	429a      	cmp	r2, r3
 800438a:	d305      	bcc.n	8004398 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	429a      	cmp	r2, r3
 8004396:	d903      	bls.n	80043a0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800439e:	e10d      	b.n	80045bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	2200      	movs	r2, #0
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	60fa      	str	r2, [r7, #12]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	4a8e      	ldr	r2, [pc, #568]	; (80045e8 <UART_SetConfig+0x590>)
 80043ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2200      	movs	r2, #0
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043c2:	f7fb ff29 	bl	8000218 <__aeabi_uldivmod>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	020b      	lsls	r3, r1, #8
 80043d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043dc:	0202      	lsls	r2, r0, #8
 80043de:	6979      	ldr	r1, [r7, #20]
 80043e0:	6849      	ldr	r1, [r1, #4]
 80043e2:	0849      	lsrs	r1, r1, #1
 80043e4:	2000      	movs	r0, #0
 80043e6:	460c      	mov	r4, r1
 80043e8:	4605      	mov	r5, r0
 80043ea:	eb12 0804 	adds.w	r8, r2, r4
 80043ee:	eb43 0905 	adc.w	r9, r3, r5
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	469a      	mov	sl, r3
 80043fa:	4693      	mov	fp, r2
 80043fc:	4652      	mov	r2, sl
 80043fe:	465b      	mov	r3, fp
 8004400:	4640      	mov	r0, r8
 8004402:	4649      	mov	r1, r9
 8004404:	f7fb ff08 	bl	8000218 <__aeabi_uldivmod>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4613      	mov	r3, r2
 800440e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004416:	d308      	bcc.n	800442a <UART_SetConfig+0x3d2>
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800441e:	d204      	bcs.n	800442a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6a3a      	ldr	r2, [r7, #32]
 8004426:	60da      	str	r2, [r3, #12]
 8004428:	e0c8      	b.n	80045bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004430:	e0c4      	b.n	80045bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800443a:	d167      	bne.n	800450c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800443c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004440:	2b08      	cmp	r3, #8
 8004442:	d828      	bhi.n	8004496 <UART_SetConfig+0x43e>
 8004444:	a201      	add	r2, pc, #4	; (adr r2, 800444c <UART_SetConfig+0x3f4>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	08004471 	.word	0x08004471
 8004450:	08004479 	.word	0x08004479
 8004454:	08004481 	.word	0x08004481
 8004458:	08004497 	.word	0x08004497
 800445c:	08004487 	.word	0x08004487
 8004460:	08004497 	.word	0x08004497
 8004464:	08004497 	.word	0x08004497
 8004468:	08004497 	.word	0x08004497
 800446c:	0800448f 	.word	0x0800448f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004470:	f7fe ff1c 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004474:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004476:	e014      	b.n	80044a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004478:	f7fe ff2e 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 800447c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800447e:	e010      	b.n	80044a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004480:	4b5a      	ldr	r3, [pc, #360]	; (80045ec <UART_SetConfig+0x594>)
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004484:	e00d      	b.n	80044a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004486:	f7fe fea3 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 800448a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800448c:	e009      	b.n	80044a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800448e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004494:	e005      	b.n	80044a2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80044a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 8089 	beq.w	80045bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	4a4e      	ldr	r2, [pc, #312]	; (80045e8 <UART_SetConfig+0x590>)
 80044b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044b4:	461a      	mov	r2, r3
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044bc:	005a      	lsls	r2, r3, #1
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	441a      	add	r2, r3
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	2b0f      	cmp	r3, #15
 80044d4:	d916      	bls.n	8004504 <UART_SetConfig+0x4ac>
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044dc:	d212      	bcs.n	8004504 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	f023 030f 	bic.w	r3, r3, #15
 80044e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	8bfb      	ldrh	r3, [r7, #30]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	8bfa      	ldrh	r2, [r7, #30]
 8004500:	60da      	str	r2, [r3, #12]
 8004502:	e05b      	b.n	80045bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800450a:	e057      	b.n	80045bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800450c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004510:	2b08      	cmp	r3, #8
 8004512:	d828      	bhi.n	8004566 <UART_SetConfig+0x50e>
 8004514:	a201      	add	r2, pc, #4	; (adr r2, 800451c <UART_SetConfig+0x4c4>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	08004541 	.word	0x08004541
 8004520:	08004549 	.word	0x08004549
 8004524:	08004551 	.word	0x08004551
 8004528:	08004567 	.word	0x08004567
 800452c:	08004557 	.word	0x08004557
 8004530:	08004567 	.word	0x08004567
 8004534:	08004567 	.word	0x08004567
 8004538:	08004567 	.word	0x08004567
 800453c:	0800455f 	.word	0x0800455f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004540:	f7fe feb4 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004544:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004546:	e014      	b.n	8004572 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004548:	f7fe fec6 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 800454c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800454e:	e010      	b.n	8004572 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004550:	4b26      	ldr	r3, [pc, #152]	; (80045ec <UART_SetConfig+0x594>)
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004554:	e00d      	b.n	8004572 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004556:	f7fe fe3b 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 800455a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800455c:	e009      	b.n	8004572 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004564:	e005      	b.n	8004572 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004570:	bf00      	nop
    }

    if (pclk != 0U)
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	2b00      	cmp	r3, #0
 8004576:	d021      	beq.n	80045bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	4a1a      	ldr	r2, [pc, #104]	; (80045e8 <UART_SetConfig+0x590>)
 800457e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004582:	461a      	mov	r2, r3
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	fbb3 f2f2 	udiv	r2, r3, r2
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	441a      	add	r2, r3
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	fbb2 f3f3 	udiv	r3, r2, r3
 800459a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	2b0f      	cmp	r3, #15
 80045a0:	d909      	bls.n	80045b6 <UART_SetConfig+0x55e>
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a8:	d205      	bcs.n	80045b6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60da      	str	r2, [r3, #12]
 80045b4:	e002      	b.n	80045bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2201      	movs	r2, #1
 80045c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2200      	movs	r2, #0
 80045d0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2200      	movs	r2, #0
 80045d6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80045d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3730      	adds	r7, #48	; 0x30
 80045e0:	46bd      	mov	sp, r7
 80045e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045e6:	bf00      	nop
 80045e8:	08006144 	.word	0x08006144
 80045ec:	00f42400 	.word	0x00f42400

080045f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01a      	beq.n	8004706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ee:	d10a      	bne.n	8004706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	605a      	str	r2, [r3, #4]
  }
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af02      	add	r7, sp, #8
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004744:	f7fc fefe 	bl	8001544 <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b08      	cmp	r3, #8
 8004756:	d10e      	bne.n	8004776 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f82f 	bl	80047ca <UART_WaitOnFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e025      	b.n	80047c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b04      	cmp	r3, #4
 8004782:	d10e      	bne.n	80047a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f819 	bl	80047ca <UART_WaitOnFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e00f      	b.n	80047c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b09c      	sub	sp, #112	; 0x70
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	603b      	str	r3, [r7, #0]
 80047d6:	4613      	mov	r3, r2
 80047d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047da:	e0a9      	b.n	8004930 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	f000 80a5 	beq.w	8004930 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e6:	f7fc fead 	bl	8001544 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d302      	bcc.n	80047fc <UART_WaitOnFlagUntilTimeout+0x32>
 80047f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d140      	bne.n	800487e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800480a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800480c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004810:	667b      	str	r3, [r7, #100]	; 0x64
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800481a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800481c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004820:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e6      	bne.n	80047fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3308      	adds	r3, #8
 8004834:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800483e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004840:	f023 0301 	bic.w	r3, r3, #1
 8004844:	663b      	str	r3, [r7, #96]	; 0x60
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800484e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004850:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800485c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e5      	bne.n	800482e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e069      	b.n	8004952 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d051      	beq.n	8004930 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489a:	d149      	bne.n	8004930 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c4:	637b      	str	r3, [r7, #52]	; 0x34
 80048c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e6      	bne.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3308      	adds	r3, #8
 80048de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	613b      	str	r3, [r7, #16]
   return(result);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3308      	adds	r3, #8
 80048f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048f8:	623a      	str	r2, [r7, #32]
 80048fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	69f9      	ldr	r1, [r7, #28]
 80048fe:	6a3a      	ldr	r2, [r7, #32]
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	61bb      	str	r3, [r7, #24]
   return(result);
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e5      	bne.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e010      	b.n	8004952 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69da      	ldr	r2, [r3, #28]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4013      	ands	r3, r2
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	429a      	cmp	r2, r3
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	429a      	cmp	r2, r3
 800494c:	f43f af46 	beq.w	80047dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3770      	adds	r7, #112	; 0x70
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800495c:	b480      	push	{r7}
 800495e:	b0a3      	sub	sp, #140	; 0x8c
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	88fa      	ldrh	r2, [r7, #6]
 8004974:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800498e:	d10e      	bne.n	80049ae <UART_Start_Receive_IT+0x52>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d105      	bne.n	80049a4 <UART_Start_Receive_IT+0x48>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800499e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049a2:	e02d      	b.n	8004a00 <UART_Start_Receive_IT+0xa4>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	22ff      	movs	r2, #255	; 0xff
 80049a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049ac:	e028      	b.n	8004a00 <UART_Start_Receive_IT+0xa4>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10d      	bne.n	80049d2 <UART_Start_Receive_IT+0x76>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d104      	bne.n	80049c8 <UART_Start_Receive_IT+0x6c>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	22ff      	movs	r2, #255	; 0xff
 80049c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049c6:	e01b      	b.n	8004a00 <UART_Start_Receive_IT+0xa4>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	227f      	movs	r2, #127	; 0x7f
 80049cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049d0:	e016      	b.n	8004a00 <UART_Start_Receive_IT+0xa4>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049da:	d10d      	bne.n	80049f8 <UART_Start_Receive_IT+0x9c>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <UART_Start_Receive_IT+0x92>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	227f      	movs	r2, #127	; 0x7f
 80049e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049ec:	e008      	b.n	8004a00 <UART_Start_Receive_IT+0xa4>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	223f      	movs	r2, #63	; 0x3f
 80049f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049f6:	e003      	b.n	8004a00 <UART_Start_Receive_IT+0xa4>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2222      	movs	r2, #34	; 0x22
 8004a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3308      	adds	r3, #8
 8004a16:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004a20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a22:	f043 0301 	orr.w	r3, r3, #1
 8004a26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004a34:	673a      	str	r2, [r7, #112]	; 0x70
 8004a36:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004a3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e3      	bne.n	8004a10 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a50:	d153      	bne.n	8004afa <UART_Start_Receive_IT+0x19e>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004a58:	88fa      	ldrh	r2, [r7, #6]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d34d      	bcc.n	8004afa <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a66:	d107      	bne.n	8004a78 <UART_Start_Receive_IT+0x11c>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d103      	bne.n	8004a78 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a4b      	ldr	r2, [pc, #300]	; (8004ba0 <UART_Start_Receive_IT+0x244>)
 8004a74:	671a      	str	r2, [r3, #112]	; 0x70
 8004a76:	e002      	b.n	8004a7e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a4a      	ldr	r2, [pc, #296]	; (8004ba4 <UART_Start_Receive_IT+0x248>)
 8004a7c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01a      	beq.n	8004ac4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a96:	e853 3f00 	ldrex	r3, [r3]
 8004a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ab2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ab6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e4      	bne.n	8004a8e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3308      	adds	r3, #8
 8004aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ada:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004ae4:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ae6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e5      	bne.n	8004ac4 <UART_Start_Receive_IT+0x168>
 8004af8:	e04a      	b.n	8004b90 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b02:	d107      	bne.n	8004b14 <UART_Start_Receive_IT+0x1b8>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d103      	bne.n	8004b14 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4a26      	ldr	r2, [pc, #152]	; (8004ba8 <UART_Start_Receive_IT+0x24c>)
 8004b10:	671a      	str	r2, [r3, #112]	; 0x70
 8004b12:	e002      	b.n	8004b1a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4a25      	ldr	r2, [pc, #148]	; (8004bac <UART_Start_Receive_IT+0x250>)
 8004b18:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d019      	beq.n	8004b5e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004b3e:	677b      	str	r3, [r7, #116]	; 0x74
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b48:	637b      	str	r3, [r7, #52]	; 0x34
 8004b4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e6      	bne.n	8004b2a <UART_Start_Receive_IT+0x1ce>
 8004b5c:	e018      	b.n	8004b90 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f043 0320 	orr.w	r3, r3, #32
 8004b72:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b7c:	623b      	str	r3, [r7, #32]
 8004b7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	69f9      	ldr	r1, [r7, #28]
 8004b82:	6a3a      	ldr	r2, [r7, #32]
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e6      	bne.n	8004b5e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	378c      	adds	r7, #140	; 0x8c
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	080052b9 	.word	0x080052b9
 8004ba4:	08004fc1 	.word	0x08004fc1
 8004ba8:	08004e5f 	.word	0x08004e5f
 8004bac:	08004cff 	.word	0x08004cff

08004bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b095      	sub	sp, #84	; 0x54
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8004bd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e6      	bne.n	8004bb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3308      	adds	r3, #8
 8004bf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c00:	f023 0301 	bic.w	r3, r3, #1
 8004c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e3      	bne.n	8004bea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d118      	bne.n	8004c5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f023 0310 	bic.w	r3, r3, #16
 8004c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6979      	ldr	r1, [r7, #20]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	613b      	str	r3, [r7, #16]
   return(result);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e6      	bne.n	8004c2a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004c70:	bf00      	nop
 8004c72:	3754      	adds	r7, #84	; 0x54
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f7ff f9c6 	bl	800402c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc4:	61fb      	str	r3, [r7, #28]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6979      	ldr	r1, [r7, #20]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	613b      	str	r3, [r7, #16]
   return(result);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e6      	bne.n	8004cb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff f991 	bl	8004018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cf6:	bf00      	nop
 8004cf8:	3720      	adds	r7, #32
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b096      	sub	sp, #88	; 0x58
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004d0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d16:	2b22      	cmp	r3, #34	; 0x22
 8004d18:	f040 8095 	bne.w	8004e46 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d26:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004d2a:	b2d9      	uxtb	r1, r3
 8004d2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d36:	400a      	ands	r2, r1
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d178      	bne.n	8004e56 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d78:	653b      	str	r3, [r7, #80]	; 0x50
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d82:	647b      	str	r3, [r7, #68]	; 0x44
 8004d84:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e6      	bne.n	8004d64 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	623b      	str	r3, [r7, #32]
   return(result);
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	f023 0301 	bic.w	r3, r3, #1
 8004dac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3308      	adds	r3, #8
 8004db4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004db6:	633a      	str	r2, [r7, #48]	; 0x30
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e5      	bne.n	8004d96 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d12e      	bne.n	8004e3e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0310 	bic.w	r3, r3, #16
 8004dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	69b9      	ldr	r1, [r7, #24]
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	617b      	str	r3, [r7, #20]
   return(result);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e6      	bne.n	8004de6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b10      	cmp	r3, #16
 8004e24:	d103      	bne.n	8004e2e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2210      	movs	r2, #16
 8004e2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e34:	4619      	mov	r1, r3
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff f902 	bl	8004040 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e3c:	e00b      	b.n	8004e56 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fc f87a 	bl	8000f38 <HAL_UART_RxCpltCallback>
}
 8004e44:	e007      	b.n	8004e56 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0208 	orr.w	r2, r2, #8
 8004e54:	619a      	str	r2, [r3, #24]
}
 8004e56:	bf00      	nop
 8004e58:	3758      	adds	r7, #88	; 0x58
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b096      	sub	sp, #88	; 0x58
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004e6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	2b22      	cmp	r3, #34	; 0x22
 8004e78:	f040 8095 	bne.w	8004fa6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e8c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004e90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e94:	4013      	ands	r3, r2
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e9a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea0:	1c9a      	adds	r2, r3, #2
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d178      	bne.n	8004fb6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ee4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ee8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e6      	bne.n	8004ec4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3308      	adds	r3, #8
 8004efc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3308      	adds	r3, #8
 8004f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e5      	bne.n	8004ef6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d12e      	bne.n	8004f9e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f023 0310 	bic.w	r3, r3, #16
 8004f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	6979      	ldr	r1, [r7, #20]
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	e841 2300 	strex	r3, r2, [r1]
 8004f70:	613b      	str	r3, [r7, #16]
   return(result);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e6      	bne.n	8004f46 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b10      	cmp	r3, #16
 8004f84:	d103      	bne.n	8004f8e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2210      	movs	r2, #16
 8004f8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff f852 	bl	8004040 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f9c:	e00b      	b.n	8004fb6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fb ffca 	bl	8000f38 <HAL_UART_RxCpltCallback>
}
 8004fa4:	e007      	b.n	8004fb6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699a      	ldr	r2, [r3, #24]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0208 	orr.w	r2, r2, #8
 8004fb4:	619a      	str	r2, [r3, #24]
}
 8004fb6:	bf00      	nop
 8004fb8:	3758      	adds	r7, #88	; 0x58
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b0a6      	sub	sp, #152	; 0x98
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004fce:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff6:	2b22      	cmp	r3, #34	; 0x22
 8004ff8:	f040 814f 	bne.w	800529a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005002:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005006:	e0f6      	b.n	80051f6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005012:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005016:	b2d9      	uxtb	r1, r3
 8005018:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800501c:	b2da      	uxtb	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005022:	400a      	ands	r2, r1
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800504e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	2b00      	cmp	r3, #0
 8005058:	d053      	beq.n	8005102 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800505a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d011      	beq.n	800508a <UART_RxISR_8BIT_FIFOEN+0xca>
 8005066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800506a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00b      	beq.n	800508a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2201      	movs	r2, #1
 8005078:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005080:	f043 0201 	orr.w	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800508a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d011      	beq.n	80050ba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005096:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00b      	beq.n	80050ba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2202      	movs	r2, #2
 80050a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b0:	f043 0204 	orr.w	r2, r3, #4
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d011      	beq.n	80050ea <UART_RxISR_8BIT_FIFOEN+0x12a>
 80050c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00b      	beq.n	80050ea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2204      	movs	r2, #4
 80050d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e0:	f043 0202 	orr.w	r2, r3, #2
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d006      	beq.n	8005102 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fe ff99 	bl	800402c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d173      	bne.n	80051f6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800511c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800511e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005122:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005130:	66bb      	str	r3, [r7, #104]	; 0x68
 8005132:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005136:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800513e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e4      	bne.n	800510e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3308      	adds	r3, #8
 800514a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3308      	adds	r3, #8
 8005166:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005168:	657a      	str	r2, [r7, #84]	; 0x54
 800516a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800516e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e3      	bne.n	8005144 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800518e:	2b01      	cmp	r3, #1
 8005190:	d12e      	bne.n	80051f0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	f023 0310 	bic.w	r3, r3, #16
 80051ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b6:	643b      	str	r3, [r7, #64]	; 0x40
 80051b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e6      	bne.n	8005198 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d103      	bne.n	80051e0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2210      	movs	r2, #16
 80051de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7fe ff29 	bl	8004040 <HAL_UARTEx_RxEventCallback>
 80051ee:	e002      	b.n	80051f6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7fb fea1 	bl	8000f38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d006      	beq.n	800520c <UART_RxISR_8BIT_FIFOEN+0x24c>
 80051fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	f47f aefe 	bne.w	8005008 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005212:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005216:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800521a:	2b00      	cmp	r3, #0
 800521c:	d045      	beq.n	80052aa <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005224:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005228:	429a      	cmp	r2, r3
 800522a:	d23e      	bcs.n	80052aa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3308      	adds	r3, #8
 8005232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	61fb      	str	r3, [r7, #28]
   return(result);
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005242:	673b      	str	r3, [r7, #112]	; 0x70
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3308      	adds	r3, #8
 800524a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800524c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800524e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e5      	bne.n	800522c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005264:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	e853 3f00 	ldrex	r3, [r3]
 8005272:	60bb      	str	r3, [r7, #8]
   return(result);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f043 0320 	orr.w	r3, r3, #32
 800527a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	6979      	ldr	r1, [r7, #20]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	e841 2300 	strex	r3, r2, [r1]
 8005290:	613b      	str	r3, [r7, #16]
   return(result);
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e6      	bne.n	8005266 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005298:	e007      	b.n	80052aa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699a      	ldr	r2, [r3, #24]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0208 	orr.w	r2, r2, #8
 80052a8:	619a      	str	r2, [r3, #24]
}
 80052aa:	bf00      	nop
 80052ac:	3798      	adds	r7, #152	; 0x98
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	08004cff 	.word	0x08004cff

080052b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b0a8      	sub	sp, #160	; 0xa0
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80052c6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	2b22      	cmp	r3, #34	; 0x22
 80052f0:	f040 8153 	bne.w	800559a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80052fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052fe:	e0fa      	b.n	80054f6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005312:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005316:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800531a:	4013      	ands	r3, r2
 800531c:	b29a      	uxth	r2, r3
 800531e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005322:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005328:	1c9a      	adds	r2, r3, #2
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005334:	b29b      	uxth	r3, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800534a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	2b00      	cmp	r3, #0
 8005354:	d053      	beq.n	80053fe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005356:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d011      	beq.n	8005386 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005362:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00b      	beq.n	8005386 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2201      	movs	r2, #1
 8005374:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800537c:	f043 0201 	orr.w	r2, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d011      	beq.n	80053b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005392:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00b      	beq.n	80053b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2202      	movs	r2, #2
 80053a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ac:	f043 0204 	orr.w	r2, r3, #4
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d011      	beq.n	80053e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80053c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00b      	beq.n	80053e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2204      	movs	r2, #4
 80053d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053dc:	f043 0202 	orr.w	r2, r3, #2
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d006      	beq.n	80053fe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7fe fe1b 	bl	800402c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d175      	bne.n	80054f6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800541a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800541e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800542c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800542e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005432:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005434:	e841 2300 	strex	r3, r2, [r1]
 8005438:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800543a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e4      	bne.n	800540a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3308      	adds	r3, #8
 8005446:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005456:	f023 0301 	bic.w	r3, r3, #1
 800545a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3308      	adds	r3, #8
 8005464:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005468:	65ba      	str	r2, [r7, #88]	; 0x58
 800546a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800546e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005470:	e841 2300 	strex	r3, r2, [r1]
 8005474:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e1      	bne.n	8005440 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800548e:	2b01      	cmp	r3, #1
 8005490:	d12e      	bne.n	80054f0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a8:	f023 0310 	bic.w	r3, r3, #16
 80054ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054b6:	647b      	str	r3, [r7, #68]	; 0x44
 80054b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e6      	bne.n	8005498 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b10      	cmp	r3, #16
 80054d6:	d103      	bne.n	80054e0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2210      	movs	r2, #16
 80054de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7fe fda9 	bl	8004040 <HAL_UARTEx_RxEventCallback>
 80054ee:	e002      	b.n	80054f6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7fb fd21 	bl	8000f38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80054f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d006      	beq.n	800550c <UART_RxISR_16BIT_FIFOEN+0x254>
 80054fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b00      	cmp	r3, #0
 8005508:	f47f aefa 	bne.w	8005300 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005512:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005516:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800551a:	2b00      	cmp	r3, #0
 800551c:	d045      	beq.n	80055aa <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005524:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005528:	429a      	cmp	r2, r3
 800552a:	d23e      	bcs.n	80055aa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3308      	adds	r3, #8
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	623b      	str	r3, [r7, #32]
   return(result);
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005542:	677b      	str	r3, [r7, #116]	; 0x74
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3308      	adds	r3, #8
 800554a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800554c:	633a      	str	r2, [r7, #48]	; 0x30
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e5      	bne.n	800552c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a14      	ldr	r2, [pc, #80]	; (80055b4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005564:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	60fb      	str	r3, [r7, #12]
   return(result);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f043 0320 	orr.w	r3, r3, #32
 800557a:	673b      	str	r3, [r7, #112]	; 0x70
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	69b9      	ldr	r1, [r7, #24]
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	617b      	str	r3, [r7, #20]
   return(result);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e6      	bne.n	8005566 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005598:	e007      	b.n	80055aa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0208 	orr.w	r2, r2, #8
 80055a8:	619a      	str	r2, [r3, #24]
}
 80055aa:	bf00      	nop
 80055ac:	37a0      	adds	r7, #160	; 0xa0
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	08004e5f 	.word	0x08004e5f

080055b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005602:	2b01      	cmp	r3, #1
 8005604:	d101      	bne.n	800560a <HAL_UARTEx_DisableFifoMode+0x16>
 8005606:	2302      	movs	r3, #2
 8005608:	e027      	b.n	800565a <HAL_UARTEx_DisableFifoMode+0x66>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2224      	movs	r2, #36	; 0x24
 8005616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0201 	bic.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005638:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800567a:	2302      	movs	r3, #2
 800567c:	e02d      	b.n	80056da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2224      	movs	r2, #36	; 0x24
 800568a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f850 	bl	8005760 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e02d      	b.n	8005756 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2224      	movs	r2, #36	; 0x24
 8005706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0201 	bic.w	r2, r2, #1
 8005720:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f812 	bl	8005760 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800576c:	2b00      	cmp	r3, #0
 800576e:	d108      	bne.n	8005782 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005780:	e031      	b.n	80057e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005782:	2308      	movs	r3, #8
 8005784:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005786:	2308      	movs	r3, #8
 8005788:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	0e5b      	lsrs	r3, r3, #25
 8005792:	b2db      	uxtb	r3, r3
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	0f5b      	lsrs	r3, r3, #29
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057aa:	7bbb      	ldrb	r3, [r7, #14]
 80057ac:	7b3a      	ldrb	r2, [r7, #12]
 80057ae:	4911      	ldr	r1, [pc, #68]	; (80057f4 <UARTEx_SetNbDataToProcess+0x94>)
 80057b0:	5c8a      	ldrb	r2, [r1, r2]
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057b6:	7b3a      	ldrb	r2, [r7, #12]
 80057b8:	490f      	ldr	r1, [pc, #60]	; (80057f8 <UARTEx_SetNbDataToProcess+0x98>)
 80057ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	7b7a      	ldrb	r2, [r7, #13]
 80057cc:	4909      	ldr	r1, [pc, #36]	; (80057f4 <UARTEx_SetNbDataToProcess+0x94>)
 80057ce:	5c8a      	ldrb	r2, [r1, r2]
 80057d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057d4:	7b7a      	ldrb	r2, [r7, #13]
 80057d6:	4908      	ldr	r1, [pc, #32]	; (80057f8 <UARTEx_SetNbDataToProcess+0x98>)
 80057d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057da:	fb93 f3f2 	sdiv	r3, r3, r2
 80057de:	b29a      	uxth	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057e6:	bf00      	nop
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	0800615c 	.word	0x0800615c
 80057f8:	08006164 	.word	0x08006164

080057fc <__errno>:
 80057fc:	4b01      	ldr	r3, [pc, #4]	; (8005804 <__errno+0x8>)
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20000014 	.word	0x20000014

08005808 <__libc_init_array>:
 8005808:	b570      	push	{r4, r5, r6, lr}
 800580a:	4d0d      	ldr	r5, [pc, #52]	; (8005840 <__libc_init_array+0x38>)
 800580c:	4c0d      	ldr	r4, [pc, #52]	; (8005844 <__libc_init_array+0x3c>)
 800580e:	1b64      	subs	r4, r4, r5
 8005810:	10a4      	asrs	r4, r4, #2
 8005812:	2600      	movs	r6, #0
 8005814:	42a6      	cmp	r6, r4
 8005816:	d109      	bne.n	800582c <__libc_init_array+0x24>
 8005818:	4d0b      	ldr	r5, [pc, #44]	; (8005848 <__libc_init_array+0x40>)
 800581a:	4c0c      	ldr	r4, [pc, #48]	; (800584c <__libc_init_array+0x44>)
 800581c:	f000 fc6e 	bl	80060fc <_init>
 8005820:	1b64      	subs	r4, r4, r5
 8005822:	10a4      	asrs	r4, r4, #2
 8005824:	2600      	movs	r6, #0
 8005826:	42a6      	cmp	r6, r4
 8005828:	d105      	bne.n	8005836 <__libc_init_array+0x2e>
 800582a:	bd70      	pop	{r4, r5, r6, pc}
 800582c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005830:	4798      	blx	r3
 8005832:	3601      	adds	r6, #1
 8005834:	e7ee      	b.n	8005814 <__libc_init_array+0xc>
 8005836:	f855 3b04 	ldr.w	r3, [r5], #4
 800583a:	4798      	blx	r3
 800583c:	3601      	adds	r6, #1
 800583e:	e7f2      	b.n	8005826 <__libc_init_array+0x1e>
 8005840:	080061d8 	.word	0x080061d8
 8005844:	080061d8 	.word	0x080061d8
 8005848:	080061d8 	.word	0x080061d8
 800584c:	080061dc 	.word	0x080061dc

08005850 <memset>:
 8005850:	4402      	add	r2, r0
 8005852:	4603      	mov	r3, r0
 8005854:	4293      	cmp	r3, r2
 8005856:	d100      	bne.n	800585a <memset+0xa>
 8005858:	4770      	bx	lr
 800585a:	f803 1b01 	strb.w	r1, [r3], #1
 800585e:	e7f9      	b.n	8005854 <memset+0x4>

08005860 <setbuf>:
 8005860:	2900      	cmp	r1, #0
 8005862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005866:	bf0c      	ite	eq
 8005868:	2202      	moveq	r2, #2
 800586a:	2200      	movne	r2, #0
 800586c:	f000 b800 	b.w	8005870 <setvbuf>

08005870 <setvbuf>:
 8005870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005874:	461d      	mov	r5, r3
 8005876:	4b5d      	ldr	r3, [pc, #372]	; (80059ec <setvbuf+0x17c>)
 8005878:	681f      	ldr	r7, [r3, #0]
 800587a:	4604      	mov	r4, r0
 800587c:	460e      	mov	r6, r1
 800587e:	4690      	mov	r8, r2
 8005880:	b127      	cbz	r7, 800588c <setvbuf+0x1c>
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	b913      	cbnz	r3, 800588c <setvbuf+0x1c>
 8005886:	4638      	mov	r0, r7
 8005888:	f000 f9d2 	bl	8005c30 <__sinit>
 800588c:	4b58      	ldr	r3, [pc, #352]	; (80059f0 <setvbuf+0x180>)
 800588e:	429c      	cmp	r4, r3
 8005890:	d167      	bne.n	8005962 <setvbuf+0xf2>
 8005892:	687c      	ldr	r4, [r7, #4]
 8005894:	f1b8 0f02 	cmp.w	r8, #2
 8005898:	d006      	beq.n	80058a8 <setvbuf+0x38>
 800589a:	f1b8 0f01 	cmp.w	r8, #1
 800589e:	f200 809f 	bhi.w	80059e0 <setvbuf+0x170>
 80058a2:	2d00      	cmp	r5, #0
 80058a4:	f2c0 809c 	blt.w	80059e0 <setvbuf+0x170>
 80058a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058aa:	07db      	lsls	r3, r3, #31
 80058ac:	d405      	bmi.n	80058ba <setvbuf+0x4a>
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	0598      	lsls	r0, r3, #22
 80058b2:	d402      	bmi.n	80058ba <setvbuf+0x4a>
 80058b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058b6:	f000 fa59 	bl	8005d6c <__retarget_lock_acquire_recursive>
 80058ba:	4621      	mov	r1, r4
 80058bc:	4638      	mov	r0, r7
 80058be:	f000 f923 	bl	8005b08 <_fflush_r>
 80058c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058c4:	b141      	cbz	r1, 80058d8 <setvbuf+0x68>
 80058c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058ca:	4299      	cmp	r1, r3
 80058cc:	d002      	beq.n	80058d4 <setvbuf+0x64>
 80058ce:	4638      	mov	r0, r7
 80058d0:	f000 fa7c 	bl	8005dcc <_free_r>
 80058d4:	2300      	movs	r3, #0
 80058d6:	6363      	str	r3, [r4, #52]	; 0x34
 80058d8:	2300      	movs	r3, #0
 80058da:	61a3      	str	r3, [r4, #24]
 80058dc:	6063      	str	r3, [r4, #4]
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	0619      	lsls	r1, r3, #24
 80058e2:	d503      	bpl.n	80058ec <setvbuf+0x7c>
 80058e4:	6921      	ldr	r1, [r4, #16]
 80058e6:	4638      	mov	r0, r7
 80058e8:	f000 fa70 	bl	8005dcc <_free_r>
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80058f2:	f023 0303 	bic.w	r3, r3, #3
 80058f6:	f1b8 0f02 	cmp.w	r8, #2
 80058fa:	81a3      	strh	r3, [r4, #12]
 80058fc:	d06c      	beq.n	80059d8 <setvbuf+0x168>
 80058fe:	ab01      	add	r3, sp, #4
 8005900:	466a      	mov	r2, sp
 8005902:	4621      	mov	r1, r4
 8005904:	4638      	mov	r0, r7
 8005906:	f000 fa33 	bl	8005d70 <__swhatbuf_r>
 800590a:	89a3      	ldrh	r3, [r4, #12]
 800590c:	4318      	orrs	r0, r3
 800590e:	81a0      	strh	r0, [r4, #12]
 8005910:	2d00      	cmp	r5, #0
 8005912:	d130      	bne.n	8005976 <setvbuf+0x106>
 8005914:	9d00      	ldr	r5, [sp, #0]
 8005916:	4628      	mov	r0, r5
 8005918:	f000 fa50 	bl	8005dbc <malloc>
 800591c:	4606      	mov	r6, r0
 800591e:	2800      	cmp	r0, #0
 8005920:	d155      	bne.n	80059ce <setvbuf+0x15e>
 8005922:	f8dd 9000 	ldr.w	r9, [sp]
 8005926:	45a9      	cmp	r9, r5
 8005928:	d14a      	bne.n	80059c0 <setvbuf+0x150>
 800592a:	f04f 35ff 	mov.w	r5, #4294967295
 800592e:	2200      	movs	r2, #0
 8005930:	60a2      	str	r2, [r4, #8]
 8005932:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005936:	6022      	str	r2, [r4, #0]
 8005938:	6122      	str	r2, [r4, #16]
 800593a:	2201      	movs	r2, #1
 800593c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005940:	6162      	str	r2, [r4, #20]
 8005942:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005944:	f043 0302 	orr.w	r3, r3, #2
 8005948:	07d2      	lsls	r2, r2, #31
 800594a:	81a3      	strh	r3, [r4, #12]
 800594c:	d405      	bmi.n	800595a <setvbuf+0xea>
 800594e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005952:	d102      	bne.n	800595a <setvbuf+0xea>
 8005954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005956:	f000 fa0a 	bl	8005d6e <__retarget_lock_release_recursive>
 800595a:	4628      	mov	r0, r5
 800595c:	b003      	add	sp, #12
 800595e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005962:	4b24      	ldr	r3, [pc, #144]	; (80059f4 <setvbuf+0x184>)
 8005964:	429c      	cmp	r4, r3
 8005966:	d101      	bne.n	800596c <setvbuf+0xfc>
 8005968:	68bc      	ldr	r4, [r7, #8]
 800596a:	e793      	b.n	8005894 <setvbuf+0x24>
 800596c:	4b22      	ldr	r3, [pc, #136]	; (80059f8 <setvbuf+0x188>)
 800596e:	429c      	cmp	r4, r3
 8005970:	bf08      	it	eq
 8005972:	68fc      	ldreq	r4, [r7, #12]
 8005974:	e78e      	b.n	8005894 <setvbuf+0x24>
 8005976:	2e00      	cmp	r6, #0
 8005978:	d0cd      	beq.n	8005916 <setvbuf+0xa6>
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	b913      	cbnz	r3, 8005984 <setvbuf+0x114>
 800597e:	4638      	mov	r0, r7
 8005980:	f000 f956 	bl	8005c30 <__sinit>
 8005984:	f1b8 0f01 	cmp.w	r8, #1
 8005988:	bf08      	it	eq
 800598a:	89a3      	ldrheq	r3, [r4, #12]
 800598c:	6026      	str	r6, [r4, #0]
 800598e:	bf04      	itt	eq
 8005990:	f043 0301 	orreq.w	r3, r3, #1
 8005994:	81a3      	strheq	r3, [r4, #12]
 8005996:	89a2      	ldrh	r2, [r4, #12]
 8005998:	f012 0308 	ands.w	r3, r2, #8
 800599c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80059a0:	d01c      	beq.n	80059dc <setvbuf+0x16c>
 80059a2:	07d3      	lsls	r3, r2, #31
 80059a4:	bf41      	itttt	mi
 80059a6:	2300      	movmi	r3, #0
 80059a8:	426d      	negmi	r5, r5
 80059aa:	60a3      	strmi	r3, [r4, #8]
 80059ac:	61a5      	strmi	r5, [r4, #24]
 80059ae:	bf58      	it	pl
 80059b0:	60a5      	strpl	r5, [r4, #8]
 80059b2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80059b4:	f015 0501 	ands.w	r5, r5, #1
 80059b8:	d115      	bne.n	80059e6 <setvbuf+0x176>
 80059ba:	f412 7f00 	tst.w	r2, #512	; 0x200
 80059be:	e7c8      	b.n	8005952 <setvbuf+0xe2>
 80059c0:	4648      	mov	r0, r9
 80059c2:	f000 f9fb 	bl	8005dbc <malloc>
 80059c6:	4606      	mov	r6, r0
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d0ae      	beq.n	800592a <setvbuf+0xba>
 80059cc:	464d      	mov	r5, r9
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d4:	81a3      	strh	r3, [r4, #12]
 80059d6:	e7d0      	b.n	800597a <setvbuf+0x10a>
 80059d8:	2500      	movs	r5, #0
 80059da:	e7a8      	b.n	800592e <setvbuf+0xbe>
 80059dc:	60a3      	str	r3, [r4, #8]
 80059de:	e7e8      	b.n	80059b2 <setvbuf+0x142>
 80059e0:	f04f 35ff 	mov.w	r5, #4294967295
 80059e4:	e7b9      	b.n	800595a <setvbuf+0xea>
 80059e6:	2500      	movs	r5, #0
 80059e8:	e7b7      	b.n	800595a <setvbuf+0xea>
 80059ea:	bf00      	nop
 80059ec:	20000014 	.word	0x20000014
 80059f0:	08006190 	.word	0x08006190
 80059f4:	080061b0 	.word	0x080061b0
 80059f8:	08006170 	.word	0x08006170

080059fc <__sflush_r>:
 80059fc:	898a      	ldrh	r2, [r1, #12]
 80059fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a02:	4605      	mov	r5, r0
 8005a04:	0710      	lsls	r0, r2, #28
 8005a06:	460c      	mov	r4, r1
 8005a08:	d458      	bmi.n	8005abc <__sflush_r+0xc0>
 8005a0a:	684b      	ldr	r3, [r1, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	dc05      	bgt.n	8005a1c <__sflush_r+0x20>
 8005a10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	dc02      	bgt.n	8005a1c <__sflush_r+0x20>
 8005a16:	2000      	movs	r0, #0
 8005a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a1e:	2e00      	cmp	r6, #0
 8005a20:	d0f9      	beq.n	8005a16 <__sflush_r+0x1a>
 8005a22:	2300      	movs	r3, #0
 8005a24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a28:	682f      	ldr	r7, [r5, #0]
 8005a2a:	602b      	str	r3, [r5, #0]
 8005a2c:	d032      	beq.n	8005a94 <__sflush_r+0x98>
 8005a2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	075a      	lsls	r2, r3, #29
 8005a34:	d505      	bpl.n	8005a42 <__sflush_r+0x46>
 8005a36:	6863      	ldr	r3, [r4, #4]
 8005a38:	1ac0      	subs	r0, r0, r3
 8005a3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a3c:	b10b      	cbz	r3, 8005a42 <__sflush_r+0x46>
 8005a3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a40:	1ac0      	subs	r0, r0, r3
 8005a42:	2300      	movs	r3, #0
 8005a44:	4602      	mov	r2, r0
 8005a46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a48:	6a21      	ldr	r1, [r4, #32]
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b0      	blx	r6
 8005a4e:	1c43      	adds	r3, r0, #1
 8005a50:	89a3      	ldrh	r3, [r4, #12]
 8005a52:	d106      	bne.n	8005a62 <__sflush_r+0x66>
 8005a54:	6829      	ldr	r1, [r5, #0]
 8005a56:	291d      	cmp	r1, #29
 8005a58:	d82c      	bhi.n	8005ab4 <__sflush_r+0xb8>
 8005a5a:	4a2a      	ldr	r2, [pc, #168]	; (8005b04 <__sflush_r+0x108>)
 8005a5c:	40ca      	lsrs	r2, r1
 8005a5e:	07d6      	lsls	r6, r2, #31
 8005a60:	d528      	bpl.n	8005ab4 <__sflush_r+0xb8>
 8005a62:	2200      	movs	r2, #0
 8005a64:	6062      	str	r2, [r4, #4]
 8005a66:	04d9      	lsls	r1, r3, #19
 8005a68:	6922      	ldr	r2, [r4, #16]
 8005a6a:	6022      	str	r2, [r4, #0]
 8005a6c:	d504      	bpl.n	8005a78 <__sflush_r+0x7c>
 8005a6e:	1c42      	adds	r2, r0, #1
 8005a70:	d101      	bne.n	8005a76 <__sflush_r+0x7a>
 8005a72:	682b      	ldr	r3, [r5, #0]
 8005a74:	b903      	cbnz	r3, 8005a78 <__sflush_r+0x7c>
 8005a76:	6560      	str	r0, [r4, #84]	; 0x54
 8005a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a7a:	602f      	str	r7, [r5, #0]
 8005a7c:	2900      	cmp	r1, #0
 8005a7e:	d0ca      	beq.n	8005a16 <__sflush_r+0x1a>
 8005a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a84:	4299      	cmp	r1, r3
 8005a86:	d002      	beq.n	8005a8e <__sflush_r+0x92>
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f000 f99f 	bl	8005dcc <_free_r>
 8005a8e:	2000      	movs	r0, #0
 8005a90:	6360      	str	r0, [r4, #52]	; 0x34
 8005a92:	e7c1      	b.n	8005a18 <__sflush_r+0x1c>
 8005a94:	6a21      	ldr	r1, [r4, #32]
 8005a96:	2301      	movs	r3, #1
 8005a98:	4628      	mov	r0, r5
 8005a9a:	47b0      	blx	r6
 8005a9c:	1c41      	adds	r1, r0, #1
 8005a9e:	d1c7      	bne.n	8005a30 <__sflush_r+0x34>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0c4      	beq.n	8005a30 <__sflush_r+0x34>
 8005aa6:	2b1d      	cmp	r3, #29
 8005aa8:	d001      	beq.n	8005aae <__sflush_r+0xb2>
 8005aaa:	2b16      	cmp	r3, #22
 8005aac:	d101      	bne.n	8005ab2 <__sflush_r+0xb6>
 8005aae:	602f      	str	r7, [r5, #0]
 8005ab0:	e7b1      	b.n	8005a16 <__sflush_r+0x1a>
 8005ab2:	89a3      	ldrh	r3, [r4, #12]
 8005ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab8:	81a3      	strh	r3, [r4, #12]
 8005aba:	e7ad      	b.n	8005a18 <__sflush_r+0x1c>
 8005abc:	690f      	ldr	r7, [r1, #16]
 8005abe:	2f00      	cmp	r7, #0
 8005ac0:	d0a9      	beq.n	8005a16 <__sflush_r+0x1a>
 8005ac2:	0793      	lsls	r3, r2, #30
 8005ac4:	680e      	ldr	r6, [r1, #0]
 8005ac6:	bf08      	it	eq
 8005ac8:	694b      	ldreq	r3, [r1, #20]
 8005aca:	600f      	str	r7, [r1, #0]
 8005acc:	bf18      	it	ne
 8005ace:	2300      	movne	r3, #0
 8005ad0:	eba6 0807 	sub.w	r8, r6, r7
 8005ad4:	608b      	str	r3, [r1, #8]
 8005ad6:	f1b8 0f00 	cmp.w	r8, #0
 8005ada:	dd9c      	ble.n	8005a16 <__sflush_r+0x1a>
 8005adc:	6a21      	ldr	r1, [r4, #32]
 8005ade:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ae0:	4643      	mov	r3, r8
 8005ae2:	463a      	mov	r2, r7
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b0      	blx	r6
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	dc06      	bgt.n	8005afa <__sflush_r+0xfe>
 8005aec:	89a3      	ldrh	r3, [r4, #12]
 8005aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005af2:	81a3      	strh	r3, [r4, #12]
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295
 8005af8:	e78e      	b.n	8005a18 <__sflush_r+0x1c>
 8005afa:	4407      	add	r7, r0
 8005afc:	eba8 0800 	sub.w	r8, r8, r0
 8005b00:	e7e9      	b.n	8005ad6 <__sflush_r+0xda>
 8005b02:	bf00      	nop
 8005b04:	20400001 	.word	0x20400001

08005b08 <_fflush_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	690b      	ldr	r3, [r1, #16]
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	460c      	mov	r4, r1
 8005b10:	b913      	cbnz	r3, 8005b18 <_fflush_r+0x10>
 8005b12:	2500      	movs	r5, #0
 8005b14:	4628      	mov	r0, r5
 8005b16:	bd38      	pop	{r3, r4, r5, pc}
 8005b18:	b118      	cbz	r0, 8005b22 <_fflush_r+0x1a>
 8005b1a:	6983      	ldr	r3, [r0, #24]
 8005b1c:	b90b      	cbnz	r3, 8005b22 <_fflush_r+0x1a>
 8005b1e:	f000 f887 	bl	8005c30 <__sinit>
 8005b22:	4b14      	ldr	r3, [pc, #80]	; (8005b74 <_fflush_r+0x6c>)
 8005b24:	429c      	cmp	r4, r3
 8005b26:	d11b      	bne.n	8005b60 <_fflush_r+0x58>
 8005b28:	686c      	ldr	r4, [r5, #4]
 8005b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0ef      	beq.n	8005b12 <_fflush_r+0xa>
 8005b32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b34:	07d0      	lsls	r0, r2, #31
 8005b36:	d404      	bmi.n	8005b42 <_fflush_r+0x3a>
 8005b38:	0599      	lsls	r1, r3, #22
 8005b3a:	d402      	bmi.n	8005b42 <_fflush_r+0x3a>
 8005b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b3e:	f000 f915 	bl	8005d6c <__retarget_lock_acquire_recursive>
 8005b42:	4628      	mov	r0, r5
 8005b44:	4621      	mov	r1, r4
 8005b46:	f7ff ff59 	bl	80059fc <__sflush_r>
 8005b4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b4c:	07da      	lsls	r2, r3, #31
 8005b4e:	4605      	mov	r5, r0
 8005b50:	d4e0      	bmi.n	8005b14 <_fflush_r+0xc>
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	059b      	lsls	r3, r3, #22
 8005b56:	d4dd      	bmi.n	8005b14 <_fflush_r+0xc>
 8005b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b5a:	f000 f908 	bl	8005d6e <__retarget_lock_release_recursive>
 8005b5e:	e7d9      	b.n	8005b14 <_fflush_r+0xc>
 8005b60:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <_fflush_r+0x70>)
 8005b62:	429c      	cmp	r4, r3
 8005b64:	d101      	bne.n	8005b6a <_fflush_r+0x62>
 8005b66:	68ac      	ldr	r4, [r5, #8]
 8005b68:	e7df      	b.n	8005b2a <_fflush_r+0x22>
 8005b6a:	4b04      	ldr	r3, [pc, #16]	; (8005b7c <_fflush_r+0x74>)
 8005b6c:	429c      	cmp	r4, r3
 8005b6e:	bf08      	it	eq
 8005b70:	68ec      	ldreq	r4, [r5, #12]
 8005b72:	e7da      	b.n	8005b2a <_fflush_r+0x22>
 8005b74:	08006190 	.word	0x08006190
 8005b78:	080061b0 	.word	0x080061b0
 8005b7c:	08006170 	.word	0x08006170

08005b80 <std>:
 8005b80:	2300      	movs	r3, #0
 8005b82:	b510      	push	{r4, lr}
 8005b84:	4604      	mov	r4, r0
 8005b86:	e9c0 3300 	strd	r3, r3, [r0]
 8005b8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b8e:	6083      	str	r3, [r0, #8]
 8005b90:	8181      	strh	r1, [r0, #12]
 8005b92:	6643      	str	r3, [r0, #100]	; 0x64
 8005b94:	81c2      	strh	r2, [r0, #14]
 8005b96:	6183      	str	r3, [r0, #24]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	305c      	adds	r0, #92	; 0x5c
 8005b9e:	f7ff fe57 	bl	8005850 <memset>
 8005ba2:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <std+0x38>)
 8005ba4:	6263      	str	r3, [r4, #36]	; 0x24
 8005ba6:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <std+0x3c>)
 8005ba8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005baa:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <std+0x40>)
 8005bac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bae:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <std+0x44>)
 8005bb0:	6224      	str	r4, [r4, #32]
 8005bb2:	6323      	str	r3, [r4, #48]	; 0x30
 8005bb4:	bd10      	pop	{r4, pc}
 8005bb6:	bf00      	nop
 8005bb8:	08005fad 	.word	0x08005fad
 8005bbc:	08005fcf 	.word	0x08005fcf
 8005bc0:	08006007 	.word	0x08006007
 8005bc4:	0800602b 	.word	0x0800602b

08005bc8 <_cleanup_r>:
 8005bc8:	4901      	ldr	r1, [pc, #4]	; (8005bd0 <_cleanup_r+0x8>)
 8005bca:	f000 b8af 	b.w	8005d2c <_fwalk_reent>
 8005bce:	bf00      	nop
 8005bd0:	08005b09 	.word	0x08005b09

08005bd4 <__sfmoreglue>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	2268      	movs	r2, #104	; 0x68
 8005bd8:	1e4d      	subs	r5, r1, #1
 8005bda:	4355      	muls	r5, r2
 8005bdc:	460e      	mov	r6, r1
 8005bde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005be2:	f000 f95f 	bl	8005ea4 <_malloc_r>
 8005be6:	4604      	mov	r4, r0
 8005be8:	b140      	cbz	r0, 8005bfc <__sfmoreglue+0x28>
 8005bea:	2100      	movs	r1, #0
 8005bec:	e9c0 1600 	strd	r1, r6, [r0]
 8005bf0:	300c      	adds	r0, #12
 8005bf2:	60a0      	str	r0, [r4, #8]
 8005bf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bf8:	f7ff fe2a 	bl	8005850 <memset>
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	bd70      	pop	{r4, r5, r6, pc}

08005c00 <__sfp_lock_acquire>:
 8005c00:	4801      	ldr	r0, [pc, #4]	; (8005c08 <__sfp_lock_acquire+0x8>)
 8005c02:	f000 b8b3 	b.w	8005d6c <__retarget_lock_acquire_recursive>
 8005c06:	bf00      	nop
 8005c08:	20000259 	.word	0x20000259

08005c0c <__sfp_lock_release>:
 8005c0c:	4801      	ldr	r0, [pc, #4]	; (8005c14 <__sfp_lock_release+0x8>)
 8005c0e:	f000 b8ae 	b.w	8005d6e <__retarget_lock_release_recursive>
 8005c12:	bf00      	nop
 8005c14:	20000259 	.word	0x20000259

08005c18 <__sinit_lock_acquire>:
 8005c18:	4801      	ldr	r0, [pc, #4]	; (8005c20 <__sinit_lock_acquire+0x8>)
 8005c1a:	f000 b8a7 	b.w	8005d6c <__retarget_lock_acquire_recursive>
 8005c1e:	bf00      	nop
 8005c20:	2000025a 	.word	0x2000025a

08005c24 <__sinit_lock_release>:
 8005c24:	4801      	ldr	r0, [pc, #4]	; (8005c2c <__sinit_lock_release+0x8>)
 8005c26:	f000 b8a2 	b.w	8005d6e <__retarget_lock_release_recursive>
 8005c2a:	bf00      	nop
 8005c2c:	2000025a 	.word	0x2000025a

08005c30 <__sinit>:
 8005c30:	b510      	push	{r4, lr}
 8005c32:	4604      	mov	r4, r0
 8005c34:	f7ff fff0 	bl	8005c18 <__sinit_lock_acquire>
 8005c38:	69a3      	ldr	r3, [r4, #24]
 8005c3a:	b11b      	cbz	r3, 8005c44 <__sinit+0x14>
 8005c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c40:	f7ff bff0 	b.w	8005c24 <__sinit_lock_release>
 8005c44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c48:	6523      	str	r3, [r4, #80]	; 0x50
 8005c4a:	4b13      	ldr	r3, [pc, #76]	; (8005c98 <__sinit+0x68>)
 8005c4c:	4a13      	ldr	r2, [pc, #76]	; (8005c9c <__sinit+0x6c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c52:	42a3      	cmp	r3, r4
 8005c54:	bf04      	itt	eq
 8005c56:	2301      	moveq	r3, #1
 8005c58:	61a3      	streq	r3, [r4, #24]
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f000 f820 	bl	8005ca0 <__sfp>
 8005c60:	6060      	str	r0, [r4, #4]
 8005c62:	4620      	mov	r0, r4
 8005c64:	f000 f81c 	bl	8005ca0 <__sfp>
 8005c68:	60a0      	str	r0, [r4, #8]
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f000 f818 	bl	8005ca0 <__sfp>
 8005c70:	2200      	movs	r2, #0
 8005c72:	60e0      	str	r0, [r4, #12]
 8005c74:	2104      	movs	r1, #4
 8005c76:	6860      	ldr	r0, [r4, #4]
 8005c78:	f7ff ff82 	bl	8005b80 <std>
 8005c7c:	68a0      	ldr	r0, [r4, #8]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	2109      	movs	r1, #9
 8005c82:	f7ff ff7d 	bl	8005b80 <std>
 8005c86:	68e0      	ldr	r0, [r4, #12]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	2112      	movs	r1, #18
 8005c8c:	f7ff ff78 	bl	8005b80 <std>
 8005c90:	2301      	movs	r3, #1
 8005c92:	61a3      	str	r3, [r4, #24]
 8005c94:	e7d2      	b.n	8005c3c <__sinit+0xc>
 8005c96:	bf00      	nop
 8005c98:	0800616c 	.word	0x0800616c
 8005c9c:	08005bc9 	.word	0x08005bc9

08005ca0 <__sfp>:
 8005ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca2:	4607      	mov	r7, r0
 8005ca4:	f7ff ffac 	bl	8005c00 <__sfp_lock_acquire>
 8005ca8:	4b1e      	ldr	r3, [pc, #120]	; (8005d24 <__sfp+0x84>)
 8005caa:	681e      	ldr	r6, [r3, #0]
 8005cac:	69b3      	ldr	r3, [r6, #24]
 8005cae:	b913      	cbnz	r3, 8005cb6 <__sfp+0x16>
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	f7ff ffbd 	bl	8005c30 <__sinit>
 8005cb6:	3648      	adds	r6, #72	; 0x48
 8005cb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	d503      	bpl.n	8005cc8 <__sfp+0x28>
 8005cc0:	6833      	ldr	r3, [r6, #0]
 8005cc2:	b30b      	cbz	r3, 8005d08 <__sfp+0x68>
 8005cc4:	6836      	ldr	r6, [r6, #0]
 8005cc6:	e7f7      	b.n	8005cb8 <__sfp+0x18>
 8005cc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ccc:	b9d5      	cbnz	r5, 8005d04 <__sfp+0x64>
 8005cce:	4b16      	ldr	r3, [pc, #88]	; (8005d28 <__sfp+0x88>)
 8005cd0:	60e3      	str	r3, [r4, #12]
 8005cd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cd6:	6665      	str	r5, [r4, #100]	; 0x64
 8005cd8:	f000 f847 	bl	8005d6a <__retarget_lock_init_recursive>
 8005cdc:	f7ff ff96 	bl	8005c0c <__sfp_lock_release>
 8005ce0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ce4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ce8:	6025      	str	r5, [r4, #0]
 8005cea:	61a5      	str	r5, [r4, #24]
 8005cec:	2208      	movs	r2, #8
 8005cee:	4629      	mov	r1, r5
 8005cf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cf4:	f7ff fdac 	bl	8005850 <memset>
 8005cf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d00:	4620      	mov	r0, r4
 8005d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d04:	3468      	adds	r4, #104	; 0x68
 8005d06:	e7d9      	b.n	8005cbc <__sfp+0x1c>
 8005d08:	2104      	movs	r1, #4
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	f7ff ff62 	bl	8005bd4 <__sfmoreglue>
 8005d10:	4604      	mov	r4, r0
 8005d12:	6030      	str	r0, [r6, #0]
 8005d14:	2800      	cmp	r0, #0
 8005d16:	d1d5      	bne.n	8005cc4 <__sfp+0x24>
 8005d18:	f7ff ff78 	bl	8005c0c <__sfp_lock_release>
 8005d1c:	230c      	movs	r3, #12
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	e7ee      	b.n	8005d00 <__sfp+0x60>
 8005d22:	bf00      	nop
 8005d24:	0800616c 	.word	0x0800616c
 8005d28:	ffff0001 	.word	0xffff0001

08005d2c <_fwalk_reent>:
 8005d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d30:	4606      	mov	r6, r0
 8005d32:	4688      	mov	r8, r1
 8005d34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d38:	2700      	movs	r7, #0
 8005d3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d3e:	f1b9 0901 	subs.w	r9, r9, #1
 8005d42:	d505      	bpl.n	8005d50 <_fwalk_reent+0x24>
 8005d44:	6824      	ldr	r4, [r4, #0]
 8005d46:	2c00      	cmp	r4, #0
 8005d48:	d1f7      	bne.n	8005d3a <_fwalk_reent+0xe>
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d50:	89ab      	ldrh	r3, [r5, #12]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d907      	bls.n	8005d66 <_fwalk_reent+0x3a>
 8005d56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	d003      	beq.n	8005d66 <_fwalk_reent+0x3a>
 8005d5e:	4629      	mov	r1, r5
 8005d60:	4630      	mov	r0, r6
 8005d62:	47c0      	blx	r8
 8005d64:	4307      	orrs	r7, r0
 8005d66:	3568      	adds	r5, #104	; 0x68
 8005d68:	e7e9      	b.n	8005d3e <_fwalk_reent+0x12>

08005d6a <__retarget_lock_init_recursive>:
 8005d6a:	4770      	bx	lr

08005d6c <__retarget_lock_acquire_recursive>:
 8005d6c:	4770      	bx	lr

08005d6e <__retarget_lock_release_recursive>:
 8005d6e:	4770      	bx	lr

08005d70 <__swhatbuf_r>:
 8005d70:	b570      	push	{r4, r5, r6, lr}
 8005d72:	460e      	mov	r6, r1
 8005d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d78:	2900      	cmp	r1, #0
 8005d7a:	b096      	sub	sp, #88	; 0x58
 8005d7c:	4614      	mov	r4, r2
 8005d7e:	461d      	mov	r5, r3
 8005d80:	da08      	bge.n	8005d94 <__swhatbuf_r+0x24>
 8005d82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	602a      	str	r2, [r5, #0]
 8005d8a:	061a      	lsls	r2, r3, #24
 8005d8c:	d410      	bmi.n	8005db0 <__swhatbuf_r+0x40>
 8005d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d92:	e00e      	b.n	8005db2 <__swhatbuf_r+0x42>
 8005d94:	466a      	mov	r2, sp
 8005d96:	f000 f96f 	bl	8006078 <_fstat_r>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	dbf1      	blt.n	8005d82 <__swhatbuf_r+0x12>
 8005d9e:	9a01      	ldr	r2, [sp, #4]
 8005da0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005da4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005da8:	425a      	negs	r2, r3
 8005daa:	415a      	adcs	r2, r3
 8005dac:	602a      	str	r2, [r5, #0]
 8005dae:	e7ee      	b.n	8005d8e <__swhatbuf_r+0x1e>
 8005db0:	2340      	movs	r3, #64	; 0x40
 8005db2:	2000      	movs	r0, #0
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	b016      	add	sp, #88	; 0x58
 8005db8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005dbc <malloc>:
 8005dbc:	4b02      	ldr	r3, [pc, #8]	; (8005dc8 <malloc+0xc>)
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	f000 b86f 	b.w	8005ea4 <_malloc_r>
 8005dc6:	bf00      	nop
 8005dc8:	20000014 	.word	0x20000014

08005dcc <_free_r>:
 8005dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dce:	2900      	cmp	r1, #0
 8005dd0:	d044      	beq.n	8005e5c <_free_r+0x90>
 8005dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dd6:	9001      	str	r0, [sp, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f1a1 0404 	sub.w	r4, r1, #4
 8005dde:	bfb8      	it	lt
 8005de0:	18e4      	addlt	r4, r4, r3
 8005de2:	f000 f96d 	bl	80060c0 <__malloc_lock>
 8005de6:	4a1e      	ldr	r2, [pc, #120]	; (8005e60 <_free_r+0x94>)
 8005de8:	9801      	ldr	r0, [sp, #4]
 8005dea:	6813      	ldr	r3, [r2, #0]
 8005dec:	b933      	cbnz	r3, 8005dfc <_free_r+0x30>
 8005dee:	6063      	str	r3, [r4, #4]
 8005df0:	6014      	str	r4, [r2, #0]
 8005df2:	b003      	add	sp, #12
 8005df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005df8:	f000 b968 	b.w	80060cc <__malloc_unlock>
 8005dfc:	42a3      	cmp	r3, r4
 8005dfe:	d908      	bls.n	8005e12 <_free_r+0x46>
 8005e00:	6825      	ldr	r5, [r4, #0]
 8005e02:	1961      	adds	r1, r4, r5
 8005e04:	428b      	cmp	r3, r1
 8005e06:	bf01      	itttt	eq
 8005e08:	6819      	ldreq	r1, [r3, #0]
 8005e0a:	685b      	ldreq	r3, [r3, #4]
 8005e0c:	1949      	addeq	r1, r1, r5
 8005e0e:	6021      	streq	r1, [r4, #0]
 8005e10:	e7ed      	b.n	8005dee <_free_r+0x22>
 8005e12:	461a      	mov	r2, r3
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	b10b      	cbz	r3, 8005e1c <_free_r+0x50>
 8005e18:	42a3      	cmp	r3, r4
 8005e1a:	d9fa      	bls.n	8005e12 <_free_r+0x46>
 8005e1c:	6811      	ldr	r1, [r2, #0]
 8005e1e:	1855      	adds	r5, r2, r1
 8005e20:	42a5      	cmp	r5, r4
 8005e22:	d10b      	bne.n	8005e3c <_free_r+0x70>
 8005e24:	6824      	ldr	r4, [r4, #0]
 8005e26:	4421      	add	r1, r4
 8005e28:	1854      	adds	r4, r2, r1
 8005e2a:	42a3      	cmp	r3, r4
 8005e2c:	6011      	str	r1, [r2, #0]
 8005e2e:	d1e0      	bne.n	8005df2 <_free_r+0x26>
 8005e30:	681c      	ldr	r4, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	6053      	str	r3, [r2, #4]
 8005e36:	4421      	add	r1, r4
 8005e38:	6011      	str	r1, [r2, #0]
 8005e3a:	e7da      	b.n	8005df2 <_free_r+0x26>
 8005e3c:	d902      	bls.n	8005e44 <_free_r+0x78>
 8005e3e:	230c      	movs	r3, #12
 8005e40:	6003      	str	r3, [r0, #0]
 8005e42:	e7d6      	b.n	8005df2 <_free_r+0x26>
 8005e44:	6825      	ldr	r5, [r4, #0]
 8005e46:	1961      	adds	r1, r4, r5
 8005e48:	428b      	cmp	r3, r1
 8005e4a:	bf04      	itt	eq
 8005e4c:	6819      	ldreq	r1, [r3, #0]
 8005e4e:	685b      	ldreq	r3, [r3, #4]
 8005e50:	6063      	str	r3, [r4, #4]
 8005e52:	bf04      	itt	eq
 8005e54:	1949      	addeq	r1, r1, r5
 8005e56:	6021      	streq	r1, [r4, #0]
 8005e58:	6054      	str	r4, [r2, #4]
 8005e5a:	e7ca      	b.n	8005df2 <_free_r+0x26>
 8005e5c:	b003      	add	sp, #12
 8005e5e:	bd30      	pop	{r4, r5, pc}
 8005e60:	2000025c 	.word	0x2000025c

08005e64 <sbrk_aligned>:
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	4e0e      	ldr	r6, [pc, #56]	; (8005ea0 <sbrk_aligned+0x3c>)
 8005e68:	460c      	mov	r4, r1
 8005e6a:	6831      	ldr	r1, [r6, #0]
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	b911      	cbnz	r1, 8005e76 <sbrk_aligned+0x12>
 8005e70:	f000 f88c 	bl	8005f8c <_sbrk_r>
 8005e74:	6030      	str	r0, [r6, #0]
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f000 f887 	bl	8005f8c <_sbrk_r>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	d00a      	beq.n	8005e98 <sbrk_aligned+0x34>
 8005e82:	1cc4      	adds	r4, r0, #3
 8005e84:	f024 0403 	bic.w	r4, r4, #3
 8005e88:	42a0      	cmp	r0, r4
 8005e8a:	d007      	beq.n	8005e9c <sbrk_aligned+0x38>
 8005e8c:	1a21      	subs	r1, r4, r0
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f000 f87c 	bl	8005f8c <_sbrk_r>
 8005e94:	3001      	adds	r0, #1
 8005e96:	d101      	bne.n	8005e9c <sbrk_aligned+0x38>
 8005e98:	f04f 34ff 	mov.w	r4, #4294967295
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	20000260 	.word	0x20000260

08005ea4 <_malloc_r>:
 8005ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea8:	1ccd      	adds	r5, r1, #3
 8005eaa:	f025 0503 	bic.w	r5, r5, #3
 8005eae:	3508      	adds	r5, #8
 8005eb0:	2d0c      	cmp	r5, #12
 8005eb2:	bf38      	it	cc
 8005eb4:	250c      	movcc	r5, #12
 8005eb6:	2d00      	cmp	r5, #0
 8005eb8:	4607      	mov	r7, r0
 8005eba:	db01      	blt.n	8005ec0 <_malloc_r+0x1c>
 8005ebc:	42a9      	cmp	r1, r5
 8005ebe:	d905      	bls.n	8005ecc <_malloc_r+0x28>
 8005ec0:	230c      	movs	r3, #12
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	2600      	movs	r6, #0
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ecc:	4e2e      	ldr	r6, [pc, #184]	; (8005f88 <_malloc_r+0xe4>)
 8005ece:	f000 f8f7 	bl	80060c0 <__malloc_lock>
 8005ed2:	6833      	ldr	r3, [r6, #0]
 8005ed4:	461c      	mov	r4, r3
 8005ed6:	bb34      	cbnz	r4, 8005f26 <_malloc_r+0x82>
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4638      	mov	r0, r7
 8005edc:	f7ff ffc2 	bl	8005e64 <sbrk_aligned>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	d14d      	bne.n	8005f82 <_malloc_r+0xde>
 8005ee6:	6834      	ldr	r4, [r6, #0]
 8005ee8:	4626      	mov	r6, r4
 8005eea:	2e00      	cmp	r6, #0
 8005eec:	d140      	bne.n	8005f70 <_malloc_r+0xcc>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	4631      	mov	r1, r6
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	eb04 0803 	add.w	r8, r4, r3
 8005ef8:	f000 f848 	bl	8005f8c <_sbrk_r>
 8005efc:	4580      	cmp	r8, r0
 8005efe:	d13a      	bne.n	8005f76 <_malloc_r+0xd2>
 8005f00:	6821      	ldr	r1, [r4, #0]
 8005f02:	3503      	adds	r5, #3
 8005f04:	1a6d      	subs	r5, r5, r1
 8005f06:	f025 0503 	bic.w	r5, r5, #3
 8005f0a:	3508      	adds	r5, #8
 8005f0c:	2d0c      	cmp	r5, #12
 8005f0e:	bf38      	it	cc
 8005f10:	250c      	movcc	r5, #12
 8005f12:	4629      	mov	r1, r5
 8005f14:	4638      	mov	r0, r7
 8005f16:	f7ff ffa5 	bl	8005e64 <sbrk_aligned>
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	d02b      	beq.n	8005f76 <_malloc_r+0xd2>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	442b      	add	r3, r5
 8005f22:	6023      	str	r3, [r4, #0]
 8005f24:	e00e      	b.n	8005f44 <_malloc_r+0xa0>
 8005f26:	6822      	ldr	r2, [r4, #0]
 8005f28:	1b52      	subs	r2, r2, r5
 8005f2a:	d41e      	bmi.n	8005f6a <_malloc_r+0xc6>
 8005f2c:	2a0b      	cmp	r2, #11
 8005f2e:	d916      	bls.n	8005f5e <_malloc_r+0xba>
 8005f30:	1961      	adds	r1, r4, r5
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	6025      	str	r5, [r4, #0]
 8005f36:	bf18      	it	ne
 8005f38:	6059      	strne	r1, [r3, #4]
 8005f3a:	6863      	ldr	r3, [r4, #4]
 8005f3c:	bf08      	it	eq
 8005f3e:	6031      	streq	r1, [r6, #0]
 8005f40:	5162      	str	r2, [r4, r5]
 8005f42:	604b      	str	r3, [r1, #4]
 8005f44:	4638      	mov	r0, r7
 8005f46:	f104 060b 	add.w	r6, r4, #11
 8005f4a:	f000 f8bf 	bl	80060cc <__malloc_unlock>
 8005f4e:	f026 0607 	bic.w	r6, r6, #7
 8005f52:	1d23      	adds	r3, r4, #4
 8005f54:	1af2      	subs	r2, r6, r3
 8005f56:	d0b6      	beq.n	8005ec6 <_malloc_r+0x22>
 8005f58:	1b9b      	subs	r3, r3, r6
 8005f5a:	50a3      	str	r3, [r4, r2]
 8005f5c:	e7b3      	b.n	8005ec6 <_malloc_r+0x22>
 8005f5e:	6862      	ldr	r2, [r4, #4]
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	bf0c      	ite	eq
 8005f64:	6032      	streq	r2, [r6, #0]
 8005f66:	605a      	strne	r2, [r3, #4]
 8005f68:	e7ec      	b.n	8005f44 <_malloc_r+0xa0>
 8005f6a:	4623      	mov	r3, r4
 8005f6c:	6864      	ldr	r4, [r4, #4]
 8005f6e:	e7b2      	b.n	8005ed6 <_malloc_r+0x32>
 8005f70:	4634      	mov	r4, r6
 8005f72:	6876      	ldr	r6, [r6, #4]
 8005f74:	e7b9      	b.n	8005eea <_malloc_r+0x46>
 8005f76:	230c      	movs	r3, #12
 8005f78:	603b      	str	r3, [r7, #0]
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	f000 f8a6 	bl	80060cc <__malloc_unlock>
 8005f80:	e7a1      	b.n	8005ec6 <_malloc_r+0x22>
 8005f82:	6025      	str	r5, [r4, #0]
 8005f84:	e7de      	b.n	8005f44 <_malloc_r+0xa0>
 8005f86:	bf00      	nop
 8005f88:	2000025c 	.word	0x2000025c

08005f8c <_sbrk_r>:
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	4d06      	ldr	r5, [pc, #24]	; (8005fa8 <_sbrk_r+0x1c>)
 8005f90:	2300      	movs	r3, #0
 8005f92:	4604      	mov	r4, r0
 8005f94:	4608      	mov	r0, r1
 8005f96:	602b      	str	r3, [r5, #0]
 8005f98:	f7fb f9fe 	bl	8001398 <_sbrk>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d102      	bne.n	8005fa6 <_sbrk_r+0x1a>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	b103      	cbz	r3, 8005fa6 <_sbrk_r+0x1a>
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	20000264 	.word	0x20000264

08005fac <__sread>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	460c      	mov	r4, r1
 8005fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb4:	f000 f890 	bl	80060d8 <_read_r>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	bfab      	itete	ge
 8005fbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fbe:	89a3      	ldrhlt	r3, [r4, #12]
 8005fc0:	181b      	addge	r3, r3, r0
 8005fc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fc6:	bfac      	ite	ge
 8005fc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fca:	81a3      	strhlt	r3, [r4, #12]
 8005fcc:	bd10      	pop	{r4, pc}

08005fce <__swrite>:
 8005fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd2:	461f      	mov	r7, r3
 8005fd4:	898b      	ldrh	r3, [r1, #12]
 8005fd6:	05db      	lsls	r3, r3, #23
 8005fd8:	4605      	mov	r5, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	4616      	mov	r6, r2
 8005fde:	d505      	bpl.n	8005fec <__swrite+0x1e>
 8005fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f000 f858 	bl	800609c <_lseek_r>
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ff6:	81a3      	strh	r3, [r4, #12]
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006002:	f000 b817 	b.w	8006034 <_write_r>

08006006 <__sseek>:
 8006006:	b510      	push	{r4, lr}
 8006008:	460c      	mov	r4, r1
 800600a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800600e:	f000 f845 	bl	800609c <_lseek_r>
 8006012:	1c43      	adds	r3, r0, #1
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	bf15      	itete	ne
 8006018:	6560      	strne	r0, [r4, #84]	; 0x54
 800601a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800601e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006022:	81a3      	strheq	r3, [r4, #12]
 8006024:	bf18      	it	ne
 8006026:	81a3      	strhne	r3, [r4, #12]
 8006028:	bd10      	pop	{r4, pc}

0800602a <__sclose>:
 800602a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602e:	f000 b813 	b.w	8006058 <_close_r>
	...

08006034 <_write_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	4d07      	ldr	r5, [pc, #28]	; (8006054 <_write_r+0x20>)
 8006038:	4604      	mov	r4, r0
 800603a:	4608      	mov	r0, r1
 800603c:	4611      	mov	r1, r2
 800603e:	2200      	movs	r2, #0
 8006040:	602a      	str	r2, [r5, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	f7fa fa6a 	bl	800051c <_write>
 8006048:	1c43      	adds	r3, r0, #1
 800604a:	d102      	bne.n	8006052 <_write_r+0x1e>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	b103      	cbz	r3, 8006052 <_write_r+0x1e>
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	bd38      	pop	{r3, r4, r5, pc}
 8006054:	20000264 	.word	0x20000264

08006058 <_close_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	4d06      	ldr	r5, [pc, #24]	; (8006074 <_close_r+0x1c>)
 800605c:	2300      	movs	r3, #0
 800605e:	4604      	mov	r4, r0
 8006060:	4608      	mov	r0, r1
 8006062:	602b      	str	r3, [r5, #0]
 8006064:	f7fb f96f 	bl	8001346 <_close>
 8006068:	1c43      	adds	r3, r0, #1
 800606a:	d102      	bne.n	8006072 <_close_r+0x1a>
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	b103      	cbz	r3, 8006072 <_close_r+0x1a>
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	bd38      	pop	{r3, r4, r5, pc}
 8006074:	20000264 	.word	0x20000264

08006078 <_fstat_r>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	4d07      	ldr	r5, [pc, #28]	; (8006098 <_fstat_r+0x20>)
 800607c:	2300      	movs	r3, #0
 800607e:	4604      	mov	r4, r0
 8006080:	4608      	mov	r0, r1
 8006082:	4611      	mov	r1, r2
 8006084:	602b      	str	r3, [r5, #0]
 8006086:	f7fb f96a 	bl	800135e <_fstat>
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	d102      	bne.n	8006094 <_fstat_r+0x1c>
 800608e:	682b      	ldr	r3, [r5, #0]
 8006090:	b103      	cbz	r3, 8006094 <_fstat_r+0x1c>
 8006092:	6023      	str	r3, [r4, #0]
 8006094:	bd38      	pop	{r3, r4, r5, pc}
 8006096:	bf00      	nop
 8006098:	20000264 	.word	0x20000264

0800609c <_lseek_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	4d07      	ldr	r5, [pc, #28]	; (80060bc <_lseek_r+0x20>)
 80060a0:	4604      	mov	r4, r0
 80060a2:	4608      	mov	r0, r1
 80060a4:	4611      	mov	r1, r2
 80060a6:	2200      	movs	r2, #0
 80060a8:	602a      	str	r2, [r5, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f7fb f967 	bl	800137e <_lseek>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d102      	bne.n	80060ba <_lseek_r+0x1e>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	b103      	cbz	r3, 80060ba <_lseek_r+0x1e>
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	20000264 	.word	0x20000264

080060c0 <__malloc_lock>:
 80060c0:	4801      	ldr	r0, [pc, #4]	; (80060c8 <__malloc_lock+0x8>)
 80060c2:	f7ff be53 	b.w	8005d6c <__retarget_lock_acquire_recursive>
 80060c6:	bf00      	nop
 80060c8:	20000258 	.word	0x20000258

080060cc <__malloc_unlock>:
 80060cc:	4801      	ldr	r0, [pc, #4]	; (80060d4 <__malloc_unlock+0x8>)
 80060ce:	f7ff be4e 	b.w	8005d6e <__retarget_lock_release_recursive>
 80060d2:	bf00      	nop
 80060d4:	20000258 	.word	0x20000258

080060d8 <_read_r>:
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	4d07      	ldr	r5, [pc, #28]	; (80060f8 <_read_r+0x20>)
 80060dc:	4604      	mov	r4, r0
 80060de:	4608      	mov	r0, r1
 80060e0:	4611      	mov	r1, r2
 80060e2:	2200      	movs	r2, #0
 80060e4:	602a      	str	r2, [r5, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	f7fb f910 	bl	800130c <_read>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d102      	bne.n	80060f6 <_read_r+0x1e>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	b103      	cbz	r3, 80060f6 <_read_r+0x1e>
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	20000264 	.word	0x20000264

080060fc <_init>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr

08006108 <_fini>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr
