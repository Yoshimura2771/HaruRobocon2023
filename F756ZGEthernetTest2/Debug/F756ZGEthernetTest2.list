
F756ZGEthernetTest2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012530  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dec  08012700  08012700  00022700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080154ec  080154ec  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  080154ec  080154ec  000254ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080154f4  080154f4  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080154f4  080154f4  000254f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080154f8  080154f8  000254f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080154fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  08015590  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  08015630  00030134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c430  200001d4  080156d0  000301d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000c604  080156d0  0003c604  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a76c  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000692b  00000000  00000000  0005a970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e20  00000000  00000000  000612a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001cd0  00000000  00000000  000630c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000353a5  00000000  00000000  00064d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ec0a  00000000  00000000  0009a135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00111905  00000000  00000000  000c8d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001da644  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008474  00000000  00000000  001da694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080126e8 	.word	0x080126e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080126e8 	.word	0x080126e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200001f0 	.word	0x200001f0
 80005e4:	200002a4 	.word	0x200002a4

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fc15 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f81b 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f87f 	bl	80006f8 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <main+0x3c>)
 80005fc:	1d3c      	adds	r4, r7, #4
 80005fe:	461d      	mov	r5, r3
 8000600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000604:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f003 ffad 	bl	8004570 <osThreadCreate>
 8000616:	4603      	mov	r3, r0
 8000618:	4a03      	ldr	r2, [pc, #12]	; (8000628 <main+0x40>)
 800061a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800061c:	f003 ff91 	bl	8004542 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x38>
 8000622:	bf00      	nop
 8000624:	0801270c 	.word	0x0801270c
 8000628:	200004a4 	.word	0x200004a4

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f011 f88b 	bl	8011756 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <SystemClock_Config+0xc4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a26      	ldr	r2, [pc, #152]	; (80006f0 <SystemClock_Config+0xc4>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <SystemClock_Config+0xc4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <SystemClock_Config+0xc8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000670:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <SystemClock_Config+0xc8>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <SystemClock_Config+0xc8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000688:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800069c:	2348      	movs	r3, #72	; 0x48
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006a4:	2303      	movs	r3, #3
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 f943 	bl	8002938 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006b8:	f000 f878 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2102      	movs	r1, #2
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 fbd1 	bl	8002e80 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006e4:	f000 f862 	bl	80007ac <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	; 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_GPIO_Init+0x74>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a1a      	ldr	r2, [pc, #104]	; (800076c <MX_GPIO_Init+0x74>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_GPIO_Init+0x74>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_GPIO_Init+0x74>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a14      	ldr	r2, [pc, #80]	; (800076c <MX_GPIO_Init+0x74>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_GPIO_Init+0x74>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_GPIO_Init+0x74>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <MX_GPIO_Init+0x74>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_GPIO_Init+0x74>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_GPIO_Init+0x74>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <MX_GPIO_Init+0x74>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_GPIO_Init+0x74>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000778:	f003 f8a6 	bl	80038c8 <MX_LWIP_Init>
	/*  p = pbuf_alloc(PBUF_TRANSPORT, sizeof(4), PBUF_RAM);
	      *(uint32_t *)p->payload = cnt++;
	      p->len = 4;
	      err = udp_sendto(pcb, p, &dst_addr, dst_port);
	      pbuf_free(p);*/
    osDelay(1000);
 800077c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000780:	f003 ff42 	bl	8004608 <osDelay>
 8000784:	e7fa      	b.n	800077c <StartDefaultTask+0xc>
	...

08000788 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d101      	bne.n	800079e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800079a:	f000 fb4d 	bl	8000e38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40002000 	.word	0x40002000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	4a10      	ldr	r2, [pc, #64]	; (8000804 <HAL_MspInit+0x4c>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <HAL_MspInit+0x4c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <HAL_MspInit+0x4c>)
 80007dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	210f      	movs	r1, #15
 80007f2:	f06f 0001 	mvn.w	r0, #1
 80007f6:	f000 fc1b 	bl	8001030 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08e      	sub	sp, #56	; 0x38
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000818:	4b33      	ldr	r3, [pc, #204]	; (80008e8 <HAL_InitTick+0xe0>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a32      	ldr	r2, [pc, #200]	; (80008e8 <HAL_InitTick+0xe0>)
 800081e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
 8000824:	4b30      	ldr	r3, [pc, #192]	; (80008e8 <HAL_InitTick+0xe0>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000830:	f107 0210 	add.w	r2, r7, #16
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fd32 	bl	80032a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000846:	2b00      	cmp	r3, #0
 8000848:	d103      	bne.n	8000852 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800084a:	f002 fd17 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 800084e:	6378      	str	r0, [r7, #52]	; 0x34
 8000850:	e004      	b.n	800085c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000852:	f002 fd13 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8000856:	4603      	mov	r3, r0
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800085c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800085e:	4a23      	ldr	r2, [pc, #140]	; (80008ec <HAL_InitTick+0xe4>)
 8000860:	fba2 2303 	umull	r2, r3, r2, r3
 8000864:	0c9b      	lsrs	r3, r3, #18
 8000866:	3b01      	subs	r3, #1
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800086a:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <HAL_InitTick+0xe8>)
 800086c:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <HAL_InitTick+0xec>)
 800086e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <HAL_InitTick+0xe8>)
 8000872:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000876:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <HAL_InitTick+0xe8>)
 800087a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <HAL_InitTick+0xe8>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <HAL_InitTick+0xe8>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <HAL_InitTick+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000890:	4817      	ldr	r0, [pc, #92]	; (80008f0 <HAL_InitTick+0xe8>)
 8000892:	f002 fd39 	bl	8003308 <HAL_TIM_Base_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800089c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d11b      	bne.n	80008dc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80008a4:	4812      	ldr	r0, [pc, #72]	; (80008f0 <HAL_InitTick+0xe8>)
 80008a6:	f002 fd91 	bl	80033cc <HAL_TIM_Base_Start_IT>
 80008aa:	4603      	mov	r3, r0
 80008ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d111      	bne.n	80008dc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80008b8:	202d      	movs	r0, #45	; 0x2d
 80008ba:	f000 fbd5 	bl	8001068 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d808      	bhi.n	80008d6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	202d      	movs	r0, #45	; 0x2d
 80008ca:	f000 fbb1 	bl	8001030 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <HAL_InitTick+0xf0>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	e002      	b.n	80008dc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3738      	adds	r7, #56	; 0x38
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	431bde83 	.word	0x431bde83
 80008f0:	200004a8 	.word	0x200004a8
 80008f4:	40002000 	.word	0x40002000
 80008f8:	20000004 	.word	0x20000004

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800092e:	f002 fdc5 	bl	80034bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200004a8 	.word	0x200004a8

0800093c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <ETH_IRQHandler+0x10>)
 8000942:	f000 ff79 	bl	8001838 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20004edc 	.word	0x20004edc

08000950 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	return 1;
 8000954:	2301      	movs	r3, #1
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <_kill>:

int _kill(int pid, int sig)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <_kill+0x20>)
 800096c:	2216      	movs	r2, #22
 800096e:	601a      	str	r2, [r3, #0]
	return -1;
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	2000c600 	.word	0x2000c600

08000984 <_exit>:

void _exit (int status)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800098c:	f04f 31ff 	mov.w	r1, #4294967295
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ffe5 	bl	8000960 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000996:	e7fe      	b.n	8000996 <_exit+0x12>

08000998 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	e00a      	b.n	80009c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009aa:	f3af 8000 	nop.w
 80009ae:	4601      	mov	r1, r0
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	60ba      	str	r2, [r7, #8]
 80009b6:	b2ca      	uxtb	r2, r1
 80009b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	3301      	adds	r3, #1
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	dbf0      	blt.n	80009aa <_read+0x12>
	}

return len;
 80009c8:	687b      	ldr	r3, [r7, #4]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	e009      	b.n	80009f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	60ba      	str	r2, [r7, #8]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	3301      	adds	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	dbf1      	blt.n	80009e4 <_write+0x12>
	}
	return len;
 8000a00:	687b      	ldr	r3, [r7, #4]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <_close>:

int _close(int file)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
	return -1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
 8000a2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a32:	605a      	str	r2, [r3, #4]
	return 0;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_isatty>:

int _isatty(int file)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
	return 1;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
	return 0;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d205      	bcs.n	8000ab0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <_sbrk+0x6c>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	e009      	b.n	8000ac4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <_sbrk+0x64>)
 8000ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	371c      	adds	r7, #28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	20050000 	.word	0x20050000
 8000ad4:	00000400 	.word	0x00000400
 8000ad8:	200004f4 	.word	0x200004f4
 8000adc:	2000c608 	.word	0x2000c608
 8000ae0:	2000c600 	.word	0x2000c600

08000ae4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0e:	490e      	ldr	r1, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b24:	4c0b      	ldr	r4, [pc, #44]	; (8000b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b32:	f7ff ffd7 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f010 fdc9 	bl	80116cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3a:	f7ff fd55 	bl	80005e8 <main>
  bx  lr    
 8000b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b40:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000b4c:	080154fc 	.word	0x080154fc
  ldr r2, =_sbss
 8000b50:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000b54:	2000c604 	.word	0x2000c604

08000b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC_IRQHandler>

08000b5a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00b      	beq.n	8000b82 <LAN8742_RegisterBusIO+0x28>
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d007      	beq.n	8000b82 <LAN8742_RegisterBusIO+0x28>
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <LAN8742_RegisterBusIO+0x28>
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e014      	b.n	8000bb2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	691a      	ldr	r2, [r3, #16]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d17c      	bne.n	8000cd8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2220      	movs	r2, #32
 8000bf0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e01c      	b.n	8000c32 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	f107 0208 	add.w	r2, r7, #8
 8000c00:	2112      	movs	r1, #18
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	4798      	blx	r3
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	da03      	bge.n	8000c14 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000c0c:	f06f 0304 	mvn.w	r3, #4
 8000c10:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000c12:	e00b      	b.n	8000c2c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	f003 031f 	and.w	r3, r3, #31
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d105      	bne.n	8000c2c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
         break;
 8000c2a:	e005      	b.n	8000c38 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	2b1f      	cmp	r3, #31
 8000c36:	d9df      	bls.n	8000bf8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b1f      	cmp	r3, #31
 8000c3e:	d902      	bls.n	8000c46 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000c40:	f06f 0302 	mvn.w	r3, #2
 8000c44:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d145      	bne.n	8000cd8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	6810      	ldr	r0, [r2, #0]
 8000c54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4798      	blx	r3
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db37      	blt.n	8000cd2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	6810      	ldr	r0, [r2, #0]
 8000c6a:	f107 0208 	add.w	r2, r7, #8
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4798      	blx	r3
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db28      	blt.n	8000cca <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4798      	blx	r3
 8000c7e:	4603      	mov	r3, r0
 8000c80:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000c82:	e01c      	b.n	8000cbe <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4798      	blx	r3
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c96:	d80e      	bhi.n	8000cb6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6810      	ldr	r0, [r2, #0]
 8000ca0:	f107 0208 	add.w	r2, r7, #8
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4798      	blx	r3
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	da07      	bge.n	8000cbe <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000cae:	f06f 0304 	mvn.w	r3, #4
 8000cb2:	613b      	str	r3, [r7, #16]
                 break;
 8000cb4:	e010      	b.n	8000cd8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000cb6:	f06f 0301 	mvn.w	r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
               break;
 8000cbc:	e00c      	b.n	8000cd8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1dd      	bne.n	8000c84 <LAN8742_Init+0xc6>
 8000cc8:	e006      	b.n	8000cd8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000cca:	f06f 0304 	mvn.w	r3, #4
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	e002      	b.n	8000cd8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000cd2:	f06f 0303 	mvn.w	r3, #3
 8000cd6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d112      	bne.n	8000d04 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4798      	blx	r3
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000ce8:	bf00      	nop
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4798      	blx	r3
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cfc:	d9f5      	bls.n	8000cea <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000d04:	693b      	ldr	r3, [r7, #16]
 }
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	6810      	ldr	r0, [r2, #0]
 8000d22:	f107 020c 	add.w	r2, r7, #12
 8000d26:	2101      	movs	r1, #1
 8000d28:	4798      	blx	r3
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	da02      	bge.n	8000d36 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d30:	f06f 0304 	mvn.w	r3, #4
 8000d34:	e06e      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6810      	ldr	r0, [r2, #0]
 8000d3e:	f107 020c 	add.w	r2, r7, #12
 8000d42:	2101      	movs	r1, #1
 8000d44:	4798      	blx	r3
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	da02      	bge.n	8000d52 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d4c:	f06f 0304 	mvn.w	r3, #4
 8000d50:	e060      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e059      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6810      	ldr	r0, [r2, #0]
 8000d68:	f107 020c 	add.w	r2, r7, #12
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4798      	blx	r3
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	da02      	bge.n	8000d7c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d76:	f06f 0304 	mvn.w	r3, #4
 8000d7a:	e04b      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d11b      	bne.n	8000dbe <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <LAN8742_GetLinkState+0x90>
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e03a      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e033      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000db6:	2304      	movs	r3, #4
 8000db8:	e02c      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000dba:	2305      	movs	r3, #5
 8000dbc:	e02a      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6810      	ldr	r0, [r2, #0]
 8000dc6:	f107 020c 	add.w	r2, r7, #12
 8000dca:	211f      	movs	r1, #31
 8000dcc:	4798      	blx	r3
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	da02      	bge.n	8000dda <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000dd4:	f06f 0304 	mvn.w	r3, #4
 8000dd8:	e01c      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d101      	bne.n	8000de8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000de4:	2306      	movs	r3, #6
 8000de6:	e015      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 031c 	and.w	r3, r3, #28
 8000dee:	2b18      	cmp	r3, #24
 8000df0:	d101      	bne.n	8000df6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000df2:	2302      	movs	r3, #2
 8000df4:	e00e      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f003 031c 	and.w	r3, r3, #28
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d101      	bne.n	8000e04 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e007      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 031c 	and.w	r3, r3, #28
 8000e0a:	2b14      	cmp	r3, #20
 8000e0c:	d101      	bne.n	8000e12 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	e000      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e12:	2305      	movs	r3, #5
    }				
  }
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f8fa 	bl	800101a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	200f      	movs	r0, #15
 8000e28:	f7ff fcee 	bl	8000808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fcc4 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	200004f8 	.word	0x200004f8

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	200004f8 	.word	0x200004f8

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff ffee 	bl	8000e60 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_Delay+0x44>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ffde 	bl	8000e60 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00
 8000f04:	05fa0000 	.word	0x05fa0000

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	; (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff4c 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001042:	f7ff ff61 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001046:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	6978      	ldr	r0, [r7, #20]
 800104e:	f7ff ffb1 	bl	8000fb4 <NVIC_EncodePriority>
 8001052:	4602      	mov	r2, r0
 8001054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff80 	bl	8000f60 <__NVIC_SetPriority>
}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff54 	bl	8000f24 <__NVIC_EnableIRQ>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e06a      	b.n	800116c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800109c:	2b00      	cmp	r3, #0
 800109e:	d106      	bne.n	80010ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2223      	movs	r2, #35	; 0x23
 80010a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f003 f825 	bl	80040f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b31      	ldr	r3, [pc, #196]	; (8001174 <HAL_ETH_Init+0xf0>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a30      	ldr	r2, [pc, #192]	; (8001174 <HAL_ETH_Init+0xf0>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <HAL_ETH_Init+0xf0>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80010c6:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <HAL_ETH_Init+0xf4>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4a2b      	ldr	r2, [pc, #172]	; (8001178 <HAL_ETH_Init+0xf4>)
 80010cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80010d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80010d2:	4b29      	ldr	r3, [pc, #164]	; (8001178 <HAL_ETH_Init+0xf4>)
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	4927      	ldr	r1, [pc, #156]	; (8001178 <HAL_ETH_Init+0xf4>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <HAL_ETH_Init+0xf4>)
 80010e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80010fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010fc:	f7ff feb0 	bl	8000e60 <HAL_GetTick>
 8001100:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001102:	e011      	b.n	8001128 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001104:	f7ff feac 	bl	8000e60 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001112:	d909      	bls.n	8001128 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2204      	movs	r2, #4
 8001118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	22e0      	movs	r2, #224	; 0xe0
 8001120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e021      	b.n	800116c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1e4      	bne.n	8001104 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 ffac 	bl	8002098 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f001 f853 	bl	80021ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f001 f8a9 	bl	800229e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	461a      	mov	r2, r3
 8001152:	2100      	movs	r1, #0
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f001 f811 	bl	800217c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2210      	movs	r2, #16
 8001166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	40013800 	.word	0x40013800

0800117c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800118a:	2b10      	cmp	r3, #16
 800118c:	d150      	bne.n	8001230 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2223      	movs	r2, #35	; 0x23
 8001192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2204      	movs	r2, #4
 800119a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fa7b 	bl	8001698 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f042 0208 	orr.w	r2, r2, #8
 80011b0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff fe5c 	bl	8000e78 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0204 	orr.w	r2, r2, #4
 80011d6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f7ff fe49 	bl	8000e78 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 fdf3 	bl	8001dda <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001206:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800120a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001222:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2223      	movs	r2, #35	; 0x23
 8001228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	e000      	b.n	8001232 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
  }
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800124a:	2b10      	cmp	r3, #16
 800124c:	d17b      	bne.n	8001346 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2223      	movs	r2, #35	; 0x23
 8001252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800126a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b35      	ldr	r3, [pc, #212]	; (8001350 <HAL_ETH_Start_IT+0x114>)
 800127a:	430b      	orrs	r3, r1
 800127c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001290:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2204      	movs	r2, #4
 8001298:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f9fc 	bl	8001698 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0208 	orr.w	r2, r2, #8
 80012ae:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff fddd 	bl	8000e78 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0204 	orr.w	r2, r2, #4
 80012d4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff fdca 	bl	8000e78 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 fd74 	bl	8001dda <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001304:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001308:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001320:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800132a:	69d9      	ldr	r1, [r3, #28]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_ETH_Start_IT+0x118>)
 8001332:	430b      	orrs	r3, r1
 8001334:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001338:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2223      	movs	r2, #35	; 0x23
 800133e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
  }
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	00020060 	.word	0x00020060
 8001354:	0001a0c1 	.word	0x0001a0c1

08001358 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001366:	2b23      	cmp	r3, #35	; 0x23
 8001368:	d16e      	bne.n	8001448 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2223      	movs	r2, #35	; 0x23
 800136e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800137a:	69d9      	ldr	r1, [r3, #28]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b34      	ldr	r3, [pc, #208]	; (8001454 <HAL_ETH_Stop_IT+0xfc>)
 8001382:	400b      	ands	r3, r1
 8001384:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001388:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800139c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013a0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6812      	ldr	r2, [r2, #0]
 80013b0:	f023 0302 	bic.w	r3, r3, #2
 80013b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013b8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0204 	bic.w	r2, r2, #4
 80013c8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7ff fd50 	bl	8000e78 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 fcfa 	bl	8001dda <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0208 	bic.w	r2, r2, #8
 80013f4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013fe:	2001      	movs	r0, #1
 8001400:	f7ff fd3a 	bl	8000e78 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	e00e      	b.n	8001430 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	3212      	adds	r2, #18
 8001418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b03      	cmp	r3, #3
 8001434:	d9ed      	bls.n	8001412 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2210      	movs	r2, #16
 8001440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	e000      	b.n	800144a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
  }
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	fffe5f3e 	.word	0xfffe5f3e

08001458 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d109      	bne.n	800147c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146e:	f043 0201 	orr.w	r2, r3, #1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e045      	b.n	8001508 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001482:	2b23      	cmp	r3, #35	; 0x23
 8001484:	d13f      	bne.n	8001506 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800148e:	2201      	movs	r2, #1
 8001490:	6839      	ldr	r1, [r7, #0]
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 ff70 	bl	8002378 <ETH_Prepare_Tx_Descriptors>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d009      	beq.n	80014b2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a4:	f043 0202 	orr.w	r2, r3, #2
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e02a      	b.n	8001508 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014b2:	f3bf 8f4f 	dsb	sy
}
 80014b6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d904      	bls.n	80014d4 <HAL_ETH_Transmit_IT+0x7c>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	1f1a      	subs	r2, r3, #4
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00d      	beq.n	8001502 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ee:	461a      	mov	r2, r3
 80014f0:	2304      	movs	r3, #4
 80014f2:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fc:	461a      	mov	r2, r3
 80014fe:	2300      	movs	r3, #0
 8001500:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
  }
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d109      	bne.n	800153c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152e:	f043 0201 	orr.w	r2, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0a8      	b.n	800168e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001542:	2b23      	cmp	r3, #35	; 0x23
 8001544:	d001      	beq.n	800154a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e0a1      	b.n	800168e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	3212      	adds	r2, #18
 8001556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001560:	f1c3 0304 	rsb	r3, r3, #4
 8001564:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001566:	e06a      	b.n	800163e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d007      	beq.n	8001584 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	699a      	ldr	r2, [r3, #24]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	69da      	ldr	r2, [r3, #28]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800158c:	2b00      	cmp	r3, #0
 800158e:	d103      	bne.n	8001598 <HAL_ETH_ReadData+0x88>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d040      	beq.n	800161a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00c      	beq.n	80015dc <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	0c1b      	lsrs	r3, r3, #16
 80015c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80015cc:	3b04      	subs	r3, #4
 80015ce:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80015f4:	461a      	mov	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	f002 ff2b 	bl	8004454 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	441a      	add	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3301      	adds	r3, #1
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	2b03      	cmp	r3, #3
 8001624:	d902      	bls.n	800162c <HAL_ETH_ReadData+0x11c>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b04      	subs	r3, #4
 800162a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	3212      	adds	r2, #18
 8001632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001636:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db06      	blt.n	8001654 <HAL_ETH_ReadData+0x144>
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	429a      	cmp	r2, r3
 800164c:	d202      	bcs.n	8001654 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d089      	beq.n	8001568 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	441a      	add	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f815 	bl	8001698 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d108      	bne.n	800168c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	e000      	b.n	800168e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80016a4:	2301      	movs	r3, #1
 80016a6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016ac:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	3212      	adds	r2, #18
 80016b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016be:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80016c0:	e040      	b.n	8001744 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d112      	bne.n	80016f0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fe90 	bl	80043f4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	74fb      	strb	r3, [r7, #19]
 80016de:	e007      	b.n	80016f0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	461a      	mov	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	461a      	mov	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80016f0:	7cfb      	ldrb	r3, [r7, #19]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d026      	beq.n	8001744 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d103      	bne.n	8001706 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	4a1e      	ldr	r2, [pc, #120]	; (800177c <ETH_UpdateDescriptor+0xe4>)
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	e003      	b.n	800170e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800170c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800170e:	f3bf 8f5f 	dmb	sy
}
 8001712:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	3301      	adds	r3, #1
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d902      	bls.n	8001732 <ETH_UpdateDescriptor+0x9a>
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	3b04      	subs	r3, #4
 8001730:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	3212      	adds	r2, #18
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	617b      	str	r3, [r7, #20]
      desccount--;
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	3b01      	subs	r3, #1
 8001742:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <ETH_UpdateDescriptor+0xb8>
 800174a:	7cfb      	ldrb	r3, [r7, #19]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1b8      	bne.n	80016c2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	429a      	cmp	r2, r3
 8001758:	d00c      	beq.n	8001774 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001762:	461a      	mov	r2, r3
 8001764:	2300      	movs	r3, #0
 8001766:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001774:	bf00      	nop
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	800045f8 	.word	0x800045f8

08001780 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3318      	adds	r3, #24
 800178c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800179e:	e03f      	b.n	8001820 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	3304      	adds	r3, #4
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d106      	bne.n	80017c8 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	3301      	adds	r3, #1
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80017c8:	7bbb      	ldrb	r3, [r7, #14]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d028      	beq.n	8001820 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68d9      	ldr	r1, [r3, #12]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db1b      	blt.n	800181c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	3304      	adds	r3, #4
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 fe71 	bl	80044d8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	3304      	adds	r3, #4
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	2200      	movs	r2, #0
 8001802:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	3301      	adds	r3, #1
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
 800181a:	e001      	b.n	8001820 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <HAL_ETH_ReleaseTxPacket+0xac>
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1b9      	bne.n	80017a0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184e:	2b40      	cmp	r3, #64	; 0x40
 8001850:	d112      	bne.n	8001878 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001860:	2b40      	cmp	r3, #64	; 0x40
 8001862:	d109      	bne.n	8001878 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186c:	461a      	mov	r2, r3
 800186e:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <HAL_ETH_IRQHandler+0x178>)
 8001870:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f002 f9a4 	bl	8003bc0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b01      	cmp	r3, #1
 8001888:	d113      	bne.n	80018b2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	d10a      	bne.n	80018b2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a4:	461a      	mov	r2, r3
 80018a6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80018aa:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f002 f997 	bl	8003be0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018c4:	d14c      	bne.n	8001960 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018d8:	d142      	bne.n	8001960 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e0:	f043 0208 	orr.w	r2, r3, #8
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018fc:	d11a      	bne.n	8001934 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <HAL_ETH_IRQHandler+0x17c>)
 800190a:	4013      	ands	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001924:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001928:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	22e0      	movs	r2, #224	; 0xe0
 800192e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001932:	e012      	b.n	800195a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	f248 6380 	movw	r3, #34432	; 0x8680
 8001942:	4013      	ands	r3, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001952:	461a      	mov	r2, r3
 8001954:	f248 6380 	movw	r3, #34432	; 0x8680
 8001958:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f002 f950 	bl	8003c00 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b08      	cmp	r3, #8
 800196c:	d10e      	bne.n	800198c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f81c 	bl	80019bc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_ETH_IRQHandler+0x180>)
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <HAL_ETH_IRQHandler+0x180>)
 800199a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800199e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f815 	bl	80019d0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	00010040 	.word	0x00010040
 80019b4:	007e2000 	.word	0x007e2000
 80019b8:	40013c00 	.word	0x40013c00

080019bc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f003 031c 	and.w	r3, r3, #28
 8001a00:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	02db      	lsls	r3, r3, #11
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	019b      	lsls	r3, r3, #6
 8001a12:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f023 0302 	bic.w	r3, r3, #2
 8001a22:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001a34:	f7ff fa14 	bl	8000e60 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a3a:	e00d      	b.n	8001a58 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001a3c:	f7ff fa10 	bl	8000e60 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4a:	d301      	bcc.n	8001a50 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e010      	b.n	8001a72 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1ec      	bne.n	8001a3c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f003 031c 	and.w	r3, r3, #28
 8001a96:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	02db      	lsls	r3, r3, #11
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	019b      	lsls	r3, r3, #6
 8001aa8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad4:	f7ff f9c4 	bl	8000e60 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ada:	e00d      	b.n	8001af8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001adc:	f7ff f9c0 	bl	8000e60 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aea:	d301      	bcc.n	8001af0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e009      	b.n	8001b04 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1ec      	bne.n	8001adc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0d9      	b.n	8001cd4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	461a      	mov	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf14      	ite	ne
 8001b74:	2301      	movne	r3, #1
 8001b76:	2300      	moveq	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf0c      	ite	eq
 8001b8e:	2301      	moveq	r3, #1
 8001b90:	2300      	movne	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf14      	ite	ne
 8001ba8:	2301      	movne	r3, #1
 8001baa:	2300      	moveq	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bf0c      	ite	eq
 8001bde:	2301      	moveq	r3, #1
 8001be0:	2300      	movne	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bf0c      	ite	eq
 8001bf8:	2301      	moveq	r3, #1
 8001bfa:	2300      	movne	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	bf14      	ite	ne
 8001c12:	2301      	movne	r3, #1
 8001c14:	2300      	moveq	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bf14      	ite	ne
 8001c3a:	2301      	movne	r3, #1
 8001c3c:	2300      	moveq	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	0c1b      	lsrs	r3, r3, #16
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf14      	ite	ne
 8001ca8:	2301      	movne	r3, #1
 8001caa:	2300      	moveq	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf14      	ite	ne
 8001cc4:	2301      	movne	r3, #1
 8001cc6:	2300      	moveq	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e00b      	b.n	8001d0c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d105      	bne.n	8001d0a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001cfe:	6839      	ldr	r1, [r7, #0]
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f88f 	bl	8001e24 <ETH_SetMACConfig>

    return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e000      	b.n	8001d0c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
  }
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f023 031c 	bic.w	r3, r3, #28
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d2c:	f001 fa9a 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8001d30:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <HAL_ETH_SetMDIOClockRange+0x98>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d908      	bls.n	8001d4c <HAL_ETH_SetMDIOClockRange+0x38>
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d804      	bhi.n	8001d4c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f043 0308 	orr.w	r3, r3, #8
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	e027      	b.n	8001d9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d908      	bls.n	8001d66 <HAL_ETH_SetMDIOClockRange+0x52>
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4a17      	ldr	r2, [pc, #92]	; (8001db4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d204      	bcs.n	8001d66 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f043 030c 	orr.w	r3, r3, #12
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e01a      	b.n	8001d9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d303      	bcc.n	8001d76 <HAL_ETH_SetMDIOClockRange+0x62>
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d911      	bls.n	8001d9a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d908      	bls.n	8001d90 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d804      	bhi.n	8001d90 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	e005      	b.n	8001d9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f043 0310 	orr.w	r3, r3, #16
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e000      	b.n	8001d9c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001d9a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	611a      	str	r2, [r3, #16]
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	01312cff 	.word	0x01312cff
 8001db0:	02160ebf 	.word	0x02160ebf
 8001db4:	03938700 	.word	0x03938700
 8001db8:	05f5e0ff 	.word	0x05f5e0ff
 8001dbc:	08f0d17f 	.word	0x08f0d17f

08001dc0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001df8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dfc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff f834 	bl	8000e78 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e1a:	6193      	str	r3, [r2, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4b51      	ldr	r3, [pc, #324]	; (8001f80 <ETH_SetMACConfig+0x15c>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	7c1b      	ldrb	r3, [r3, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <ETH_SetMACConfig+0x28>
 8001e46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e4a:	e000      	b.n	8001e4e <ETH_SetMACConfig+0x2a>
 8001e4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	7c5b      	ldrb	r3, [r3, #17]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <ETH_SetMACConfig+0x38>
 8001e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e5a:	e000      	b.n	8001e5e <ETH_SetMACConfig+0x3a>
 8001e5c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e5e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	7fdb      	ldrb	r3, [r3, #31]
 8001e6a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e6c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	7f92      	ldrb	r2, [r2, #30]
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	d102      	bne.n	8001e82 <ETH_SetMACConfig+0x5e>
 8001e7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e80:	e000      	b.n	8001e84 <ETH_SetMACConfig+0x60>
 8001e82:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	7f1b      	ldrb	r3, [r3, #28]
 8001e8a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e8c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	791b      	ldrb	r3, [r3, #4]
 8001e98:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001e9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d102      	bne.n	8001eac <ETH_SetMACConfig+0x88>
 8001ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eaa:	e000      	b.n	8001eae <ETH_SetMACConfig+0x8a>
 8001eac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001eae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	7bdb      	ldrb	r3, [r3, #15]
 8001eb4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001eb6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ebc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ec4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f7fe ffca 	bl	8000e78 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001efa:	4013      	ands	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f02:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f0a:	2a00      	cmp	r2, #0
 8001f0c:	d101      	bne.n	8001f12 <ETH_SetMACConfig+0xee>
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	e000      	b.n	8001f14 <ETH_SetMACConfig+0xf0>
 8001f12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f14:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001f22:	2a01      	cmp	r2, #1
 8001f24:	d101      	bne.n	8001f2a <ETH_SetMACConfig+0x106>
 8001f26:	2208      	movs	r2, #8
 8001f28:	e000      	b.n	8001f2c <ETH_SetMACConfig+0x108>
 8001f2a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f2c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001f34:	2a01      	cmp	r2, #1
 8001f36:	d101      	bne.n	8001f3c <ETH_SetMACConfig+0x118>
 8001f38:	2204      	movs	r2, #4
 8001f3a:	e000      	b.n	8001f3e <ETH_SetMACConfig+0x11a>
 8001f3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001f46:	2a01      	cmp	r2, #1
 8001f48:	d101      	bne.n	8001f4e <ETH_SetMACConfig+0x12a>
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	e000      	b.n	8001f50 <ETH_SetMACConfig+0x12c>
 8001f4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f50:	4313      	orrs	r3, r2
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f7fe ff85 	bl	8000e78 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	ff20810f 	.word	0xff20810f

08001f84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <ETH_SetDMAConfig+0x110>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	7b1b      	ldrb	r3, [r3, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <ETH_SetDMAConfig+0x2c>
 8001faa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fae:	e000      	b.n	8001fb2 <ETH_SetDMAConfig+0x2e>
 8001fb0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	7b5b      	ldrb	r3, [r3, #13]
 8001fb6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fb8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	7f52      	ldrb	r2, [r2, #29]
 8001fbe:	2a00      	cmp	r2, #0
 8001fc0:	d102      	bne.n	8001fc8 <ETH_SetDMAConfig+0x44>
 8001fc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fc6:	e000      	b.n	8001fca <ETH_SetDMAConfig+0x46>
 8001fc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	7b9b      	ldrb	r3, [r3, #14]
 8001fd0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fd2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fd8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	7f1b      	ldrb	r3, [r3, #28]
 8001fde:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001fe0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	7f9b      	ldrb	r3, [r3, #30]
 8001fe6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fe8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002008:	461a      	mov	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800201a:	2001      	movs	r0, #1
 800201c:	f7fe ff2c 	bl	8000e78 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002028:	461a      	mov	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	791b      	ldrb	r3, [r3, #4]
 8002032:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002038:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800203e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002044:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800204c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800204e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002056:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800205c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002066:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800206a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002078:	2001      	movs	r0, #1
 800207a:	f7fe fefd 	bl	8000e78 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002086:	461a      	mov	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	f8de3f23 	.word	0xf8de3f23

08002098 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b0a6      	sub	sp, #152	; 0x98
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80020a6:	2301      	movs	r3, #1
 80020a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020ac:	2300      	movs	r3, #0
 80020ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020d4:	2300      	movs	r3, #0
 80020d6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80020fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020fe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002104:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800210c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fe86 	bl	8001e24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002118:	2301      	movs	r3, #1
 800211a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800211c:	2301      	movs	r3, #1
 800211e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002126:	2301      	movs	r3, #1
 8002128:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800213a:	2300      	movs	r3, #0
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800213e:	2301      	movs	r3, #1
 8002140:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002144:	2301      	movs	r3, #1
 8002146:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800214c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800214e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002152:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002158:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800215a:	2301      	movs	r3, #1
 800215c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002160:	2300      	movs	r3, #0
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002168:	f107 0308 	add.w	r3, r7, #8
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ff08 	bl	8001f84 <ETH_SetDMAConfig>
}
 8002174:	bf00      	nop
 8002176:	3798      	adds	r7, #152	; 0x98
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3305      	adds	r3, #5
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	3204      	adds	r2, #4
 8002194:	7812      	ldrb	r2, [r2, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <ETH_MACAddressConfig+0x68>)
 800219e:	4413      	add	r3, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3303      	adds	r3, #3
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	061a      	lsls	r2, r3, #24
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3302      	adds	r3, #2
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3301      	adds	r3, #1
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	4313      	orrs	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	7812      	ldrb	r2, [r2, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <ETH_MACAddressConfig+0x6c>)
 80021ce:	4413      	add	r3, r2
 80021d0:	461a      	mov	r2, r3
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	6013      	str	r3, [r2, #0]
}
 80021d6:	bf00      	nop
 80021d8:	371c      	adds	r7, #28
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40028040 	.word	0x40028040
 80021e8:	40028044 	.word	0x40028044

080021ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e03e      	b.n	8002278 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68d9      	ldr	r1, [r3, #12]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2200      	movs	r2, #0
 8002216:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2200      	movs	r2, #0
 8002222:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	3206      	adds	r2, #6
 800222c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d80c      	bhi.n	800225c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68d9      	ldr	r1, [r3, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	440b      	add	r3, r1
 8002254:	461a      	mov	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	e004      	b.n	8002266 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	461a      	mov	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	3301      	adds	r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d9bd      	bls.n	80021fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002290:	611a      	str	r2, [r3, #16]
}
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e046      	b.n	800233a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6919      	ldr	r1, [r3, #16]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2200      	movs	r2, #0
 80022c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2200      	movs	r2, #0
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80022e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80022f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	3212      	adds	r2, #18
 8002306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d80c      	bhi.n	800232a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6919      	ldr	r1, [r3, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	60da      	str	r2, [r3, #12]
 8002328:	e004      	b.n	8002334 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	461a      	mov	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3301      	adds	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d9b5      	bls.n	80022ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236a:	60da      	str	r2, [r3, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002378:	b480      	push	{r7}
 800237a:	b08d      	sub	sp, #52	; 0x34
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3318      	adds	r3, #24
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800239e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023ba:	d007      	beq.n	80023cc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	3304      	adds	r3, #4
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80023cc:	2302      	movs	r3, #2
 80023ce:	e0ff      	b.n	80025d0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	3301      	adds	r3, #1
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	4b7d      	ldr	r3, [pc, #500]	; (80025dc <ETH_Prepare_Tx_Descriptors+0x264>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	6852      	ldr	r2, [r2, #4]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d008      	beq.n	8002410 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	431a      	orrs	r2, r3
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	431a      	orrs	r2, r3
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002452:	f3bf 8f5f 	dmb	sy
}
 8002456:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002464:	e082      	b.n	800256c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d006      	beq.n	8002486 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e005      	b.n	8002492 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	3301      	adds	r3, #1
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	2b03      	cmp	r3, #3
 800249c:	d902      	bls.n	80024a4 <ETH_Prepare_Tx_Descriptors+0x12c>
 800249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a0:	3b04      	subs	r3, #4
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024c6:	d007      	beq.n	80024d8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024cc:	3304      	adds	r3, #4
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d029      	beq.n	800252c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ea:	e019      	b.n	8002520 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80024ec:	f3bf 8f5f 	dmb	sy
}
 80024f0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80024fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002500:	3301      	adds	r3, #1
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	2b03      	cmp	r3, #3
 8002508:	d902      	bls.n	8002510 <ETH_Prepare_Tx_Descriptors+0x198>
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	3b04      	subs	r3, #4
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002518:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	3301      	adds	r3, #1
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	429a      	cmp	r2, r3
 8002526:	d3e1      	bcc.n	80024ec <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002528:	2302      	movs	r3, #2
 800252a:	e051      	b.n	80025d0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	3301      	adds	r3, #1
 8002530:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4b25      	ldr	r3, [pc, #148]	; (80025dc <ETH_Prepare_Tx_Descriptors+0x264>)
 8002548:	4013      	ands	r3, r2
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	6852      	ldr	r2, [r2, #4]
 800254e:	431a      	orrs	r2, r3
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	3301      	adds	r3, #1
 8002558:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800255a:	f3bf 8f5f 	dmb	sy
}
 800255e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	f47f af78 	bne.w	8002466 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e005      	b.n	8002596 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025a6:	6979      	ldr	r1, [r7, #20]
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	3304      	adds	r3, #4
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80025b8:	b672      	cpsid	i
}
 80025ba:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	4413      	add	r3, r2
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80025ca:	b662      	cpsie	i
}
 80025cc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3734      	adds	r7, #52	; 0x34
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	ffffe000 	.word	0xffffe000

080025e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e175      	b.n	80028ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 8164 	bne.w	80028e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_Init+0x56>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d130      	bne.n	8002698 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 0201 	and.w	r2, r3, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d017      	beq.n	80026d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d123      	bne.n	8002728 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	69b9      	ldr	r1, [r7, #24]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80be 	beq.w	80028e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	4b66      	ldr	r3, [pc, #408]	; (8002904 <HAL_GPIO_Init+0x324>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	4a65      	ldr	r2, [pc, #404]	; (8002904 <HAL_GPIO_Init+0x324>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002774:	6453      	str	r3, [r2, #68]	; 0x44
 8002776:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_GPIO_Init+0x324>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002782:	4a61      	ldr	r2, [pc, #388]	; (8002908 <HAL_GPIO_Init+0x328>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a58      	ldr	r2, [pc, #352]	; (800290c <HAL_GPIO_Init+0x32c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d037      	beq.n	800281e <HAL_GPIO_Init+0x23e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a57      	ldr	r2, [pc, #348]	; (8002910 <HAL_GPIO_Init+0x330>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d031      	beq.n	800281a <HAL_GPIO_Init+0x23a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a56      	ldr	r2, [pc, #344]	; (8002914 <HAL_GPIO_Init+0x334>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d02b      	beq.n	8002816 <HAL_GPIO_Init+0x236>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a55      	ldr	r2, [pc, #340]	; (8002918 <HAL_GPIO_Init+0x338>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d025      	beq.n	8002812 <HAL_GPIO_Init+0x232>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a54      	ldr	r2, [pc, #336]	; (800291c <HAL_GPIO_Init+0x33c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01f      	beq.n	800280e <HAL_GPIO_Init+0x22e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a53      	ldr	r2, [pc, #332]	; (8002920 <HAL_GPIO_Init+0x340>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_GPIO_Init+0x22a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_GPIO_Init+0x344>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0x226>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_GPIO_Init+0x348>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00d      	beq.n	8002802 <HAL_GPIO_Init+0x222>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a50      	ldr	r2, [pc, #320]	; (800292c <HAL_GPIO_Init+0x34c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x21e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4f      	ldr	r2, [pc, #316]	; (8002930 <HAL_GPIO_Init+0x350>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_GPIO_Init+0x21a>
 80027f6:	2309      	movs	r3, #9
 80027f8:	e012      	b.n	8002820 <HAL_GPIO_Init+0x240>
 80027fa:	230a      	movs	r3, #10
 80027fc:	e010      	b.n	8002820 <HAL_GPIO_Init+0x240>
 80027fe:	2308      	movs	r3, #8
 8002800:	e00e      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002802:	2307      	movs	r3, #7
 8002804:	e00c      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002806:	2306      	movs	r3, #6
 8002808:	e00a      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800280a:	2305      	movs	r3, #5
 800280c:	e008      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800280e:	2304      	movs	r3, #4
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002812:	2303      	movs	r3, #3
 8002814:	e004      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002816:	2302      	movs	r3, #2
 8002818:	e002      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800281e:	2300      	movs	r3, #0
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	f002 0203 	and.w	r2, r2, #3
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	4093      	lsls	r3, r2
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002830:	4935      	ldr	r1, [pc, #212]	; (8002908 <HAL_GPIO_Init+0x328>)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283e:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_GPIO_Init+0x354>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002862:	4a34      	ldr	r2, [pc, #208]	; (8002934 <HAL_GPIO_Init+0x354>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002868:	4b32      	ldr	r3, [pc, #200]	; (8002934 <HAL_GPIO_Init+0x354>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800288c:	4a29      	ldr	r2, [pc, #164]	; (8002934 <HAL_GPIO_Init+0x354>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002892:	4b28      	ldr	r3, [pc, #160]	; (8002934 <HAL_GPIO_Init+0x354>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b6:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <HAL_GPIO_Init+0x354>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028bc:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_GPIO_Init+0x354>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e0:	4a14      	ldr	r2, [pc, #80]	; (8002934 <HAL_GPIO_Init+0x354>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3301      	adds	r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	f67f ae86 	bls.w	8002600 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	40013800 	.word	0x40013800
 800290c:	40020000 	.word	0x40020000
 8002910:	40020400 	.word	0x40020400
 8002914:	40020800 	.word	0x40020800
 8002918:	40020c00 	.word	0x40020c00
 800291c:	40021000 	.word	0x40021000
 8002920:	40021400 	.word	0x40021400
 8002924:	40021800 	.word	0x40021800
 8002928:	40021c00 	.word	0x40021c00
 800292c:	40022000 	.word	0x40022000
 8002930:	40022400 	.word	0x40022400
 8002934:	40013c00 	.word	0x40013c00

08002938 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002940:	2300      	movs	r3, #0
 8002942:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e291      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8087 	beq.w	8002a6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800295c:	4b96      	ldr	r3, [pc, #600]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b04      	cmp	r3, #4
 8002966:	d00c      	beq.n	8002982 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002968:	4b93      	ldr	r3, [pc, #588]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d112      	bne.n	800299a <HAL_RCC_OscConfig+0x62>
 8002974:	4b90      	ldr	r3, [pc, #576]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002980:	d10b      	bne.n	800299a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002982:	4b8d      	ldr	r3, [pc, #564]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d06c      	beq.n	8002a68 <HAL_RCC_OscConfig+0x130>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d168      	bne.n	8002a68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e26b      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x7a>
 80029a4:	4b84      	ldr	r3, [pc, #528]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a83      	ldr	r2, [pc, #524]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	e02e      	b.n	8002a10 <HAL_RCC_OscConfig+0xd8>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x9c>
 80029ba:	4b7f      	ldr	r3, [pc, #508]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a7e      	ldr	r2, [pc, #504]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	4b7c      	ldr	r3, [pc, #496]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a7b      	ldr	r2, [pc, #492]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 80029cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e01d      	b.n	8002a10 <HAL_RCC_OscConfig+0xd8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0xc0>
 80029de:	4b76      	ldr	r3, [pc, #472]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a75      	ldr	r2, [pc, #468]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 80029e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b73      	ldr	r3, [pc, #460]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a72      	ldr	r2, [pc, #456]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e00b      	b.n	8002a10 <HAL_RCC_OscConfig+0xd8>
 80029f8:	4b6f      	ldr	r3, [pc, #444]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a6e      	ldr	r2, [pc, #440]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 80029fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b6c      	ldr	r3, [pc, #432]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a6b      	ldr	r2, [pc, #428]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d013      	beq.n	8002a40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe fa22 	bl	8000e60 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7fe fa1e 	bl	8000e60 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e21f      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b61      	ldr	r3, [pc, #388]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0xe8>
 8002a3e:	e014      	b.n	8002a6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe fa0e 	bl	8000e60 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a48:	f7fe fa0a 	bl	8000e60 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e20b      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	4b57      	ldr	r3, [pc, #348]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x110>
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d069      	beq.n	8002b4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a76:	4b50      	ldr	r3, [pc, #320]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a82:	4b4d      	ldr	r3, [pc, #308]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d11c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x190>
 8002a8e:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d116      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	4b47      	ldr	r3, [pc, #284]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x17a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e1df      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab2:	4b41      	ldr	r3, [pc, #260]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	493d      	ldr	r1, [pc, #244]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	e040      	b.n	8002b4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d023      	beq.n	8002b18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad0:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a38      	ldr	r2, [pc, #224]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe f9c0 	bl	8000e60 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae4:	f7fe f9bc 	bl	8000e60 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e1bd      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	4b30      	ldr	r3, [pc, #192]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b02:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4929      	ldr	r1, [pc, #164]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]
 8002b16:	e018      	b.n	8002b4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b18:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a26      	ldr	r2, [pc, #152]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe f99c 	bl	8000e60 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7fe f998 	bl	8000e60 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e199      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	4b1e      	ldr	r3, [pc, #120]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d038      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d019      	beq.n	8002b92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5e:	4b16      	ldr	r3, [pc, #88]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b62:	4a15      	ldr	r2, [pc, #84]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6a:	f7fe f979 	bl	8000e60 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b72:	f7fe f975 	bl	8000e60 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e176      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x23a>
 8002b90:	e01a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b96:	4a08      	ldr	r2, [pc, #32]	; (8002bb8 <HAL_RCC_OscConfig+0x280>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7fe f95f 	bl	8000e60 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba6:	f7fe f95b 	bl	8000e60 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d903      	bls.n	8002bbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e15c      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
 8002bb8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbc:	4b91      	ldr	r3, [pc, #580]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1ee      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80a4 	beq.w	8002d1e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd6:	4b8b      	ldr	r3, [pc, #556]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10d      	bne.n	8002bfe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	4b88      	ldr	r3, [pc, #544]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a87      	ldr	r2, [pc, #540]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
 8002bee:	4b85      	ldr	r3, [pc, #532]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfe:	4b82      	ldr	r3, [pc, #520]	; (8002e08 <HAL_RCC_OscConfig+0x4d0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d118      	bne.n	8002c3c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c0a:	4b7f      	ldr	r3, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x4d0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7e      	ldr	r2, [pc, #504]	; (8002e08 <HAL_RCC_OscConfig+0x4d0>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c16:	f7fe f923 	bl	8000e60 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1e:	f7fe f91f 	bl	8000e60 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b64      	cmp	r3, #100	; 0x64
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e120      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c30:	4b75      	ldr	r3, [pc, #468]	; (8002e08 <HAL_RCC_OscConfig+0x4d0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d106      	bne.n	8002c52 <HAL_RCC_OscConfig+0x31a>
 8002c44:	4b6f      	ldr	r3, [pc, #444]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	4a6e      	ldr	r2, [pc, #440]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c50:	e02d      	b.n	8002cae <HAL_RCC_OscConfig+0x376>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x33c>
 8002c5a:	4b6a      	ldr	r3, [pc, #424]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	4a69      	ldr	r2, [pc, #420]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	6713      	str	r3, [r2, #112]	; 0x70
 8002c66:	4b67      	ldr	r3, [pc, #412]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	4a66      	ldr	r2, [pc, #408]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002c6c:	f023 0304 	bic.w	r3, r3, #4
 8002c70:	6713      	str	r3, [r2, #112]	; 0x70
 8002c72:	e01c      	b.n	8002cae <HAL_RCC_OscConfig+0x376>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d10c      	bne.n	8002c96 <HAL_RCC_OscConfig+0x35e>
 8002c7c:	4b61      	ldr	r3, [pc, #388]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	4a60      	ldr	r2, [pc, #384]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	6713      	str	r3, [r2, #112]	; 0x70
 8002c88:	4b5e      	ldr	r3, [pc, #376]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	4a5d      	ldr	r2, [pc, #372]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6713      	str	r3, [r2, #112]	; 0x70
 8002c94:	e00b      	b.n	8002cae <HAL_RCC_OscConfig+0x376>
 8002c96:	4b5b      	ldr	r3, [pc, #364]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	4a5a      	ldr	r2, [pc, #360]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca2:	4b58      	ldr	r3, [pc, #352]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	4a57      	ldr	r2, [pc, #348]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d015      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe f8d3 	bl	8000e60 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fe f8cf 	bl	8000e60 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e0ce      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd4:	4b4b      	ldr	r3, [pc, #300]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ee      	beq.n	8002cbe <HAL_RCC_OscConfig+0x386>
 8002ce0:	e014      	b.n	8002d0c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7fe f8bd 	bl	8000e60 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe f8b9 	bl	8000e60 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0b8      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d00:	4b40      	ldr	r3, [pc, #256]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1ee      	bne.n	8002cea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d0c:	7dfb      	ldrb	r3, [r7, #23]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d105      	bne.n	8002d1e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d12:	4b3c      	ldr	r3, [pc, #240]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4a3b      	ldr	r2, [pc, #236]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80a4 	beq.w	8002e70 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d28:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 030c 	and.w	r3, r3, #12
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d06b      	beq.n	8002e0c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d149      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3c:	4b31      	ldr	r3, [pc, #196]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a30      	ldr	r2, [pc, #192]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe f88a 	bl	8000e60 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe f886 	bl	8000e60 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e087      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d62:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69da      	ldr	r2, [r3, #28]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	019b      	lsls	r3, r3, #6
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	3b01      	subs	r3, #1
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	4313      	orrs	r3, r2
 8002d94:	4a1b      	ldr	r2, [pc, #108]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d9a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d9c:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe f85a 	bl	8000e60 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe f856 	bl	8000e60 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e057      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x478>
 8002dce:	e04f      	b.n	8002e70 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a0b      	ldr	r2, [pc, #44]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe f840 	bl	8000e60 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fe f83c 	bl	8000e60 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e03d      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df6:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_RCC_OscConfig+0x4cc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4ac>
 8002e02:	e035      	b.n	8002e70 <HAL_RCC_OscConfig+0x538>
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_RCC_OscConfig+0x544>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d028      	beq.n	8002e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d121      	bne.n	8002e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d11a      	bne.n	8002e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d111      	bne.n	8002e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	3b01      	subs	r3, #1
 8002e56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800

08002e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0d0      	b.n	800303a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e98:	4b6a      	ldr	r3, [pc, #424]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d910      	bls.n	8002ec8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b67      	ldr	r3, [pc, #412]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 020f 	bic.w	r2, r3, #15
 8002eae:	4965      	ldr	r1, [pc, #404]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b63      	ldr	r3, [pc, #396]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0b8      	b.n	800303a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d020      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee0:	4b59      	ldr	r3, [pc, #356]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4a58      	ldr	r2, [pc, #352]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef8:	4b53      	ldr	r3, [pc, #332]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4a52      	ldr	r2, [pc, #328]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8002efe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f04:	4b50      	ldr	r3, [pc, #320]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	494d      	ldr	r1, [pc, #308]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d040      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d107      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	4b47      	ldr	r3, [pc, #284]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d115      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e07f      	b.n	800303a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f42:	4b41      	ldr	r3, [pc, #260]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e073      	b.n	800303a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f52:	4b3d      	ldr	r3, [pc, #244]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e06b      	b.n	800303a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f62:	4b39      	ldr	r3, [pc, #228]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f023 0203 	bic.w	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4936      	ldr	r1, [pc, #216]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f74:	f7fd ff74 	bl	8000e60 <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f7c:	f7fd ff70 	bl	8000e60 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e053      	b.n	800303a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 020c 	and.w	r2, r3, #12
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d1eb      	bne.n	8002f7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b27      	ldr	r3, [pc, #156]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d210      	bcs.n	8002fd4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 020f 	bic.w	r2, r3, #15
 8002fba:	4922      	ldr	r1, [pc, #136]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b20      	ldr	r3, [pc, #128]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e032      	b.n	800303a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe0:	4b19      	ldr	r3, [pc, #100]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4916      	ldr	r1, [pc, #88]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	490e      	ldr	r1, [pc, #56]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003012:	f000 f821 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 8003016:	4602      	mov	r2, r0
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	490a      	ldr	r1, [pc, #40]	; (800304c <HAL_RCC_ClockConfig+0x1cc>)
 8003024:	5ccb      	ldrb	r3, [r1, r3]
 8003026:	fa22 f303 	lsr.w	r3, r2, r3
 800302a:	4a09      	ldr	r2, [pc, #36]	; (8003050 <HAL_RCC_ClockConfig+0x1d0>)
 800302c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800302e:	4b09      	ldr	r3, [pc, #36]	; (8003054 <HAL_RCC_ClockConfig+0x1d4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd fbe8 	bl	8000808 <HAL_InitTick>

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023c00 	.word	0x40023c00
 8003048:	40023800 	.word	0x40023800
 800304c:	08015254 	.word	0x08015254
 8003050:	20000000 	.word	0x20000000
 8003054:	20000004 	.word	0x20000004

08003058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800305c:	b094      	sub	sp, #80	; 0x50
 800305e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	647b      	str	r3, [r7, #68]	; 0x44
 8003064:	2300      	movs	r3, #0
 8003066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003068:	2300      	movs	r3, #0
 800306a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003070:	4b79      	ldr	r3, [pc, #484]	; (8003258 <HAL_RCC_GetSysClockFreq+0x200>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b08      	cmp	r3, #8
 800307a:	d00d      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x40>
 800307c:	2b08      	cmp	r3, #8
 800307e:	f200 80e1 	bhi.w	8003244 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x34>
 8003086:	2b04      	cmp	r3, #4
 8003088:	d003      	beq.n	8003092 <HAL_RCC_GetSysClockFreq+0x3a>
 800308a:	e0db      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800308c:	4b73      	ldr	r3, [pc, #460]	; (800325c <HAL_RCC_GetSysClockFreq+0x204>)
 800308e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003090:	e0db      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003092:	4b73      	ldr	r3, [pc, #460]	; (8003260 <HAL_RCC_GetSysClockFreq+0x208>)
 8003094:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003096:	e0d8      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003098:	4b6f      	ldr	r3, [pc, #444]	; (8003258 <HAL_RCC_GetSysClockFreq+0x200>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030a0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030a2:	4b6d      	ldr	r3, [pc, #436]	; (8003258 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d063      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ae:	4b6a      	ldr	r3, [pc, #424]	; (8003258 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	2200      	movs	r2, #0
 80030b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c0:	633b      	str	r3, [r7, #48]	; 0x30
 80030c2:	2300      	movs	r3, #0
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
 80030c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030ca:	4622      	mov	r2, r4
 80030cc:	462b      	mov	r3, r5
 80030ce:	f04f 0000 	mov.w	r0, #0
 80030d2:	f04f 0100 	mov.w	r1, #0
 80030d6:	0159      	lsls	r1, r3, #5
 80030d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030dc:	0150      	lsls	r0, r2, #5
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4621      	mov	r1, r4
 80030e4:	1a51      	subs	r1, r2, r1
 80030e6:	6139      	str	r1, [r7, #16]
 80030e8:	4629      	mov	r1, r5
 80030ea:	eb63 0301 	sbc.w	r3, r3, r1
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030fc:	4659      	mov	r1, fp
 80030fe:	018b      	lsls	r3, r1, #6
 8003100:	4651      	mov	r1, sl
 8003102:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003106:	4651      	mov	r1, sl
 8003108:	018a      	lsls	r2, r1, #6
 800310a:	4651      	mov	r1, sl
 800310c:	ebb2 0801 	subs.w	r8, r2, r1
 8003110:	4659      	mov	r1, fp
 8003112:	eb63 0901 	sbc.w	r9, r3, r1
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800312a:	4690      	mov	r8, r2
 800312c:	4699      	mov	r9, r3
 800312e:	4623      	mov	r3, r4
 8003130:	eb18 0303 	adds.w	r3, r8, r3
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	462b      	mov	r3, r5
 8003138:	eb49 0303 	adc.w	r3, r9, r3
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800314a:	4629      	mov	r1, r5
 800314c:	024b      	lsls	r3, r1, #9
 800314e:	4621      	mov	r1, r4
 8003150:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003154:	4621      	mov	r1, r4
 8003156:	024a      	lsls	r2, r1, #9
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800315e:	2200      	movs	r2, #0
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28
 8003162:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003164:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003168:	f7fd f8a2 	bl	80002b0 <__aeabi_uldivmod>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4613      	mov	r3, r2
 8003172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003174:	e058      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003176:	4b38      	ldr	r3, [pc, #224]	; (8003258 <HAL_RCC_GetSysClockFreq+0x200>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	099b      	lsrs	r3, r3, #6
 800317c:	2200      	movs	r2, #0
 800317e:	4618      	mov	r0, r3
 8003180:	4611      	mov	r1, r2
 8003182:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003186:	623b      	str	r3, [r7, #32]
 8003188:	2300      	movs	r3, #0
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
 800318c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003190:	4642      	mov	r2, r8
 8003192:	464b      	mov	r3, r9
 8003194:	f04f 0000 	mov.w	r0, #0
 8003198:	f04f 0100 	mov.w	r1, #0
 800319c:	0159      	lsls	r1, r3, #5
 800319e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a2:	0150      	lsls	r0, r2, #5
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4641      	mov	r1, r8
 80031aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80031ae:	4649      	mov	r1, r9
 80031b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031c8:	ebb2 040a 	subs.w	r4, r2, sl
 80031cc:	eb63 050b 	sbc.w	r5, r3, fp
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	00eb      	lsls	r3, r5, #3
 80031da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031de:	00e2      	lsls	r2, r4, #3
 80031e0:	4614      	mov	r4, r2
 80031e2:	461d      	mov	r5, r3
 80031e4:	4643      	mov	r3, r8
 80031e6:	18e3      	adds	r3, r4, r3
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	464b      	mov	r3, r9
 80031ec:	eb45 0303 	adc.w	r3, r5, r3
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031fe:	4629      	mov	r1, r5
 8003200:	028b      	lsls	r3, r1, #10
 8003202:	4621      	mov	r1, r4
 8003204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003208:	4621      	mov	r1, r4
 800320a:	028a      	lsls	r2, r1, #10
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003212:	2200      	movs	r2, #0
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	61fa      	str	r2, [r7, #28]
 8003218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800321c:	f7fd f848 	bl	80002b0 <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4613      	mov	r3, r2
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCC_GetSysClockFreq+0x200>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	3301      	adds	r3, #1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003238:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800323a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003242:	e002      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCC_GetSysClockFreq+0x204>)
 8003246:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800324a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800324c:	4618      	mov	r0, r3
 800324e:	3750      	adds	r7, #80	; 0x50
 8003250:	46bd      	mov	sp, r7
 8003252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	00f42400 	.word	0x00f42400
 8003260:	007a1200 	.word	0x007a1200

08003264 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_RCC_GetHCLKFreq+0x14>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000000 	.word	0x20000000

0800327c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003280:	f7ff fff0 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	0a9b      	lsrs	r3, r3, #10
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4903      	ldr	r1, [pc, #12]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	08015264 	.word	0x08015264

080032a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	220f      	movs	r2, #15
 80032b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_RCC_GetClockConfig+0x5c>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0203 	and.w	r2, r3, #3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032c0:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_RCC_GetClockConfig+0x5c>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_RCC_GetClockConfig+0x5c>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_GetClockConfig+0x5c>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	08db      	lsrs	r3, r3, #3
 80032de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032e6:	4b07      	ldr	r3, [pc, #28]	; (8003304 <HAL_RCC_GetClockConfig+0x60>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 020f 	and.w	r2, r3, #15
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	601a      	str	r2, [r3, #0]
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	40023c00 	.word	0x40023c00

08003308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e049      	b.n	80033ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f841 	bl	80033b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3304      	adds	r3, #4
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f000 fa00 	bl	800374c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d001      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e054      	b.n	800348e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a26      	ldr	r2, [pc, #152]	; (800349c <HAL_TIM_Base_Start_IT+0xd0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d022      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340e:	d01d      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a22      	ldr	r2, [pc, #136]	; (80034a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d018      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a21      	ldr	r2, [pc, #132]	; (80034a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1f      	ldr	r2, [pc, #124]	; (80034a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00e      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1e      	ldr	r2, [pc, #120]	; (80034ac <HAL_TIM_Base_Start_IT+0xe0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d009      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1b      	ldr	r2, [pc, #108]	; (80034b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d115      	bne.n	8003478 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_TIM_Base_Start_IT+0xec>)
 8003454:	4013      	ands	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b06      	cmp	r3, #6
 800345c:	d015      	beq.n	800348a <HAL_TIM_Base_Start_IT+0xbe>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003464:	d011      	beq.n	800348a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0201 	orr.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003476:	e008      	b.n	800348a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e000      	b.n	800348c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40010000 	.word	0x40010000
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40000c00 	.word	0x40000c00
 80034ac:	40010400 	.word	0x40010400
 80034b0:	40014000 	.word	0x40014000
 80034b4:	40001800 	.word	0x40001800
 80034b8:	00010007 	.word	0x00010007

080034bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d122      	bne.n	8003518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0202 	mvn.w	r2, #2
 80034e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f905 	bl	800370e <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8f7 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f908 	bl	8003722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d122      	bne.n	800356c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b04      	cmp	r3, #4
 8003532:	d11b      	bne.n	800356c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0204 	mvn.w	r2, #4
 800353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8db 	bl	800370e <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8cd 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f8de 	bl	8003722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b08      	cmp	r3, #8
 8003578:	d122      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b08      	cmp	r3, #8
 8003586:	d11b      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0208 	mvn.w	r2, #8
 8003590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2204      	movs	r2, #4
 8003596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f8b1 	bl	800370e <HAL_TIM_IC_CaptureCallback>
 80035ac:	e005      	b.n	80035ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f8a3 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f8b4 	bl	8003722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d122      	bne.n	8003614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d11b      	bne.n	8003614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0210 	mvn.w	r2, #16
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2208      	movs	r2, #8
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f887 	bl	800370e <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f879 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f88a 	bl	8003722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d10e      	bne.n	8003640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d107      	bne.n	8003640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0201 	mvn.w	r2, #1
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd f8a4 	bl	8000788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b80      	cmp	r3, #128	; 0x80
 800364c:	d10e      	bne.n	800366c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d107      	bne.n	800366c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f91a 	bl	80038a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367a:	d10e      	bne.n	800369a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b80      	cmp	r3, #128	; 0x80
 8003688:	d107      	bne.n	800369a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f90d 	bl	80038b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d10e      	bne.n	80036c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d107      	bne.n	80036c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f838 	bl	8003736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d10e      	bne.n	80036f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d107      	bne.n	80036f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f06f 0220 	mvn.w	r2, #32
 80036ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f8cd 	bl	800388c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a40      	ldr	r2, [pc, #256]	; (8003860 <TIM_Base_SetConfig+0x114>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d013      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376a:	d00f      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a3d      	ldr	r2, [pc, #244]	; (8003864 <TIM_Base_SetConfig+0x118>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00b      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a3c      	ldr	r2, [pc, #240]	; (8003868 <TIM_Base_SetConfig+0x11c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d007      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a3b      	ldr	r2, [pc, #236]	; (800386c <TIM_Base_SetConfig+0x120>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a3a      	ldr	r2, [pc, #232]	; (8003870 <TIM_Base_SetConfig+0x124>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d108      	bne.n	800379e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a2f      	ldr	r2, [pc, #188]	; (8003860 <TIM_Base_SetConfig+0x114>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d02b      	beq.n	80037fe <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ac:	d027      	beq.n	80037fe <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a2c      	ldr	r2, [pc, #176]	; (8003864 <TIM_Base_SetConfig+0x118>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d023      	beq.n	80037fe <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a2b      	ldr	r2, [pc, #172]	; (8003868 <TIM_Base_SetConfig+0x11c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01f      	beq.n	80037fe <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a2a      	ldr	r2, [pc, #168]	; (800386c <TIM_Base_SetConfig+0x120>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d01b      	beq.n	80037fe <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a29      	ldr	r2, [pc, #164]	; (8003870 <TIM_Base_SetConfig+0x124>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d017      	beq.n	80037fe <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a28      	ldr	r2, [pc, #160]	; (8003874 <TIM_Base_SetConfig+0x128>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a27      	ldr	r2, [pc, #156]	; (8003878 <TIM_Base_SetConfig+0x12c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00f      	beq.n	80037fe <TIM_Base_SetConfig+0xb2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a26      	ldr	r2, [pc, #152]	; (800387c <TIM_Base_SetConfig+0x130>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00b      	beq.n	80037fe <TIM_Base_SetConfig+0xb2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a25      	ldr	r2, [pc, #148]	; (8003880 <TIM_Base_SetConfig+0x134>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d007      	beq.n	80037fe <TIM_Base_SetConfig+0xb2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a24      	ldr	r2, [pc, #144]	; (8003884 <TIM_Base_SetConfig+0x138>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d003      	beq.n	80037fe <TIM_Base_SetConfig+0xb2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a23      	ldr	r2, [pc, #140]	; (8003888 <TIM_Base_SetConfig+0x13c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d108      	bne.n	8003810 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <TIM_Base_SetConfig+0x114>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_Base_SetConfig+0xf8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a0c      	ldr	r2, [pc, #48]	; (8003870 <TIM_Base_SetConfig+0x124>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d103      	bne.n	800384c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	615a      	str	r2, [r3, #20]
}
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40010000 	.word	0x40010000
 8003864:	40000400 	.word	0x40000400
 8003868:	40000800 	.word	0x40000800
 800386c:	40000c00 	.word	0x40000c00
 8003870:	40010400 	.word	0x40010400
 8003874:	40014000 	.word	0x40014000
 8003878:	40014400 	.word	0x40014400
 800387c:	40014800 	.word	0x40014800
 8003880:	40001800 	.word	0x40001800
 8003884:	40001c00 	.word	0x40001c00
 8003888:	40002000 	.word	0x40002000

0800388c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80038c8:	b5b0      	push	{r4, r5, r7, lr}
 80038ca:	b08c      	sub	sp, #48	; 0x30
 80038cc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80038ce:	4b96      	ldr	r3, [pc, #600]	; (8003b28 <MX_LWIP_Init+0x260>)
 80038d0:	22c0      	movs	r2, #192	; 0xc0
 80038d2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80038d4:	4b94      	ldr	r3, [pc, #592]	; (8003b28 <MX_LWIP_Init+0x260>)
 80038d6:	22a8      	movs	r2, #168	; 0xa8
 80038d8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 80038da:	4b93      	ldr	r3, [pc, #588]	; (8003b28 <MX_LWIP_Init+0x260>)
 80038dc:	220a      	movs	r2, #10
 80038de:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 80038e0:	4b91      	ldr	r3, [pc, #580]	; (8003b28 <MX_LWIP_Init+0x260>)
 80038e2:	2232      	movs	r2, #50	; 0x32
 80038e4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80038e6:	4b91      	ldr	r3, [pc, #580]	; (8003b2c <MX_LWIP_Init+0x264>)
 80038e8:	22ff      	movs	r2, #255	; 0xff
 80038ea:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80038ec:	4b8f      	ldr	r3, [pc, #572]	; (8003b2c <MX_LWIP_Init+0x264>)
 80038ee:	22ff      	movs	r2, #255	; 0xff
 80038f0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80038f2:	4b8e      	ldr	r3, [pc, #568]	; (8003b2c <MX_LWIP_Init+0x264>)
 80038f4:	22ff      	movs	r2, #255	; 0xff
 80038f6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80038f8:	4b8c      	ldr	r3, [pc, #560]	; (8003b2c <MX_LWIP_Init+0x264>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80038fe:	4b8c      	ldr	r3, [pc, #560]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003900:	22c0      	movs	r2, #192	; 0xc0
 8003902:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003904:	4b8a      	ldr	r3, [pc, #552]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003906:	22a8      	movs	r2, #168	; 0xa8
 8003908:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 10;
 800390a:	4b89      	ldr	r3, [pc, #548]	; (8003b30 <MX_LWIP_Init+0x268>)
 800390c:	220a      	movs	r2, #10
 800390e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003910:	4b87      	ldr	r3, [pc, #540]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003912:	2201      	movs	r2, #1
 8003914:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003916:	2100      	movs	r1, #0
 8003918:	2000      	movs	r0, #0
 800391a:	f003 fe9f 	bl	800765c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800391e:	4b82      	ldr	r3, [pc, #520]	; (8003b28 <MX_LWIP_Init+0x260>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	061a      	lsls	r2, r3, #24
 8003924:	4b80      	ldr	r3, [pc, #512]	; (8003b28 <MX_LWIP_Init+0x260>)
 8003926:	785b      	ldrb	r3, [r3, #1]
 8003928:	041b      	lsls	r3, r3, #16
 800392a:	431a      	orrs	r2, r3
 800392c:	4b7e      	ldr	r3, [pc, #504]	; (8003b28 <MX_LWIP_Init+0x260>)
 800392e:	789b      	ldrb	r3, [r3, #2]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	4313      	orrs	r3, r2
 8003934:	4a7c      	ldr	r2, [pc, #496]	; (8003b28 <MX_LWIP_Init+0x260>)
 8003936:	78d2      	ldrb	r2, [r2, #3]
 8003938:	4313      	orrs	r3, r2
 800393a:	061a      	lsls	r2, r3, #24
 800393c:	4b7a      	ldr	r3, [pc, #488]	; (8003b28 <MX_LWIP_Init+0x260>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	0619      	lsls	r1, r3, #24
 8003942:	4b79      	ldr	r3, [pc, #484]	; (8003b28 <MX_LWIP_Init+0x260>)
 8003944:	785b      	ldrb	r3, [r3, #1]
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	4319      	orrs	r1, r3
 800394a:	4b77      	ldr	r3, [pc, #476]	; (8003b28 <MX_LWIP_Init+0x260>)
 800394c:	789b      	ldrb	r3, [r3, #2]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	430b      	orrs	r3, r1
 8003952:	4975      	ldr	r1, [pc, #468]	; (8003b28 <MX_LWIP_Init+0x260>)
 8003954:	78c9      	ldrb	r1, [r1, #3]
 8003956:	430b      	orrs	r3, r1
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800395e:	431a      	orrs	r2, r3
 8003960:	4b71      	ldr	r3, [pc, #452]	; (8003b28 <MX_LWIP_Init+0x260>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	0619      	lsls	r1, r3, #24
 8003966:	4b70      	ldr	r3, [pc, #448]	; (8003b28 <MX_LWIP_Init+0x260>)
 8003968:	785b      	ldrb	r3, [r3, #1]
 800396a:	041b      	lsls	r3, r3, #16
 800396c:	4319      	orrs	r1, r3
 800396e:	4b6e      	ldr	r3, [pc, #440]	; (8003b28 <MX_LWIP_Init+0x260>)
 8003970:	789b      	ldrb	r3, [r3, #2]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	430b      	orrs	r3, r1
 8003976:	496c      	ldr	r1, [pc, #432]	; (8003b28 <MX_LWIP_Init+0x260>)
 8003978:	78c9      	ldrb	r1, [r1, #3]
 800397a:	430b      	orrs	r3, r1
 800397c:	0a1b      	lsrs	r3, r3, #8
 800397e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003982:	431a      	orrs	r2, r3
 8003984:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <MX_LWIP_Init+0x260>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	0619      	lsls	r1, r3, #24
 800398a:	4b67      	ldr	r3, [pc, #412]	; (8003b28 <MX_LWIP_Init+0x260>)
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	4319      	orrs	r1, r3
 8003992:	4b65      	ldr	r3, [pc, #404]	; (8003b28 <MX_LWIP_Init+0x260>)
 8003994:	789b      	ldrb	r3, [r3, #2]
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	430b      	orrs	r3, r1
 800399a:	4963      	ldr	r1, [pc, #396]	; (8003b28 <MX_LWIP_Init+0x260>)
 800399c:	78c9      	ldrb	r1, [r1, #3]
 800399e:	430b      	orrs	r3, r1
 80039a0:	0e1b      	lsrs	r3, r3, #24
 80039a2:	4313      	orrs	r3, r2
 80039a4:	4a63      	ldr	r2, [pc, #396]	; (8003b34 <MX_LWIP_Init+0x26c>)
 80039a6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80039a8:	4b60      	ldr	r3, [pc, #384]	; (8003b2c <MX_LWIP_Init+0x264>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	061a      	lsls	r2, r3, #24
 80039ae:	4b5f      	ldr	r3, [pc, #380]	; (8003b2c <MX_LWIP_Init+0x264>)
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	431a      	orrs	r2, r3
 80039b6:	4b5d      	ldr	r3, [pc, #372]	; (8003b2c <MX_LWIP_Init+0x264>)
 80039b8:	789b      	ldrb	r3, [r3, #2]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	4313      	orrs	r3, r2
 80039be:	4a5b      	ldr	r2, [pc, #364]	; (8003b2c <MX_LWIP_Init+0x264>)
 80039c0:	78d2      	ldrb	r2, [r2, #3]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	061a      	lsls	r2, r3, #24
 80039c6:	4b59      	ldr	r3, [pc, #356]	; (8003b2c <MX_LWIP_Init+0x264>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	0619      	lsls	r1, r3, #24
 80039cc:	4b57      	ldr	r3, [pc, #348]	; (8003b2c <MX_LWIP_Init+0x264>)
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	4319      	orrs	r1, r3
 80039d4:	4b55      	ldr	r3, [pc, #340]	; (8003b2c <MX_LWIP_Init+0x264>)
 80039d6:	789b      	ldrb	r3, [r3, #2]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	430b      	orrs	r3, r1
 80039dc:	4953      	ldr	r1, [pc, #332]	; (8003b2c <MX_LWIP_Init+0x264>)
 80039de:	78c9      	ldrb	r1, [r1, #3]
 80039e0:	430b      	orrs	r3, r1
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039e8:	431a      	orrs	r2, r3
 80039ea:	4b50      	ldr	r3, [pc, #320]	; (8003b2c <MX_LWIP_Init+0x264>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	0619      	lsls	r1, r3, #24
 80039f0:	4b4e      	ldr	r3, [pc, #312]	; (8003b2c <MX_LWIP_Init+0x264>)
 80039f2:	785b      	ldrb	r3, [r3, #1]
 80039f4:	041b      	lsls	r3, r3, #16
 80039f6:	4319      	orrs	r1, r3
 80039f8:	4b4c      	ldr	r3, [pc, #304]	; (8003b2c <MX_LWIP_Init+0x264>)
 80039fa:	789b      	ldrb	r3, [r3, #2]
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	430b      	orrs	r3, r1
 8003a00:	494a      	ldr	r1, [pc, #296]	; (8003b2c <MX_LWIP_Init+0x264>)
 8003a02:	78c9      	ldrb	r1, [r1, #3]
 8003a04:	430b      	orrs	r3, r1
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <MX_LWIP_Init+0x264>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	0619      	lsls	r1, r3, #24
 8003a14:	4b45      	ldr	r3, [pc, #276]	; (8003b2c <MX_LWIP_Init+0x264>)
 8003a16:	785b      	ldrb	r3, [r3, #1]
 8003a18:	041b      	lsls	r3, r3, #16
 8003a1a:	4319      	orrs	r1, r3
 8003a1c:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <MX_LWIP_Init+0x264>)
 8003a1e:	789b      	ldrb	r3, [r3, #2]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	430b      	orrs	r3, r1
 8003a24:	4941      	ldr	r1, [pc, #260]	; (8003b2c <MX_LWIP_Init+0x264>)
 8003a26:	78c9      	ldrb	r1, [r1, #3]
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	0e1b      	lsrs	r3, r3, #24
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	4a42      	ldr	r2, [pc, #264]	; (8003b38 <MX_LWIP_Init+0x270>)
 8003a30:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003a32:	4b3f      	ldr	r3, [pc, #252]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	061a      	lsls	r2, r3, #24
 8003a38:	4b3d      	ldr	r3, [pc, #244]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	4b3b      	ldr	r3, [pc, #236]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003a42:	789b      	ldrb	r3, [r3, #2]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	4313      	orrs	r3, r2
 8003a48:	4a39      	ldr	r2, [pc, #228]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003a4a:	78d2      	ldrb	r2, [r2, #3]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	061a      	lsls	r2, r3, #24
 8003a50:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	0619      	lsls	r1, r3, #24
 8003a56:	4b36      	ldr	r3, [pc, #216]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003a58:	785b      	ldrb	r3, [r3, #1]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	4319      	orrs	r1, r3
 8003a5e:	4b34      	ldr	r3, [pc, #208]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003a60:	789b      	ldrb	r3, [r3, #2]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	430b      	orrs	r3, r1
 8003a66:	4932      	ldr	r1, [pc, #200]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003a68:	78c9      	ldrb	r1, [r1, #3]
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a72:	431a      	orrs	r2, r3
 8003a74:	4b2e      	ldr	r3, [pc, #184]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	0619      	lsls	r1, r3, #24
 8003a7a:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003a7c:	785b      	ldrb	r3, [r3, #1]
 8003a7e:	041b      	lsls	r3, r3, #16
 8003a80:	4319      	orrs	r1, r3
 8003a82:	4b2b      	ldr	r3, [pc, #172]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003a84:	789b      	ldrb	r3, [r3, #2]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	4929      	ldr	r1, [pc, #164]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003a8c:	78c9      	ldrb	r1, [r1, #3]
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	0a1b      	lsrs	r3, r3, #8
 8003a92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003a96:	431a      	orrs	r2, r3
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	0619      	lsls	r1, r3, #24
 8003a9e:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003aa0:	785b      	ldrb	r3, [r3, #1]
 8003aa2:	041b      	lsls	r3, r3, #16
 8003aa4:	4319      	orrs	r1, r3
 8003aa6:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003aa8:	789b      	ldrb	r3, [r3, #2]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	430b      	orrs	r3, r1
 8003aae:	4920      	ldr	r1, [pc, #128]	; (8003b30 <MX_LWIP_Init+0x268>)
 8003ab0:	78c9      	ldrb	r1, [r1, #3]
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	0e1b      	lsrs	r3, r3, #24
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	4a20      	ldr	r2, [pc, #128]	; (8003b3c <MX_LWIP_Init+0x274>)
 8003aba:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003abc:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <MX_LWIP_Init+0x278>)
 8003abe:	9302      	str	r3, [sp, #8]
 8003ac0:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <MX_LWIP_Init+0x27c>)
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	4b1c      	ldr	r3, [pc, #112]	; (8003b3c <MX_LWIP_Init+0x274>)
 8003aca:	4a1b      	ldr	r2, [pc, #108]	; (8003b38 <MX_LWIP_Init+0x270>)
 8003acc:	4919      	ldr	r1, [pc, #100]	; (8003b34 <MX_LWIP_Init+0x26c>)
 8003ace:	481e      	ldr	r0, [pc, #120]	; (8003b48 <MX_LWIP_Init+0x280>)
 8003ad0:	f004 fb8e 	bl	80081f0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003ad4:	481c      	ldr	r0, [pc, #112]	; (8003b48 <MX_LWIP_Init+0x280>)
 8003ad6:	f004 fd3d 	bl	8008554 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003ada:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <MX_LWIP_Init+0x280>)
 8003adc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003aec:	4816      	ldr	r0, [pc, #88]	; (8003b48 <MX_LWIP_Init+0x280>)
 8003aee:	f004 fd41 	bl	8008574 <netif_set_up>
 8003af2:	e002      	b.n	8003afa <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003af4:	4814      	ldr	r0, [pc, #80]	; (8003b48 <MX_LWIP_Init+0x280>)
 8003af6:	f004 fda9 	bl	800864c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003afa:	4914      	ldr	r1, [pc, #80]	; (8003b4c <MX_LWIP_Init+0x284>)
 8003afc:	4812      	ldr	r0, [pc, #72]	; (8003b48 <MX_LWIP_Init+0x280>)
 8003afe:	f004 fe3b 	bl	8008778 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8003b02:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <MX_LWIP_Init+0x288>)
 8003b04:	1d3c      	adds	r4, r7, #4
 8003b06:	461d      	mov	r5, r3
 8003b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8003b14:	1d3b      	adds	r3, r7, #4
 8003b16:	490c      	ldr	r1, [pc, #48]	; (8003b48 <MX_LWIP_Init+0x280>)
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fd29 	bl	8004570 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003b1e:	bf00      	nop
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bdb0      	pop	{r4, r5, r7, pc}
 8003b26:	bf00      	nop
 8003b28:	2000053c 	.word	0x2000053c
 8003b2c:	20000540 	.word	0x20000540
 8003b30:	20000544 	.word	0x20000544
 8003b34:	20000530 	.word	0x20000530
 8003b38:	20000534 	.word	0x20000534
 8003b3c:	20000538 	.word	0x20000538
 8003b40:	08007599 	.word	0x08007599
 8003b44:	0800404d 	.word	0x0800404d
 8003b48:	200004fc 	.word	0x200004fc
 8003b4c:	08003b55 	.word	0x08003b55
 8003b50:	08012730 	.word	0x08012730

08003b54 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003b7a:	2320      	movs	r3, #32
 8003b7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b7e:	f3bf 8f4f 	dsb	sy
}
 8003b82:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8003b84:	e00b      	b.n	8003b9e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8003b86:	4a0d      	ldr	r2, [pc, #52]	; (8003bbc <SCB_InvalidateDCache_by_Addr+0x54>)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4413      	add	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	dcf0      	bgt.n	8003b86 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003ba4:	f3bf 8f4f 	dsb	sy
}
 8003ba8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003baa:	f3bf 8f6f 	isb	sy
}
 8003bae:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <HAL_ETH_RxCpltCallback+0x1c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fe19 	bl	8004804 <osSemaphoreRelease>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20004ed4 	.word	0x20004ed4

08003be0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <HAL_ETH_TxCpltCallback+0x1c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fe09 	bl	8004804 <osSemaphoreRelease>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20004ed8 	.word	0x20004ed8

08003c00 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7fe f8d9 	bl	8001dc0 <HAL_ETH_GetDMAError>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c14:	2b80      	cmp	r3, #128	; 0x80
 8003c16:	d104      	bne.n	8003c22 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <HAL_ETH_ErrorCallback+0x2c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fdf1 	bl	8004804 <osSemaphoreRelease>
  }
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20004ed4 	.word	0x20004ed4

08003c30 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003c30:	b5b0      	push	{r4, r5, r7, lr}
 8003c32:	b0a8      	sub	sp, #160	; 0xa0
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8003c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c4e:	2264      	movs	r2, #100	; 0x64
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f00d fd7f 	bl	8011756 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003c58:	4b85      	ldr	r3, [pc, #532]	; (8003e70 <low_level_init+0x240>)
 8003c5a:	4a86      	ldr	r2, [pc, #536]	; (8003e74 <low_level_init+0x244>)
 8003c5c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8003c6a:	23e1      	movs	r3, #225	; 0xe1
 8003c6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8003c70:	2300      	movs	r3, #0
 8003c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8003c76:	2300      	movs	r3, #0
 8003c78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8003c82:	4a7b      	ldr	r2, [pc, #492]	; (8003e70 <low_level_init+0x240>)
 8003c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c88:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003c8a:	4b79      	ldr	r3, [pc, #484]	; (8003e70 <low_level_init+0x240>)
 8003c8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c90:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003c92:	4b77      	ldr	r3, [pc, #476]	; (8003e70 <low_level_init+0x240>)
 8003c94:	4a78      	ldr	r2, [pc, #480]	; (8003e78 <low_level_init+0x248>)
 8003c96:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003c98:	4b75      	ldr	r3, [pc, #468]	; (8003e70 <low_level_init+0x240>)
 8003c9a:	4a78      	ldr	r2, [pc, #480]	; (8003e7c <low_level_init+0x24c>)
 8003c9c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003c9e:	4b74      	ldr	r3, [pc, #464]	; (8003e70 <low_level_init+0x240>)
 8003ca0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003ca4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003ca6:	4872      	ldr	r0, [pc, #456]	; (8003e70 <low_level_init+0x240>)
 8003ca8:	f7fd f9ec 	bl	8001084 <HAL_ETH_Init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003cb2:	2238      	movs	r2, #56	; 0x38
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	4872      	ldr	r0, [pc, #456]	; (8003e80 <low_level_init+0x250>)
 8003cb8:	f00d fd4d 	bl	8011756 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003cbc:	4b70      	ldr	r3, [pc, #448]	; (8003e80 <low_level_init+0x250>)
 8003cbe:	2221      	movs	r2, #33	; 0x21
 8003cc0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003cc2:	4b6f      	ldr	r3, [pc, #444]	; (8003e80 <low_level_init+0x250>)
 8003cc4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003cc8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003cca:	4b6d      	ldr	r3, [pc, #436]	; (8003e80 <low_level_init+0x250>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003cd0:	486c      	ldr	r0, [pc, #432]	; (8003e84 <low_level_init+0x254>)
 8003cd2:	f004 f947 	bl	8007f64 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2206      	movs	r2, #6
 8003cda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003cde:	4b64      	ldr	r3, [pc, #400]	; (8003e70 <low_level_init+0x240>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	781a      	ldrb	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003cea:	4b61      	ldr	r3, [pc, #388]	; (8003e70 <low_level_init+0x240>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	785a      	ldrb	r2, [r3, #1]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003cf6:	4b5e      	ldr	r3, [pc, #376]	; (8003e70 <low_level_init+0x240>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	789a      	ldrb	r2, [r3, #2]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003d02:	4b5b      	ldr	r3, [pc, #364]	; (8003e70 <low_level_init+0x240>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	78da      	ldrb	r2, [r3, #3]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003d0e:	4b58      	ldr	r3, [pc, #352]	; (8003e70 <low_level_init+0x240>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	791a      	ldrb	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003d1a:	4b55      	ldr	r3, [pc, #340]	; (8003e70 <low_level_init+0x240>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	795a      	ldrb	r2, [r3, #5]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003d2c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d34:	f043 030a 	orr.w	r3, r3, #10
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8003d40:	2203      	movs	r2, #3
 8003d42:	2100      	movs	r1, #0
 8003d44:	2001      	movs	r0, #1
 8003d46:	f001 f80f 	bl	8004d68 <xQueueGenericCreate>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4a4e      	ldr	r2, [pc, #312]	; (8003e88 <low_level_init+0x258>)
 8003d4e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8003d50:	2203      	movs	r2, #3
 8003d52:	2100      	movs	r1, #0
 8003d54:	2001      	movs	r0, #1
 8003d56:	f001 f807 	bl	8004d68 <xQueueGenericCreate>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4a4b      	ldr	r2, [pc, #300]	; (8003e8c <low_level_init+0x25c>)
 8003d5e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003d60:	4b4b      	ldr	r3, [pc, #300]	; (8003e90 <low_level_init+0x260>)
 8003d62:	f107 0408 	add.w	r4, r7, #8
 8003d66:	461d      	mov	r5, r3
 8003d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8003d74:	f107 0308 	add.w	r3, r7, #8
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fbf8 	bl	8004570 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003d80:	4944      	ldr	r1, [pc, #272]	; (8003e94 <low_level_init+0x264>)
 8003d82:	4845      	ldr	r0, [pc, #276]	; (8003e98 <low_level_init+0x268>)
 8003d84:	f7fc fee9 	bl	8000b5a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8003d88:	4843      	ldr	r0, [pc, #268]	; (8003e98 <low_level_init+0x268>)
 8003d8a:	f7fc ff18 	bl	8000bbe <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8003d8e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d165      	bne.n	8003e62 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003d96:	4840      	ldr	r0, [pc, #256]	; (8003e98 <low_level_init+0x268>)
 8003d98:	f7fc ffb9 	bl	8000d0e <LAN8742_GetLinkState>
 8003d9c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003da0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	dc06      	bgt.n	8003db6 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f004 fcb5 	bl	8008718 <netif_set_link_down>
      netif_set_down(netif);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f004 fc4c 	bl	800864c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003db4:	e057      	b.n	8003e66 <low_level_init+0x236>
      switch (PHYLinkState)
 8003db6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dba:	3b02      	subs	r3, #2
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d82b      	bhi.n	8003e18 <low_level_init+0x1e8>
 8003dc0:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <low_level_init+0x198>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003dd9 	.word	0x08003dd9
 8003dcc:	08003deb 	.word	0x08003deb
 8003dd0:	08003dfb 	.word	0x08003dfb
 8003dd4:	08003e0b 	.word	0x08003e0b
        duplex = ETH_FULLDUPLEX_MODE;
 8003dd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ddc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8003de0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8003de8:	e01f      	b.n	8003e2a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8003df0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8003df8:	e017      	b.n	8003e2a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8003dfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8003e08:	e00f      	b.n	8003e2a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8003e16:	e008      	b.n	8003e2a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8003e18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8003e20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8003e28:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e2e:	4619      	mov	r1, r3
 8003e30:	480f      	ldr	r0, [pc, #60]	; (8003e70 <low_level_init+0x240>)
 8003e32:	f7fd fe6b 	bl	8001b0c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8003e36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e3a:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8003e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e40:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e46:	4619      	mov	r1, r3
 8003e48:	4809      	ldr	r0, [pc, #36]	; (8003e70 <low_level_init+0x240>)
 8003e4a:	f7fd ff49 	bl	8001ce0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8003e4e:	4808      	ldr	r0, [pc, #32]	; (8003e70 <low_level_init+0x240>)
 8003e50:	f7fd f9f4 	bl	800123c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f004 fb8d 	bl	8008574 <netif_set_up>
    netif_set_link_up(netif);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f004 fc28 	bl	80086b0 <netif_set_link_up>
}
 8003e60:	e001      	b.n	8003e66 <low_level_init+0x236>
    Error_Handler();
 8003e62:	f7fc fca3 	bl	80007ac <Error_Handler>
}
 8003e66:	bf00      	nop
 8003e68:	37a0      	adds	r7, #160	; 0xa0
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20004edc 	.word	0x20004edc
 8003e74:	40028000 	.word	0x40028000
 8003e78:	20000134 	.word	0x20000134
 8003e7c:	20000094 	.word	0x20000094
 8003e80:	20004f8c 	.word	0x20004f8c
 8003e84:	0801526c 	.word	0x0801526c
 8003e88:	20004ed4 	.word	0x20004ed4
 8003e8c:	20004ed8 	.word	0x20004ed8
 8003e90:	08012754 	.word	0x08012754
 8003e94:	2000000c 	.word	0x2000000c
 8003e98:	20004fc4 	.word	0x20004fc4

08003e9c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b092      	sub	sp, #72	; 0x48
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003eb4:	f107 030c 	add.w	r3, r7, #12
 8003eb8:	2230      	movs	r2, #48	; 0x30
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f00d fc4a 	bl	8011756 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003ec2:	f107 030c 	add.w	r3, r7, #12
 8003ec6:	2230      	movs	r2, #48	; 0x30
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f00d fc43 	bl	8011756 <memset>

  for(q = p; q != NULL; q = q->next)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ed4:	e045      	b.n	8003f62 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d902      	bls.n	8003ee2 <low_level_output+0x46>
      return ERR_IF;
 8003edc:	f06f 030b 	mvn.w	r3, #11
 8003ee0:	e065      	b.n	8003fae <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8003ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ee8:	4613      	mov	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	3348      	adds	r3, #72	; 0x48
 8003ef2:	443b      	add	r3, r7
 8003ef4:	3b3c      	subs	r3, #60	; 0x3c
 8003ef6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003efa:	895b      	ldrh	r3, [r3, #10]
 8003efc:	4619      	mov	r1, r3
 8003efe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f00:	4613      	mov	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	3348      	adds	r3, #72	; 0x48
 8003f0a:	443b      	add	r3, r7
 8003f0c:	3b38      	subs	r3, #56	; 0x38
 8003f0e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d011      	beq.n	8003f3a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f18:	1e5a      	subs	r2, r3, #1
 8003f1a:	f107 000c 	add.w	r0, r7, #12
 8003f1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f20:	460b      	mov	r3, r1
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	440b      	add	r3, r1
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	18c1      	adds	r1, r0, r3
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	3348      	adds	r3, #72	; 0x48
 8003f34:	443b      	add	r3, r7
 8003f36:	3b34      	subs	r3, #52	; 0x34
 8003f38:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f44:	4613      	mov	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	3348      	adds	r3, #72	; 0x48
 8003f4e:	443b      	add	r3, r7
 8003f50:	3b34      	subs	r3, #52	; 0x34
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f58:	3301      	adds	r3, #1
 8003f5a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	643b      	str	r3, [r7, #64]	; 0x40
 8003f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1b6      	bne.n	8003ed6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	891b      	ldrh	r3, [r3, #8]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <low_level_output+0x11c>)
 8003f70:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003f72:	4a11      	ldr	r2, [pc, #68]	; (8003fb8 <low_level_output+0x11c>)
 8003f74:	f107 030c 	add.w	r3, r7, #12
 8003f78:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003f7a:	4a0f      	ldr	r2, [pc, #60]	; (8003fb8 <low_level_output+0x11c>)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8003f80:	6838      	ldr	r0, [r7, #0]
 8003f82:	f005 f84d 	bl	8009020 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8003f86:	490c      	ldr	r1, [pc, #48]	; (8003fb8 <low_level_output+0x11c>)
 8003f88:	480c      	ldr	r0, [pc, #48]	; (8003fbc <low_level_output+0x120>)
 8003f8a:	f7fd fa65 	bl	8001458 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8003f8e:	bf00      	nop
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <low_level_output+0x124>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f04f 31ff 	mov.w	r1, #4294967295
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fbe5 	bl	8004768 <osSemaphoreWait>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f5      	bne.n	8003f90 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8003fa4:	4805      	ldr	r0, [pc, #20]	; (8003fbc <low_level_output+0x120>)
 8003fa6:	f7fd fbeb 	bl	8001780 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8003faa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3748      	adds	r7, #72	; 0x48
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20004f8c 	.word	0x20004f8c
 8003fbc:	20004edc 	.word	0x20004edc
 8003fc0:	20004ed8 	.word	0x20004ed8

08003fc4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003fd0:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <low_level_input+0x2c>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003fd8:	f107 030c 	add.w	r3, r7, #12
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4805      	ldr	r0, [pc, #20]	; (8003ff4 <low_level_input+0x30>)
 8003fe0:	f7fd fa96 	bl	8001510 <HAL_ETH_ReadData>
  }

  return p;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20004ed0 	.word	0x20004ed0
 8003ff4:	20004edc 	.word	0x20004edc

08003ff8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <ethernetif_input+0x50>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f04f 31ff 	mov.w	r1, #4294967295
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fba9 	bl	8004768 <osSemaphoreWait>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f5      	bne.n	8004008 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800401c:	68b8      	ldr	r0, [r7, #8]
 800401e:	f7ff ffd1 	bl	8003fc4 <low_level_input>
 8004022:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	68b9      	ldr	r1, [r7, #8]
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	4798      	blx	r3
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f004 ff4a 	bl	8008ed4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1ea      	bne.n	800401c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004046:	e7df      	b.n	8004008 <ethernetif_input+0x10>
 8004048:	20004ed4 	.word	0x20004ed4

0800404c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <ethernetif_init+0x1c>
 800405a:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <ethernetif_init+0x48>)
 800405c:	f240 12ef 	movw	r2, #495	; 0x1ef
 8004060:	490d      	ldr	r1, [pc, #52]	; (8004098 <ethernetif_init+0x4c>)
 8004062:	480e      	ldr	r0, [pc, #56]	; (800409c <ethernetif_init+0x50>)
 8004064:	f00d fc14 	bl	8011890 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2273      	movs	r2, #115	; 0x73
 800406c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2274      	movs	r2, #116	; 0x74
 8004074:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <ethernetif_init+0x54>)
 800407c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <ethernetif_init+0x58>)
 8004082:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff fdd3 	bl	8003c30 <low_level_init>

  return ERR_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	08012770 	.word	0x08012770
 8004098:	0801278c 	.word	0x0801278c
 800409c:	0801279c 	.word	0x0801279c
 80040a0:	0800f5c1 	.word	0x0800f5c1
 80040a4:	08003e9d 	.word	0x08003e9d

080040a8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80040b4:	68f9      	ldr	r1, [r7, #12]
 80040b6:	4809      	ldr	r0, [pc, #36]	; (80040dc <pbuf_free_custom+0x34>)
 80040b8:	f004 f844 	bl	8008144 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80040bc:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <pbuf_free_custom+0x38>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d107      	bne.n	80040d4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <pbuf_free_custom+0x38>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <pbuf_free_custom+0x3c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fb98 	bl	8004804 <osSemaphoreRelease>
  }
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	0801526c 	.word	0x0801526c
 80040e0:	20004ed0 	.word	0x20004ed0
 80040e4:	20004ed4 	.word	0x20004ed4

080040e8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80040ec:	f7fc feb8 	bl	8000e60 <HAL_GetTick>
 80040f0:	4603      	mov	r3, r0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08e      	sub	sp, #56	; 0x38
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	609a      	str	r2, [r3, #8]
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a44      	ldr	r2, [pc, #272]	; (8004228 <HAL_ETH_MspInit+0x130>)
 8004116:	4293      	cmp	r3, r2
 8004118:	f040 8081 	bne.w	800421e <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800411c:	4b43      	ldr	r3, [pc, #268]	; (800422c <HAL_ETH_MspInit+0x134>)
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	4a42      	ldr	r2, [pc, #264]	; (800422c <HAL_ETH_MspInit+0x134>)
 8004122:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004126:	6313      	str	r3, [r2, #48]	; 0x30
 8004128:	4b40      	ldr	r3, [pc, #256]	; (800422c <HAL_ETH_MspInit+0x134>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004130:	623b      	str	r3, [r7, #32]
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	4b3d      	ldr	r3, [pc, #244]	; (800422c <HAL_ETH_MspInit+0x134>)
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	4a3c      	ldr	r2, [pc, #240]	; (800422c <HAL_ETH_MspInit+0x134>)
 800413a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800413e:	6313      	str	r3, [r2, #48]	; 0x30
 8004140:	4b3a      	ldr	r3, [pc, #232]	; (800422c <HAL_ETH_MspInit+0x134>)
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4b37      	ldr	r3, [pc, #220]	; (800422c <HAL_ETH_MspInit+0x134>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	4a36      	ldr	r2, [pc, #216]	; (800422c <HAL_ETH_MspInit+0x134>)
 8004152:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004156:	6313      	str	r3, [r2, #48]	; 0x30
 8004158:	4b34      	ldr	r3, [pc, #208]	; (800422c <HAL_ETH_MspInit+0x134>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004164:	4b31      	ldr	r3, [pc, #196]	; (800422c <HAL_ETH_MspInit+0x134>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	4a30      	ldr	r2, [pc, #192]	; (800422c <HAL_ETH_MspInit+0x134>)
 800416a:	f043 0304 	orr.w	r3, r3, #4
 800416e:	6313      	str	r3, [r2, #48]	; 0x30
 8004170:	4b2e      	ldr	r3, [pc, #184]	; (800422c <HAL_ETH_MspInit+0x134>)
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800417c:	4b2b      	ldr	r3, [pc, #172]	; (800422c <HAL_ETH_MspInit+0x134>)
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	4a2a      	ldr	r2, [pc, #168]	; (800422c <HAL_ETH_MspInit+0x134>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6313      	str	r3, [r2, #48]	; 0x30
 8004188:	4b28      	ldr	r3, [pc, #160]	; (800422c <HAL_ETH_MspInit+0x134>)
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_ETH_MspInit+0x134>)
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	4a24      	ldr	r2, [pc, #144]	; (800422c <HAL_ETH_MspInit+0x134>)
 800419a:	f043 0302 	orr.w	r3, r3, #2
 800419e:	6313      	str	r3, [r2, #48]	; 0x30
 80041a0:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_ETH_MspInit+0x134>)
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80041ac:	2332      	movs	r3, #50	; 0x32
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b0:	2302      	movs	r3, #2
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b8:	2303      	movs	r3, #3
 80041ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041bc:	230b      	movs	r3, #11
 80041be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041c4:	4619      	mov	r1, r3
 80041c6:	481a      	ldr	r0, [pc, #104]	; (8004230 <HAL_ETH_MspInit+0x138>)
 80041c8:	f7fe fa0a 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80041cc:	2386      	movs	r3, #134	; 0x86
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d0:	2302      	movs	r3, #2
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041d8:	2303      	movs	r3, #3
 80041da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041dc:	230b      	movs	r3, #11
 80041de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041e4:	4619      	mov	r1, r3
 80041e6:	4813      	ldr	r0, [pc, #76]	; (8004234 <HAL_ETH_MspInit+0x13c>)
 80041e8:	f7fe f9fa 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80041ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f2:	2302      	movs	r3, #2
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041fa:	2303      	movs	r3, #3
 80041fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041fe:	230b      	movs	r3, #11
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004206:	4619      	mov	r1, r3
 8004208:	480b      	ldr	r0, [pc, #44]	; (8004238 <HAL_ETH_MspInit+0x140>)
 800420a:	f7fe f9e9 	bl	80025e0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800420e:	2200      	movs	r2, #0
 8004210:	2105      	movs	r1, #5
 8004212:	203d      	movs	r0, #61	; 0x3d
 8004214:	f7fc ff0c 	bl	8001030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004218:	203d      	movs	r0, #61	; 0x3d
 800421a:	f7fc ff25 	bl	8001068 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800421e:	bf00      	nop
 8004220:	3738      	adds	r7, #56	; 0x38
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40028000 	.word	0x40028000
 800422c:	40023800 	.word	0x40023800
 8004230:	40020800 	.word	0x40020800
 8004234:	40020000 	.word	0x40020000
 8004238:	40020400 	.word	0x40020400

0800423c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004240:	4802      	ldr	r0, [pc, #8]	; (800424c <ETH_PHY_IO_Init+0x10>)
 8004242:	f7fd fd67 	bl	8001d14 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20004edc 	.word	0x20004edc

08004250 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return 0;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	68f9      	ldr	r1, [r7, #12]
 8004272:	4807      	ldr	r0, [pc, #28]	; (8004290 <ETH_PHY_IO_ReadReg+0x30>)
 8004274:	f7fd fbb6 	bl	80019e4 <HAL_ETH_ReadPHYRegister>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800427e:	f04f 33ff 	mov.w	r3, #4294967295
 8004282:	e000      	b.n	8004286 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20004edc 	.word	0x20004edc

08004294 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	68f9      	ldr	r1, [r7, #12]
 80042a6:	4807      	ldr	r0, [pc, #28]	; (80042c4 <ETH_PHY_IO_WriteReg+0x30>)
 80042a8:	f7fd fbe7 	bl	8001a7a <HAL_ETH_WritePHYRegister>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80042b2:	f04f 33ff 	mov.w	r3, #4294967295
 80042b6:	e000      	b.n	80042ba <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20004edc 	.word	0x20004edc

080042c8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80042cc:	f7fc fdc8 	bl	8000e60 <HAL_GetTick>
 80042d0:	4603      	mov	r3, r0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b0a0      	sub	sp, #128	; 0x80
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80042e0:	f107 0308 	add.w	r3, r7, #8
 80042e4:	2264      	movs	r2, #100	; 0x64
 80042e6:	2100      	movs	r1, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f00d fa34 	bl	8011756 <memset>
  int32_t PHYLinkState = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042f6:	2300      	movs	r3, #0
 80042f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80042fa:	2300      	movs	r3, #0
 80042fc:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004302:	483a      	ldr	r0, [pc, #232]	; (80043ec <ethernet_link_thread+0x114>)
 8004304:	f7fc fd03 	bl	8000d0e <LAN8742_GetLinkState>
 8004308:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800430a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004310:	089b      	lsrs	r3, r3, #2
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00c      	beq.n	8004336 <ethernet_link_thread+0x5e>
 800431c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800431e:	2b01      	cmp	r3, #1
 8004320:	dc09      	bgt.n	8004336 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004322:	4833      	ldr	r0, [pc, #204]	; (80043f0 <ethernet_link_thread+0x118>)
 8004324:	f7fd f818 	bl	8001358 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004328:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800432a:	f004 f98f 	bl	800864c <netif_set_down>
    netif_set_link_down(netif);
 800432e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004330:	f004 f9f2 	bl	8008718 <netif_set_link_down>
 8004334:	e055      	b.n	80043e2 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004338:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d14e      	bne.n	80043e2 <ethernet_link_thread+0x10a>
 8004344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004346:	2b01      	cmp	r3, #1
 8004348:	dd4b      	ble.n	80043e2 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800434a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800434c:	3b02      	subs	r3, #2
 800434e:	2b03      	cmp	r3, #3
 8004350:	d82a      	bhi.n	80043a8 <ethernet_link_thread+0xd0>
 8004352:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <ethernet_link_thread+0x80>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	08004369 	.word	0x08004369
 800435c:	0800437b 	.word	0x0800437b
 8004360:	0800438b 	.word	0x0800438b
 8004364:	0800439b 	.word	0x0800439b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004368:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800436c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800436e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004372:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004374:	2301      	movs	r3, #1
 8004376:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004378:	e017      	b.n	80043aa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800437a:	2300      	movs	r3, #0
 800437c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800437e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004382:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004384:	2301      	movs	r3, #1
 8004386:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004388:	e00f      	b.n	80043aa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800438a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800438e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004390:	2300      	movs	r3, #0
 8004392:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004394:	2301      	movs	r3, #1
 8004396:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004398:	e007      	b.n	80043aa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800439a:	2300      	movs	r3, #0
 800439c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800439e:	2300      	movs	r3, #0
 80043a0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80043a6:	e000      	b.n	80043aa <ethernet_link_thread+0xd2>
    default:
      break;
 80043a8:	bf00      	nop
    }

    if(linkchanged)
 80043aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d018      	beq.n	80043e2 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80043b0:	f107 0308 	add.w	r3, r7, #8
 80043b4:	4619      	mov	r1, r3
 80043b6:	480e      	ldr	r0, [pc, #56]	; (80043f0 <ethernet_link_thread+0x118>)
 80043b8:	f7fd fba8 	bl	8001b0c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80043bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043be:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80043c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043c2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80043c4:	f107 0308 	add.w	r3, r7, #8
 80043c8:	4619      	mov	r1, r3
 80043ca:	4809      	ldr	r0, [pc, #36]	; (80043f0 <ethernet_link_thread+0x118>)
 80043cc:	f7fd fc88 	bl	8001ce0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80043d0:	4807      	ldr	r0, [pc, #28]	; (80043f0 <ethernet_link_thread+0x118>)
 80043d2:	f7fc fed3 	bl	800117c <HAL_ETH_Start>
      netif_set_up(netif);
 80043d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80043d8:	f004 f8cc 	bl	8008574 <netif_set_up>
      netif_set_link_up(netif);
 80043dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80043de:	f004 f967 	bl	80086b0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80043e2:	2064      	movs	r0, #100	; 0x64
 80043e4:	f000 f910 	bl	8004608 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80043e8:	e78b      	b.n	8004302 <ethernet_link_thread+0x2a>
 80043ea:	bf00      	nop
 80043ec:	20004fc4 	.word	0x20004fc4
 80043f0:	20004edc 	.word	0x20004edc

080043f4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80043fc:	4812      	ldr	r0, [pc, #72]	; (8004448 <HAL_ETH_RxAllocateCallback+0x54>)
 80043fe:	f003 fe2d 	bl	800805c <memp_malloc_pool>
 8004402:	60f8      	str	r0, [r7, #12]
  if (p)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d014      	beq.n	8004434 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f103 0220 	add.w	r2, r3, #32
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4a0d      	ldr	r2, [pc, #52]	; (800444c <HAL_ETH_RxAllocateCallback+0x58>)
 8004418:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004422:	9201      	str	r2, [sp, #4]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2241      	movs	r2, #65	; 0x41
 800442a:	2100      	movs	r1, #0
 800442c:	2000      	movs	r0, #0
 800442e:	f004 fb97 	bl	8008b60 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004432:	e005      	b.n	8004440 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004434:	4b06      	ldr	r3, [pc, #24]	; (8004450 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	0801526c 	.word	0x0801526c
 800444c:	080040a9 	.word	0x080040a9
 8004450:	20004ed0 	.word	0x20004ed0

08004454 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3b20      	subs	r3, #32
 8004472:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2200      	movs	r2, #0
 800447e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	887a      	ldrh	r2, [r7, #2]
 8004484:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d103      	bne.n	8004496 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e003      	b.n	800449e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	e009      	b.n	80044c0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	891a      	ldrh	r2, [r3, #8]
 80044b0:	887b      	ldrh	r3, [r7, #2]
 80044b2:	4413      	add	r3, r2
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f2      	bne.n	80044ac <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80044c6:	887b      	ldrh	r3, [r7, #2]
 80044c8:	4619      	mov	r1, r3
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff fb4c 	bl	8003b68 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80044d0:	bf00      	nop
 80044d2:	3720      	adds	r7, #32
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f004 fcf7 	bl	8008ed4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80044e6:	bf00      	nop
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b085      	sub	sp, #20
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	4603      	mov	r3, r0
 80044f6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004500:	2b84      	cmp	r3, #132	; 0x84
 8004502:	d005      	beq.n	8004510 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004504:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	3303      	adds	r3, #3
 800450e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004510:	68fb      	ldr	r3, [r7, #12]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004524:	f3ef 8305 	mrs	r3, IPSR
 8004528:	607b      	str	r3, [r7, #4]
  return(result);
 800452a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
}
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004546:	f001 fc89 	bl	8005e5c <vTaskStartScheduler>
  
  return osOK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}

08004550 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004554:	f7ff ffe3 	bl	800451e <inHandlerMode>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800455e:	f001 fda7 	bl	80060b0 <xTaskGetTickCountFromISR>
 8004562:	4603      	mov	r3, r0
 8004564:	e002      	b.n	800456c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004566:	f001 fd93 	bl	8006090 <xTaskGetTickCount>
 800456a:	4603      	mov	r3, r0
  }
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}

08004570 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004572:	b089      	sub	sp, #36	; 0x24
 8004574:	af04      	add	r7, sp, #16
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d020      	beq.n	80045c4 <osThreadCreate+0x54>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01c      	beq.n	80045c4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685c      	ldr	r4, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681d      	ldr	r5, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691e      	ldr	r6, [r3, #16]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff ffa6 	bl	80044ee <makeFreeRtosPriority>
 80045a2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045ac:	9202      	str	r2, [sp, #8]
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	9100      	str	r1, [sp, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	4632      	mov	r2, r6
 80045b6:	4629      	mov	r1, r5
 80045b8:	4620      	mov	r0, r4
 80045ba:	f001 fa67 	bl	8005a8c <xTaskCreateStatic>
 80045be:	4603      	mov	r3, r0
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	e01c      	b.n	80045fe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685c      	ldr	r4, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045d0:	b29e      	uxth	r6, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff ff88 	bl	80044ee <makeFreeRtosPriority>
 80045de:	4602      	mov	r2, r0
 80045e0:	f107 030c 	add.w	r3, r7, #12
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	9200      	str	r2, [sp, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	4632      	mov	r2, r6
 80045ec:	4629      	mov	r1, r5
 80045ee:	4620      	mov	r0, r4
 80045f0:	f001 faaf 	bl	8005b52 <xTaskCreate>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d001      	beq.n	80045fe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e000      	b.n	8004600 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045fe:	68fb      	ldr	r3, [r7, #12]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004608 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <osDelay+0x16>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	e000      	b.n	8004620 <osDelay+0x18>
 800461e:	2301      	movs	r3, #1
 8004620:	4618      	mov	r0, r3
 8004622:	f001 fbe5 	bl	8005df0 <vTaskDelay>
  
  return osOK;
 8004626:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4619      	mov	r1, r3
 8004646:	2001      	movs	r0, #1
 8004648:	f000 fc21 	bl	8004e8e <xQueueCreateMutexStatic>
 800464c:	4603      	mov	r3, r0
 800464e:	e003      	b.n	8004658 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004650:	2001      	movs	r0, #1
 8004652:	f000 fc04 	bl	8004e5e <xQueueCreateMutex>
 8004656:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800466a:	2300      	movs	r3, #0
 800466c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <osMutexWait+0x18>
    return osErrorParameter;
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	e03a      	b.n	80046ee <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d103      	bne.n	800468c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004684:	f04f 33ff 	mov.w	r3, #4294967295
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	e009      	b.n	80046a0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d006      	beq.n	80046a0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <osMutexWait+0x40>
      ticks = 1;
 800469c:	2301      	movs	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80046a0:	f7ff ff3d 	bl	800451e <inHandlerMode>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d017      	beq.n	80046da <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80046aa:	f107 0308 	add.w	r3, r7, #8
 80046ae:	461a      	mov	r2, r3
 80046b0:	2100      	movs	r1, #0
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f001 f83c 	bl	8005730 <xQueueReceiveFromISR>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d001      	beq.n	80046c2 <osMutexWait+0x62>
      return osErrorOS;
 80046be:	23ff      	movs	r3, #255	; 0xff
 80046c0:	e015      	b.n	80046ee <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d011      	beq.n	80046ec <osMutexWait+0x8c>
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <osMutexWait+0x98>)
 80046ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	e008      	b.n	80046ec <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 ff13 	bl	8005508 <xQueueSemaphoreTake>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d001      	beq.n	80046ec <osMutexWait+0x8c>
    return osErrorOS;
 80046e8:	23ff      	movs	r3, #255	; 0xff
 80046ea:	e000      	b.n	80046ee <osMutexWait+0x8e>
  }
  
  return osOK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004708:	2300      	movs	r3, #0
 800470a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800470c:	f7ff ff07 	bl	800451e <inHandlerMode>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d016      	beq.n	8004744 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004716:	f107 0308 	add.w	r3, r7, #8
 800471a:	4619      	mov	r1, r3
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fd77 	bl	8005210 <xQueueGiveFromISR>
 8004722:	4603      	mov	r3, r0
 8004724:	2b01      	cmp	r3, #1
 8004726:	d001      	beq.n	800472c <osMutexRelease+0x30>
      return osErrorOS;
 8004728:	23ff      	movs	r3, #255	; 0xff
 800472a:	e017      	b.n	800475c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d013      	beq.n	800475a <osMutexRelease+0x5e>
 8004732:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <osMutexRelease+0x68>)
 8004734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	e00a      	b.n	800475a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004744:	2300      	movs	r3, #0
 8004746:	2200      	movs	r2, #0
 8004748:	2100      	movs	r1, #0
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fbba 	bl	8004ec4 <xQueueGenericSend>
 8004750:	4603      	mov	r3, r0
 8004752:	2b01      	cmp	r3, #1
 8004754:	d001      	beq.n	800475a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004756:	23ff      	movs	r3, #255	; 0xff
 8004758:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800475a:	68fb      	ldr	r3, [r7, #12]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004772:	2300      	movs	r3, #0
 8004774:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800477c:	2380      	movs	r3, #128	; 0x80
 800477e:	e03a      	b.n	80047f6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478a:	d103      	bne.n	8004794 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800478c:	f04f 33ff 	mov.w	r3, #4294967295
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	e009      	b.n	80047a8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d006      	beq.n	80047a8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <osSemaphoreWait+0x40>
      ticks = 1;
 80047a4:	2301      	movs	r3, #1
 80047a6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80047a8:	f7ff feb9 	bl	800451e <inHandlerMode>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d017      	beq.n	80047e2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80047b2:	f107 0308 	add.w	r3, r7, #8
 80047b6:	461a      	mov	r2, r3
 80047b8:	2100      	movs	r1, #0
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 ffb8 	bl	8005730 <xQueueReceiveFromISR>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d001      	beq.n	80047ca <osSemaphoreWait+0x62>
      return osErrorOS;
 80047c6:	23ff      	movs	r3, #255	; 0xff
 80047c8:	e015      	b.n	80047f6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d011      	beq.n	80047f4 <osSemaphoreWait+0x8c>
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <osSemaphoreWait+0x98>)
 80047d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	e008      	b.n	80047f4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80047e2:	68f9      	ldr	r1, [r7, #12]
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fe8f 	bl	8005508 <xQueueSemaphoreTake>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d001      	beq.n	80047f4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80047f0:	23ff      	movs	r3, #255	; 0xff
 80047f2:	e000      	b.n	80047f6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	e000ed04 	.word	0xe000ed04

08004804 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004810:	2300      	movs	r3, #0
 8004812:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004814:	f7ff fe83 	bl	800451e <inHandlerMode>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d016      	beq.n	800484c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800481e:	f107 0308 	add.w	r3, r7, #8
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fcf3 	bl	8005210 <xQueueGiveFromISR>
 800482a:	4603      	mov	r3, r0
 800482c:	2b01      	cmp	r3, #1
 800482e:	d001      	beq.n	8004834 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004830:	23ff      	movs	r3, #255	; 0xff
 8004832:	e017      	b.n	8004864 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d013      	beq.n	8004862 <osSemaphoreRelease+0x5e>
 800483a:	4b0c      	ldr	r3, [pc, #48]	; (800486c <osSemaphoreRelease+0x68>)
 800483c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	e00a      	b.n	8004862 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800484c:	2300      	movs	r3, #0
 800484e:	2200      	movs	r2, #0
 8004850:	2100      	movs	r1, #0
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fb36 	bl	8004ec4 <xQueueGenericSend>
 8004858:	4603      	mov	r3, r0
 800485a:	2b01      	cmp	r3, #1
 800485c:	d001      	beq.n	8004862 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800485e:	23ff      	movs	r3, #255	; 0xff
 8004860:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004862:	68fb      	ldr	r3, [r7, #12]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	e000ed04 	.word	0xe000ed04

08004870 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004870:	b590      	push	{r4, r7, lr}
 8004872:	b085      	sub	sp, #20
 8004874:	af02      	add	r7, sp, #8
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d011      	beq.n	80048a6 <osMessageCreate+0x36>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00d      	beq.n	80048a6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6859      	ldr	r1, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2400      	movs	r4, #0
 800489c:	9400      	str	r4, [sp, #0]
 800489e:	f000 f9e1 	bl	8004c64 <xQueueGenericCreateStatic>
 80048a2:	4603      	mov	r3, r0
 80048a4:	e008      	b.n	80048b8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	4619      	mov	r1, r3
 80048b2:	f000 fa59 	bl	8004d68 <xQueueGenericCreate>
 80048b6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd90      	pop	{r4, r7, pc}

080048c0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <osMessagePut+0x1e>
    ticks = 1;
 80048da:	2301      	movs	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80048de:	f7ff fe1e 	bl	800451e <inHandlerMode>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d018      	beq.n	800491a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80048e8:	f107 0210 	add.w	r2, r7, #16
 80048ec:	f107 0108 	add.w	r1, r7, #8
 80048f0:	2300      	movs	r3, #0
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fbec 	bl	80050d0 <xQueueGenericSendFromISR>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d001      	beq.n	8004902 <osMessagePut+0x42>
      return osErrorOS;
 80048fe:	23ff      	movs	r3, #255	; 0xff
 8004900:	e018      	b.n	8004934 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d014      	beq.n	8004932 <osMessagePut+0x72>
 8004908:	4b0c      	ldr	r3, [pc, #48]	; (800493c <osMessagePut+0x7c>)
 800490a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	e00b      	b.n	8004932 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800491a:	f107 0108 	add.w	r1, r7, #8
 800491e:	2300      	movs	r3, #0
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 face 	bl	8004ec4 <xQueueGenericSend>
 8004928:	4603      	mov	r3, r0
 800492a:	2b01      	cmp	r3, #1
 800492c:	d001      	beq.n	8004932 <osMessagePut+0x72>
      return osErrorOS;
 800492e:	23ff      	movs	r3, #255	; 0xff
 8004930:	e000      	b.n	8004934 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	e000ed04 	.word	0xe000ed04

08004940 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	b08b      	sub	sp, #44	; 0x2c
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800495a:	2380      	movs	r3, #128	; 0x80
 800495c:	617b      	str	r3, [r7, #20]
    return event;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	461c      	mov	r4, r3
 8004962:	f107 0314 	add.w	r3, r7, #20
 8004966:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800496a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800496e:	e054      	b.n	8004a1a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004970:	2300      	movs	r3, #0
 8004972:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d103      	bne.n	8004988 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004980:	f04f 33ff 	mov.w	r3, #4294967295
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
 8004986:	e009      	b.n	800499c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d006      	beq.n	800499c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <osMessageGet+0x5c>
      ticks = 1;
 8004998:	2301      	movs	r3, #1
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800499c:	f7ff fdbf 	bl	800451e <inHandlerMode>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01c      	beq.n	80049e0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80049a6:	f107 0220 	add.w	r2, r7, #32
 80049aa:	f107 0314 	add.w	r3, r7, #20
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	68b8      	ldr	r0, [r7, #8]
 80049b4:	f000 febc 	bl	8005730 <xQueueReceiveFromISR>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d102      	bne.n	80049c4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80049be:	2310      	movs	r3, #16
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e001      	b.n	80049c8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01d      	beq.n	8004a0a <osMessageGet+0xca>
 80049ce:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <osMessageGet+0xe4>)
 80049d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	e014      	b.n	8004a0a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80049e0:	f107 0314 	add.w	r3, r7, #20
 80049e4:	3304      	adds	r3, #4
 80049e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e8:	4619      	mov	r1, r3
 80049ea:	68b8      	ldr	r0, [r7, #8]
 80049ec:	f000 fca6 	bl	800533c <xQueueReceive>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d102      	bne.n	80049fc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80049f6:	2310      	movs	r3, #16
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	e006      	b.n	8004a0a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <osMessageGet+0xc6>
 8004a02:	2300      	movs	r3, #0
 8004a04:	e000      	b.n	8004a08 <osMessageGet+0xc8>
 8004a06:	2340      	movs	r3, #64	; 0x40
 8004a08:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	461c      	mov	r4, r3
 8004a0e:	f107 0314 	add.w	r3, r7, #20
 8004a12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	372c      	adds	r7, #44	; 0x2c
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd90      	pop	{r4, r7, pc}
 8004a22:	bf00      	nop
 8004a24:	e000ed04 	.word	0xe000ed04

08004a28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f103 0208 	add.w	r2, r3, #8
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f103 0208 	add.w	r2, r3, #8
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f103 0208 	add.w	r2, r3, #8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a82:	b480      	push	{r7}
 8004a84:	b085      	sub	sp, #20
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	601a      	str	r2, [r3, #0]
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d103      	bne.n	8004aea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e00c      	b.n	8004b04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3308      	adds	r3, #8
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e002      	b.n	8004af8 <vListInsert+0x2e>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d2f6      	bcs.n	8004af2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	601a      	str	r2, [r3, #0]
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6892      	ldr	r2, [r2, #8]
 8004b52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6852      	ldr	r2, [r2, #4]
 8004b5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d103      	bne.n	8004b70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	1e5a      	subs	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10c      	bne.n	8004bbe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	b672      	cpsid	i
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	b662      	cpsie	i
 8004bb8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004bbe:	f002 f8e5 	bl	8006d8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bce:	fb01 f303 	mul.w	r3, r1, r3
 8004bd2:	441a      	add	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	68f9      	ldr	r1, [r7, #12]
 8004bf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	441a      	add	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	22ff      	movs	r2, #255	; 0xff
 8004c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	22ff      	movs	r2, #255	; 0xff
 8004c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d114      	bne.n	8004c3e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01a      	beq.n	8004c52 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3310      	adds	r3, #16
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 fb9b 	bl	800635c <xTaskRemoveFromEventList>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d012      	beq.n	8004c52 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <xQueueGenericReset+0xd0>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	e009      	b.n	8004c52 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3310      	adds	r3, #16
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff fef0 	bl	8004a28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3324      	adds	r3, #36	; 0x24
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff feeb 	bl	8004a28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c52:	f002 f8cf 	bl	8006df4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c56:	2301      	movs	r3, #1
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08e      	sub	sp, #56	; 0x38
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10c      	bne.n	8004c92 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7c:	b672      	cpsid	i
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	b662      	cpsie	i
 8004c8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10c      	bne.n	8004cb2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	b672      	cpsid	i
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	b662      	cpsie	i
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cae:	bf00      	nop
 8004cb0:	e7fe      	b.n	8004cb0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <xQueueGenericCreateStatic+0x5a>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <xQueueGenericCreateStatic+0x5e>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <xQueueGenericCreateStatic+0x60>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10c      	bne.n	8004ce2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	b672      	cpsid	i
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	b662      	cpsie	i
 8004cdc:	623b      	str	r3, [r7, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d102      	bne.n	8004cee <xQueueGenericCreateStatic+0x8a>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <xQueueGenericCreateStatic+0x8e>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <xQueueGenericCreateStatic+0x90>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10c      	bne.n	8004d12 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	b672      	cpsid	i
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	b662      	cpsie	i
 8004d0c:	61fb      	str	r3, [r7, #28]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d12:	2348      	movs	r3, #72	; 0x48
 8004d14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b48      	cmp	r3, #72	; 0x48
 8004d1a:	d00c      	beq.n	8004d36 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	b672      	cpsid	i
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	b662      	cpsie	i
 8004d30:	61bb      	str	r3, [r7, #24]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00d      	beq.n	8004d5e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	4613      	mov	r3, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f847 	bl	8004dec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3730      	adds	r7, #48	; 0x30
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	; 0x28
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	4613      	mov	r3, r2
 8004d74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10c      	bne.n	8004d96 <xQueueGenericCreate+0x2e>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	b672      	cpsid	i
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	b662      	cpsie	i
 8004d90:	613b      	str	r3, [r7, #16]
}
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	e004      	b.n	8004dac <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	fb02 f303 	mul.w	r3, r2, r3
 8004daa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	3348      	adds	r3, #72	; 0x48
 8004db0:	4618      	mov	r0, r3
 8004db2:	f002 f917 	bl	8006fe4 <pvPortMalloc>
 8004db6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d011      	beq.n	8004de2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	3348      	adds	r3, #72	; 0x48
 8004dc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dd0:	79fa      	ldrb	r2, [r7, #7]
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f805 	bl	8004dec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004de2:	69bb      	ldr	r3, [r7, #24]
	}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	e002      	b.n	8004e0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	69b8      	ldr	r0, [r7, #24]
 8004e1e:	f7ff feb7 	bl	8004b90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e22:	bf00      	nop
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b082      	sub	sp, #8
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00e      	beq.n	8004e56 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2100      	movs	r1, #0
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f837 	bl	8004ec4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004e56:	bf00      	nop
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b086      	sub	sp, #24
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	4603      	mov	r3, r0
 8004e66:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	461a      	mov	r2, r3
 8004e74:	6939      	ldr	r1, [r7, #16]
 8004e76:	6978      	ldr	r0, [r7, #20]
 8004e78:	f7ff ff76 	bl	8004d68 <xQueueGenericCreate>
 8004e7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff ffd3 	bl	8004e2a <prvInitialiseMutex>

		return xNewQueue;
 8004e84:	68fb      	ldr	r3, [r7, #12]
	}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b088      	sub	sp, #32
 8004e92:	af02      	add	r7, sp, #8
 8004e94:	4603      	mov	r3, r0
 8004e96:	6039      	str	r1, [r7, #0]
 8004e98:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	6939      	ldr	r1, [r7, #16]
 8004eac:	6978      	ldr	r0, [r7, #20]
 8004eae:	f7ff fed9 	bl	8004c64 <xQueueGenericCreateStatic>
 8004eb2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff ffb8 	bl	8004e2a <prvInitialiseMutex>

		return xNewQueue;
 8004eba:	68fb      	ldr	r3, [r7, #12]
	}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08e      	sub	sp, #56	; 0x38
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10c      	bne.n	8004efa <xQueueGenericSend+0x36>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	b672      	cpsid	i
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	b662      	cpsie	i
 8004ef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <xQueueGenericSend+0x44>
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <xQueueGenericSend+0x48>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <xQueueGenericSend+0x4a>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10c      	bne.n	8004f2c <xQueueGenericSend+0x68>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	b672      	cpsid	i
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	b662      	cpsie	i
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f28:	bf00      	nop
 8004f2a:	e7fe      	b.n	8004f2a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d103      	bne.n	8004f3a <xQueueGenericSend+0x76>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <xQueueGenericSend+0x7a>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <xQueueGenericSend+0x7c>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10c      	bne.n	8004f5e <xQueueGenericSend+0x9a>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	b672      	cpsid	i
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	b662      	cpsie	i
 8004f58:	623b      	str	r3, [r7, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f5e:	f001 fbc5 	bl	80066ec <xTaskGetSchedulerState>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d102      	bne.n	8004f6e <xQueueGenericSend+0xaa>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <xQueueGenericSend+0xae>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <xQueueGenericSend+0xb0>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10c      	bne.n	8004f92 <xQueueGenericSend+0xce>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	b672      	cpsid	i
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	b662      	cpsie	i
 8004f8c:	61fb      	str	r3, [r7, #28]
}
 8004f8e:	bf00      	nop
 8004f90:	e7fe      	b.n	8004f90 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f92:	f001 fefb 	bl	8006d8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d302      	bcc.n	8004fa8 <xQueueGenericSend+0xe4>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d129      	bne.n	8004ffc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fae:	f000 fc5d 	bl	800586c <prvCopyDataToQueue>
 8004fb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d010      	beq.n	8004fde <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	3324      	adds	r3, #36	; 0x24
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 f9cb 	bl	800635c <xTaskRemoveFromEventList>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d013      	beq.n	8004ff4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fcc:	4b3f      	ldr	r3, [pc, #252]	; (80050cc <xQueueGenericSend+0x208>)
 8004fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	e00a      	b.n	8004ff4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fe4:	4b39      	ldr	r3, [pc, #228]	; (80050cc <xQueueGenericSend+0x208>)
 8004fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ff4:	f001 fefe 	bl	8006df4 <vPortExitCritical>
				return pdPASS;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e063      	b.n	80050c4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005002:	f001 fef7 	bl	8006df4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005006:	2300      	movs	r3, #0
 8005008:	e05c      	b.n	80050c4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800500a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005010:	f107 0314 	add.w	r3, r7, #20
 8005014:	4618      	mov	r0, r3
 8005016:	f001 fa05 	bl	8006424 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800501a:	2301      	movs	r3, #1
 800501c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800501e:	f001 fee9 	bl	8006df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005022:	f000 ff89 	bl	8005f38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005026:	f001 feb1 	bl	8006d8c <vPortEnterCritical>
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005030:	b25b      	sxtb	r3, r3
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d103      	bne.n	8005040 <xQueueGenericSend+0x17c>
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005046:	b25b      	sxtb	r3, r3
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d103      	bne.n	8005056 <xQueueGenericSend+0x192>
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005056:	f001 fecd 	bl	8006df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800505a:	1d3a      	adds	r2, r7, #4
 800505c:	f107 0314 	add.w	r3, r7, #20
 8005060:	4611      	mov	r1, r2
 8005062:	4618      	mov	r0, r3
 8005064:	f001 f9f4 	bl	8006450 <xTaskCheckForTimeOut>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d124      	bne.n	80050b8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800506e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005070:	f000 fcf4 	bl	8005a5c <prvIsQueueFull>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d018      	beq.n	80050ac <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	3310      	adds	r3, #16
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f001 f944 	bl	8006310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800508a:	f000 fc7f 	bl	800598c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800508e:	f000 ff61 	bl	8005f54 <xTaskResumeAll>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	f47f af7c 	bne.w	8004f92 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800509a:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <xQueueGenericSend+0x208>)
 800509c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	e772      	b.n	8004f92 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ae:	f000 fc6d 	bl	800598c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050b2:	f000 ff4f 	bl	8005f54 <xTaskResumeAll>
 80050b6:	e76c      	b.n	8004f92 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ba:	f000 fc67 	bl	800598c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050be:	f000 ff49 	bl	8005f54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3738      	adds	r7, #56	; 0x38
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	e000ed04 	.word	0xe000ed04

080050d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08e      	sub	sp, #56	; 0x38
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10c      	bne.n	8005102 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	b672      	cpsid	i
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	b662      	cpsie	i
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d103      	bne.n	8005110 <xQueueGenericSendFromISR+0x40>
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <xQueueGenericSendFromISR+0x44>
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <xQueueGenericSendFromISR+0x46>
 8005114:	2300      	movs	r3, #0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10c      	bne.n	8005134 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	b672      	cpsid	i
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	b662      	cpsie	i
 800512e:	623b      	str	r3, [r7, #32]
}
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d103      	bne.n	8005142 <xQueueGenericSendFromISR+0x72>
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <xQueueGenericSendFromISR+0x76>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <xQueueGenericSendFromISR+0x78>
 8005146:	2300      	movs	r3, #0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10c      	bne.n	8005166 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	b672      	cpsid	i
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	b662      	cpsie	i
 8005160:	61fb      	str	r3, [r7, #28]
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005166:	f001 fef9 	bl	8006f5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800516a:	f3ef 8211 	mrs	r2, BASEPRI
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	b672      	cpsid	i
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	b662      	cpsie	i
 8005182:	61ba      	str	r2, [r7, #24]
 8005184:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005186:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005188:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	429a      	cmp	r2, r3
 8005194:	d302      	bcc.n	800519c <xQueueGenericSendFromISR+0xcc>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d12c      	bne.n	80051f6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ac:	f000 fb5e 	bl	800586c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80051b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b8:	d112      	bne.n	80051e0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d016      	beq.n	80051f0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	3324      	adds	r3, #36	; 0x24
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 f8c8 	bl	800635c <xTaskRemoveFromEventList>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00e      	beq.n	80051f0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00b      	beq.n	80051f0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	e007      	b.n	80051f0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051e4:	3301      	adds	r3, #1
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	b25a      	sxtb	r2, r3
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051f0:	2301      	movs	r3, #1
 80051f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80051f4:	e001      	b.n	80051fa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	637b      	str	r3, [r7, #52]	; 0x34
 80051fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005204:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005208:	4618      	mov	r0, r3
 800520a:	3738      	adds	r7, #56	; 0x38
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08e      	sub	sp, #56	; 0x38
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10c      	bne.n	800523e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	b672      	cpsid	i
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	b662      	cpsie	i
 8005238:	623b      	str	r3, [r7, #32]
}
 800523a:	bf00      	nop
 800523c:	e7fe      	b.n	800523c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00c      	beq.n	8005260 <xQueueGiveFromISR+0x50>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	b672      	cpsid	i
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	b662      	cpsie	i
 800525a:	61fb      	str	r3, [r7, #28]
}
 800525c:	bf00      	nop
 800525e:	e7fe      	b.n	800525e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d103      	bne.n	8005270 <xQueueGiveFromISR+0x60>
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <xQueueGiveFromISR+0x64>
 8005270:	2301      	movs	r3, #1
 8005272:	e000      	b.n	8005276 <xQueueGiveFromISR+0x66>
 8005274:	2300      	movs	r3, #0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10c      	bne.n	8005294 <xQueueGiveFromISR+0x84>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	b672      	cpsid	i
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	b662      	cpsie	i
 800528e:	61bb      	str	r3, [r7, #24]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005294:	f001 fe62 	bl	8006f5c <vPortValidateInterruptPriority>
	__asm volatile
 8005298:	f3ef 8211 	mrs	r2, BASEPRI
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	b672      	cpsid	i
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	b662      	cpsie	i
 80052b0:	617a      	str	r2, [r7, #20]
 80052b2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80052b4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d22b      	bcs.n	8005320 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80052de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e2:	d112      	bne.n	800530a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d016      	beq.n	800531a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	3324      	adds	r3, #36	; 0x24
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 f833 	bl	800635c <xTaskRemoveFromEventList>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00e      	beq.n	800531a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00b      	beq.n	800531a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2201      	movs	r2, #1
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e007      	b.n	800531a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800530a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800530e:	3301      	adds	r3, #1
 8005310:	b2db      	uxtb	r3, r3
 8005312:	b25a      	sxtb	r2, r3
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800531a:	2301      	movs	r3, #1
 800531c:	637b      	str	r3, [r7, #52]	; 0x34
 800531e:	e001      	b.n	8005324 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005320:	2300      	movs	r3, #0
 8005322:	637b      	str	r3, [r7, #52]	; 0x34
 8005324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005326:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f383 8811 	msr	BASEPRI, r3
}
 800532e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005332:	4618      	mov	r0, r3
 8005334:	3738      	adds	r7, #56	; 0x38
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b08c      	sub	sp, #48	; 0x30
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005348:	2300      	movs	r3, #0
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10c      	bne.n	8005370 <xQueueReceive+0x34>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	b672      	cpsid	i
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	b662      	cpsie	i
 800536a:	623b      	str	r3, [r7, #32]
}
 800536c:	bf00      	nop
 800536e:	e7fe      	b.n	800536e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d103      	bne.n	800537e <xQueueReceive+0x42>
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <xQueueReceive+0x46>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <xQueueReceive+0x48>
 8005382:	2300      	movs	r3, #0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10c      	bne.n	80053a2 <xQueueReceive+0x66>
	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	b672      	cpsid	i
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	b662      	cpsie	i
 800539c:	61fb      	str	r3, [r7, #28]
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053a2:	f001 f9a3 	bl	80066ec <xTaskGetSchedulerState>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <xQueueReceive+0x76>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <xQueueReceive+0x7a>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <xQueueReceive+0x7c>
 80053b6:	2300      	movs	r3, #0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10c      	bne.n	80053d6 <xQueueReceive+0x9a>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	b672      	cpsid	i
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	b662      	cpsie	i
 80053d0:	61bb      	str	r3, [r7, #24]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053d6:	f001 fcd9 	bl	8006d8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d01f      	beq.n	8005426 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ea:	f000 faa9 	bl	8005940 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	1e5a      	subs	r2, r3, #1
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00f      	beq.n	800541e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	3310      	adds	r3, #16
 8005402:	4618      	mov	r0, r3
 8005404:	f000 ffaa 	bl	800635c <xTaskRemoveFromEventList>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800540e:	4b3d      	ldr	r3, [pc, #244]	; (8005504 <xQueueReceive+0x1c8>)
 8005410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800541e:	f001 fce9 	bl	8006df4 <vPortExitCritical>
				return pdPASS;
 8005422:	2301      	movs	r3, #1
 8005424:	e069      	b.n	80054fa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d103      	bne.n	8005434 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800542c:	f001 fce2 	bl	8006df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005430:	2300      	movs	r3, #0
 8005432:	e062      	b.n	80054fa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800543a:	f107 0310 	add.w	r3, r7, #16
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fff0 	bl	8006424 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005444:	2301      	movs	r3, #1
 8005446:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005448:	f001 fcd4 	bl	8006df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800544c:	f000 fd74 	bl	8005f38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005450:	f001 fc9c 	bl	8006d8c <vPortEnterCritical>
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800545a:	b25b      	sxtb	r3, r3
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d103      	bne.n	800546a <xQueueReceive+0x12e>
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005470:	b25b      	sxtb	r3, r3
 8005472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005476:	d103      	bne.n	8005480 <xQueueReceive+0x144>
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005480:	f001 fcb8 	bl	8006df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005484:	1d3a      	adds	r2, r7, #4
 8005486:	f107 0310 	add.w	r3, r7, #16
 800548a:	4611      	mov	r1, r2
 800548c:	4618      	mov	r0, r3
 800548e:	f000 ffdf 	bl	8006450 <xTaskCheckForTimeOut>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d123      	bne.n	80054e0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800549a:	f000 fac9 	bl	8005a30 <prvIsQueueEmpty>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d017      	beq.n	80054d4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	3324      	adds	r3, #36	; 0x24
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	4611      	mov	r1, r2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 ff2f 	bl	8006310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054b4:	f000 fa6a 	bl	800598c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054b8:	f000 fd4c 	bl	8005f54 <xTaskResumeAll>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d189      	bne.n	80053d6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80054c2:	4b10      	ldr	r3, [pc, #64]	; (8005504 <xQueueReceive+0x1c8>)
 80054c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	e780      	b.n	80053d6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054d6:	f000 fa59 	bl	800598c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054da:	f000 fd3b 	bl	8005f54 <xTaskResumeAll>
 80054de:	e77a      	b.n	80053d6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e2:	f000 fa53 	bl	800598c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054e6:	f000 fd35 	bl	8005f54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ec:	f000 faa0 	bl	8005a30 <prvIsQueueEmpty>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f43f af6f 	beq.w	80053d6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3730      	adds	r7, #48	; 0x30
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	e000ed04 	.word	0xe000ed04

08005508 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08e      	sub	sp, #56	; 0x38
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005512:	2300      	movs	r3, #0
 8005514:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800551a:	2300      	movs	r3, #0
 800551c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10c      	bne.n	800553e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	b672      	cpsid	i
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	b662      	cpsie	i
 8005538:	623b      	str	r3, [r7, #32]
}
 800553a:	bf00      	nop
 800553c:	e7fe      	b.n	800553c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00c      	beq.n	8005560 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	b672      	cpsid	i
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	b662      	cpsie	i
 800555a:	61fb      	str	r3, [r7, #28]
}
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005560:	f001 f8c4 	bl	80066ec <xTaskGetSchedulerState>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d102      	bne.n	8005570 <xQueueSemaphoreTake+0x68>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <xQueueSemaphoreTake+0x6c>
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <xQueueSemaphoreTake+0x6e>
 8005574:	2300      	movs	r3, #0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10c      	bne.n	8005594 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	b672      	cpsid	i
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	b662      	cpsie	i
 800558e:	61bb      	str	r3, [r7, #24]
}
 8005590:	bf00      	nop
 8005592:	e7fe      	b.n	8005592 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005594:	f001 fbfa 	bl	8006d8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d024      	beq.n	80055ee <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	1e5a      	subs	r2, r3, #1
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d104      	bne.n	80055be <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80055b4:	f001 fa60 	bl	8006a78 <pvTaskIncrementMutexHeldCount>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00f      	beq.n	80055e6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c8:	3310      	adds	r3, #16
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fec6 	bl	800635c <xTaskRemoveFromEventList>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d007      	beq.n	80055e6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055d6:	4b55      	ldr	r3, [pc, #340]	; (800572c <xQueueSemaphoreTake+0x224>)
 80055d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055e6:	f001 fc05 	bl	8006df4 <vPortExitCritical>
				return pdPASS;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e099      	b.n	8005722 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d113      	bne.n	800561c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00c      	beq.n	8005614 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	b672      	cpsid	i
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	b662      	cpsie	i
 800560e:	617b      	str	r3, [r7, #20]
}
 8005610:	bf00      	nop
 8005612:	e7fe      	b.n	8005612 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005614:	f001 fbee 	bl	8006df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005618:	2300      	movs	r3, #0
 800561a:	e082      	b.n	8005722 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800561c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005622:	f107 030c 	add.w	r3, r7, #12
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fefc 	bl	8006424 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800562c:	2301      	movs	r3, #1
 800562e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005630:	f001 fbe0 	bl	8006df4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005634:	f000 fc80 	bl	8005f38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005638:	f001 fba8 	bl	8006d8c <vPortEnterCritical>
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005642:	b25b      	sxtb	r3, r3
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d103      	bne.n	8005652 <xQueueSemaphoreTake+0x14a>
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005658:	b25b      	sxtb	r3, r3
 800565a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565e:	d103      	bne.n	8005668 <xQueueSemaphoreTake+0x160>
 8005660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005668:	f001 fbc4 	bl	8006df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800566c:	463a      	mov	r2, r7
 800566e:	f107 030c 	add.w	r3, r7, #12
 8005672:	4611      	mov	r1, r2
 8005674:	4618      	mov	r0, r3
 8005676:	f000 feeb 	bl	8006450 <xTaskCheckForTimeOut>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d132      	bne.n	80056e6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005682:	f000 f9d5 	bl	8005a30 <prvIsQueueEmpty>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d026      	beq.n	80056da <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800568c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d109      	bne.n	80056a8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8005694:	f001 fb7a 	bl	8006d8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4618      	mov	r0, r3
 800569e:	f001 f843 	bl	8006728 <xTaskPriorityInherit>
 80056a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80056a4:	f001 fba6 	bl	8006df4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	3324      	adds	r3, #36	; 0x24
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	4611      	mov	r1, r2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fe2d 	bl	8006310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056b8:	f000 f968 	bl	800598c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056bc:	f000 fc4a 	bl	8005f54 <xTaskResumeAll>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f47f af66 	bne.w	8005594 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80056c8:	4b18      	ldr	r3, [pc, #96]	; (800572c <xQueueSemaphoreTake+0x224>)
 80056ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	e75c      	b.n	8005594 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80056da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056dc:	f000 f956 	bl	800598c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056e0:	f000 fc38 	bl	8005f54 <xTaskResumeAll>
 80056e4:	e756      	b.n	8005594 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80056e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056e8:	f000 f950 	bl	800598c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056ec:	f000 fc32 	bl	8005f54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056f2:	f000 f99d 	bl	8005a30 <prvIsQueueEmpty>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f43f af4b 	beq.w	8005594 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00d      	beq.n	8005720 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8005704:	f001 fb42 	bl	8006d8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800570a:	f000 f897 	bl	800583c <prvGetDisinheritPriorityAfterTimeout>
 800570e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005716:	4618      	mov	r0, r3
 8005718:	f001 f910 	bl	800693c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800571c:	f001 fb6a 	bl	8006df4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005720:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005722:	4618      	mov	r0, r3
 8005724:	3738      	adds	r7, #56	; 0x38
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	e000ed04 	.word	0xe000ed04

08005730 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08e      	sub	sp, #56	; 0x38
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10c      	bne.n	8005760 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	b672      	cpsid	i
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	b662      	cpsie	i
 800575a:	623b      	str	r3, [r7, #32]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d103      	bne.n	800576e <xQueueReceiveFromISR+0x3e>
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <xQueueReceiveFromISR+0x42>
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <xQueueReceiveFromISR+0x44>
 8005772:	2300      	movs	r3, #0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10c      	bne.n	8005792 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	b672      	cpsid	i
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	b662      	cpsie	i
 800578c:	61fb      	str	r3, [r7, #28]
}
 800578e:	bf00      	nop
 8005790:	e7fe      	b.n	8005790 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005792:	f001 fbe3 	bl	8006f5c <vPortValidateInterruptPriority>
	__asm volatile
 8005796:	f3ef 8211 	mrs	r2, BASEPRI
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	b672      	cpsid	i
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	b662      	cpsie	i
 80057ae:	61ba      	str	r2, [r7, #24]
 80057b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80057b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d02f      	beq.n	8005822 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057d0:	f000 f8b6 	bl	8005940 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	1e5a      	subs	r2, r3, #1
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80057dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e4:	d112      	bne.n	800580c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d016      	beq.n	800581c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	3310      	adds	r3, #16
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fdb2 	bl	800635c <xTaskRemoveFromEventList>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00e      	beq.n	800581c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00b      	beq.n	800581c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	e007      	b.n	800581c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800580c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005810:	3301      	adds	r3, #1
 8005812:	b2db      	uxtb	r3, r3
 8005814:	b25a      	sxtb	r2, r3
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800581c:	2301      	movs	r3, #1
 800581e:	637b      	str	r3, [r7, #52]	; 0x34
 8005820:	e001      	b.n	8005826 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8005822:	2300      	movs	r3, #0
 8005824:	637b      	str	r3, [r7, #52]	; 0x34
 8005826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005828:	613b      	str	r3, [r7, #16]
	__asm volatile
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f383 8811 	msr	BASEPRI, r3
}
 8005830:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005834:	4618      	mov	r0, r3
 8005836:	3738      	adds	r7, #56	; 0x38
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	d006      	beq.n	800585a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f1c3 0307 	rsb	r3, r3, #7
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	e001      	b.n	800585e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800585e:	68fb      	ldr	r3, [r7, #12]
	}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10d      	bne.n	80058a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d14d      	bne.n	800592e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	4618      	mov	r0, r3
 8005898:	f000 ffc6 	bl	8006828 <xTaskPriorityDisinherit>
 800589c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	609a      	str	r2, [r3, #8]
 80058a4:	e043      	b.n	800592e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d119      	bne.n	80058e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6858      	ldr	r0, [r3, #4]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	461a      	mov	r2, r3
 80058b6:	68b9      	ldr	r1, [r7, #8]
 80058b8:	f00b ff3f 	bl	801173a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	441a      	add	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d32b      	bcc.n	800592e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	e026      	b.n	800592e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	68d8      	ldr	r0, [r3, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	461a      	mov	r2, r3
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	f00b ff25 	bl	801173a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	425b      	negs	r3, r3
 80058fa:	441a      	add	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	d207      	bcs.n	800591c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005914:	425b      	negs	r3, r3
 8005916:	441a      	add	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d105      	bne.n	800592e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	3b01      	subs	r3, #1
 800592c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005936:	697b      	ldr	r3, [r7, #20]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	d018      	beq.n	8005984 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	441a      	add	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	429a      	cmp	r2, r3
 800596a:	d303      	bcc.n	8005974 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68d9      	ldr	r1, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	461a      	mov	r2, r3
 800597e:	6838      	ldr	r0, [r7, #0]
 8005980:	f00b fedb 	bl	801173a <memcpy>
	}
}
 8005984:	bf00      	nop
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005994:	f001 f9fa 	bl	8006d8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800599e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059a0:	e011      	b.n	80059c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d012      	beq.n	80059d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3324      	adds	r3, #36	; 0x24
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fcd4 	bl	800635c <xTaskRemoveFromEventList>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80059ba:	f000 fdaf 	bl	800651c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	dce9      	bgt.n	80059a2 <prvUnlockQueue+0x16>
 80059ce:	e000      	b.n	80059d2 <prvUnlockQueue+0x46>
					break;
 80059d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	22ff      	movs	r2, #255	; 0xff
 80059d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80059da:	f001 fa0b 	bl	8006df4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80059de:	f001 f9d5 	bl	8006d8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059ea:	e011      	b.n	8005a10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d012      	beq.n	8005a1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3310      	adds	r3, #16
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fcaf 	bl	800635c <xTaskRemoveFromEventList>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a04:	f000 fd8a 	bl	800651c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	dce9      	bgt.n	80059ec <prvUnlockQueue+0x60>
 8005a18:	e000      	b.n	8005a1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	22ff      	movs	r2, #255	; 0xff
 8005a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a24:	f001 f9e6 	bl	8006df4 <vPortExitCritical>
}
 8005a28:	bf00      	nop
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a38:	f001 f9a8 	bl	8006d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	e001      	b.n	8005a4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a4e:	f001 f9d1 	bl	8006df4 <vPortExitCritical>

	return xReturn;
 8005a52:	68fb      	ldr	r3, [r7, #12]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a64:	f001 f992 	bl	8006d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d102      	bne.n	8005a7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	e001      	b.n	8005a7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a7e:	f001 f9b9 	bl	8006df4 <vPortExitCritical>

	return xReturn;
 8005a82:	68fb      	ldr	r3, [r7, #12]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08e      	sub	sp, #56	; 0x38
 8005a90:	af04      	add	r7, sp, #16
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10c      	bne.n	8005aba <xTaskCreateStatic+0x2e>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	b672      	cpsid	i
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	b662      	cpsie	i
 8005ab4:	623b      	str	r3, [r7, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10c      	bne.n	8005ada <xTaskCreateStatic+0x4e>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	b672      	cpsid	i
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	b662      	cpsie	i
 8005ad4:	61fb      	str	r3, [r7, #28]
}
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ada:	23b4      	movs	r3, #180	; 0xb4
 8005adc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2bb4      	cmp	r3, #180	; 0xb4
 8005ae2:	d00c      	beq.n	8005afe <xTaskCreateStatic+0x72>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	b672      	cpsid	i
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	b662      	cpsie	i
 8005af8:	61bb      	str	r3, [r7, #24]
}
 8005afa:	bf00      	nop
 8005afc:	e7fe      	b.n	8005afc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005afe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d01e      	beq.n	8005b44 <xTaskCreateStatic+0xb8>
 8005b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d01b      	beq.n	8005b44 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b1e:	2300      	movs	r3, #0
 8005b20:	9303      	str	r3, [sp, #12]
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	9302      	str	r3, [sp, #8]
 8005b26:	f107 0314 	add.w	r3, r7, #20
 8005b2a:	9301      	str	r3, [sp, #4]
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	68b9      	ldr	r1, [r7, #8]
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 f850 	bl	8005bdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b3e:	f000 f8ed 	bl	8005d1c <prvAddNewTaskToReadyList>
 8005b42:	e001      	b.n	8005b48 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b48:	697b      	ldr	r3, [r7, #20]
	}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3728      	adds	r7, #40	; 0x28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b08c      	sub	sp, #48	; 0x30
 8005b56:	af04      	add	r7, sp, #16
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f001 fa3c 	bl	8006fe4 <pvPortMalloc>
 8005b6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00e      	beq.n	8005b92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b74:	20b4      	movs	r0, #180	; 0xb4
 8005b76:	f001 fa35 	bl	8006fe4 <pvPortMalloc>
 8005b7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
 8005b88:	e005      	b.n	8005b96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b8a:	6978      	ldr	r0, [r7, #20]
 8005b8c:	f001 faf4 	bl	8007178 <vPortFree>
 8005b90:	e001      	b.n	8005b96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d017      	beq.n	8005bcc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ba4:	88fa      	ldrh	r2, [r7, #6]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9303      	str	r3, [sp, #12]
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	9302      	str	r3, [sp, #8]
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	9301      	str	r3, [sp, #4]
 8005bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f80e 	bl	8005bdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bc0:	69f8      	ldr	r0, [r7, #28]
 8005bc2:	f000 f8ab 	bl	8005d1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	e002      	b.n	8005bd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bd2:	69bb      	ldr	r3, [r7, #24]
	}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3720      	adds	r7, #32
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005bf4:	440b      	add	r3, r1
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f023 0307 	bic.w	r3, r3, #7
 8005c02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00c      	beq.n	8005c28 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	b672      	cpsid	i
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	b662      	cpsie	i
 8005c22:	617b      	str	r3, [r7, #20]
}
 8005c24:	bf00      	nop
 8005c26:	e7fe      	b.n	8005c26 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01f      	beq.n	8005c6e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	e012      	b.n	8005c5a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	4413      	add	r3, r2
 8005c3a:	7819      	ldrb	r1, [r3, #0]
 8005c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	3334      	adds	r3, #52	; 0x34
 8005c44:	460a      	mov	r2, r1
 8005c46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d006      	beq.n	8005c62 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	3301      	adds	r3, #1
 8005c58:	61fb      	str	r3, [r7, #28]
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	2b0f      	cmp	r3, #15
 8005c5e:	d9e9      	bls.n	8005c34 <prvInitialiseNewTask+0x58>
 8005c60:	e000      	b.n	8005c64 <prvInitialiseNewTask+0x88>
			{
				break;
 8005c62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c6c:	e003      	b.n	8005c76 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	2b06      	cmp	r3, #6
 8005c7a:	d901      	bls.n	8005c80 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c7c:	2306      	movs	r3, #6
 8005c7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c8a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	2200      	movs	r2, #0
 8005c90:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	3304      	adds	r3, #4
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe fee6 	bl	8004a68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	3318      	adds	r3, #24
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fe fee1 	bl	8004a68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005caa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	f1c3 0207 	rsb	r2, r3, #7
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cce:	334c      	adds	r3, #76	; 0x4c
 8005cd0:	2260      	movs	r2, #96	; 0x60
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f00b fd3e 	bl	8011756 <memset>
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	4a0c      	ldr	r2, [pc, #48]	; (8005d10 <prvInitialiseNewTask+0x134>)
 8005cde:	651a      	str	r2, [r3, #80]	; 0x50
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	4a0c      	ldr	r2, [pc, #48]	; (8005d14 <prvInitialiseNewTask+0x138>)
 8005ce4:	655a      	str	r2, [r3, #84]	; 0x54
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce8:	4a0b      	ldr	r2, [pc, #44]	; (8005d18 <prvInitialiseNewTask+0x13c>)
 8005cea:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	68f9      	ldr	r1, [r7, #12]
 8005cf0:	69b8      	ldr	r0, [r7, #24]
 8005cf2:	f000 ff3b 	bl	8006b6c <pxPortInitialiseStack>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d08:	bf00      	nop
 8005d0a:	3720      	adds	r7, #32
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	080153c4 	.word	0x080153c4
 8005d14:	080153e4 	.word	0x080153e4
 8005d18:	080153a4 	.word	0x080153a4

08005d1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d24:	f001 f832 	bl	8006d8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d28:	4b2a      	ldr	r3, [pc, #168]	; (8005dd4 <prvAddNewTaskToReadyList+0xb8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	4a29      	ldr	r2, [pc, #164]	; (8005dd4 <prvAddNewTaskToReadyList+0xb8>)
 8005d30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d32:	4b29      	ldr	r3, [pc, #164]	; (8005dd8 <prvAddNewTaskToReadyList+0xbc>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d109      	bne.n	8005d4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d3a:	4a27      	ldr	r2, [pc, #156]	; (8005dd8 <prvAddNewTaskToReadyList+0xbc>)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d40:	4b24      	ldr	r3, [pc, #144]	; (8005dd4 <prvAddNewTaskToReadyList+0xb8>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d110      	bne.n	8005d6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d48:	f000 fc0c 	bl	8006564 <prvInitialiseTaskLists>
 8005d4c:	e00d      	b.n	8005d6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d4e:	4b23      	ldr	r3, [pc, #140]	; (8005ddc <prvAddNewTaskToReadyList+0xc0>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d56:	4b20      	ldr	r3, [pc, #128]	; (8005dd8 <prvAddNewTaskToReadyList+0xbc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d802      	bhi.n	8005d6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d64:	4a1c      	ldr	r2, [pc, #112]	; (8005dd8 <prvAddNewTaskToReadyList+0xbc>)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d6a:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <prvAddNewTaskToReadyList+0xc4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	4a1b      	ldr	r2, [pc, #108]	; (8005de0 <prvAddNewTaskToReadyList+0xc4>)
 8005d72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	2201      	movs	r2, #1
 8005d7a:	409a      	lsls	r2, r3
 8005d7c:	4b19      	ldr	r3, [pc, #100]	; (8005de4 <prvAddNewTaskToReadyList+0xc8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <prvAddNewTaskToReadyList+0xc8>)
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4a15      	ldr	r2, [pc, #84]	; (8005de8 <prvAddNewTaskToReadyList+0xcc>)
 8005d94:	441a      	add	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	f7fe fe70 	bl	8004a82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005da2:	f001 f827 	bl	8006df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005da6:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <prvAddNewTaskToReadyList+0xc0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00e      	beq.n	8005dcc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dae:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <prvAddNewTaskToReadyList+0xbc>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d207      	bcs.n	8005dcc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <prvAddNewTaskToReadyList+0xd0>)
 8005dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dcc:	bf00      	nop
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	200050e4 	.word	0x200050e4
 8005dd8:	20004fe4 	.word	0x20004fe4
 8005ddc:	200050f0 	.word	0x200050f0
 8005de0:	20005100 	.word	0x20005100
 8005de4:	200050ec 	.word	0x200050ec
 8005de8:	20004fe8 	.word	0x20004fe8
 8005dec:	e000ed04 	.word	0xe000ed04

08005df0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d019      	beq.n	8005e36 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e02:	4b14      	ldr	r3, [pc, #80]	; (8005e54 <vTaskDelay+0x64>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00c      	beq.n	8005e24 <vTaskDelay+0x34>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	b672      	cpsid	i
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	b662      	cpsie	i
 8005e1e:	60bb      	str	r3, [r7, #8]
}
 8005e20:	bf00      	nop
 8005e22:	e7fe      	b.n	8005e22 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005e24:	f000 f888 	bl	8005f38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e28:	2100      	movs	r1, #0
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fe38 	bl	8006aa0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e30:	f000 f890 	bl	8005f54 <xTaskResumeAll>
 8005e34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d107      	bne.n	8005e4c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005e3c:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <vTaskDelay+0x68>)
 8005e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	2000510c 	.word	0x2000510c
 8005e58:	e000ed04 	.word	0xe000ed04

08005e5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	; 0x28
 8005e60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e6a:	463a      	mov	r2, r7
 8005e6c:	1d39      	adds	r1, r7, #4
 8005e6e:	f107 0308 	add.w	r3, r7, #8
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fa fb9e 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	9202      	str	r2, [sp, #8]
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	2300      	movs	r3, #0
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	2300      	movs	r3, #0
 8005e88:	460a      	mov	r2, r1
 8005e8a:	4923      	ldr	r1, [pc, #140]	; (8005f18 <vTaskStartScheduler+0xbc>)
 8005e8c:	4823      	ldr	r0, [pc, #140]	; (8005f1c <vTaskStartScheduler+0xc0>)
 8005e8e:	f7ff fdfd 	bl	8005a8c <xTaskCreateStatic>
 8005e92:	4603      	mov	r3, r0
 8005e94:	4a22      	ldr	r2, [pc, #136]	; (8005f20 <vTaskStartScheduler+0xc4>)
 8005e96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e98:	4b21      	ldr	r3, [pc, #132]	; (8005f20 <vTaskStartScheduler+0xc4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	e001      	b.n	8005eaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d11d      	bne.n	8005eec <vTaskStartScheduler+0x90>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	b672      	cpsid	i
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	b662      	cpsie	i
 8005ec4:	613b      	str	r3, [r7, #16]
}
 8005ec6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ec8:	4b16      	ldr	r3, [pc, #88]	; (8005f24 <vTaskStartScheduler+0xc8>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	334c      	adds	r3, #76	; 0x4c
 8005ece:	4a16      	ldr	r2, [pc, #88]	; (8005f28 <vTaskStartScheduler+0xcc>)
 8005ed0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ed2:	4b16      	ldr	r3, [pc, #88]	; (8005f2c <vTaskStartScheduler+0xd0>)
 8005ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005eda:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <vTaskStartScheduler+0xd4>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ee0:	4b14      	ldr	r3, [pc, #80]	; (8005f34 <vTaskStartScheduler+0xd8>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ee6:	f000 fed3 	bl	8006c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005eea:	e010      	b.n	8005f0e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef2:	d10c      	bne.n	8005f0e <vTaskStartScheduler+0xb2>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	b672      	cpsid	i
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	b662      	cpsie	i
 8005f08:	60fb      	str	r3, [r7, #12]
}
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <vTaskStartScheduler+0xb0>
}
 8005f0e:	bf00      	nop
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	080127c4 	.word	0x080127c4
 8005f1c:	08006535 	.word	0x08006535
 8005f20:	20005108 	.word	0x20005108
 8005f24:	20004fe4 	.word	0x20004fe4
 8005f28:	20000030 	.word	0x20000030
 8005f2c:	20005104 	.word	0x20005104
 8005f30:	200050f0 	.word	0x200050f0
 8005f34:	200050e8 	.word	0x200050e8

08005f38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f3c:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <vTaskSuspendAll+0x18>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3301      	adds	r3, #1
 8005f42:	4a03      	ldr	r2, [pc, #12]	; (8005f50 <vTaskSuspendAll+0x18>)
 8005f44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005f46:	bf00      	nop
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	2000510c 	.word	0x2000510c

08005f54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f62:	4b42      	ldr	r3, [pc, #264]	; (800606c <xTaskResumeAll+0x118>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10c      	bne.n	8005f84 <xTaskResumeAll+0x30>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6e:	b672      	cpsid	i
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	b662      	cpsie	i
 8005f7e:	603b      	str	r3, [r7, #0]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f84:	f000 ff02 	bl	8006d8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f88:	4b38      	ldr	r3, [pc, #224]	; (800606c <xTaskResumeAll+0x118>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	4a37      	ldr	r2, [pc, #220]	; (800606c <xTaskResumeAll+0x118>)
 8005f90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f92:	4b36      	ldr	r3, [pc, #216]	; (800606c <xTaskResumeAll+0x118>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d161      	bne.n	800605e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f9a:	4b35      	ldr	r3, [pc, #212]	; (8006070 <xTaskResumeAll+0x11c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d05d      	beq.n	800605e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fa2:	e02e      	b.n	8006002 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa4:	4b33      	ldr	r3, [pc, #204]	; (8006074 <xTaskResumeAll+0x120>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3318      	adds	r3, #24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fdc3 	bl	8004b3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fe fdbe 	bl	8004b3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	409a      	lsls	r2, r3
 8005fc8:	4b2b      	ldr	r3, [pc, #172]	; (8006078 <xTaskResumeAll+0x124>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	4a2a      	ldr	r2, [pc, #168]	; (8006078 <xTaskResumeAll+0x124>)
 8005fd0:	6013      	str	r3, [r2, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4a27      	ldr	r2, [pc, #156]	; (800607c <xTaskResumeAll+0x128>)
 8005fe0:	441a      	add	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4610      	mov	r0, r2
 8005fea:	f7fe fd4a 	bl	8004a82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff2:	4b23      	ldr	r3, [pc, #140]	; (8006080 <xTaskResumeAll+0x12c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d302      	bcc.n	8006002 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005ffc:	4b21      	ldr	r3, [pc, #132]	; (8006084 <xTaskResumeAll+0x130>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006002:	4b1c      	ldr	r3, [pc, #112]	; (8006074 <xTaskResumeAll+0x120>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1cc      	bne.n	8005fa4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006010:	f000 fb4c 	bl	80066ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006014:	4b1c      	ldr	r3, [pc, #112]	; (8006088 <xTaskResumeAll+0x134>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d010      	beq.n	8006042 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006020:	f000 f858 	bl	80060d4 <xTaskIncrementTick>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800602a:	4b16      	ldr	r3, [pc, #88]	; (8006084 <xTaskResumeAll+0x130>)
 800602c:	2201      	movs	r2, #1
 800602e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3b01      	subs	r3, #1
 8006034:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1f1      	bne.n	8006020 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800603c:	4b12      	ldr	r3, [pc, #72]	; (8006088 <xTaskResumeAll+0x134>)
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006042:	4b10      	ldr	r3, [pc, #64]	; (8006084 <xTaskResumeAll+0x130>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d009      	beq.n	800605e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800604a:	2301      	movs	r3, #1
 800604c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800604e:	4b0f      	ldr	r3, [pc, #60]	; (800608c <xTaskResumeAll+0x138>)
 8006050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800605e:	f000 fec9 	bl	8006df4 <vPortExitCritical>

	return xAlreadyYielded;
 8006062:	68bb      	ldr	r3, [r7, #8]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	2000510c 	.word	0x2000510c
 8006070:	200050e4 	.word	0x200050e4
 8006074:	200050a4 	.word	0x200050a4
 8006078:	200050ec 	.word	0x200050ec
 800607c:	20004fe8 	.word	0x20004fe8
 8006080:	20004fe4 	.word	0x20004fe4
 8006084:	200050f8 	.word	0x200050f8
 8006088:	200050f4 	.word	0x200050f4
 800608c:	e000ed04 	.word	0xe000ed04

08006090 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006096:	4b05      	ldr	r3, [pc, #20]	; (80060ac <xTaskGetTickCount+0x1c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800609c:	687b      	ldr	r3, [r7, #4]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	200050e8 	.word	0x200050e8

080060b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060b6:	f000 ff51 	bl	8006f5c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80060ba:	2300      	movs	r3, #0
 80060bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80060be:	4b04      	ldr	r3, [pc, #16]	; (80060d0 <xTaskGetTickCountFromISR+0x20>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060c4:	683b      	ldr	r3, [r7, #0]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	200050e8 	.word	0x200050e8

080060d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060da:	2300      	movs	r3, #0
 80060dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060de:	4b4f      	ldr	r3, [pc, #316]	; (800621c <xTaskIncrementTick+0x148>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f040 808a 	bne.w	80061fc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060e8:	4b4d      	ldr	r3, [pc, #308]	; (8006220 <xTaskIncrementTick+0x14c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3301      	adds	r3, #1
 80060ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060f0:	4a4b      	ldr	r2, [pc, #300]	; (8006220 <xTaskIncrementTick+0x14c>)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d122      	bne.n	8006142 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80060fc:	4b49      	ldr	r3, [pc, #292]	; (8006224 <xTaskIncrementTick+0x150>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00c      	beq.n	8006120 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	b672      	cpsid	i
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	b662      	cpsie	i
 800611a:	603b      	str	r3, [r7, #0]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <xTaskIncrementTick+0x4a>
 8006120:	4b40      	ldr	r3, [pc, #256]	; (8006224 <xTaskIncrementTick+0x150>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	4b40      	ldr	r3, [pc, #256]	; (8006228 <xTaskIncrementTick+0x154>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a3e      	ldr	r2, [pc, #248]	; (8006224 <xTaskIncrementTick+0x150>)
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	4a3e      	ldr	r2, [pc, #248]	; (8006228 <xTaskIncrementTick+0x154>)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	4b3d      	ldr	r3, [pc, #244]	; (800622c <xTaskIncrementTick+0x158>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3301      	adds	r3, #1
 800613a:	4a3c      	ldr	r2, [pc, #240]	; (800622c <xTaskIncrementTick+0x158>)
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	f000 fab5 	bl	80066ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006142:	4b3b      	ldr	r3, [pc, #236]	; (8006230 <xTaskIncrementTick+0x15c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	429a      	cmp	r2, r3
 800614a:	d348      	bcc.n	80061de <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800614c:	4b35      	ldr	r3, [pc, #212]	; (8006224 <xTaskIncrementTick+0x150>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006156:	4b36      	ldr	r3, [pc, #216]	; (8006230 <xTaskIncrementTick+0x15c>)
 8006158:	f04f 32ff 	mov.w	r2, #4294967295
 800615c:	601a      	str	r2, [r3, #0]
					break;
 800615e:	e03e      	b.n	80061de <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006160:	4b30      	ldr	r3, [pc, #192]	; (8006224 <xTaskIncrementTick+0x150>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d203      	bcs.n	8006180 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006178:	4a2d      	ldr	r2, [pc, #180]	; (8006230 <xTaskIncrementTick+0x15c>)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800617e:	e02e      	b.n	80061de <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	3304      	adds	r3, #4
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe fcd9 	bl	8004b3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	d004      	beq.n	800619c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	3318      	adds	r3, #24
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe fcd0 	bl	8004b3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	2201      	movs	r2, #1
 80061a2:	409a      	lsls	r2, r3
 80061a4:	4b23      	ldr	r3, [pc, #140]	; (8006234 <xTaskIncrementTick+0x160>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	4a22      	ldr	r2, [pc, #136]	; (8006234 <xTaskIncrementTick+0x160>)
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4a1f      	ldr	r2, [pc, #124]	; (8006238 <xTaskIncrementTick+0x164>)
 80061bc:	441a      	add	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4619      	mov	r1, r3
 80061c4:	4610      	mov	r0, r2
 80061c6:	f7fe fc5c 	bl	8004a82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ce:	4b1b      	ldr	r3, [pc, #108]	; (800623c <xTaskIncrementTick+0x168>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d3b9      	bcc.n	800614c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80061d8:	2301      	movs	r3, #1
 80061da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061dc:	e7b6      	b.n	800614c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061de:	4b17      	ldr	r3, [pc, #92]	; (800623c <xTaskIncrementTick+0x168>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e4:	4914      	ldr	r1, [pc, #80]	; (8006238 <xTaskIncrementTick+0x164>)
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d907      	bls.n	8006206 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80061f6:	2301      	movs	r3, #1
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	e004      	b.n	8006206 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80061fc:	4b10      	ldr	r3, [pc, #64]	; (8006240 <xTaskIncrementTick+0x16c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3301      	adds	r3, #1
 8006202:	4a0f      	ldr	r2, [pc, #60]	; (8006240 <xTaskIncrementTick+0x16c>)
 8006204:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006206:	4b0f      	ldr	r3, [pc, #60]	; (8006244 <xTaskIncrementTick+0x170>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800620e:	2301      	movs	r3, #1
 8006210:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006212:	697b      	ldr	r3, [r7, #20]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	2000510c 	.word	0x2000510c
 8006220:	200050e8 	.word	0x200050e8
 8006224:	2000509c 	.word	0x2000509c
 8006228:	200050a0 	.word	0x200050a0
 800622c:	200050fc 	.word	0x200050fc
 8006230:	20005104 	.word	0x20005104
 8006234:	200050ec 	.word	0x200050ec
 8006238:	20004fe8 	.word	0x20004fe8
 800623c:	20004fe4 	.word	0x20004fe4
 8006240:	200050f4 	.word	0x200050f4
 8006244:	200050f8 	.word	0x200050f8

08006248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800624e:	4b2a      	ldr	r3, [pc, #168]	; (80062f8 <vTaskSwitchContext+0xb0>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006256:	4b29      	ldr	r3, [pc, #164]	; (80062fc <vTaskSwitchContext+0xb4>)
 8006258:	2201      	movs	r2, #1
 800625a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800625c:	e046      	b.n	80062ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800625e:	4b27      	ldr	r3, [pc, #156]	; (80062fc <vTaskSwitchContext+0xb4>)
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006264:	4b26      	ldr	r3, [pc, #152]	; (8006300 <vTaskSwitchContext+0xb8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	fab3 f383 	clz	r3, r3
 8006270:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006272:	7afb      	ldrb	r3, [r7, #11]
 8006274:	f1c3 031f 	rsb	r3, r3, #31
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	4922      	ldr	r1, [pc, #136]	; (8006304 <vTaskSwitchContext+0xbc>)
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10c      	bne.n	80062a8 <vTaskSwitchContext+0x60>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	b672      	cpsid	i
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	b662      	cpsie	i
 80062a2:	607b      	str	r3, [r7, #4]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <vTaskSwitchContext+0x5e>
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4a14      	ldr	r2, [pc, #80]	; (8006304 <vTaskSwitchContext+0xbc>)
 80062b4:	4413      	add	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	605a      	str	r2, [r3, #4]
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	3308      	adds	r3, #8
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d104      	bne.n	80062d8 <vTaskSwitchContext+0x90>
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	605a      	str	r2, [r3, #4]
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	4a0a      	ldr	r2, [pc, #40]	; (8006308 <vTaskSwitchContext+0xc0>)
 80062e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062e2:	4b09      	ldr	r3, [pc, #36]	; (8006308 <vTaskSwitchContext+0xc0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	334c      	adds	r3, #76	; 0x4c
 80062e8:	4a08      	ldr	r2, [pc, #32]	; (800630c <vTaskSwitchContext+0xc4>)
 80062ea:	6013      	str	r3, [r2, #0]
}
 80062ec:	bf00      	nop
 80062ee:	371c      	adds	r7, #28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	2000510c 	.word	0x2000510c
 80062fc:	200050f8 	.word	0x200050f8
 8006300:	200050ec 	.word	0x200050ec
 8006304:	20004fe8 	.word	0x20004fe8
 8006308:	20004fe4 	.word	0x20004fe4
 800630c:	20000030 	.word	0x20000030

08006310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10c      	bne.n	800633a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	b672      	cpsid	i
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	b662      	cpsie	i
 8006334:	60fb      	str	r3, [r7, #12]
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800633a:	4b07      	ldr	r3, [pc, #28]	; (8006358 <vTaskPlaceOnEventList+0x48>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3318      	adds	r3, #24
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fe fbc1 	bl	8004aca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006348:	2101      	movs	r1, #1
 800634a:	6838      	ldr	r0, [r7, #0]
 800634c:	f000 fba8 	bl	8006aa0 <prvAddCurrentTaskToDelayedList>
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20004fe4 	.word	0x20004fe4

0800635c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10c      	bne.n	800638c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	b672      	cpsid	i
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	b662      	cpsie	i
 8006386:	60fb      	str	r3, [r7, #12]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	3318      	adds	r3, #24
 8006390:	4618      	mov	r0, r3
 8006392:	f7fe fbd3 	bl	8004b3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006396:	4b1d      	ldr	r3, [pc, #116]	; (800640c <xTaskRemoveFromEventList+0xb0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d11c      	bne.n	80063d8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	3304      	adds	r3, #4
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fbca 	bl	8004b3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	2201      	movs	r2, #1
 80063ae:	409a      	lsls	r2, r3
 80063b0:	4b17      	ldr	r3, [pc, #92]	; (8006410 <xTaskRemoveFromEventList+0xb4>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	4a16      	ldr	r2, [pc, #88]	; (8006410 <xTaskRemoveFromEventList+0xb4>)
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4a13      	ldr	r2, [pc, #76]	; (8006414 <xTaskRemoveFromEventList+0xb8>)
 80063c8:	441a      	add	r2, r3
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	3304      	adds	r3, #4
 80063ce:	4619      	mov	r1, r3
 80063d0:	4610      	mov	r0, r2
 80063d2:	f7fe fb56 	bl	8004a82 <vListInsertEnd>
 80063d6:	e005      	b.n	80063e4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	3318      	adds	r3, #24
 80063dc:	4619      	mov	r1, r3
 80063de:	480e      	ldr	r0, [pc, #56]	; (8006418 <xTaskRemoveFromEventList+0xbc>)
 80063e0:	f7fe fb4f 	bl	8004a82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <xTaskRemoveFromEventList+0xc0>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d905      	bls.n	80063fe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063f2:	2301      	movs	r3, #1
 80063f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063f6:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <xTaskRemoveFromEventList+0xc4>)
 80063f8:	2201      	movs	r2, #1
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	e001      	b.n	8006402 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006402:	697b      	ldr	r3, [r7, #20]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	2000510c 	.word	0x2000510c
 8006410:	200050ec 	.word	0x200050ec
 8006414:	20004fe8 	.word	0x20004fe8
 8006418:	200050a4 	.word	0x200050a4
 800641c:	20004fe4 	.word	0x20004fe4
 8006420:	200050f8 	.word	0x200050f8

08006424 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <vTaskInternalSetTimeOutState+0x24>)
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006434:	4b05      	ldr	r3, [pc, #20]	; (800644c <vTaskInternalSetTimeOutState+0x28>)
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	605a      	str	r2, [r3, #4]
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	200050fc 	.word	0x200050fc
 800644c:	200050e8 	.word	0x200050e8

08006450 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10c      	bne.n	800647a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	b672      	cpsid	i
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	b662      	cpsie	i
 8006474:	613b      	str	r3, [r7, #16]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10c      	bne.n	800649a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	b672      	cpsid	i
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	b662      	cpsie	i
 8006494:	60fb      	str	r3, [r7, #12]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800649a:	f000 fc77 	bl	8006d8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800649e:	4b1d      	ldr	r3, [pc, #116]	; (8006514 <xTaskCheckForTimeOut+0xc4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b6:	d102      	bne.n	80064be <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61fb      	str	r3, [r7, #28]
 80064bc:	e023      	b.n	8006506 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4b15      	ldr	r3, [pc, #84]	; (8006518 <xTaskCheckForTimeOut+0xc8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d007      	beq.n	80064da <xTaskCheckForTimeOut+0x8a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d302      	bcc.n	80064da <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064d4:	2301      	movs	r3, #1
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	e015      	b.n	8006506 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d20b      	bcs.n	80064fc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	1ad2      	subs	r2, r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ff97 	bl	8006424 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	61fb      	str	r3, [r7, #28]
 80064fa:	e004      	b.n	8006506 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006502:	2301      	movs	r3, #1
 8006504:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006506:	f000 fc75 	bl	8006df4 <vPortExitCritical>

	return xReturn;
 800650a:	69fb      	ldr	r3, [r7, #28]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3720      	adds	r7, #32
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	200050e8 	.word	0x200050e8
 8006518:	200050fc 	.word	0x200050fc

0800651c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006520:	4b03      	ldr	r3, [pc, #12]	; (8006530 <vTaskMissedYield+0x14>)
 8006522:	2201      	movs	r2, #1
 8006524:	601a      	str	r2, [r3, #0]
}
 8006526:	bf00      	nop
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	200050f8 	.word	0x200050f8

08006534 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800653c:	f000 f852 	bl	80065e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006540:	4b06      	ldr	r3, [pc, #24]	; (800655c <prvIdleTask+0x28>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d9f9      	bls.n	800653c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006548:	4b05      	ldr	r3, [pc, #20]	; (8006560 <prvIdleTask+0x2c>)
 800654a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006558:	e7f0      	b.n	800653c <prvIdleTask+0x8>
 800655a:	bf00      	nop
 800655c:	20004fe8 	.word	0x20004fe8
 8006560:	e000ed04 	.word	0xe000ed04

08006564 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800656a:	2300      	movs	r3, #0
 800656c:	607b      	str	r3, [r7, #4]
 800656e:	e00c      	b.n	800658a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4a12      	ldr	r2, [pc, #72]	; (80065c4 <prvInitialiseTaskLists+0x60>)
 800657c:	4413      	add	r3, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe fa52 	bl	8004a28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3301      	adds	r3, #1
 8006588:	607b      	str	r3, [r7, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b06      	cmp	r3, #6
 800658e:	d9ef      	bls.n	8006570 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006590:	480d      	ldr	r0, [pc, #52]	; (80065c8 <prvInitialiseTaskLists+0x64>)
 8006592:	f7fe fa49 	bl	8004a28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006596:	480d      	ldr	r0, [pc, #52]	; (80065cc <prvInitialiseTaskLists+0x68>)
 8006598:	f7fe fa46 	bl	8004a28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800659c:	480c      	ldr	r0, [pc, #48]	; (80065d0 <prvInitialiseTaskLists+0x6c>)
 800659e:	f7fe fa43 	bl	8004a28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065a2:	480c      	ldr	r0, [pc, #48]	; (80065d4 <prvInitialiseTaskLists+0x70>)
 80065a4:	f7fe fa40 	bl	8004a28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065a8:	480b      	ldr	r0, [pc, #44]	; (80065d8 <prvInitialiseTaskLists+0x74>)
 80065aa:	f7fe fa3d 	bl	8004a28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065ae:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <prvInitialiseTaskLists+0x78>)
 80065b0:	4a05      	ldr	r2, [pc, #20]	; (80065c8 <prvInitialiseTaskLists+0x64>)
 80065b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065b4:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <prvInitialiseTaskLists+0x7c>)
 80065b6:	4a05      	ldr	r2, [pc, #20]	; (80065cc <prvInitialiseTaskLists+0x68>)
 80065b8:	601a      	str	r2, [r3, #0]
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20004fe8 	.word	0x20004fe8
 80065c8:	20005074 	.word	0x20005074
 80065cc:	20005088 	.word	0x20005088
 80065d0:	200050a4 	.word	0x200050a4
 80065d4:	200050b8 	.word	0x200050b8
 80065d8:	200050d0 	.word	0x200050d0
 80065dc:	2000509c 	.word	0x2000509c
 80065e0:	200050a0 	.word	0x200050a0

080065e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065ea:	e019      	b.n	8006620 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065ec:	f000 fbce 	bl	8006d8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f0:	4b10      	ldr	r3, [pc, #64]	; (8006634 <prvCheckTasksWaitingTermination+0x50>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fe fa9d 	bl	8004b3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006602:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <prvCheckTasksWaitingTermination+0x54>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3b01      	subs	r3, #1
 8006608:	4a0b      	ldr	r2, [pc, #44]	; (8006638 <prvCheckTasksWaitingTermination+0x54>)
 800660a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <prvCheckTasksWaitingTermination+0x58>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3b01      	subs	r3, #1
 8006612:	4a0a      	ldr	r2, [pc, #40]	; (800663c <prvCheckTasksWaitingTermination+0x58>)
 8006614:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006616:	f000 fbed 	bl	8006df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f810 	bl	8006640 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006620:	4b06      	ldr	r3, [pc, #24]	; (800663c <prvCheckTasksWaitingTermination+0x58>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e1      	bne.n	80065ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	200050b8 	.word	0x200050b8
 8006638:	200050e4 	.word	0x200050e4
 800663c:	200050cc 	.word	0x200050cc

08006640 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	334c      	adds	r3, #76	; 0x4c
 800664c:	4618      	mov	r0, r3
 800664e:	f00b f983 	bl	8011958 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d108      	bne.n	800666e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fd89 	bl	8007178 <vPortFree>
				vPortFree( pxTCB );
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fd86 	bl	8007178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800666c:	e01a      	b.n	80066a4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006674:	2b01      	cmp	r3, #1
 8006676:	d103      	bne.n	8006680 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fd7d 	bl	8007178 <vPortFree>
	}
 800667e:	e011      	b.n	80066a4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006686:	2b02      	cmp	r3, #2
 8006688:	d00c      	beq.n	80066a4 <prvDeleteTCB+0x64>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	b672      	cpsid	i
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	b662      	cpsie	i
 800669e:	60fb      	str	r3, [r7, #12]
}
 80066a0:	bf00      	nop
 80066a2:	e7fe      	b.n	80066a2 <prvDeleteTCB+0x62>
	}
 80066a4:	bf00      	nop
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066b2:	4b0c      	ldr	r3, [pc, #48]	; (80066e4 <prvResetNextTaskUnblockTime+0x38>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d104      	bne.n	80066c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066bc:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <prvResetNextTaskUnblockTime+0x3c>)
 80066be:	f04f 32ff 	mov.w	r2, #4294967295
 80066c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066c4:	e008      	b.n	80066d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c6:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <prvResetNextTaskUnblockTime+0x38>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	4a04      	ldr	r2, [pc, #16]	; (80066e8 <prvResetNextTaskUnblockTime+0x3c>)
 80066d6:	6013      	str	r3, [r2, #0]
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	2000509c 	.word	0x2000509c
 80066e8:	20005104 	.word	0x20005104

080066ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066f2:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <xTaskGetSchedulerState+0x34>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d102      	bne.n	8006700 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066fa:	2301      	movs	r3, #1
 80066fc:	607b      	str	r3, [r7, #4]
 80066fe:	e008      	b.n	8006712 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006700:	4b08      	ldr	r3, [pc, #32]	; (8006724 <xTaskGetSchedulerState+0x38>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d102      	bne.n	800670e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006708:	2302      	movs	r3, #2
 800670a:	607b      	str	r3, [r7, #4]
 800670c:	e001      	b.n	8006712 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800670e:	2300      	movs	r3, #0
 8006710:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006712:	687b      	ldr	r3, [r7, #4]
	}
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	200050f0 	.word	0x200050f0
 8006724:	2000510c 	.word	0x2000510c

08006728 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006734:	2300      	movs	r3, #0
 8006736:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d069      	beq.n	8006812 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006742:	4b36      	ldr	r3, [pc, #216]	; (800681c <xTaskPriorityInherit+0xf4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	429a      	cmp	r2, r3
 800674a:	d259      	bcs.n	8006800 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	db06      	blt.n	8006762 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006754:	4b31      	ldr	r3, [pc, #196]	; (800681c <xTaskPriorityInherit+0xf4>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	f1c3 0207 	rsb	r2, r3, #7
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	6959      	ldr	r1, [r3, #20]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4a2b      	ldr	r2, [pc, #172]	; (8006820 <xTaskPriorityInherit+0xf8>)
 8006774:	4413      	add	r3, r2
 8006776:	4299      	cmp	r1, r3
 8006778:	d13a      	bne.n	80067f0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	3304      	adds	r3, #4
 800677e:	4618      	mov	r0, r3
 8006780:	f7fe f9dc 	bl	8004b3c <uxListRemove>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d115      	bne.n	80067b6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678e:	4924      	ldr	r1, [pc, #144]	; (8006820 <xTaskPriorityInherit+0xf8>)
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10a      	bne.n	80067b6 <xTaskPriorityInherit+0x8e>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	2201      	movs	r2, #1
 80067a6:	fa02 f303 	lsl.w	r3, r2, r3
 80067aa:	43da      	mvns	r2, r3
 80067ac:	4b1d      	ldr	r3, [pc, #116]	; (8006824 <xTaskPriorityInherit+0xfc>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4013      	ands	r3, r2
 80067b2:	4a1c      	ldr	r2, [pc, #112]	; (8006824 <xTaskPriorityInherit+0xfc>)
 80067b4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067b6:	4b19      	ldr	r3, [pc, #100]	; (800681c <xTaskPriorityInherit+0xf4>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	2201      	movs	r2, #1
 80067c6:	409a      	lsls	r2, r3
 80067c8:	4b16      	ldr	r3, [pc, #88]	; (8006824 <xTaskPriorityInherit+0xfc>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	4a15      	ldr	r2, [pc, #84]	; (8006824 <xTaskPriorityInherit+0xfc>)
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4a10      	ldr	r2, [pc, #64]	; (8006820 <xTaskPriorityInherit+0xf8>)
 80067e0:	441a      	add	r2, r3
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	3304      	adds	r3, #4
 80067e6:	4619      	mov	r1, r3
 80067e8:	4610      	mov	r0, r2
 80067ea:	f7fe f94a 	bl	8004a82 <vListInsertEnd>
 80067ee:	e004      	b.n	80067fa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067f0:	4b0a      	ldr	r3, [pc, #40]	; (800681c <xTaskPriorityInherit+0xf4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80067fa:	2301      	movs	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	e008      	b.n	8006812 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <xTaskPriorityInherit+0xf4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680a:	429a      	cmp	r2, r3
 800680c:	d201      	bcs.n	8006812 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800680e:	2301      	movs	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006812:	68fb      	ldr	r3, [r7, #12]
	}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	20004fe4 	.word	0x20004fe4
 8006820:	20004fe8 	.word	0x20004fe8
 8006824:	200050ec 	.word	0x200050ec

08006828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d072      	beq.n	8006924 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800683e:	4b3c      	ldr	r3, [pc, #240]	; (8006930 <xTaskPriorityDisinherit+0x108>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	429a      	cmp	r2, r3
 8006846:	d00c      	beq.n	8006862 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	b672      	cpsid	i
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	b662      	cpsie	i
 800685c:	60fb      	str	r3, [r7, #12]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10c      	bne.n	8006884 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	b672      	cpsid	i
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	b662      	cpsie	i
 800687e:	60bb      	str	r3, [r7, #8]
}
 8006880:	bf00      	nop
 8006882:	e7fe      	b.n	8006882 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006888:	1e5a      	subs	r2, r3, #1
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006896:	429a      	cmp	r2, r3
 8006898:	d044      	beq.n	8006924 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d140      	bne.n	8006924 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	3304      	adds	r3, #4
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fe f948 	bl	8004b3c <uxListRemove>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d115      	bne.n	80068de <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b6:	491f      	ldr	r1, [pc, #124]	; (8006934 <xTaskPriorityDisinherit+0x10c>)
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <xTaskPriorityDisinherit+0xb6>
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	2201      	movs	r2, #1
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	43da      	mvns	r2, r3
 80068d4:	4b18      	ldr	r3, [pc, #96]	; (8006938 <xTaskPriorityDisinherit+0x110>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4013      	ands	r3, r2
 80068da:	4a17      	ldr	r2, [pc, #92]	; (8006938 <xTaskPriorityDisinherit+0x110>)
 80068dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ea:	f1c3 0207 	rsb	r2, r3, #7
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	2201      	movs	r2, #1
 80068f8:	409a      	lsls	r2, r3
 80068fa:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <xTaskPriorityDisinherit+0x110>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4313      	orrs	r3, r2
 8006900:	4a0d      	ldr	r2, [pc, #52]	; (8006938 <xTaskPriorityDisinherit+0x110>)
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4a08      	ldr	r2, [pc, #32]	; (8006934 <xTaskPriorityDisinherit+0x10c>)
 8006912:	441a      	add	r2, r3
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	3304      	adds	r3, #4
 8006918:	4619      	mov	r1, r3
 800691a:	4610      	mov	r0, r2
 800691c:	f7fe f8b1 	bl	8004a82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006920:	2301      	movs	r3, #1
 8006922:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006924:	697b      	ldr	r3, [r7, #20]
	}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20004fe4 	.word	0x20004fe4
 8006934:	20004fe8 	.word	0x20004fe8
 8006938:	200050ec 	.word	0x200050ec

0800693c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800694a:	2301      	movs	r3, #1
 800694c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 8087 	beq.w	8006a64 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10c      	bne.n	8006978 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	b672      	cpsid	i
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	b662      	cpsie	i
 8006972:	60fb      	str	r3, [r7, #12]
}
 8006974:	bf00      	nop
 8006976:	e7fe      	b.n	8006976 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d902      	bls.n	8006988 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	e002      	b.n	800698e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	429a      	cmp	r2, r3
 8006996:	d065      	beq.n	8006a64 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d160      	bne.n	8006a64 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80069a2:	4b32      	ldr	r3, [pc, #200]	; (8006a6c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d10c      	bne.n	80069c6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	b672      	cpsid	i
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	b662      	cpsie	i
 80069c0:	60bb      	str	r3, [r7, #8]
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	db04      	blt.n	80069e4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	f1c3 0207 	rsb	r2, r3, #7
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	6959      	ldr	r1, [r3, #20]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4a1f      	ldr	r2, [pc, #124]	; (8006a70 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80069f4:	4413      	add	r3, r2
 80069f6:	4299      	cmp	r1, r3
 80069f8:	d134      	bne.n	8006a64 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	3304      	adds	r3, #4
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe f89c 	bl	8004b3c <uxListRemove>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d115      	bne.n	8006a36 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0e:	4918      	ldr	r1, [pc, #96]	; (8006a70 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006a10:	4613      	mov	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	2201      	movs	r2, #1
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	43da      	mvns	r2, r3
 8006a2c:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4013      	ands	r3, r2
 8006a32:	4a10      	ldr	r2, [pc, #64]	; (8006a74 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006a34:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	409a      	lsls	r2, r3
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	4a0b      	ldr	r2, [pc, #44]	; (8006a74 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4a06      	ldr	r2, [pc, #24]	; (8006a70 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006a56:	441a      	add	r2, r3
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4610      	mov	r0, r2
 8006a60:	f7fe f80f 	bl	8004a82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a64:	bf00      	nop
 8006a66:	3720      	adds	r7, #32
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20004fe4 	.word	0x20004fe4
 8006a70:	20004fe8 	.word	0x20004fe8
 8006a74:	200050ec 	.word	0x200050ec

08006a78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a7c:	4b07      	ldr	r3, [pc, #28]	; (8006a9c <pvTaskIncrementMutexHeldCount+0x24>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d004      	beq.n	8006a8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a84:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <pvTaskIncrementMutexHeldCount+0x24>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a8a:	3201      	adds	r2, #1
 8006a8c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006a8e:	4b03      	ldr	r3, [pc, #12]	; (8006a9c <pvTaskIncrementMutexHeldCount+0x24>)
 8006a90:	681b      	ldr	r3, [r3, #0]
	}
 8006a92:	4618      	mov	r0, r3
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	20004fe4 	.word	0x20004fe4

08006aa0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006aaa:	4b29      	ldr	r3, [pc, #164]	; (8006b50 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ab0:	4b28      	ldr	r3, [pc, #160]	; (8006b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe f840 	bl	8004b3c <uxListRemove>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10b      	bne.n	8006ada <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006ac2:	4b24      	ldr	r3, [pc, #144]	; (8006b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac8:	2201      	movs	r2, #1
 8006aca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ace:	43da      	mvns	r2, r3
 8006ad0:	4b21      	ldr	r3, [pc, #132]	; (8006b58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	4a20      	ldr	r2, [pc, #128]	; (8006b58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ad8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d10a      	bne.n	8006af8 <prvAddCurrentTaskToDelayedList+0x58>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d007      	beq.n	8006af8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ae8:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3304      	adds	r3, #4
 8006aee:	4619      	mov	r1, r3
 8006af0:	481a      	ldr	r0, [pc, #104]	; (8006b5c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006af2:	f7fd ffc6 	bl	8004a82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006af6:	e026      	b.n	8006b46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4413      	add	r3, r2
 8006afe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b00:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d209      	bcs.n	8006b24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b10:	4b13      	ldr	r3, [pc, #76]	; (8006b60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3304      	adds	r3, #4
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	f7fd ffd4 	bl	8004aca <vListInsert>
}
 8006b22:	e010      	b.n	8006b46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b24:	4b0f      	ldr	r3, [pc, #60]	; (8006b64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4610      	mov	r0, r2
 8006b32:	f7fd ffca 	bl	8004aca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b36:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d202      	bcs.n	8006b46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006b40:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	6013      	str	r3, [r2, #0]
}
 8006b46:	bf00      	nop
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	200050e8 	.word	0x200050e8
 8006b54:	20004fe4 	.word	0x20004fe4
 8006b58:	200050ec 	.word	0x200050ec
 8006b5c:	200050d0 	.word	0x200050d0
 8006b60:	200050a0 	.word	0x200050a0
 8006b64:	2000509c 	.word	0x2000509c
 8006b68:	20005104 	.word	0x20005104

08006b6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3b04      	subs	r3, #4
 8006b7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3b04      	subs	r3, #4
 8006b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f023 0201 	bic.w	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3b04      	subs	r3, #4
 8006b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b9c:	4a0c      	ldr	r2, [pc, #48]	; (8006bd0 <pxPortInitialiseStack+0x64>)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3b14      	subs	r3, #20
 8006ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3b04      	subs	r3, #4
 8006bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f06f 0202 	mvn.w	r2, #2
 8006bba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3b20      	subs	r3, #32
 8006bc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	08006bd5 	.word	0x08006bd5

08006bd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bde:	4b14      	ldr	r3, [pc, #80]	; (8006c30 <prvTaskExitError+0x5c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be6:	d00c      	beq.n	8006c02 <prvTaskExitError+0x2e>
	__asm volatile
 8006be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bec:	b672      	cpsid	i
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	b662      	cpsie	i
 8006bfc:	60fb      	str	r3, [r7, #12]
}
 8006bfe:	bf00      	nop
 8006c00:	e7fe      	b.n	8006c00 <prvTaskExitError+0x2c>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	b672      	cpsid	i
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	b662      	cpsie	i
 8006c16:	60bb      	str	r3, [r7, #8]
}
 8006c18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c1a:	bf00      	nop
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0fc      	beq.n	8006c1c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c22:	bf00      	nop
 8006c24:	bf00      	nop
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	20000020 	.word	0x20000020
	...

08006c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <pxCurrentTCBConst2>)
 8006c42:	6819      	ldr	r1, [r3, #0]
 8006c44:	6808      	ldr	r0, [r1, #0]
 8006c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4a:	f380 8809 	msr	PSP, r0
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f04f 0000 	mov.w	r0, #0
 8006c56:	f380 8811 	msr	BASEPRI, r0
 8006c5a:	4770      	bx	lr
 8006c5c:	f3af 8000 	nop.w

08006c60 <pxCurrentTCBConst2>:
 8006c60:	20004fe4 	.word	0x20004fe4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop

08006c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c68:	4808      	ldr	r0, [pc, #32]	; (8006c8c <prvPortStartFirstTask+0x24>)
 8006c6a:	6800      	ldr	r0, [r0, #0]
 8006c6c:	6800      	ldr	r0, [r0, #0]
 8006c6e:	f380 8808 	msr	MSP, r0
 8006c72:	f04f 0000 	mov.w	r0, #0
 8006c76:	f380 8814 	msr	CONTROL, r0
 8006c7a:	b662      	cpsie	i
 8006c7c:	b661      	cpsie	f
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	df00      	svc	0
 8006c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c8a:	bf00      	nop
 8006c8c:	e000ed08 	.word	0xe000ed08

08006c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c96:	4b37      	ldr	r3, [pc, #220]	; (8006d74 <xPortStartScheduler+0xe4>)
 8006c98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	22ff      	movs	r2, #255	; 0xff
 8006ca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	4b2f      	ldr	r3, [pc, #188]	; (8006d78 <xPortStartScheduler+0xe8>)
 8006cbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cbe:	4b2f      	ldr	r3, [pc, #188]	; (8006d7c <xPortStartScheduler+0xec>)
 8006cc0:	2207      	movs	r2, #7
 8006cc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cc4:	e009      	b.n	8006cda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006cc6:	4b2d      	ldr	r3, [pc, #180]	; (8006d7c <xPortStartScheduler+0xec>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	4a2b      	ldr	r2, [pc, #172]	; (8006d7c <xPortStartScheduler+0xec>)
 8006cce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce2:	2b80      	cmp	r3, #128	; 0x80
 8006ce4:	d0ef      	beq.n	8006cc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ce6:	4b25      	ldr	r3, [pc, #148]	; (8006d7c <xPortStartScheduler+0xec>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f1c3 0307 	rsb	r3, r3, #7
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	d00c      	beq.n	8006d0c <xPortStartScheduler+0x7c>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	b672      	cpsid	i
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	b662      	cpsie	i
 8006d06:	60bb      	str	r3, [r7, #8]
}
 8006d08:	bf00      	nop
 8006d0a:	e7fe      	b.n	8006d0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d0c:	4b1b      	ldr	r3, [pc, #108]	; (8006d7c <xPortStartScheduler+0xec>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	4a1a      	ldr	r2, [pc, #104]	; (8006d7c <xPortStartScheduler+0xec>)
 8006d14:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d16:	4b19      	ldr	r3, [pc, #100]	; (8006d7c <xPortStartScheduler+0xec>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d1e:	4a17      	ldr	r2, [pc, #92]	; (8006d7c <xPortStartScheduler+0xec>)
 8006d20:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d2a:	4b15      	ldr	r3, [pc, #84]	; (8006d80 <xPortStartScheduler+0xf0>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a14      	ldr	r2, [pc, #80]	; (8006d80 <xPortStartScheduler+0xf0>)
 8006d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d34:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d36:	4b12      	ldr	r3, [pc, #72]	; (8006d80 <xPortStartScheduler+0xf0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a11      	ldr	r2, [pc, #68]	; (8006d80 <xPortStartScheduler+0xf0>)
 8006d3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d40:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d42:	f000 f8dd 	bl	8006f00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d46:	4b0f      	ldr	r3, [pc, #60]	; (8006d84 <xPortStartScheduler+0xf4>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d4c:	f000 f8fc 	bl	8006f48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d50:	4b0d      	ldr	r3, [pc, #52]	; (8006d88 <xPortStartScheduler+0xf8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a0c      	ldr	r2, [pc, #48]	; (8006d88 <xPortStartScheduler+0xf8>)
 8006d56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d5a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d5c:	f7ff ff84 	bl	8006c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d60:	f7ff fa72 	bl	8006248 <vTaskSwitchContext>
	prvTaskExitError();
 8006d64:	f7ff ff36 	bl	8006bd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	e000e400 	.word	0xe000e400
 8006d78:	20005110 	.word	0x20005110
 8006d7c:	20005114 	.word	0x20005114
 8006d80:	e000ed20 	.word	0xe000ed20
 8006d84:	20000020 	.word	0x20000020
 8006d88:	e000ef34 	.word	0xe000ef34

08006d8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	b672      	cpsid	i
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	b662      	cpsie	i
 8006da6:	607b      	str	r3, [r7, #4]
}
 8006da8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006daa:	4b10      	ldr	r3, [pc, #64]	; (8006dec <vPortEnterCritical+0x60>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3301      	adds	r3, #1
 8006db0:	4a0e      	ldr	r2, [pc, #56]	; (8006dec <vPortEnterCritical+0x60>)
 8006db2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006db4:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <vPortEnterCritical+0x60>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d111      	bne.n	8006de0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dbc:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <vPortEnterCritical+0x64>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00c      	beq.n	8006de0 <vPortEnterCritical+0x54>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	b672      	cpsid	i
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	b662      	cpsie	i
 8006dda:	603b      	str	r3, [r7, #0]
}
 8006ddc:	bf00      	nop
 8006dde:	e7fe      	b.n	8006dde <vPortEnterCritical+0x52>
	}
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	20000020 	.word	0x20000020
 8006df0:	e000ed04 	.word	0xe000ed04

08006df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006dfa:	4b13      	ldr	r3, [pc, #76]	; (8006e48 <vPortExitCritical+0x54>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10c      	bne.n	8006e1c <vPortExitCritical+0x28>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	b672      	cpsid	i
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	b662      	cpsie	i
 8006e16:	607b      	str	r3, [r7, #4]
}
 8006e18:	bf00      	nop
 8006e1a:	e7fe      	b.n	8006e1a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006e1c:	4b0a      	ldr	r3, [pc, #40]	; (8006e48 <vPortExitCritical+0x54>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	4a09      	ldr	r2, [pc, #36]	; (8006e48 <vPortExitCritical+0x54>)
 8006e24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e26:	4b08      	ldr	r3, [pc, #32]	; (8006e48 <vPortExitCritical+0x54>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d105      	bne.n	8006e3a <vPortExitCritical+0x46>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	f383 8811 	msr	BASEPRI, r3
}
 8006e38:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	20000020 	.word	0x20000020
 8006e4c:	00000000 	.word	0x00000000

08006e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e50:	f3ef 8009 	mrs	r0, PSP
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	4b15      	ldr	r3, [pc, #84]	; (8006eb0 <pxCurrentTCBConst>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	f01e 0f10 	tst.w	lr, #16
 8006e60:	bf08      	it	eq
 8006e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6a:	6010      	str	r0, [r2, #0]
 8006e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e74:	b672      	cpsid	i
 8006e76:	f380 8811 	msr	BASEPRI, r0
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	b662      	cpsie	i
 8006e84:	f7ff f9e0 	bl	8006248 <vTaskSwitchContext>
 8006e88:	f04f 0000 	mov.w	r0, #0
 8006e8c:	f380 8811 	msr	BASEPRI, r0
 8006e90:	bc09      	pop	{r0, r3}
 8006e92:	6819      	ldr	r1, [r3, #0]
 8006e94:	6808      	ldr	r0, [r1, #0]
 8006e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9a:	f01e 0f10 	tst.w	lr, #16
 8006e9e:	bf08      	it	eq
 8006ea0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ea4:	f380 8809 	msr	PSP, r0
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop

08006eb0 <pxCurrentTCBConst>:
 8006eb0:	20004fe4 	.word	0x20004fe4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop

08006eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	b672      	cpsid	i
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	b662      	cpsie	i
 8006ed2:	607b      	str	r3, [r7, #4]
}
 8006ed4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ed6:	f7ff f8fd 	bl	80060d4 <xTaskIncrementTick>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ee0:	4b06      	ldr	r3, [pc, #24]	; (8006efc <SysTick_Handler+0x44>)
 8006ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	2300      	movs	r3, #0
 8006eea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	f383 8811 	msr	BASEPRI, r3
}
 8006ef2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ef4:	bf00      	nop
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	e000ed04 	.word	0xe000ed04

08006f00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f04:	4b0b      	ldr	r3, [pc, #44]	; (8006f34 <vPortSetupTimerInterrupt+0x34>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f0a:	4b0b      	ldr	r3, [pc, #44]	; (8006f38 <vPortSetupTimerInterrupt+0x38>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <vPortSetupTimerInterrupt+0x3c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a0a      	ldr	r2, [pc, #40]	; (8006f40 <vPortSetupTimerInterrupt+0x40>)
 8006f16:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1a:	099b      	lsrs	r3, r3, #6
 8006f1c:	4a09      	ldr	r2, [pc, #36]	; (8006f44 <vPortSetupTimerInterrupt+0x44>)
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f22:	4b04      	ldr	r3, [pc, #16]	; (8006f34 <vPortSetupTimerInterrupt+0x34>)
 8006f24:	2207      	movs	r2, #7
 8006f26:	601a      	str	r2, [r3, #0]
}
 8006f28:	bf00      	nop
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	e000e010 	.word	0xe000e010
 8006f38:	e000e018 	.word	0xe000e018
 8006f3c:	20000000 	.word	0x20000000
 8006f40:	10624dd3 	.word	0x10624dd3
 8006f44:	e000e014 	.word	0xe000e014

08006f48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f58 <vPortEnableVFP+0x10>
 8006f4c:	6801      	ldr	r1, [r0, #0]
 8006f4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f52:	6001      	str	r1, [r0, #0]
 8006f54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f56:	bf00      	nop
 8006f58:	e000ed88 	.word	0xe000ed88

08006f5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f62:	f3ef 8305 	mrs	r3, IPSR
 8006f66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b0f      	cmp	r3, #15
 8006f6c:	d916      	bls.n	8006f9c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f6e:	4a19      	ldr	r2, [pc, #100]	; (8006fd4 <vPortValidateInterruptPriority+0x78>)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4413      	add	r3, r2
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f78:	4b17      	ldr	r3, [pc, #92]	; (8006fd8 <vPortValidateInterruptPriority+0x7c>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	7afa      	ldrb	r2, [r7, #11]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d20c      	bcs.n	8006f9c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	b672      	cpsid	i
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	b662      	cpsie	i
 8006f96:	607b      	str	r3, [r7, #4]
}
 8006f98:	bf00      	nop
 8006f9a:	e7fe      	b.n	8006f9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f9c:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <vPortValidateInterruptPriority+0x80>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006fa4:	4b0e      	ldr	r3, [pc, #56]	; (8006fe0 <vPortValidateInterruptPriority+0x84>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d90c      	bls.n	8006fc6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	b672      	cpsid	i
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	b662      	cpsie	i
 8006fc0:	603b      	str	r3, [r7, #0]
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <vPortValidateInterruptPriority+0x68>
	}
 8006fc6:	bf00      	nop
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	e000e3f0 	.word	0xe000e3f0
 8006fd8:	20005110 	.word	0x20005110
 8006fdc:	e000ed0c 	.word	0xe000ed0c
 8006fe0:	20005114 	.word	0x20005114

08006fe4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08a      	sub	sp, #40	; 0x28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fec:	2300      	movs	r3, #0
 8006fee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ff0:	f7fe ffa2 	bl	8005f38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ff4:	4b5b      	ldr	r3, [pc, #364]	; (8007164 <pvPortMalloc+0x180>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ffc:	f000 f91a 	bl	8007234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007000:	4b59      	ldr	r3, [pc, #356]	; (8007168 <pvPortMalloc+0x184>)
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4013      	ands	r3, r2
 8007008:	2b00      	cmp	r3, #0
 800700a:	f040 8092 	bne.w	8007132 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d01f      	beq.n	8007054 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007014:	2208      	movs	r2, #8
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4413      	add	r3, r2
 800701a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	2b00      	cmp	r3, #0
 8007024:	d016      	beq.n	8007054 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f023 0307 	bic.w	r3, r3, #7
 800702c:	3308      	adds	r3, #8
 800702e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00c      	beq.n	8007054 <pvPortMalloc+0x70>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	b672      	cpsid	i
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	b662      	cpsie	i
 800704e:	617b      	str	r3, [r7, #20]
}
 8007050:	bf00      	nop
 8007052:	e7fe      	b.n	8007052 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d06b      	beq.n	8007132 <pvPortMalloc+0x14e>
 800705a:	4b44      	ldr	r3, [pc, #272]	; (800716c <pvPortMalloc+0x188>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	429a      	cmp	r2, r3
 8007062:	d866      	bhi.n	8007132 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007064:	4b42      	ldr	r3, [pc, #264]	; (8007170 <pvPortMalloc+0x18c>)
 8007066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007068:	4b41      	ldr	r3, [pc, #260]	; (8007170 <pvPortMalloc+0x18c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800706e:	e004      	b.n	800707a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	429a      	cmp	r2, r3
 8007082:	d903      	bls.n	800708c <pvPortMalloc+0xa8>
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1f1      	bne.n	8007070 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800708c:	4b35      	ldr	r3, [pc, #212]	; (8007164 <pvPortMalloc+0x180>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007092:	429a      	cmp	r2, r3
 8007094:	d04d      	beq.n	8007132 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2208      	movs	r2, #8
 800709c:	4413      	add	r3, r2
 800709e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	1ad2      	subs	r2, r2, r3
 80070b0:	2308      	movs	r3, #8
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d921      	bls.n	80070fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4413      	add	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00c      	beq.n	80070e4 <pvPortMalloc+0x100>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	b672      	cpsid	i
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	b662      	cpsie	i
 80070de:	613b      	str	r3, [r7, #16]
}
 80070e0:	bf00      	nop
 80070e2:	e7fe      	b.n	80070e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	1ad2      	subs	r2, r2, r3
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070f6:	69b8      	ldr	r0, [r7, #24]
 80070f8:	f000 f8fe 	bl	80072f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070fc:	4b1b      	ldr	r3, [pc, #108]	; (800716c <pvPortMalloc+0x188>)
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	4a19      	ldr	r2, [pc, #100]	; (800716c <pvPortMalloc+0x188>)
 8007108:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800710a:	4b18      	ldr	r3, [pc, #96]	; (800716c <pvPortMalloc+0x188>)
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	4b19      	ldr	r3, [pc, #100]	; (8007174 <pvPortMalloc+0x190>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d203      	bcs.n	800711e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007116:	4b15      	ldr	r3, [pc, #84]	; (800716c <pvPortMalloc+0x188>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a16      	ldr	r2, [pc, #88]	; (8007174 <pvPortMalloc+0x190>)
 800711c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	4b11      	ldr	r3, [pc, #68]	; (8007168 <pvPortMalloc+0x184>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	431a      	orrs	r2, r3
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007132:	f7fe ff0f 	bl	8005f54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00c      	beq.n	800715a <pvPortMalloc+0x176>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	b672      	cpsid	i
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	b662      	cpsie	i
 8007154:	60fb      	str	r3, [r7, #12]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <pvPortMalloc+0x174>
	return pvReturn;
 800715a:	69fb      	ldr	r3, [r7, #28]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3728      	adds	r7, #40	; 0x28
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20008d20 	.word	0x20008d20
 8007168:	20008d2c 	.word	0x20008d2c
 800716c:	20008d24 	.word	0x20008d24
 8007170:	20008d18 	.word	0x20008d18
 8007174:	20008d28 	.word	0x20008d28

08007178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d04c      	beq.n	8007224 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800718a:	2308      	movs	r3, #8
 800718c:	425b      	negs	r3, r3
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4413      	add	r3, r2
 8007192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	4b23      	ldr	r3, [pc, #140]	; (800722c <vPortFree+0xb4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10c      	bne.n	80071c0 <vPortFree+0x48>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071aa:	b672      	cpsid	i
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	b662      	cpsie	i
 80071ba:	60fb      	str	r3, [r7, #12]
}
 80071bc:	bf00      	nop
 80071be:	e7fe      	b.n	80071be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00c      	beq.n	80071e2 <vPortFree+0x6a>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	b672      	cpsid	i
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	b662      	cpsie	i
 80071dc:	60bb      	str	r3, [r7, #8]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	4b11      	ldr	r3, [pc, #68]	; (800722c <vPortFree+0xb4>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4013      	ands	r3, r2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d019      	beq.n	8007224 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d115      	bne.n	8007224 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	4b0b      	ldr	r3, [pc, #44]	; (800722c <vPortFree+0xb4>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	43db      	mvns	r3, r3
 8007202:	401a      	ands	r2, r3
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007208:	f7fe fe96 	bl	8005f38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	4b07      	ldr	r3, [pc, #28]	; (8007230 <vPortFree+0xb8>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4413      	add	r3, r2
 8007216:	4a06      	ldr	r2, [pc, #24]	; (8007230 <vPortFree+0xb8>)
 8007218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800721a:	6938      	ldr	r0, [r7, #16]
 800721c:	f000 f86c 	bl	80072f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007220:	f7fe fe98 	bl	8005f54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007224:	bf00      	nop
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	20008d2c 	.word	0x20008d2c
 8007230:	20008d24 	.word	0x20008d24

08007234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800723a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800723e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007240:	4b27      	ldr	r3, [pc, #156]	; (80072e0 <prvHeapInit+0xac>)
 8007242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00c      	beq.n	8007268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	3307      	adds	r3, #7
 8007252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0307 	bic.w	r3, r3, #7
 800725a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	4a1f      	ldr	r2, [pc, #124]	; (80072e0 <prvHeapInit+0xac>)
 8007264:	4413      	add	r3, r2
 8007266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800726c:	4a1d      	ldr	r2, [pc, #116]	; (80072e4 <prvHeapInit+0xb0>)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007272:	4b1c      	ldr	r3, [pc, #112]	; (80072e4 <prvHeapInit+0xb0>)
 8007274:	2200      	movs	r2, #0
 8007276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	4413      	add	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007280:	2208      	movs	r2, #8
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	1a9b      	subs	r3, r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0307 	bic.w	r3, r3, #7
 800728e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <prvHeapInit+0xb4>)
 8007294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007296:	4b14      	ldr	r3, [pc, #80]	; (80072e8 <prvHeapInit+0xb4>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2200      	movs	r2, #0
 800729c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800729e:	4b12      	ldr	r3, [pc, #72]	; (80072e8 <prvHeapInit+0xb4>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072b4:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <prvHeapInit+0xb4>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	4a0a      	ldr	r2, [pc, #40]	; (80072ec <prvHeapInit+0xb8>)
 80072c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	4a09      	ldr	r2, [pc, #36]	; (80072f0 <prvHeapInit+0xbc>)
 80072ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072cc:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <prvHeapInit+0xc0>)
 80072ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072d2:	601a      	str	r2, [r3, #0]
}
 80072d4:	bf00      	nop
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	20005118 	.word	0x20005118
 80072e4:	20008d18 	.word	0x20008d18
 80072e8:	20008d20 	.word	0x20008d20
 80072ec:	20008d28 	.word	0x20008d28
 80072f0:	20008d24 	.word	0x20008d24
 80072f4:	20008d2c 	.word	0x20008d2c

080072f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007300:	4b28      	ldr	r3, [pc, #160]	; (80073a4 <prvInsertBlockIntoFreeList+0xac>)
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	e002      	b.n	800730c <prvInsertBlockIntoFreeList+0x14>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	429a      	cmp	r2, r3
 8007314:	d8f7      	bhi.n	8007306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	4413      	add	r3, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	429a      	cmp	r2, r3
 8007326:	d108      	bne.n	800733a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	441a      	add	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	441a      	add	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d118      	bne.n	8007380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4b15      	ldr	r3, [pc, #84]	; (80073a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d00d      	beq.n	8007376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	441a      	add	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	e008      	b.n	8007388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007376:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	e003      	b.n	8007388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	429a      	cmp	r2, r3
 800738e:	d002      	beq.n	8007396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007396:	bf00      	nop
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	20008d18 	.word	0x20008d18
 80073a8:	20008d20 	.word	0x20008d20

080073ac <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80073b6:	f007 fac5 	bl	800e944 <sys_timeouts_sleeptime>
 80073ba:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c2:	d10b      	bne.n	80073dc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80073c4:	4813      	ldr	r0, [pc, #76]	; (8007414 <tcpip_timeouts_mbox_fetch+0x68>)
 80073c6:	f00a f83a 	bl	801143e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80073ca:	2200      	movs	r2, #0
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f009 ffac 	bl	801132c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80073d4:	480f      	ldr	r0, [pc, #60]	; (8007414 <tcpip_timeouts_mbox_fetch+0x68>)
 80073d6:	f00a f823 	bl	8011420 <sys_mutex_lock>
    return;
 80073da:	e018      	b.n	800740e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d102      	bne.n	80073e8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80073e2:	f007 fa75 	bl	800e8d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80073e6:	e7e6      	b.n	80073b6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80073e8:	480a      	ldr	r0, [pc, #40]	; (8007414 <tcpip_timeouts_mbox_fetch+0x68>)
 80073ea:	f00a f828 	bl	801143e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f009 ff9a 	bl	801132c <sys_arch_mbox_fetch>
 80073f8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80073fa:	4806      	ldr	r0, [pc, #24]	; (8007414 <tcpip_timeouts_mbox_fetch+0x68>)
 80073fc:	f00a f810 	bl	8011420 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d102      	bne.n	800740e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8007408:	f007 fa62 	bl	800e8d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800740c:	e7d3      	b.n	80073b6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20008d3c 	.word	0x20008d3c

08007418 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8007420:	4810      	ldr	r0, [pc, #64]	; (8007464 <tcpip_thread+0x4c>)
 8007422:	f009 fffd 	bl	8011420 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8007426:	4b10      	ldr	r3, [pc, #64]	; (8007468 <tcpip_thread+0x50>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800742e:	4b0e      	ldr	r3, [pc, #56]	; (8007468 <tcpip_thread+0x50>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a0e      	ldr	r2, [pc, #56]	; (800746c <tcpip_thread+0x54>)
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	4610      	mov	r0, r2
 8007438:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800743a:	f107 030c 	add.w	r3, r7, #12
 800743e:	4619      	mov	r1, r3
 8007440:	480b      	ldr	r0, [pc, #44]	; (8007470 <tcpip_thread+0x58>)
 8007442:	f7ff ffb3 	bl	80073ac <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d106      	bne.n	800745a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800744c:	4b09      	ldr	r3, [pc, #36]	; (8007474 <tcpip_thread+0x5c>)
 800744e:	2291      	movs	r2, #145	; 0x91
 8007450:	4909      	ldr	r1, [pc, #36]	; (8007478 <tcpip_thread+0x60>)
 8007452:	480a      	ldr	r0, [pc, #40]	; (800747c <tcpip_thread+0x64>)
 8007454:	f00a fa1c 	bl	8011890 <iprintf>
      continue;
 8007458:	e003      	b.n	8007462 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4618      	mov	r0, r3
 800745e:	f000 f80f 	bl	8007480 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007462:	e7ea      	b.n	800743a <tcpip_thread+0x22>
 8007464:	20008d3c 	.word	0x20008d3c
 8007468:	20008d30 	.word	0x20008d30
 800746c:	20008d34 	.word	0x20008d34
 8007470:	20008d38 	.word	0x20008d38
 8007474:	080127cc 	.word	0x080127cc
 8007478:	080127fc 	.word	0x080127fc
 800747c:	0801281c 	.word	0x0801281c

08007480 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d026      	beq.n	80074de <tcpip_thread_handle_msg+0x5e>
 8007490:	2b02      	cmp	r3, #2
 8007492:	dc2b      	bgt.n	80074ec <tcpip_thread_handle_msg+0x6c>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <tcpip_thread_handle_msg+0x1e>
 8007498:	2b01      	cmp	r3, #1
 800749a:	d015      	beq.n	80074c8 <tcpip_thread_handle_msg+0x48>
 800749c:	e026      	b.n	80074ec <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6850      	ldr	r0, [r2, #4]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6892      	ldr	r2, [r2, #8]
 80074aa:	4611      	mov	r1, r2
 80074ac:	4798      	blx	r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d004      	beq.n	80074be <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f001 fd0b 	bl	8008ed4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	2009      	movs	r0, #9
 80074c2:	f000 fe63 	bl	800818c <memp_free>
      break;
 80074c6:	e018      	b.n	80074fa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6892      	ldr	r2, [r2, #8]
 80074d0:	4610      	mov	r0, r2
 80074d2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80074d4:	6879      	ldr	r1, [r7, #4]
 80074d6:	2008      	movs	r0, #8
 80074d8:	f000 fe58 	bl	800818c <memp_free>
      break;
 80074dc:	e00d      	b.n	80074fa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6892      	ldr	r2, [r2, #8]
 80074e6:	4610      	mov	r0, r2
 80074e8:	4798      	blx	r3
      break;
 80074ea:	e006      	b.n	80074fa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <tcpip_thread_handle_msg+0x84>)
 80074ee:	22cf      	movs	r2, #207	; 0xcf
 80074f0:	4905      	ldr	r1, [pc, #20]	; (8007508 <tcpip_thread_handle_msg+0x88>)
 80074f2:	4806      	ldr	r0, [pc, #24]	; (800750c <tcpip_thread_handle_msg+0x8c>)
 80074f4:	f00a f9cc 	bl	8011890 <iprintf>
      break;
 80074f8:	bf00      	nop
  }
}
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	080127cc 	.word	0x080127cc
 8007508:	080127fc 	.word	0x080127fc
 800750c:	0801281c 	.word	0x0801281c

08007510 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800751c:	481a      	ldr	r0, [pc, #104]	; (8007588 <tcpip_inpkt+0x78>)
 800751e:	f009 ff44 	bl	80113aa <sys_mbox_valid>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d105      	bne.n	8007534 <tcpip_inpkt+0x24>
 8007528:	4b18      	ldr	r3, [pc, #96]	; (800758c <tcpip_inpkt+0x7c>)
 800752a:	22fc      	movs	r2, #252	; 0xfc
 800752c:	4918      	ldr	r1, [pc, #96]	; (8007590 <tcpip_inpkt+0x80>)
 800752e:	4819      	ldr	r0, [pc, #100]	; (8007594 <tcpip_inpkt+0x84>)
 8007530:	f00a f9ae 	bl	8011890 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007534:	2009      	movs	r0, #9
 8007536:	f000 fdb3 	bl	80080a0 <memp_malloc>
 800753a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d102      	bne.n	8007548 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8007542:	f04f 33ff 	mov.w	r3, #4294967295
 8007546:	e01a      	b.n	800757e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	2200      	movs	r2, #0
 800754c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007560:	6979      	ldr	r1, [r7, #20]
 8007562:	4809      	ldr	r0, [pc, #36]	; (8007588 <tcpip_inpkt+0x78>)
 8007564:	f009 fec8 	bl	80112f8 <sys_mbox_trypost>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d006      	beq.n	800757c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800756e:	6979      	ldr	r1, [r7, #20]
 8007570:	2009      	movs	r0, #9
 8007572:	f000 fe0b 	bl	800818c <memp_free>
    return ERR_MEM;
 8007576:	f04f 33ff 	mov.w	r3, #4294967295
 800757a:	e000      	b.n	800757e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800757c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20008d38 	.word	0x20008d38
 800758c:	080127cc 	.word	0x080127cc
 8007590:	08012844 	.word	0x08012844
 8007594:	0801281c 	.word	0x0801281c

08007598 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80075a8:	f003 0318 	and.w	r3, r3, #24
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d006      	beq.n	80075be <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80075b0:	4a08      	ldr	r2, [pc, #32]	; (80075d4 <tcpip_input+0x3c>)
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff ffab 	bl	8007510 <tcpip_inpkt>
 80075ba:	4603      	mov	r3, r0
 80075bc:	e005      	b.n	80075ca <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80075be:	4a06      	ldr	r2, [pc, #24]	; (80075d8 <tcpip_input+0x40>)
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff ffa4 	bl	8007510 <tcpip_inpkt>
 80075c8:	4603      	mov	r3, r0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	08011109 	.word	0x08011109
 80075d8:	08010011 	.word	0x08010011

080075dc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80075e6:	4819      	ldr	r0, [pc, #100]	; (800764c <tcpip_try_callback+0x70>)
 80075e8:	f009 fedf 	bl	80113aa <sys_mbox_valid>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d106      	bne.n	8007600 <tcpip_try_callback+0x24>
 80075f2:	4b17      	ldr	r3, [pc, #92]	; (8007650 <tcpip_try_callback+0x74>)
 80075f4:	f240 125d 	movw	r2, #349	; 0x15d
 80075f8:	4916      	ldr	r1, [pc, #88]	; (8007654 <tcpip_try_callback+0x78>)
 80075fa:	4817      	ldr	r0, [pc, #92]	; (8007658 <tcpip_try_callback+0x7c>)
 80075fc:	f00a f948 	bl	8011890 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007600:	2008      	movs	r0, #8
 8007602:	f000 fd4d 	bl	80080a0 <memp_malloc>
 8007606:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800760e:	f04f 33ff 	mov.w	r3, #4294967295
 8007612:	e017      	b.n	8007644 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007626:	68f9      	ldr	r1, [r7, #12]
 8007628:	4808      	ldr	r0, [pc, #32]	; (800764c <tcpip_try_callback+0x70>)
 800762a:	f009 fe65 	bl	80112f8 <sys_mbox_trypost>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d006      	beq.n	8007642 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8007634:	68f9      	ldr	r1, [r7, #12]
 8007636:	2008      	movs	r0, #8
 8007638:	f000 fda8 	bl	800818c <memp_free>
    return ERR_MEM;
 800763c:	f04f 33ff 	mov.w	r3, #4294967295
 8007640:	e000      	b.n	8007644 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	20008d38 	.word	0x20008d38
 8007650:	080127cc 	.word	0x080127cc
 8007654:	08012844 	.word	0x08012844
 8007658:	0801281c 	.word	0x0801281c

0800765c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af02      	add	r7, sp, #8
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  lwip_init();
 8007666:	f000 f871 	bl	800774c <lwip_init>

  tcpip_init_done = initfunc;
 800766a:	4a17      	ldr	r2, [pc, #92]	; (80076c8 <tcpip_init+0x6c>)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8007670:	4a16      	ldr	r2, [pc, #88]	; (80076cc <tcpip_init+0x70>)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007676:	2106      	movs	r1, #6
 8007678:	4815      	ldr	r0, [pc, #84]	; (80076d0 <tcpip_init+0x74>)
 800767a:	f009 fe1b 	bl	80112b4 <sys_mbox_new>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d006      	beq.n	8007692 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007684:	4b13      	ldr	r3, [pc, #76]	; (80076d4 <tcpip_init+0x78>)
 8007686:	f240 2261 	movw	r2, #609	; 0x261
 800768a:	4913      	ldr	r1, [pc, #76]	; (80076d8 <tcpip_init+0x7c>)
 800768c:	4813      	ldr	r0, [pc, #76]	; (80076dc <tcpip_init+0x80>)
 800768e:	f00a f8ff 	bl	8011890 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007692:	4813      	ldr	r0, [pc, #76]	; (80076e0 <tcpip_init+0x84>)
 8007694:	f009 fea8 	bl	80113e8 <sys_mutex_new>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d006      	beq.n	80076ac <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800769e:	4b0d      	ldr	r3, [pc, #52]	; (80076d4 <tcpip_init+0x78>)
 80076a0:	f240 2265 	movw	r2, #613	; 0x265
 80076a4:	490f      	ldr	r1, [pc, #60]	; (80076e4 <tcpip_init+0x88>)
 80076a6:	480d      	ldr	r0, [pc, #52]	; (80076dc <tcpip_init+0x80>)
 80076a8:	f00a f8f2 	bl	8011890 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80076ac:	2300      	movs	r3, #0
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076b4:	2200      	movs	r2, #0
 80076b6:	490c      	ldr	r1, [pc, #48]	; (80076e8 <tcpip_init+0x8c>)
 80076b8:	480c      	ldr	r0, [pc, #48]	; (80076ec <tcpip_init+0x90>)
 80076ba:	f009 fecd 	bl	8011458 <sys_thread_new>
}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20008d30 	.word	0x20008d30
 80076cc:	20008d34 	.word	0x20008d34
 80076d0:	20008d38 	.word	0x20008d38
 80076d4:	080127cc 	.word	0x080127cc
 80076d8:	08012854 	.word	0x08012854
 80076dc:	0801281c 	.word	0x0801281c
 80076e0:	20008d3c 	.word	0x20008d3c
 80076e4:	08012878 	.word	0x08012878
 80076e8:	08007419 	.word	0x08007419
 80076ec:	0801289c 	.word	0x0801289c

080076f0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	4603      	mov	r3, r0
 80076f8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	021b      	lsls	r3, r3, #8
 80076fe:	b21a      	sxth	r2, r3
 8007700:	88fb      	ldrh	r3, [r7, #6]
 8007702:	0a1b      	lsrs	r3, r3, #8
 8007704:	b29b      	uxth	r3, r3
 8007706:	b21b      	sxth	r3, r3
 8007708:	4313      	orrs	r3, r2
 800770a:	b21b      	sxth	r3, r3
 800770c:	b29b      	uxth	r3, r3
}
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	061a      	lsls	r2, r3, #24
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	021b      	lsls	r3, r3, #8
 800772a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800772e:	431a      	orrs	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	0a1b      	lsrs	r3, r3, #8
 8007734:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007738:	431a      	orrs	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	0e1b      	lsrs	r3, r3, #24
 800773e:	4313      	orrs	r3, r2
}
 8007740:	4618      	mov	r0, r3
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007752:	2300      	movs	r3, #0
 8007754:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8007756:	f009 fe39 	bl	80113cc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800775a:	f000 f8d5 	bl	8007908 <mem_init>
  memp_init();
 800775e:	f000 fc31 	bl	8007fc4 <memp_init>
  pbuf_init();
  netif_init();
 8007762:	f000 fd3d 	bl	80081e0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007766:	f007 f925 	bl	800e9b4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800776a:	f001 fe4d 	bl	8009408 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800776e:	f007 f867 	bl	800e840 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007772:	bf00      	nop
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
	...

0800777c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <ptr_to_mem+0x20>)
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	4413      	add	r3, r2
}
 800778e:	4618      	mov	r0, r3
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	200093ac 	.word	0x200093ac

080077a0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80077a8:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <mem_to_ptr+0x20>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	b29b      	uxth	r3, r3
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	200093ac 	.word	0x200093ac

080077c4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80077c4:	b590      	push	{r4, r7, lr}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80077cc:	4b45      	ldr	r3, [pc, #276]	; (80078e4 <plug_holes+0x120>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d206      	bcs.n	80077e4 <plug_holes+0x20>
 80077d6:	4b44      	ldr	r3, [pc, #272]	; (80078e8 <plug_holes+0x124>)
 80077d8:	f240 12df 	movw	r2, #479	; 0x1df
 80077dc:	4943      	ldr	r1, [pc, #268]	; (80078ec <plug_holes+0x128>)
 80077de:	4844      	ldr	r0, [pc, #272]	; (80078f0 <plug_holes+0x12c>)
 80077e0:	f00a f856 	bl	8011890 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80077e4:	4b43      	ldr	r3, [pc, #268]	; (80078f4 <plug_holes+0x130>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d306      	bcc.n	80077fc <plug_holes+0x38>
 80077ee:	4b3e      	ldr	r3, [pc, #248]	; (80078e8 <plug_holes+0x124>)
 80077f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80077f4:	4940      	ldr	r1, [pc, #256]	; (80078f8 <plug_holes+0x134>)
 80077f6:	483e      	ldr	r0, [pc, #248]	; (80078f0 <plug_holes+0x12c>)
 80077f8:	f00a f84a 	bl	8011890 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	791b      	ldrb	r3, [r3, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d006      	beq.n	8007812 <plug_holes+0x4e>
 8007804:	4b38      	ldr	r3, [pc, #224]	; (80078e8 <plug_holes+0x124>)
 8007806:	f240 12e1 	movw	r2, #481	; 0x1e1
 800780a:	493c      	ldr	r1, [pc, #240]	; (80078fc <plug_holes+0x138>)
 800780c:	4838      	ldr	r0, [pc, #224]	; (80078f0 <plug_holes+0x12c>)
 800780e:	f00a f83f 	bl	8011890 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800781a:	d906      	bls.n	800782a <plug_holes+0x66>
 800781c:	4b32      	ldr	r3, [pc, #200]	; (80078e8 <plug_holes+0x124>)
 800781e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007822:	4937      	ldr	r1, [pc, #220]	; (8007900 <plug_holes+0x13c>)
 8007824:	4832      	ldr	r0, [pc, #200]	; (80078f0 <plug_holes+0x12c>)
 8007826:	f00a f833 	bl	8011890 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	4618      	mov	r0, r3
 8007830:	f7ff ffa4 	bl	800777c <ptr_to_mem>
 8007834:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	429a      	cmp	r2, r3
 800783c:	d024      	beq.n	8007888 <plug_holes+0xc4>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	791b      	ldrb	r3, [r3, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d120      	bne.n	8007888 <plug_holes+0xc4>
 8007846:	4b2b      	ldr	r3, [pc, #172]	; (80078f4 <plug_holes+0x130>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	429a      	cmp	r2, r3
 800784e:	d01b      	beq.n	8007888 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007850:	4b2c      	ldr	r3, [pc, #176]	; (8007904 <plug_holes+0x140>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	429a      	cmp	r2, r3
 8007858:	d102      	bne.n	8007860 <plug_holes+0x9c>
      lfree = mem;
 800785a:	4a2a      	ldr	r2, [pc, #168]	; (8007904 <plug_holes+0x140>)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	881a      	ldrh	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007870:	d00a      	beq.n	8007888 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff ff80 	bl	800777c <ptr_to_mem>
 800787c:	4604      	mov	r4, r0
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff ff8e 	bl	80077a0 <mem_to_ptr>
 8007884:	4603      	mov	r3, r0
 8007886:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	885b      	ldrh	r3, [r3, #2]
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff ff75 	bl	800777c <ptr_to_mem>
 8007892:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	429a      	cmp	r2, r3
 800789a:	d01f      	beq.n	80078dc <plug_holes+0x118>
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	791b      	ldrb	r3, [r3, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d11b      	bne.n	80078dc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80078a4:	4b17      	ldr	r3, [pc, #92]	; (8007904 <plug_holes+0x140>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d102      	bne.n	80078b4 <plug_holes+0xf0>
      lfree = pmem;
 80078ae:	4a15      	ldr	r2, [pc, #84]	; (8007904 <plug_holes+0x140>)
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	881a      	ldrh	r2, [r3, #0]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80078c4:	d00a      	beq.n	80078dc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff ff56 	bl	800777c <ptr_to_mem>
 80078d0:	4604      	mov	r4, r0
 80078d2:	68b8      	ldr	r0, [r7, #8]
 80078d4:	f7ff ff64 	bl	80077a0 <mem_to_ptr>
 80078d8:	4603      	mov	r3, r0
 80078da:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80078dc:	bf00      	nop
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd90      	pop	{r4, r7, pc}
 80078e4:	200093ac 	.word	0x200093ac
 80078e8:	080128ac 	.word	0x080128ac
 80078ec:	080128dc 	.word	0x080128dc
 80078f0:	080128f4 	.word	0x080128f4
 80078f4:	200093b0 	.word	0x200093b0
 80078f8:	0801291c 	.word	0x0801291c
 80078fc:	08012938 	.word	0x08012938
 8007900:	08012954 	.word	0x08012954
 8007904:	200093b8 	.word	0x200093b8

08007908 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800790e:	4b1f      	ldr	r3, [pc, #124]	; (800798c <mem_init+0x84>)
 8007910:	3303      	adds	r3, #3
 8007912:	f023 0303 	bic.w	r3, r3, #3
 8007916:	461a      	mov	r2, r3
 8007918:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <mem_init+0x88>)
 800791a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800791c:	4b1c      	ldr	r3, [pc, #112]	; (8007990 <mem_init+0x88>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007928:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007936:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800793a:	f7ff ff1f 	bl	800777c <ptr_to_mem>
 800793e:	4603      	mov	r3, r0
 8007940:	4a14      	ldr	r2, [pc, #80]	; (8007994 <mem_init+0x8c>)
 8007942:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007944:	4b13      	ldr	r3, [pc, #76]	; (8007994 <mem_init+0x8c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2201      	movs	r2, #1
 800794a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800794c:	4b11      	ldr	r3, [pc, #68]	; (8007994 <mem_init+0x8c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007954:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007956:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <mem_init+0x8c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800795e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007960:	4b0b      	ldr	r3, [pc, #44]	; (8007990 <mem_init+0x88>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a0c      	ldr	r2, [pc, #48]	; (8007998 <mem_init+0x90>)
 8007966:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007968:	480c      	ldr	r0, [pc, #48]	; (800799c <mem_init+0x94>)
 800796a:	f009 fd3d 	bl	80113e8 <sys_mutex_new>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d006      	beq.n	8007982 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007974:	4b0a      	ldr	r3, [pc, #40]	; (80079a0 <mem_init+0x98>)
 8007976:	f240 221f 	movw	r2, #543	; 0x21f
 800797a:	490a      	ldr	r1, [pc, #40]	; (80079a4 <mem_init+0x9c>)
 800797c:	480a      	ldr	r0, [pc, #40]	; (80079a8 <mem_init+0xa0>)
 800797e:	f009 ff87 	bl	8011890 <iprintf>
  }
}
 8007982:	bf00      	nop
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20008d58 	.word	0x20008d58
 8007990:	200093ac 	.word	0x200093ac
 8007994:	200093b0 	.word	0x200093b0
 8007998:	200093b8 	.word	0x200093b8
 800799c:	200093b4 	.word	0x200093b4
 80079a0:	080128ac 	.word	0x080128ac
 80079a4:	08012980 	.word	0x08012980
 80079a8:	080128f4 	.word	0x080128f4

080079ac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff fef3 	bl	80077a0 <mem_to_ptr>
 80079ba:	4603      	mov	r3, r0
 80079bc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff feda 	bl	800777c <ptr_to_mem>
 80079c8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	885b      	ldrh	r3, [r3, #2]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff fed4 	bl	800777c <ptr_to_mem>
 80079d4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80079de:	d818      	bhi.n	8007a12 <mem_link_valid+0x66>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	885b      	ldrh	r3, [r3, #2]
 80079e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80079e8:	d813      	bhi.n	8007a12 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80079ee:	8afa      	ldrh	r2, [r7, #22]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d004      	beq.n	80079fe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	8afa      	ldrh	r2, [r7, #22]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d109      	bne.n	8007a12 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80079fe:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <mem_link_valid+0x74>)
 8007a00:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d006      	beq.n	8007a16 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	885b      	ldrh	r3, [r3, #2]
 8007a0c:	8afa      	ldrh	r2, [r7, #22]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d001      	beq.n	8007a16 <mem_link_valid+0x6a>
    return 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	e000      	b.n	8007a18 <mem_link_valid+0x6c>
  }
  return 1;
 8007a16:	2301      	movs	r3, #1
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	200093b0 	.word	0x200093b0

08007a24 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d070      	beq.n	8007b14 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00d      	beq.n	8007a58 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007a3c:	4b37      	ldr	r3, [pc, #220]	; (8007b1c <mem_free+0xf8>)
 8007a3e:	f240 2273 	movw	r2, #627	; 0x273
 8007a42:	4937      	ldr	r1, [pc, #220]	; (8007b20 <mem_free+0xfc>)
 8007a44:	4837      	ldr	r0, [pc, #220]	; (8007b24 <mem_free+0x100>)
 8007a46:	f009 ff23 	bl	8011890 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007a4a:	f009 fd2b 	bl	80114a4 <sys_arch_protect>
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f009 fd35 	bl	80114c0 <sys_arch_unprotect>
    return;
 8007a56:	e05e      	b.n	8007b16 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3b08      	subs	r3, #8
 8007a5c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007a5e:	4b32      	ldr	r3, [pc, #200]	; (8007b28 <mem_free+0x104>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69fa      	ldr	r2, [r7, #28]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d306      	bcc.n	8007a76 <mem_free+0x52>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f103 020c 	add.w	r2, r3, #12
 8007a6e:	4b2f      	ldr	r3, [pc, #188]	; (8007b2c <mem_free+0x108>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d90d      	bls.n	8007a92 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007a76:	4b29      	ldr	r3, [pc, #164]	; (8007b1c <mem_free+0xf8>)
 8007a78:	f240 227f 	movw	r2, #639	; 0x27f
 8007a7c:	492c      	ldr	r1, [pc, #176]	; (8007b30 <mem_free+0x10c>)
 8007a7e:	4829      	ldr	r0, [pc, #164]	; (8007b24 <mem_free+0x100>)
 8007a80:	f009 ff06 	bl	8011890 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007a84:	f009 fd0e 	bl	80114a4 <sys_arch_protect>
 8007a88:	6138      	str	r0, [r7, #16]
 8007a8a:	6938      	ldr	r0, [r7, #16]
 8007a8c:	f009 fd18 	bl	80114c0 <sys_arch_unprotect>
    return;
 8007a90:	e041      	b.n	8007b16 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007a92:	4828      	ldr	r0, [pc, #160]	; (8007b34 <mem_free+0x110>)
 8007a94:	f009 fcc4 	bl	8011420 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	791b      	ldrb	r3, [r3, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d110      	bne.n	8007ac2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007aa0:	4b1e      	ldr	r3, [pc, #120]	; (8007b1c <mem_free+0xf8>)
 8007aa2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007aa6:	4924      	ldr	r1, [pc, #144]	; (8007b38 <mem_free+0x114>)
 8007aa8:	481e      	ldr	r0, [pc, #120]	; (8007b24 <mem_free+0x100>)
 8007aaa:	f009 fef1 	bl	8011890 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007aae:	4821      	ldr	r0, [pc, #132]	; (8007b34 <mem_free+0x110>)
 8007ab0:	f009 fcc5 	bl	801143e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007ab4:	f009 fcf6 	bl	80114a4 <sys_arch_protect>
 8007ab8:	6178      	str	r0, [r7, #20]
 8007aba:	6978      	ldr	r0, [r7, #20]
 8007abc:	f009 fd00 	bl	80114c0 <sys_arch_unprotect>
    return;
 8007ac0:	e029      	b.n	8007b16 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8007ac2:	69f8      	ldr	r0, [r7, #28]
 8007ac4:	f7ff ff72 	bl	80079ac <mem_link_valid>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d110      	bne.n	8007af0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <mem_free+0xf8>)
 8007ad0:	f240 2295 	movw	r2, #661	; 0x295
 8007ad4:	4919      	ldr	r1, [pc, #100]	; (8007b3c <mem_free+0x118>)
 8007ad6:	4813      	ldr	r0, [pc, #76]	; (8007b24 <mem_free+0x100>)
 8007ad8:	f009 feda 	bl	8011890 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007adc:	4815      	ldr	r0, [pc, #84]	; (8007b34 <mem_free+0x110>)
 8007ade:	f009 fcae 	bl	801143e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007ae2:	f009 fcdf 	bl	80114a4 <sys_arch_protect>
 8007ae6:	61b8      	str	r0, [r7, #24]
 8007ae8:	69b8      	ldr	r0, [r7, #24]
 8007aea:	f009 fce9 	bl	80114c0 <sys_arch_unprotect>
    return;
 8007aee:	e012      	b.n	8007b16 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	2200      	movs	r2, #0
 8007af4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007af6:	4b12      	ldr	r3, [pc, #72]	; (8007b40 <mem_free+0x11c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d202      	bcs.n	8007b06 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007b00:	4a0f      	ldr	r2, [pc, #60]	; (8007b40 <mem_free+0x11c>)
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007b06:	69f8      	ldr	r0, [r7, #28]
 8007b08:	f7ff fe5c 	bl	80077c4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007b0c:	4809      	ldr	r0, [pc, #36]	; (8007b34 <mem_free+0x110>)
 8007b0e:	f009 fc96 	bl	801143e <sys_mutex_unlock>
 8007b12:	e000      	b.n	8007b16 <mem_free+0xf2>
    return;
 8007b14:	bf00      	nop
}
 8007b16:	3720      	adds	r7, #32
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	080128ac 	.word	0x080128ac
 8007b20:	0801299c 	.word	0x0801299c
 8007b24:	080128f4 	.word	0x080128f4
 8007b28:	200093ac 	.word	0x200093ac
 8007b2c:	200093b0 	.word	0x200093b0
 8007b30:	080129c0 	.word	0x080129c0
 8007b34:	200093b4 	.word	0x200093b4
 8007b38:	080129dc 	.word	0x080129dc
 8007b3c:	08012a04 	.word	0x08012a04
 8007b40:	200093b8 	.word	0x200093b8

08007b44 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007b50:	887b      	ldrh	r3, [r7, #2]
 8007b52:	3303      	adds	r3, #3
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f023 0303 	bic.w	r3, r3, #3
 8007b5a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007b5c:	8bfb      	ldrh	r3, [r7, #30]
 8007b5e:	2b0b      	cmp	r3, #11
 8007b60:	d801      	bhi.n	8007b66 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007b62:	230c      	movs	r3, #12
 8007b64:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007b66:	8bfb      	ldrh	r3, [r7, #30]
 8007b68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007b6c:	d803      	bhi.n	8007b76 <mem_trim+0x32>
 8007b6e:	8bfa      	ldrh	r2, [r7, #30]
 8007b70:	887b      	ldrh	r3, [r7, #2]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d201      	bcs.n	8007b7a <mem_trim+0x36>
    return NULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e0d8      	b.n	8007d2c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007b7a:	4b6e      	ldr	r3, [pc, #440]	; (8007d34 <mem_trim+0x1f0>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d304      	bcc.n	8007b8e <mem_trim+0x4a>
 8007b84:	4b6c      	ldr	r3, [pc, #432]	; (8007d38 <mem_trim+0x1f4>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d306      	bcc.n	8007b9c <mem_trim+0x58>
 8007b8e:	4b6b      	ldr	r3, [pc, #428]	; (8007d3c <mem_trim+0x1f8>)
 8007b90:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007b94:	496a      	ldr	r1, [pc, #424]	; (8007d40 <mem_trim+0x1fc>)
 8007b96:	486b      	ldr	r0, [pc, #428]	; (8007d44 <mem_trim+0x200>)
 8007b98:	f009 fe7a 	bl	8011890 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007b9c:	4b65      	ldr	r3, [pc, #404]	; (8007d34 <mem_trim+0x1f0>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d304      	bcc.n	8007bb0 <mem_trim+0x6c>
 8007ba6:	4b64      	ldr	r3, [pc, #400]	; (8007d38 <mem_trim+0x1f4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d307      	bcc.n	8007bc0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007bb0:	f009 fc78 	bl	80114a4 <sys_arch_protect>
 8007bb4:	60b8      	str	r0, [r7, #8]
 8007bb6:	68b8      	ldr	r0, [r7, #8]
 8007bb8:	f009 fc82 	bl	80114c0 <sys_arch_unprotect>
    return rmem;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	e0b5      	b.n	8007d2c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3b08      	subs	r3, #8
 8007bc4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007bc6:	69b8      	ldr	r0, [r7, #24]
 8007bc8:	f7ff fdea 	bl	80077a0 <mem_to_ptr>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	881a      	ldrh	r2, [r3, #0]
 8007bd4:	8afb      	ldrh	r3, [r7, #22]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3b08      	subs	r3, #8
 8007bdc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007bde:	8bfa      	ldrh	r2, [r7, #30]
 8007be0:	8abb      	ldrh	r3, [r7, #20]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d906      	bls.n	8007bf4 <mem_trim+0xb0>
 8007be6:	4b55      	ldr	r3, [pc, #340]	; (8007d3c <mem_trim+0x1f8>)
 8007be8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007bec:	4956      	ldr	r1, [pc, #344]	; (8007d48 <mem_trim+0x204>)
 8007bee:	4855      	ldr	r0, [pc, #340]	; (8007d44 <mem_trim+0x200>)
 8007bf0:	f009 fe4e 	bl	8011890 <iprintf>
  if (newsize > size) {
 8007bf4:	8bfa      	ldrh	r2, [r7, #30]
 8007bf6:	8abb      	ldrh	r3, [r7, #20]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d901      	bls.n	8007c00 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	e095      	b.n	8007d2c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8007c00:	8bfa      	ldrh	r2, [r7, #30]
 8007c02:	8abb      	ldrh	r3, [r7, #20]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d101      	bne.n	8007c0c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	e08f      	b.n	8007d2c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007c0c:	484f      	ldr	r0, [pc, #316]	; (8007d4c <mem_trim+0x208>)
 8007c0e:	f009 fc07 	bl	8011420 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff fdb0 	bl	800777c <ptr_to_mem>
 8007c1c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	791b      	ldrb	r3, [r3, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d13f      	bne.n	8007ca6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	881b      	ldrh	r3, [r3, #0]
 8007c2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c2e:	d106      	bne.n	8007c3e <mem_trim+0xfa>
 8007c30:	4b42      	ldr	r3, [pc, #264]	; (8007d3c <mem_trim+0x1f8>)
 8007c32:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007c36:	4946      	ldr	r1, [pc, #280]	; (8007d50 <mem_trim+0x20c>)
 8007c38:	4842      	ldr	r0, [pc, #264]	; (8007d44 <mem_trim+0x200>)
 8007c3a:	f009 fe29 	bl	8011890 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007c44:	8afa      	ldrh	r2, [r7, #22]
 8007c46:	8bfb      	ldrh	r3, [r7, #30]
 8007c48:	4413      	add	r3, r2
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007c50:	4b40      	ldr	r3, [pc, #256]	; (8007d54 <mem_trim+0x210>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d106      	bne.n	8007c68 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8007c5a:	89fb      	ldrh	r3, [r7, #14]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff fd8d 	bl	800777c <ptr_to_mem>
 8007c62:	4603      	mov	r3, r0
 8007c64:	4a3b      	ldr	r2, [pc, #236]	; (8007d54 <mem_trim+0x210>)
 8007c66:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007c68:	89fb      	ldrh	r3, [r7, #14]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff fd86 	bl	800777c <ptr_to_mem>
 8007c70:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	2200      	movs	r2, #0
 8007c76:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	89ba      	ldrh	r2, [r7, #12]
 8007c7c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	8afa      	ldrh	r2, [r7, #22]
 8007c82:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	89fa      	ldrh	r2, [r7, #14]
 8007c88:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c92:	d047      	beq.n	8007d24 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff fd6f 	bl	800777c <ptr_to_mem>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	89fb      	ldrh	r3, [r7, #14]
 8007ca2:	8053      	strh	r3, [r2, #2]
 8007ca4:	e03e      	b.n	8007d24 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007ca6:	8bfb      	ldrh	r3, [r7, #30]
 8007ca8:	f103 0214 	add.w	r2, r3, #20
 8007cac:	8abb      	ldrh	r3, [r7, #20]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d838      	bhi.n	8007d24 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007cb2:	8afa      	ldrh	r2, [r7, #22]
 8007cb4:	8bfb      	ldrh	r3, [r7, #30]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3308      	adds	r3, #8
 8007cbc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007cc6:	d106      	bne.n	8007cd6 <mem_trim+0x192>
 8007cc8:	4b1c      	ldr	r3, [pc, #112]	; (8007d3c <mem_trim+0x1f8>)
 8007cca:	f240 3216 	movw	r2, #790	; 0x316
 8007cce:	4920      	ldr	r1, [pc, #128]	; (8007d50 <mem_trim+0x20c>)
 8007cd0:	481c      	ldr	r0, [pc, #112]	; (8007d44 <mem_trim+0x200>)
 8007cd2:	f009 fddd 	bl	8011890 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007cd6:	89fb      	ldrh	r3, [r7, #14]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7ff fd4f 	bl	800777c <ptr_to_mem>
 8007cde:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007ce0:	4b1c      	ldr	r3, [pc, #112]	; (8007d54 <mem_trim+0x210>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d202      	bcs.n	8007cf0 <mem_trim+0x1ac>
      lfree = mem2;
 8007cea:	4a1a      	ldr	r2, [pc, #104]	; (8007d54 <mem_trim+0x210>)
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	881a      	ldrh	r2, [r3, #0]
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	8afa      	ldrh	r2, [r7, #22]
 8007d02:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	89fa      	ldrh	r2, [r7, #14]
 8007d08:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007d12:	d007      	beq.n	8007d24 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7ff fd2f 	bl	800777c <ptr_to_mem>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	89fb      	ldrh	r3, [r7, #14]
 8007d22:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007d24:	4809      	ldr	r0, [pc, #36]	; (8007d4c <mem_trim+0x208>)
 8007d26:	f009 fb8a 	bl	801143e <sys_mutex_unlock>
  return rmem;
 8007d2a:	687b      	ldr	r3, [r7, #4]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3720      	adds	r7, #32
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	200093ac 	.word	0x200093ac
 8007d38:	200093b0 	.word	0x200093b0
 8007d3c:	080128ac 	.word	0x080128ac
 8007d40:	08012a38 	.word	0x08012a38
 8007d44:	080128f4 	.word	0x080128f4
 8007d48:	08012a50 	.word	0x08012a50
 8007d4c:	200093b4 	.word	0x200093b4
 8007d50:	08012a70 	.word	0x08012a70
 8007d54:	200093b8 	.word	0x200093b8

08007d58 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b088      	sub	sp, #32
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007d62:	88fb      	ldrh	r3, [r7, #6]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <mem_malloc+0x14>
    return NULL;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e0e2      	b.n	8007f32 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007d6c:	88fb      	ldrh	r3, [r7, #6]
 8007d6e:	3303      	adds	r3, #3
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	f023 0303 	bic.w	r3, r3, #3
 8007d76:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007d78:	8bbb      	ldrh	r3, [r7, #28]
 8007d7a:	2b0b      	cmp	r3, #11
 8007d7c:	d801      	bhi.n	8007d82 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007d7e:	230c      	movs	r3, #12
 8007d80:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007d82:	8bbb      	ldrh	r3, [r7, #28]
 8007d84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007d88:	d803      	bhi.n	8007d92 <mem_malloc+0x3a>
 8007d8a:	8bba      	ldrh	r2, [r7, #28]
 8007d8c:	88fb      	ldrh	r3, [r7, #6]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d201      	bcs.n	8007d96 <mem_malloc+0x3e>
    return NULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	e0cd      	b.n	8007f32 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007d96:	4869      	ldr	r0, [pc, #420]	; (8007f3c <mem_malloc+0x1e4>)
 8007d98:	f009 fb42 	bl	8011420 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007d9c:	4b68      	ldr	r3, [pc, #416]	; (8007f40 <mem_malloc+0x1e8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff fcfd 	bl	80077a0 <mem_to_ptr>
 8007da6:	4603      	mov	r3, r0
 8007da8:	83fb      	strh	r3, [r7, #30]
 8007daa:	e0b7      	b.n	8007f1c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007dac:	8bfb      	ldrh	r3, [r7, #30]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff fce4 	bl	800777c <ptr_to_mem>
 8007db4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	791b      	ldrb	r3, [r3, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f040 80a7 	bne.w	8007f0e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	8bfb      	ldrh	r3, [r7, #30]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	f1a3 0208 	sub.w	r2, r3, #8
 8007dce:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	f0c0 809c 	bcc.w	8007f0e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	8bfb      	ldrh	r3, [r7, #30]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	f1a3 0208 	sub.w	r2, r3, #8
 8007de4:	8bbb      	ldrh	r3, [r7, #28]
 8007de6:	3314      	adds	r3, #20
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d333      	bcc.n	8007e54 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007dec:	8bfa      	ldrh	r2, [r7, #30]
 8007dee:	8bbb      	ldrh	r3, [r7, #28]
 8007df0:	4413      	add	r3, r2
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	3308      	adds	r3, #8
 8007df6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007df8:	8a7b      	ldrh	r3, [r7, #18]
 8007dfa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007dfe:	d106      	bne.n	8007e0e <mem_malloc+0xb6>
 8007e00:	4b50      	ldr	r3, [pc, #320]	; (8007f44 <mem_malloc+0x1ec>)
 8007e02:	f240 3287 	movw	r2, #903	; 0x387
 8007e06:	4950      	ldr	r1, [pc, #320]	; (8007f48 <mem_malloc+0x1f0>)
 8007e08:	4850      	ldr	r0, [pc, #320]	; (8007f4c <mem_malloc+0x1f4>)
 8007e0a:	f009 fd41 	bl	8011890 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007e0e:	8a7b      	ldrh	r3, [r7, #18]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7ff fcb3 	bl	800777c <ptr_to_mem>
 8007e16:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	881a      	ldrh	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8bfa      	ldrh	r2, [r7, #30]
 8007e2a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	8a7a      	ldrh	r2, [r7, #18]
 8007e30:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2201      	movs	r2, #1
 8007e36:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007e40:	d00b      	beq.n	8007e5a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff fc98 	bl	800777c <ptr_to_mem>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	8a7b      	ldrh	r3, [r7, #18]
 8007e50:	8053      	strh	r3, [r2, #2]
 8007e52:	e002      	b.n	8007e5a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	2201      	movs	r2, #1
 8007e58:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007e5a:	4b39      	ldr	r3, [pc, #228]	; (8007f40 <mem_malloc+0x1e8>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d127      	bne.n	8007eb4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8007e64:	4b36      	ldr	r3, [pc, #216]	; (8007f40 <mem_malloc+0x1e8>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007e6a:	e005      	b.n	8007e78 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff fc83 	bl	800777c <ptr_to_mem>
 8007e76:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	791b      	ldrb	r3, [r3, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d004      	beq.n	8007e8a <mem_malloc+0x132>
 8007e80:	4b33      	ldr	r3, [pc, #204]	; (8007f50 <mem_malloc+0x1f8>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d1f0      	bne.n	8007e6c <mem_malloc+0x114>
          }
          lfree = cur;
 8007e8a:	4a2d      	ldr	r2, [pc, #180]	; (8007f40 <mem_malloc+0x1e8>)
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007e90:	4b2b      	ldr	r3, [pc, #172]	; (8007f40 <mem_malloc+0x1e8>)
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	4b2e      	ldr	r3, [pc, #184]	; (8007f50 <mem_malloc+0x1f8>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d00b      	beq.n	8007eb4 <mem_malloc+0x15c>
 8007e9c:	4b28      	ldr	r3, [pc, #160]	; (8007f40 <mem_malloc+0x1e8>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	791b      	ldrb	r3, [r3, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d006      	beq.n	8007eb4 <mem_malloc+0x15c>
 8007ea6:	4b27      	ldr	r3, [pc, #156]	; (8007f44 <mem_malloc+0x1ec>)
 8007ea8:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007eac:	4929      	ldr	r1, [pc, #164]	; (8007f54 <mem_malloc+0x1fc>)
 8007eae:	4827      	ldr	r0, [pc, #156]	; (8007f4c <mem_malloc+0x1f4>)
 8007eb0:	f009 fcee 	bl	8011890 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8007eb4:	4821      	ldr	r0, [pc, #132]	; (8007f3c <mem_malloc+0x1e4>)
 8007eb6:	f009 fac2 	bl	801143e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007eba:	8bba      	ldrh	r2, [r7, #28]
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	4a23      	ldr	r2, [pc, #140]	; (8007f50 <mem_malloc+0x1f8>)
 8007ec4:	6812      	ldr	r2, [r2, #0]
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d906      	bls.n	8007ed8 <mem_malloc+0x180>
 8007eca:	4b1e      	ldr	r3, [pc, #120]	; (8007f44 <mem_malloc+0x1ec>)
 8007ecc:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007ed0:	4921      	ldr	r1, [pc, #132]	; (8007f58 <mem_malloc+0x200>)
 8007ed2:	481e      	ldr	r0, [pc, #120]	; (8007f4c <mem_malloc+0x1f4>)
 8007ed4:	f009 fcdc 	bl	8011890 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d006      	beq.n	8007ef0 <mem_malloc+0x198>
 8007ee2:	4b18      	ldr	r3, [pc, #96]	; (8007f44 <mem_malloc+0x1ec>)
 8007ee4:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007ee8:	491c      	ldr	r1, [pc, #112]	; (8007f5c <mem_malloc+0x204>)
 8007eea:	4818      	ldr	r0, [pc, #96]	; (8007f4c <mem_malloc+0x1f4>)
 8007eec:	f009 fcd0 	bl	8011890 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d006      	beq.n	8007f08 <mem_malloc+0x1b0>
 8007efa:	4b12      	ldr	r3, [pc, #72]	; (8007f44 <mem_malloc+0x1ec>)
 8007efc:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007f00:	4917      	ldr	r1, [pc, #92]	; (8007f60 <mem_malloc+0x208>)
 8007f02:	4812      	ldr	r0, [pc, #72]	; (8007f4c <mem_malloc+0x1f4>)
 8007f04:	f009 fcc4 	bl	8011890 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	e011      	b.n	8007f32 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8007f0e:	8bfb      	ldrh	r3, [r7, #30]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7ff fc33 	bl	800777c <ptr_to_mem>
 8007f16:	4603      	mov	r3, r0
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007f1c:	8bfa      	ldrh	r2, [r7, #30]
 8007f1e:	8bbb      	ldrh	r3, [r7, #28]
 8007f20:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007f24:	429a      	cmp	r2, r3
 8007f26:	f4ff af41 	bcc.w	8007dac <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007f2a:	4804      	ldr	r0, [pc, #16]	; (8007f3c <mem_malloc+0x1e4>)
 8007f2c:	f009 fa87 	bl	801143e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3720      	adds	r7, #32
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	200093b4 	.word	0x200093b4
 8007f40:	200093b8 	.word	0x200093b8
 8007f44:	080128ac 	.word	0x080128ac
 8007f48:	08012a70 	.word	0x08012a70
 8007f4c:	080128f4 	.word	0x080128f4
 8007f50:	200093b0 	.word	0x200093b0
 8007f54:	08012a84 	.word	0x08012a84
 8007f58:	08012aa0 	.word	0x08012aa0
 8007f5c:	08012ad0 	.word	0x08012ad0
 8007f60:	08012b00 	.word	0x08012b00

08007f64 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	2200      	movs	r2, #0
 8007f72:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	3303      	adds	r3, #3
 8007f7a:	f023 0303 	bic.w	r3, r3, #3
 8007f7e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007f80:	2300      	movs	r3, #0
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	e011      	b.n	8007faa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	60fb      	str	r3, [r7, #12]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	885b      	ldrh	r3, [r3, #2]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	dbe7      	blt.n	8007f86 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007fb6:	bf00      	nop
 8007fb8:	bf00      	nop
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007fca:	2300      	movs	r3, #0
 8007fcc:	80fb      	strh	r3, [r7, #6]
 8007fce:	e009      	b.n	8007fe4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007fd0:	88fb      	ldrh	r3, [r7, #6]
 8007fd2:	4a08      	ldr	r2, [pc, #32]	; (8007ff4 <memp_init+0x30>)
 8007fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff ffc3 	bl	8007f64 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007fde:	88fb      	ldrh	r3, [r7, #6]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	80fb      	strh	r3, [r7, #6]
 8007fe4:	88fb      	ldrh	r3, [r7, #6]
 8007fe6:	2b0c      	cmp	r3, #12
 8007fe8:	d9f2      	bls.n	8007fd0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007fea:	bf00      	nop
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	08015314 	.word	0x08015314

08007ff8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008000:	f009 fa50 	bl	80114a4 <sys_arch_protect>
 8008004:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d015      	beq.n	8008040 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	6812      	ldr	r2, [r2, #0]
 800801c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	f003 0303 	and.w	r3, r3, #3
 8008024:	2b00      	cmp	r3, #0
 8008026:	d006      	beq.n	8008036 <do_memp_malloc_pool+0x3e>
 8008028:	4b09      	ldr	r3, [pc, #36]	; (8008050 <do_memp_malloc_pool+0x58>)
 800802a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800802e:	4909      	ldr	r1, [pc, #36]	; (8008054 <do_memp_malloc_pool+0x5c>)
 8008030:	4809      	ldr	r0, [pc, #36]	; (8008058 <do_memp_malloc_pool+0x60>)
 8008032:	f009 fc2d 	bl	8011890 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f009 fa42 	bl	80114c0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	e003      	b.n	8008048 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f009 fa3d 	bl	80114c0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	08012b24 	.word	0x08012b24
 8008054:	08012b54 	.word	0x08012b54
 8008058:	08012b78 	.word	0x08012b78

0800805c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d106      	bne.n	8008078 <memp_malloc_pool+0x1c>
 800806a:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <memp_malloc_pool+0x38>)
 800806c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8008070:	4909      	ldr	r1, [pc, #36]	; (8008098 <memp_malloc_pool+0x3c>)
 8008072:	480a      	ldr	r0, [pc, #40]	; (800809c <memp_malloc_pool+0x40>)
 8008074:	f009 fc0c 	bl	8011890 <iprintf>
  if (desc == NULL) {
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <memp_malloc_pool+0x26>
    return NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	e003      	b.n	800808a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7ff ffb8 	bl	8007ff8 <do_memp_malloc_pool>
 8008088:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	08012b24 	.word	0x08012b24
 8008098:	08012ba0 	.word	0x08012ba0
 800809c:	08012b78 	.word	0x08012b78

080080a0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	2b0c      	cmp	r3, #12
 80080ae:	d908      	bls.n	80080c2 <memp_malloc+0x22>
 80080b0:	4b0a      	ldr	r3, [pc, #40]	; (80080dc <memp_malloc+0x3c>)
 80080b2:	f240 1257 	movw	r2, #343	; 0x157
 80080b6:	490a      	ldr	r1, [pc, #40]	; (80080e0 <memp_malloc+0x40>)
 80080b8:	480a      	ldr	r0, [pc, #40]	; (80080e4 <memp_malloc+0x44>)
 80080ba:	f009 fbe9 	bl	8011890 <iprintf>
 80080be:	2300      	movs	r3, #0
 80080c0:	e008      	b.n	80080d4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	4a08      	ldr	r2, [pc, #32]	; (80080e8 <memp_malloc+0x48>)
 80080c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff ff94 	bl	8007ff8 <do_memp_malloc_pool>
 80080d0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80080d2:	68fb      	ldr	r3, [r7, #12]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	08012b24 	.word	0x08012b24
 80080e0:	08012bb4 	.word	0x08012bb4
 80080e4:	08012b78 	.word	0x08012b78
 80080e8:	08015314 	.word	0x08015314

080080ec <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	f003 0303 	and.w	r3, r3, #3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d006      	beq.n	800810e <do_memp_free_pool+0x22>
 8008100:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <do_memp_free_pool+0x4c>)
 8008102:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008106:	490d      	ldr	r1, [pc, #52]	; (800813c <do_memp_free_pool+0x50>)
 8008108:	480d      	ldr	r0, [pc, #52]	; (8008140 <do_memp_free_pool+0x54>)
 800810a:	f009 fbc1 	bl	8011890 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8008112:	f009 f9c7 	bl	80114a4 <sys_arch_protect>
 8008116:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800812a:	68b8      	ldr	r0, [r7, #8]
 800812c:	f009 f9c8 	bl	80114c0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	08012b24 	.word	0x08012b24
 800813c:	08012bd4 	.word	0x08012bd4
 8008140:	08012b78 	.word	0x08012b78

08008144 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d106      	bne.n	8008162 <memp_free_pool+0x1e>
 8008154:	4b0a      	ldr	r3, [pc, #40]	; (8008180 <memp_free_pool+0x3c>)
 8008156:	f240 1295 	movw	r2, #405	; 0x195
 800815a:	490a      	ldr	r1, [pc, #40]	; (8008184 <memp_free_pool+0x40>)
 800815c:	480a      	ldr	r0, [pc, #40]	; (8008188 <memp_free_pool+0x44>)
 800815e:	f009 fb97 	bl	8011890 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d007      	beq.n	8008178 <memp_free_pool+0x34>
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d004      	beq.n	8008178 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff ffbb 	bl	80080ec <do_memp_free_pool>
 8008176:	e000      	b.n	800817a <memp_free_pool+0x36>
    return;
 8008178:	bf00      	nop
}
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	08012b24 	.word	0x08012b24
 8008184:	08012ba0 	.word	0x08012ba0
 8008188:	08012b78 	.word	0x08012b78

0800818c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	6039      	str	r1, [r7, #0]
 8008196:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008198:	79fb      	ldrb	r3, [r7, #7]
 800819a:	2b0c      	cmp	r3, #12
 800819c:	d907      	bls.n	80081ae <memp_free+0x22>
 800819e:	4b0c      	ldr	r3, [pc, #48]	; (80081d0 <memp_free+0x44>)
 80081a0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80081a4:	490b      	ldr	r1, [pc, #44]	; (80081d4 <memp_free+0x48>)
 80081a6:	480c      	ldr	r0, [pc, #48]	; (80081d8 <memp_free+0x4c>)
 80081a8:	f009 fb72 	bl	8011890 <iprintf>
 80081ac:	e00c      	b.n	80081c8 <memp_free+0x3c>

  if (mem == NULL) {
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d008      	beq.n	80081c6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80081b4:	79fb      	ldrb	r3, [r7, #7]
 80081b6:	4a09      	ldr	r2, [pc, #36]	; (80081dc <memp_free+0x50>)
 80081b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff ff94 	bl	80080ec <do_memp_free_pool>
 80081c4:	e000      	b.n	80081c8 <memp_free+0x3c>
    return;
 80081c6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	08012b24 	.word	0x08012b24
 80081d4:	08012bf4 	.word	0x08012bf4
 80081d8:	08012b78 	.word	0x08012b78
 80081dc:	08015314 	.word	0x08015314

080081e0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80081e0:	b480      	push	{r7}
 80081e2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80081e4:	bf00      	nop
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
	...

080081f0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d108      	bne.n	8008216 <netif_add+0x26>
 8008204:	4b57      	ldr	r3, [pc, #348]	; (8008364 <netif_add+0x174>)
 8008206:	f240 1227 	movw	r2, #295	; 0x127
 800820a:	4957      	ldr	r1, [pc, #348]	; (8008368 <netif_add+0x178>)
 800820c:	4857      	ldr	r0, [pc, #348]	; (800836c <netif_add+0x17c>)
 800820e:	f009 fb3f 	bl	8011890 <iprintf>
 8008212:	2300      	movs	r3, #0
 8008214:	e0a2      	b.n	800835c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	2b00      	cmp	r3, #0
 800821a:	d108      	bne.n	800822e <netif_add+0x3e>
 800821c:	4b51      	ldr	r3, [pc, #324]	; (8008364 <netif_add+0x174>)
 800821e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008222:	4953      	ldr	r1, [pc, #332]	; (8008370 <netif_add+0x180>)
 8008224:	4851      	ldr	r0, [pc, #324]	; (800836c <netif_add+0x17c>)
 8008226:	f009 fb33 	bl	8011890 <iprintf>
 800822a:	2300      	movs	r3, #0
 800822c:	e096      	b.n	800835c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008234:	4b4f      	ldr	r3, [pc, #316]	; (8008374 <netif_add+0x184>)
 8008236:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800823e:	4b4d      	ldr	r3, [pc, #308]	; (8008374 <netif_add+0x184>)
 8008240:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008248:	4b4a      	ldr	r3, [pc, #296]	; (8008374 <netif_add+0x184>)
 800824a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4a45      	ldr	r2, [pc, #276]	; (8008378 <netif_add+0x188>)
 8008262:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6a3a      	ldr	r2, [r7, #32]
 800827c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800827e:	4b3f      	ldr	r3, [pc, #252]	; (800837c <netif_add+0x18c>)
 8008280:	781a      	ldrb	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800828c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f000 f913 	bl	80084c0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	4798      	blx	r3
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <netif_add+0xba>
    return NULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	e058      	b.n	800835c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082b0:	2bff      	cmp	r3, #255	; 0xff
 80082b2:	d103      	bne.n	80082bc <netif_add+0xcc>
        netif->num = 0;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80082c0:	4b2f      	ldr	r3, [pc, #188]	; (8008380 <netif_add+0x190>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	617b      	str	r3, [r7, #20]
 80082c6:	e02b      	b.n	8008320 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d106      	bne.n	80082de <netif_add+0xee>
 80082d0:	4b24      	ldr	r3, [pc, #144]	; (8008364 <netif_add+0x174>)
 80082d2:	f240 128b 	movw	r2, #395	; 0x18b
 80082d6:	492b      	ldr	r1, [pc, #172]	; (8008384 <netif_add+0x194>)
 80082d8:	4824      	ldr	r0, [pc, #144]	; (800836c <netif_add+0x17c>)
 80082da:	f009 fad9 	bl	8011890 <iprintf>
        num_netifs++;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	3301      	adds	r3, #1
 80082e2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	2bff      	cmp	r3, #255	; 0xff
 80082e8:	dd06      	ble.n	80082f8 <netif_add+0x108>
 80082ea:	4b1e      	ldr	r3, [pc, #120]	; (8008364 <netif_add+0x174>)
 80082ec:	f240 128d 	movw	r2, #397	; 0x18d
 80082f0:	4925      	ldr	r1, [pc, #148]	; (8008388 <netif_add+0x198>)
 80082f2:	481e      	ldr	r0, [pc, #120]	; (800836c <netif_add+0x17c>)
 80082f4:	f009 facc 	bl	8011890 <iprintf>
        if (netif2->num == netif->num) {
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008304:	429a      	cmp	r2, r3
 8008306:	d108      	bne.n	800831a <netif_add+0x12a>
          netif->num++;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800830e:	3301      	adds	r3, #1
 8008310:	b2da      	uxtb	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8008318:	e005      	b.n	8008326 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1d0      	bne.n	80082c8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1be      	bne.n	80082aa <netif_add+0xba>
  }
  if (netif->num == 254) {
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008332:	2bfe      	cmp	r3, #254	; 0xfe
 8008334:	d103      	bne.n	800833e <netif_add+0x14e>
    netif_num = 0;
 8008336:	4b11      	ldr	r3, [pc, #68]	; (800837c <netif_add+0x18c>)
 8008338:	2200      	movs	r2, #0
 800833a:	701a      	strb	r2, [r3, #0]
 800833c:	e006      	b.n	800834c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008344:	3301      	adds	r3, #1
 8008346:	b2da      	uxtb	r2, r3
 8008348:	4b0c      	ldr	r3, [pc, #48]	; (800837c <netif_add+0x18c>)
 800834a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800834c:	4b0c      	ldr	r3, [pc, #48]	; (8008380 <netif_add+0x190>)
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008354:	4a0a      	ldr	r2, [pc, #40]	; (8008380 <netif_add+0x190>)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800835a:	68fb      	ldr	r3, [r7, #12]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	08012c10 	.word	0x08012c10
 8008368:	08012ca4 	.word	0x08012ca4
 800836c:	08012c60 	.word	0x08012c60
 8008370:	08012cc0 	.word	0x08012cc0
 8008374:	08015388 	.word	0x08015388
 8008378:	0800879b 	.word	0x0800879b
 800837c:	2000c490 	.word	0x2000c490
 8008380:	2000c488 	.word	0x2000c488
 8008384:	08012ce4 	.word	0x08012ce4
 8008388:	08012cf8 	.word	0x08012cf8

0800838c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f002 fb7d 	bl	800aa98 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f006 fc91 	bl	800ecc8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80083a6:	bf00      	nop
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d106      	bne.n	80083d0 <netif_do_set_ipaddr+0x20>
 80083c2:	4b1d      	ldr	r3, [pc, #116]	; (8008438 <netif_do_set_ipaddr+0x88>)
 80083c4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80083c8:	491c      	ldr	r1, [pc, #112]	; (800843c <netif_do_set_ipaddr+0x8c>)
 80083ca:	481d      	ldr	r0, [pc, #116]	; (8008440 <netif_do_set_ipaddr+0x90>)
 80083cc:	f009 fa60 	bl	8011890 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d106      	bne.n	80083e4 <netif_do_set_ipaddr+0x34>
 80083d6:	4b18      	ldr	r3, [pc, #96]	; (8008438 <netif_do_set_ipaddr+0x88>)
 80083d8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80083dc:	4917      	ldr	r1, [pc, #92]	; (800843c <netif_do_set_ipaddr+0x8c>)
 80083de:	4818      	ldr	r0, [pc, #96]	; (8008440 <netif_do_set_ipaddr+0x90>)
 80083e0:	f009 fa56 	bl	8011890 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	3304      	adds	r3, #4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d01c      	beq.n	800842c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3304      	adds	r3, #4
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008402:	f107 0314 	add.w	r3, r7, #20
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff ffbf 	bl	800838c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d002      	beq.n	800841a <netif_do_set_ipaddr+0x6a>
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	e000      	b.n	800841c <netif_do_set_ipaddr+0x6c>
 800841a:	2300      	movs	r3, #0
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008420:	2101      	movs	r1, #1
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 f8d2 	bl	80085cc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008428:	2301      	movs	r3, #1
 800842a:	e000      	b.n	800842e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	08012c10 	.word	0x08012c10
 800843c:	08012d28 	.word	0x08012d28
 8008440:	08012c60 	.word	0x08012c60

08008444 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3308      	adds	r3, #8
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	429a      	cmp	r2, r3
 800845c:	d00a      	beq.n	8008474 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <netif_do_set_netmask+0x26>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	e000      	b.n	800846c <netif_do_set_netmask+0x28>
 800846a:	2300      	movs	r3, #0
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008470:	2301      	movs	r3, #1
 8008472:	e000      	b.n	8008476 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	330c      	adds	r3, #12
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	429a      	cmp	r2, r3
 800849a:	d00a      	beq.n	80084b2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <netif_do_set_gw+0x26>
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	e000      	b.n	80084aa <netif_do_set_gw+0x28>
 80084a8:	2300      	movs	r3, #0
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80084ae:	2301      	movs	r3, #1
 80084b0:	e000      	b.n	80084b4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b088      	sub	sp, #32
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80084ce:	2300      	movs	r3, #0
 80084d0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80084d2:	2300      	movs	r3, #0
 80084d4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80084dc:	4b1c      	ldr	r3, [pc, #112]	; (8008550 <netif_set_addr+0x90>)
 80084de:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80084e6:	4b1a      	ldr	r3, [pc, #104]	; (8008550 <netif_set_addr+0x90>)
 80084e8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80084f0:	4b17      	ldr	r3, [pc, #92]	; (8008550 <netif_set_addr+0x90>)
 80084f2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <netif_set_addr+0x42>
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <netif_set_addr+0x46>
 8008502:	2301      	movs	r3, #1
 8008504:	e000      	b.n	8008508 <netif_set_addr+0x48>
 8008506:	2300      	movs	r3, #0
 8008508:	617b      	str	r3, [r7, #20]
  if (remove) {
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d006      	beq.n	800851e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008510:	f107 0310 	add.w	r3, r7, #16
 8008514:	461a      	mov	r2, r3
 8008516:	68b9      	ldr	r1, [r7, #8]
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f7ff ff49 	bl	80083b0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7ff ff8e 	bl	8008444 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f7ff ffa8 	bl	8008482 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d106      	bne.n	8008546 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008538:	f107 0310 	add.w	r3, r7, #16
 800853c:	461a      	mov	r2, r3
 800853e:	68b9      	ldr	r1, [r7, #8]
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f7ff ff35 	bl	80083b0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008546:	bf00      	nop
 8008548:	3720      	adds	r7, #32
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	08015388 	.word	0x08015388

08008554 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800855c:	4a04      	ldr	r2, [pc, #16]	; (8008570 <netif_set_default+0x1c>)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008562:	bf00      	nop
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	2000c48c 	.word	0x2000c48c

08008574 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d107      	bne.n	8008592 <netif_set_up+0x1e>
 8008582:	4b0f      	ldr	r3, [pc, #60]	; (80085c0 <netif_set_up+0x4c>)
 8008584:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008588:	490e      	ldr	r1, [pc, #56]	; (80085c4 <netif_set_up+0x50>)
 800858a:	480f      	ldr	r0, [pc, #60]	; (80085c8 <netif_set_up+0x54>)
 800858c:	f009 f980 	bl	8011890 <iprintf>
 8008590:	e013      	b.n	80085ba <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10c      	bne.n	80085ba <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80085a6:	f043 0301 	orr.w	r3, r3, #1
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80085b2:	2103      	movs	r1, #3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f809 	bl	80085cc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	08012c10 	.word	0x08012c10
 80085c4:	08012d98 	.word	0x08012d98
 80085c8:	08012c60 	.word	0x08012c60

080085cc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d106      	bne.n	80085ec <netif_issue_reports+0x20>
 80085de:	4b18      	ldr	r3, [pc, #96]	; (8008640 <netif_issue_reports+0x74>)
 80085e0:	f240 326d 	movw	r2, #877	; 0x36d
 80085e4:	4917      	ldr	r1, [pc, #92]	; (8008644 <netif_issue_reports+0x78>)
 80085e6:	4818      	ldr	r0, [pc, #96]	; (8008648 <netif_issue_reports+0x7c>)
 80085e8:	f009 f952 	bl	8011890 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80085f2:	f003 0304 	and.w	r3, r3, #4
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d01e      	beq.n	8008638 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008600:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008604:	2b00      	cmp	r3, #0
 8008606:	d017      	beq.n	8008638 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	f003 0301 	and.w	r3, r3, #1
 800860e:	2b00      	cmp	r3, #0
 8008610:	d013      	beq.n	800863a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	3304      	adds	r3, #4
 8008616:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00e      	beq.n	800863a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008622:	f003 0308 	and.w	r3, r3, #8
 8008626:	2b00      	cmp	r3, #0
 8008628:	d007      	beq.n	800863a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3304      	adds	r3, #4
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f007 fab3 	bl	800fb9c <etharp_request>
 8008636:	e000      	b.n	800863a <netif_issue_reports+0x6e>
    return;
 8008638:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	08012c10 	.word	0x08012c10
 8008644:	08012db4 	.word	0x08012db4
 8008648:	08012c60 	.word	0x08012c60

0800864c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d107      	bne.n	800866a <netif_set_down+0x1e>
 800865a:	4b12      	ldr	r3, [pc, #72]	; (80086a4 <netif_set_down+0x58>)
 800865c:	f240 329b 	movw	r2, #923	; 0x39b
 8008660:	4911      	ldr	r1, [pc, #68]	; (80086a8 <netif_set_down+0x5c>)
 8008662:	4812      	ldr	r0, [pc, #72]	; (80086ac <netif_set_down+0x60>)
 8008664:	f009 f914 	bl	8011890 <iprintf>
 8008668:	e019      	b.n	800869e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b00      	cmp	r3, #0
 8008676:	d012      	beq.n	800869e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800867e:	f023 0301 	bic.w	r3, r3, #1
 8008682:	b2da      	uxtb	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008690:	f003 0308 	and.w	r3, r3, #8
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f006 fe3d 	bl	800f318 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	08012c10 	.word	0x08012c10
 80086a8:	08012dd8 	.word	0x08012dd8
 80086ac:	08012c60 	.word	0x08012c60

080086b0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d107      	bne.n	80086ce <netif_set_link_up+0x1e>
 80086be:	4b13      	ldr	r3, [pc, #76]	; (800870c <netif_set_link_up+0x5c>)
 80086c0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80086c4:	4912      	ldr	r1, [pc, #72]	; (8008710 <netif_set_link_up+0x60>)
 80086c6:	4813      	ldr	r0, [pc, #76]	; (8008714 <netif_set_link_up+0x64>)
 80086c8:	f009 f8e2 	bl	8011890 <iprintf>
 80086cc:	e01b      	b.n	8008706 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d114      	bne.n	8008706 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80086e2:	f043 0304 	orr.w	r3, r3, #4
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80086ee:	2103      	movs	r1, #3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7ff ff6b 	bl	80085cc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <netif_set_link_up+0x56>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	08012c10 	.word	0x08012c10
 8008710:	08012df8 	.word	0x08012df8
 8008714:	08012c60 	.word	0x08012c60

08008718 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d107      	bne.n	8008736 <netif_set_link_down+0x1e>
 8008726:	4b11      	ldr	r3, [pc, #68]	; (800876c <netif_set_link_down+0x54>)
 8008728:	f240 4206 	movw	r2, #1030	; 0x406
 800872c:	4910      	ldr	r1, [pc, #64]	; (8008770 <netif_set_link_down+0x58>)
 800872e:	4811      	ldr	r0, [pc, #68]	; (8008774 <netif_set_link_down+0x5c>)
 8008730:	f009 f8ae 	bl	8011890 <iprintf>
 8008734:	e017      	b.n	8008766 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800873c:	f003 0304 	and.w	r3, r3, #4
 8008740:	2b00      	cmp	r3, #0
 8008742:	d010      	beq.n	8008766 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800874a:	f023 0304 	bic.w	r3, r3, #4
 800874e:	b2da      	uxtb	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <netif_set_link_down+0x4e>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	08012c10 	.word	0x08012c10
 8008770:	08012e1c 	.word	0x08012e1c
 8008774:	08012c60 	.word	0x08012c60

08008778 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	61da      	str	r2, [r3, #28]
  }
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800879a:	b480      	push	{r7}
 800879c:	b085      	sub	sp, #20
 800879e:	af00      	add	r7, sp, #0
 80087a0:	60f8      	str	r0, [r7, #12]
 80087a2:	60b9      	str	r1, [r7, #8]
 80087a4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80087a6:	f06f 030b 	mvn.w	r3, #11
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
	...

080087b8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80087c2:	79fb      	ldrb	r3, [r7, #7]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d013      	beq.n	80087f0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80087c8:	4b0d      	ldr	r3, [pc, #52]	; (8008800 <netif_get_by_index+0x48>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	60fb      	str	r3, [r7, #12]
 80087ce:	e00c      	b.n	80087ea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087d6:	3301      	adds	r3, #1
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	79fa      	ldrb	r2, [r7, #7]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d101      	bne.n	80087e4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	e006      	b.n	80087f2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1ef      	bne.n	80087d0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	2000c488 	.word	0x2000c488

08008804 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800880a:	f008 fe4b 	bl	80114a4 <sys_arch_protect>
 800880e:	6038      	str	r0, [r7, #0]
 8008810:	4b0d      	ldr	r3, [pc, #52]	; (8008848 <pbuf_free_ooseq+0x44>)
 8008812:	2200      	movs	r2, #0
 8008814:	701a      	strb	r2, [r3, #0]
 8008816:	6838      	ldr	r0, [r7, #0]
 8008818:	f008 fe52 	bl	80114c0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800881c:	4b0b      	ldr	r3, [pc, #44]	; (800884c <pbuf_free_ooseq+0x48>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	607b      	str	r3, [r7, #4]
 8008822:	e00a      	b.n	800883a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008828:	2b00      	cmp	r3, #0
 800882a:	d003      	beq.n	8008834 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f002 f971 	bl	800ab14 <tcp_free_ooseq>
      return;
 8008832:	e005      	b.n	8008840 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	607b      	str	r3, [r7, #4]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1f1      	bne.n	8008824 <pbuf_free_ooseq+0x20>
    }
  }
}
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	2000c491 	.word	0x2000c491
 800884c:	2000c4a0 	.word	0x2000c4a0

08008850 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008858:	f7ff ffd4 	bl	8008804 <pbuf_free_ooseq>
}
 800885c:	bf00      	nop
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800886a:	f008 fe1b 	bl	80114a4 <sys_arch_protect>
 800886e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008870:	4b0f      	ldr	r3, [pc, #60]	; (80088b0 <pbuf_pool_is_empty+0x4c>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8008876:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <pbuf_pool_is_empty+0x4c>)
 8008878:	2201      	movs	r2, #1
 800887a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f008 fe1f 	bl	80114c0 <sys_arch_unprotect>

  if (!queued) {
 8008882:	78fb      	ldrb	r3, [r7, #3]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10f      	bne.n	80088a8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008888:	2100      	movs	r1, #0
 800888a:	480a      	ldr	r0, [pc, #40]	; (80088b4 <pbuf_pool_is_empty+0x50>)
 800888c:	f7fe fea6 	bl	80075dc <tcpip_try_callback>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d008      	beq.n	80088a8 <pbuf_pool_is_empty+0x44>
 8008896:	f008 fe05 	bl	80114a4 <sys_arch_protect>
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	4b04      	ldr	r3, [pc, #16]	; (80088b0 <pbuf_pool_is_empty+0x4c>)
 800889e:	2200      	movs	r2, #0
 80088a0:	701a      	strb	r2, [r3, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f008 fe0c 	bl	80114c0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80088a8:	bf00      	nop
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	2000c491 	.word	0x2000c491
 80088b4:	08008851 	.word	0x08008851

080088b8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	4611      	mov	r1, r2
 80088c4:	461a      	mov	r2, r3
 80088c6:	460b      	mov	r3, r1
 80088c8:	80fb      	strh	r3, [r7, #6]
 80088ca:	4613      	mov	r3, r2
 80088cc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	88fa      	ldrh	r2, [r7, #6]
 80088de:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	88ba      	ldrh	r2, [r7, #4]
 80088e4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80088e6:	8b3b      	ldrh	r3, [r7, #24]
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	7f3a      	ldrb	r2, [r7, #28]
 80088f2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2201      	movs	r2, #1
 80088f8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	73da      	strb	r2, [r3, #15]
}
 8008900:	bf00      	nop
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08c      	sub	sp, #48	; 0x30
 8008910:	af02      	add	r7, sp, #8
 8008912:	4603      	mov	r3, r0
 8008914:	71fb      	strb	r3, [r7, #7]
 8008916:	460b      	mov	r3, r1
 8008918:	80bb      	strh	r3, [r7, #4]
 800891a:	4613      	mov	r3, r2
 800891c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008922:	887b      	ldrh	r3, [r7, #2]
 8008924:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008928:	d07f      	beq.n	8008a2a <pbuf_alloc+0x11e>
 800892a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800892e:	f300 80c8 	bgt.w	8008ac2 <pbuf_alloc+0x1b6>
 8008932:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008936:	d010      	beq.n	800895a <pbuf_alloc+0x4e>
 8008938:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800893c:	f300 80c1 	bgt.w	8008ac2 <pbuf_alloc+0x1b6>
 8008940:	2b01      	cmp	r3, #1
 8008942:	d002      	beq.n	800894a <pbuf_alloc+0x3e>
 8008944:	2b41      	cmp	r3, #65	; 0x41
 8008946:	f040 80bc 	bne.w	8008ac2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800894a:	887a      	ldrh	r2, [r7, #2]
 800894c:	88bb      	ldrh	r3, [r7, #4]
 800894e:	4619      	mov	r1, r3
 8008950:	2000      	movs	r0, #0
 8008952:	f000 f8d1 	bl	8008af8 <pbuf_alloc_reference>
 8008956:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008958:	e0bd      	b.n	8008ad6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800895a:	2300      	movs	r3, #0
 800895c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800895e:	2300      	movs	r3, #0
 8008960:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008962:	88bb      	ldrh	r3, [r7, #4]
 8008964:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008966:	200c      	movs	r0, #12
 8008968:	f7ff fb9a 	bl	80080a0 <memp_malloc>
 800896c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d109      	bne.n	8008988 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008974:	f7ff ff76 	bl	8008864 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <pbuf_alloc+0x78>
            pbuf_free(p);
 800897e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008980:	f000 faa8 	bl	8008ed4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008984:	2300      	movs	r3, #0
 8008986:	e0a7      	b.n	8008ad8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008988:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800898a:	3303      	adds	r3, #3
 800898c:	b29b      	uxth	r3, r3
 800898e:	f023 0303 	bic.w	r3, r3, #3
 8008992:	b29b      	uxth	r3, r3
 8008994:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008998:	b29b      	uxth	r3, r3
 800899a:	8b7a      	ldrh	r2, [r7, #26]
 800899c:	4293      	cmp	r3, r2
 800899e:	bf28      	it	cs
 80089a0:	4613      	movcs	r3, r2
 80089a2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80089a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80089a6:	3310      	adds	r3, #16
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	4413      	add	r3, r2
 80089ac:	3303      	adds	r3, #3
 80089ae:	f023 0303 	bic.w	r3, r3, #3
 80089b2:	4618      	mov	r0, r3
 80089b4:	89f9      	ldrh	r1, [r7, #14]
 80089b6:	8b7a      	ldrh	r2, [r7, #26]
 80089b8:	2300      	movs	r3, #0
 80089ba:	9301      	str	r3, [sp, #4]
 80089bc:	887b      	ldrh	r3, [r7, #2]
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	460b      	mov	r3, r1
 80089c2:	4601      	mov	r1, r0
 80089c4:	6938      	ldr	r0, [r7, #16]
 80089c6:	f7ff ff77 	bl	80088b8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f003 0303 	and.w	r3, r3, #3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d006      	beq.n	80089e4 <pbuf_alloc+0xd8>
 80089d6:	4b42      	ldr	r3, [pc, #264]	; (8008ae0 <pbuf_alloc+0x1d4>)
 80089d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089dc:	4941      	ldr	r1, [pc, #260]	; (8008ae4 <pbuf_alloc+0x1d8>)
 80089de:	4842      	ldr	r0, [pc, #264]	; (8008ae8 <pbuf_alloc+0x1dc>)
 80089e0:	f008 ff56 	bl	8011890 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80089e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80089e6:	3303      	adds	r3, #3
 80089e8:	f023 0303 	bic.w	r3, r3, #3
 80089ec:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80089f0:	d106      	bne.n	8008a00 <pbuf_alloc+0xf4>
 80089f2:	4b3b      	ldr	r3, [pc, #236]	; (8008ae0 <pbuf_alloc+0x1d4>)
 80089f4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80089f8:	493c      	ldr	r1, [pc, #240]	; (8008aec <pbuf_alloc+0x1e0>)
 80089fa:	483b      	ldr	r0, [pc, #236]	; (8008ae8 <pbuf_alloc+0x1dc>)
 80089fc:	f008 ff48 	bl	8011890 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d102      	bne.n	8008a0c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	627b      	str	r3, [r7, #36]	; 0x24
 8008a0a:	e002      	b.n	8008a12 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008a16:	8b7a      	ldrh	r2, [r7, #26]
 8008a18:	89fb      	ldrh	r3, [r7, #14]
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008a22:	8b7b      	ldrh	r3, [r7, #26]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d19e      	bne.n	8008966 <pbuf_alloc+0x5a>
      break;
 8008a28:	e055      	b.n	8008ad6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008a2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a2c:	3303      	adds	r3, #3
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f023 0303 	bic.w	r3, r3, #3
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	88bb      	ldrh	r3, [r7, #4]
 8008a38:	3303      	adds	r3, #3
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	f023 0303 	bic.w	r3, r3, #3
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	4413      	add	r3, r2
 8008a44:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008a46:	8b3b      	ldrh	r3, [r7, #24]
 8008a48:	3310      	adds	r3, #16
 8008a4a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008a4c:	8b3a      	ldrh	r2, [r7, #24]
 8008a4e:	88bb      	ldrh	r3, [r7, #4]
 8008a50:	3303      	adds	r3, #3
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d306      	bcc.n	8008a68 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008a5a:	8afa      	ldrh	r2, [r7, #22]
 8008a5c:	88bb      	ldrh	r3, [r7, #4]
 8008a5e:	3303      	adds	r3, #3
 8008a60:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d201      	bcs.n	8008a6c <pbuf_alloc+0x160>
        return NULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	e035      	b.n	8008ad8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008a6c:	8afb      	ldrh	r3, [r7, #22]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7ff f972 	bl	8007d58 <mem_malloc>
 8008a74:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <pbuf_alloc+0x174>
        return NULL;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	e02b      	b.n	8008ad8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008a80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a82:	3310      	adds	r3, #16
 8008a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a86:	4413      	add	r3, r2
 8008a88:	3303      	adds	r3, #3
 8008a8a:	f023 0303 	bic.w	r3, r3, #3
 8008a8e:	4618      	mov	r0, r3
 8008a90:	88b9      	ldrh	r1, [r7, #4]
 8008a92:	88ba      	ldrh	r2, [r7, #4]
 8008a94:	2300      	movs	r3, #0
 8008a96:	9301      	str	r3, [sp, #4]
 8008a98:	887b      	ldrh	r3, [r7, #2]
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	4601      	mov	r1, r0
 8008aa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aa2:	f7ff ff09 	bl	80088b8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f003 0303 	and.w	r3, r3, #3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d010      	beq.n	8008ad4 <pbuf_alloc+0x1c8>
 8008ab2:	4b0b      	ldr	r3, [pc, #44]	; (8008ae0 <pbuf_alloc+0x1d4>)
 8008ab4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008ab8:	490d      	ldr	r1, [pc, #52]	; (8008af0 <pbuf_alloc+0x1e4>)
 8008aba:	480b      	ldr	r0, [pc, #44]	; (8008ae8 <pbuf_alloc+0x1dc>)
 8008abc:	f008 fee8 	bl	8011890 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008ac0:	e008      	b.n	8008ad4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008ac2:	4b07      	ldr	r3, [pc, #28]	; (8008ae0 <pbuf_alloc+0x1d4>)
 8008ac4:	f240 1227 	movw	r2, #295	; 0x127
 8008ac8:	490a      	ldr	r1, [pc, #40]	; (8008af4 <pbuf_alloc+0x1e8>)
 8008aca:	4807      	ldr	r0, [pc, #28]	; (8008ae8 <pbuf_alloc+0x1dc>)
 8008acc:	f008 fee0 	bl	8011890 <iprintf>
      return NULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	e001      	b.n	8008ad8 <pbuf_alloc+0x1cc>
      break;
 8008ad4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3728      	adds	r7, #40	; 0x28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	08012e40 	.word	0x08012e40
 8008ae4:	08012e70 	.word	0x08012e70
 8008ae8:	08012ea0 	.word	0x08012ea0
 8008aec:	08012ec8 	.word	0x08012ec8
 8008af0:	08012efc 	.word	0x08012efc
 8008af4:	08012f28 	.word	0x08012f28

08008af8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af02      	add	r7, sp, #8
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	807b      	strh	r3, [r7, #2]
 8008b04:	4613      	mov	r3, r2
 8008b06:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008b08:	883b      	ldrh	r3, [r7, #0]
 8008b0a:	2b41      	cmp	r3, #65	; 0x41
 8008b0c:	d009      	beq.n	8008b22 <pbuf_alloc_reference+0x2a>
 8008b0e:	883b      	ldrh	r3, [r7, #0]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d006      	beq.n	8008b22 <pbuf_alloc_reference+0x2a>
 8008b14:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <pbuf_alloc_reference+0x5c>)
 8008b16:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008b1a:	490f      	ldr	r1, [pc, #60]	; (8008b58 <pbuf_alloc_reference+0x60>)
 8008b1c:	480f      	ldr	r0, [pc, #60]	; (8008b5c <pbuf_alloc_reference+0x64>)
 8008b1e:	f008 feb7 	bl	8011890 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008b22:	200b      	movs	r0, #11
 8008b24:	f7ff fabc 	bl	80080a0 <memp_malloc>
 8008b28:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008b30:	2300      	movs	r3, #0
 8008b32:	e00b      	b.n	8008b4c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008b34:	8879      	ldrh	r1, [r7, #2]
 8008b36:	887a      	ldrh	r2, [r7, #2]
 8008b38:	2300      	movs	r3, #0
 8008b3a:	9301      	str	r3, [sp, #4]
 8008b3c:	883b      	ldrh	r3, [r7, #0]
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	460b      	mov	r3, r1
 8008b42:	6879      	ldr	r1, [r7, #4]
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f7ff feb7 	bl	80088b8 <pbuf_init_alloced_pbuf>
  return p;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	08012e40 	.word	0x08012e40
 8008b58:	08012f44 	.word	0x08012f44
 8008b5c:	08012ea0 	.word	0x08012ea0

08008b60 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b088      	sub	sp, #32
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	607b      	str	r3, [r7, #4]
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73fb      	strb	r3, [r7, #15]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	81bb      	strh	r3, [r7, #12]
 8008b70:	4613      	mov	r3, r2
 8008b72:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008b78:	8a7b      	ldrh	r3, [r7, #18]
 8008b7a:	3303      	adds	r3, #3
 8008b7c:	f023 0203 	bic.w	r2, r3, #3
 8008b80:	89bb      	ldrh	r3, [r7, #12]
 8008b82:	441a      	add	r2, r3
 8008b84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d901      	bls.n	8008b8e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e018      	b.n	8008bc0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d007      	beq.n	8008ba4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008b94:	8a7b      	ldrh	r3, [r7, #18]
 8008b96:	3303      	adds	r3, #3
 8008b98:	f023 0303 	bic.w	r3, r3, #3
 8008b9c:	6a3a      	ldr	r2, [r7, #32]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	617b      	str	r3, [r7, #20]
 8008ba2:	e001      	b.n	8008ba8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	89b9      	ldrh	r1, [r7, #12]
 8008bac:	89ba      	ldrh	r2, [r7, #12]
 8008bae:	2302      	movs	r3, #2
 8008bb0:	9301      	str	r3, [sp, #4]
 8008bb2:	897b      	ldrh	r3, [r7, #10]
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	6979      	ldr	r1, [r7, #20]
 8008bba:	f7ff fe7d 	bl	80088b8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008bbe:	687b      	ldr	r3, [r7, #4]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d106      	bne.n	8008be8 <pbuf_realloc+0x20>
 8008bda:	4b3a      	ldr	r3, [pc, #232]	; (8008cc4 <pbuf_realloc+0xfc>)
 8008bdc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008be0:	4939      	ldr	r1, [pc, #228]	; (8008cc8 <pbuf_realloc+0x100>)
 8008be2:	483a      	ldr	r0, [pc, #232]	; (8008ccc <pbuf_realloc+0x104>)
 8008be4:	f008 fe54 	bl	8011890 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	891b      	ldrh	r3, [r3, #8]
 8008bec:	887a      	ldrh	r2, [r7, #2]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d263      	bcs.n	8008cba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	891a      	ldrh	r2, [r3, #8]
 8008bf6:	887b      	ldrh	r3, [r7, #2]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008bfc:	887b      	ldrh	r3, [r7, #2]
 8008bfe:	817b      	strh	r3, [r7, #10]
  q = p;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008c04:	e018      	b.n	8008c38 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	895b      	ldrh	r3, [r3, #10]
 8008c0a:	897a      	ldrh	r2, [r7, #10]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	891a      	ldrh	r2, [r3, #8]
 8008c14:	893b      	ldrh	r3, [r7, #8]
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d106      	bne.n	8008c38 <pbuf_realloc+0x70>
 8008c2a:	4b26      	ldr	r3, [pc, #152]	; (8008cc4 <pbuf_realloc+0xfc>)
 8008c2c:	f240 12af 	movw	r2, #431	; 0x1af
 8008c30:	4927      	ldr	r1, [pc, #156]	; (8008cd0 <pbuf_realloc+0x108>)
 8008c32:	4826      	ldr	r0, [pc, #152]	; (8008ccc <pbuf_realloc+0x104>)
 8008c34:	f008 fe2c 	bl	8011890 <iprintf>
  while (rem_len > q->len) {
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	895b      	ldrh	r3, [r3, #10]
 8008c3c:	897a      	ldrh	r2, [r7, #10]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d8e1      	bhi.n	8008c06 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	7b1b      	ldrb	r3, [r3, #12]
 8008c46:	f003 030f 	and.w	r3, r3, #15
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d121      	bne.n	8008c92 <pbuf_realloc+0xca>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	895b      	ldrh	r3, [r3, #10]
 8008c52:	897a      	ldrh	r2, [r7, #10]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d01c      	beq.n	8008c92 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	7b5b      	ldrb	r3, [r3, #13]
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d116      	bne.n	8008c92 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	897b      	ldrh	r3, [r7, #10]
 8008c70:	4413      	add	r3, r2
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	4619      	mov	r1, r3
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f7fe ff64 	bl	8007b44 <mem_trim>
 8008c7c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <pbuf_realloc+0xca>
 8008c84:	4b0f      	ldr	r3, [pc, #60]	; (8008cc4 <pbuf_realloc+0xfc>)
 8008c86:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008c8a:	4912      	ldr	r1, [pc, #72]	; (8008cd4 <pbuf_realloc+0x10c>)
 8008c8c:	480f      	ldr	r0, [pc, #60]	; (8008ccc <pbuf_realloc+0x104>)
 8008c8e:	f008 fdff 	bl	8011890 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	897a      	ldrh	r2, [r7, #10]
 8008c96:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	895a      	ldrh	r2, [r3, #10]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d004      	beq.n	8008cb2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 f911 	bl	8008ed4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	e000      	b.n	8008cbc <pbuf_realloc+0xf4>
    return;
 8008cba:	bf00      	nop

}
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	08012e40 	.word	0x08012e40
 8008cc8:	08012f58 	.word	0x08012f58
 8008ccc:	08012ea0 	.word	0x08012ea0
 8008cd0:	08012f70 	.word	0x08012f70
 8008cd4:	08012f88 	.word	0x08012f88

08008cd8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d106      	bne.n	8008cfa <pbuf_add_header_impl+0x22>
 8008cec:	4b2b      	ldr	r3, [pc, #172]	; (8008d9c <pbuf_add_header_impl+0xc4>)
 8008cee:	f240 12df 	movw	r2, #479	; 0x1df
 8008cf2:	492b      	ldr	r1, [pc, #172]	; (8008da0 <pbuf_add_header_impl+0xc8>)
 8008cf4:	482b      	ldr	r0, [pc, #172]	; (8008da4 <pbuf_add_header_impl+0xcc>)
 8008cf6:	f008 fdcb 	bl	8011890 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d003      	beq.n	8008d08 <pbuf_add_header_impl+0x30>
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d06:	d301      	bcc.n	8008d0c <pbuf_add_header_impl+0x34>
    return 1;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e043      	b.n	8008d94 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <pbuf_add_header_impl+0x3e>
    return 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	e03e      	b.n	8008d94 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	891a      	ldrh	r2, [r3, #8]
 8008d1e:	8a7b      	ldrh	r3, [r7, #18]
 8008d20:	4413      	add	r3, r2
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	8a7a      	ldrh	r2, [r7, #18]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d901      	bls.n	8008d2e <pbuf_add_header_impl+0x56>
    return 1;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e032      	b.n	8008d94 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	7b1b      	ldrb	r3, [r3, #12]
 8008d32:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008d34:	8a3b      	ldrh	r3, [r7, #16]
 8008d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00c      	beq.n	8008d58 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	425b      	negs	r3, r3
 8008d46:	4413      	add	r3, r2
 8008d48:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	3310      	adds	r3, #16
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d20d      	bcs.n	8008d70 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e01d      	b.n	8008d94 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d006      	beq.n	8008d6c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	425b      	negs	r3, r3
 8008d66:	4413      	add	r3, r2
 8008d68:	617b      	str	r3, [r7, #20]
 8008d6a:	e001      	b.n	8008d70 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e011      	b.n	8008d94 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	895a      	ldrh	r2, [r3, #10]
 8008d7a:	8a7b      	ldrh	r3, [r7, #18]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	891a      	ldrh	r2, [r3, #8]
 8008d88:	8a7b      	ldrh	r3, [r7, #18]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	811a      	strh	r2, [r3, #8]


  return 0;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	08012e40 	.word	0x08012e40
 8008da0:	08012fa4 	.word	0x08012fa4
 8008da4:	08012ea0 	.word	0x08012ea0

08008da8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008db2:	2200      	movs	r2, #0
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7ff ff8e 	bl	8008cd8 <pbuf_add_header_impl>
 8008dbc:	4603      	mov	r3, r0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
	...

08008dc8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d106      	bne.n	8008de6 <pbuf_remove_header+0x1e>
 8008dd8:	4b20      	ldr	r3, [pc, #128]	; (8008e5c <pbuf_remove_header+0x94>)
 8008dda:	f240 224b 	movw	r2, #587	; 0x24b
 8008dde:	4920      	ldr	r1, [pc, #128]	; (8008e60 <pbuf_remove_header+0x98>)
 8008de0:	4820      	ldr	r0, [pc, #128]	; (8008e64 <pbuf_remove_header+0x9c>)
 8008de2:	f008 fd55 	bl	8011890 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <pbuf_remove_header+0x2c>
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008df2:	d301      	bcc.n	8008df8 <pbuf_remove_header+0x30>
    return 1;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e02c      	b.n	8008e52 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <pbuf_remove_header+0x3a>
    return 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e027      	b.n	8008e52 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	895b      	ldrh	r3, [r3, #10]
 8008e0a:	89fa      	ldrh	r2, [r7, #14]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d908      	bls.n	8008e22 <pbuf_remove_header+0x5a>
 8008e10:	4b12      	ldr	r3, [pc, #72]	; (8008e5c <pbuf_remove_header+0x94>)
 8008e12:	f240 2255 	movw	r2, #597	; 0x255
 8008e16:	4914      	ldr	r1, [pc, #80]	; (8008e68 <pbuf_remove_header+0xa0>)
 8008e18:	4812      	ldr	r0, [pc, #72]	; (8008e64 <pbuf_remove_header+0x9c>)
 8008e1a:	f008 fd39 	bl	8011890 <iprintf>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e017      	b.n	8008e52 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	441a      	add	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	895a      	ldrh	r2, [r3, #10]
 8008e38:	89fb      	ldrh	r3, [r7, #14]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	891a      	ldrh	r2, [r3, #8]
 8008e46:	89fb      	ldrh	r3, [r7, #14]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	08012e40 	.word	0x08012e40
 8008e60:	08012fa4 	.word	0x08012fa4
 8008e64:	08012ea0 	.word	0x08012ea0
 8008e68:	08012fb0 	.word	0x08012fb0

08008e6c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	807b      	strh	r3, [r7, #2]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008e7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	da08      	bge.n	8008e96 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008e84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e88:	425b      	negs	r3, r3
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff ff9b 	bl	8008dc8 <pbuf_remove_header>
 8008e92:	4603      	mov	r3, r0
 8008e94:	e007      	b.n	8008ea6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008e96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e9a:	787a      	ldrb	r2, [r7, #1]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff ff1a 	bl	8008cd8 <pbuf_add_header_impl>
 8008ea4:	4603      	mov	r3, r0
  }
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008eba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff ffd2 	bl	8008e6c <pbuf_header_impl>
 8008ec8:	4603      	mov	r3, r0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b088      	sub	sp, #32
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10b      	bne.n	8008efa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d106      	bne.n	8008ef6 <pbuf_free+0x22>
 8008ee8:	4b3b      	ldr	r3, [pc, #236]	; (8008fd8 <pbuf_free+0x104>)
 8008eea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008eee:	493b      	ldr	r1, [pc, #236]	; (8008fdc <pbuf_free+0x108>)
 8008ef0:	483b      	ldr	r0, [pc, #236]	; (8008fe0 <pbuf_free+0x10c>)
 8008ef2:	f008 fccd 	bl	8011890 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e069      	b.n	8008fce <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008efa:	2300      	movs	r3, #0
 8008efc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008efe:	e062      	b.n	8008fc6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8008f00:	f008 fad0 	bl	80114a4 <sys_arch_protect>
 8008f04:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	7b9b      	ldrb	r3, [r3, #14]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d106      	bne.n	8008f1c <pbuf_free+0x48>
 8008f0e:	4b32      	ldr	r3, [pc, #200]	; (8008fd8 <pbuf_free+0x104>)
 8008f10:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008f14:	4933      	ldr	r1, [pc, #204]	; (8008fe4 <pbuf_free+0x110>)
 8008f16:	4832      	ldr	r0, [pc, #200]	; (8008fe0 <pbuf_free+0x10c>)
 8008f18:	f008 fcba 	bl	8011890 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	7b9b      	ldrb	r3, [r3, #14]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	b2da      	uxtb	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	739a      	strb	r2, [r3, #14]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	7b9b      	ldrb	r3, [r3, #14]
 8008f2c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8008f2e:	69b8      	ldr	r0, [r7, #24]
 8008f30:	f008 fac6 	bl	80114c0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d143      	bne.n	8008fc2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	7b1b      	ldrb	r3, [r3, #12]
 8008f44:	f003 030f 	and.w	r3, r3, #15
 8008f48:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	7b5b      	ldrb	r3, [r3, #13]
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d011      	beq.n	8008f7a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d106      	bne.n	8008f70 <pbuf_free+0x9c>
 8008f62:	4b1d      	ldr	r3, [pc, #116]	; (8008fd8 <pbuf_free+0x104>)
 8008f64:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008f68:	491f      	ldr	r1, [pc, #124]	; (8008fe8 <pbuf_free+0x114>)
 8008f6a:	481d      	ldr	r0, [pc, #116]	; (8008fe0 <pbuf_free+0x10c>)
 8008f6c:	f008 fc90 	bl	8011890 <iprintf>
        pc->custom_free_function(p);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	4798      	blx	r3
 8008f78:	e01d      	b.n	8008fb6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d104      	bne.n	8008f8a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	200c      	movs	r0, #12
 8008f84:	f7ff f902 	bl	800818c <memp_free>
 8008f88:	e015      	b.n	8008fb6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d104      	bne.n	8008f9a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8008f90:	6879      	ldr	r1, [r7, #4]
 8008f92:	200b      	movs	r0, #11
 8008f94:	f7ff f8fa 	bl	800818c <memp_free>
 8008f98:	e00d      	b.n	8008fb6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d103      	bne.n	8008fa8 <pbuf_free+0xd4>
          mem_free(p);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7fe fd3f 	bl	8007a24 <mem_free>
 8008fa6:	e006      	b.n	8008fb6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008fa8:	4b0b      	ldr	r3, [pc, #44]	; (8008fd8 <pbuf_free+0x104>)
 8008faa:	f240 320f 	movw	r2, #783	; 0x30f
 8008fae:	490f      	ldr	r1, [pc, #60]	; (8008fec <pbuf_free+0x118>)
 8008fb0:	480b      	ldr	r0, [pc, #44]	; (8008fe0 <pbuf_free+0x10c>)
 8008fb2:	f008 fc6d 	bl	8011890 <iprintf>
        }
      }
      count++;
 8008fb6:	7ffb      	ldrb	r3, [r7, #31]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	607b      	str	r3, [r7, #4]
 8008fc0:	e001      	b.n	8008fc6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d199      	bne.n	8008f00 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008fcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3720      	adds	r7, #32
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	08012e40 	.word	0x08012e40
 8008fdc:	08012fa4 	.word	0x08012fa4
 8008fe0:	08012ea0 	.word	0x08012ea0
 8008fe4:	08012fd0 	.word	0x08012fd0
 8008fe8:	08012fe8 	.word	0x08012fe8
 8008fec:	0801300c 	.word	0x0801300c

08008ff0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008ffc:	e005      	b.n	800900a <pbuf_clen+0x1a>
    ++len;
 8008ffe:	89fb      	ldrh	r3, [r7, #14]
 8009000:	3301      	adds	r3, #1
 8009002:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1f6      	bne.n	8008ffe <pbuf_clen+0xe>
  }
  return len;
 8009010:	89fb      	ldrh	r3, [r7, #14]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
	...

08009020 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d016      	beq.n	800905c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800902e:	f008 fa39 	bl	80114a4 <sys_arch_protect>
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	7b9b      	ldrb	r3, [r3, #14]
 8009038:	3301      	adds	r3, #1
 800903a:	b2da      	uxtb	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	739a      	strb	r2, [r3, #14]
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f008 fa3d 	bl	80114c0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	7b9b      	ldrb	r3, [r3, #14]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d106      	bne.n	800905c <pbuf_ref+0x3c>
 800904e:	4b05      	ldr	r3, [pc, #20]	; (8009064 <pbuf_ref+0x44>)
 8009050:	f240 3242 	movw	r2, #834	; 0x342
 8009054:	4904      	ldr	r1, [pc, #16]	; (8009068 <pbuf_ref+0x48>)
 8009056:	4805      	ldr	r0, [pc, #20]	; (800906c <pbuf_ref+0x4c>)
 8009058:	f008 fc1a 	bl	8011890 <iprintf>
  }
}
 800905c:	bf00      	nop
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	08012e40 	.word	0x08012e40
 8009068:	08013020 	.word	0x08013020
 800906c:	08012ea0 	.word	0x08012ea0

08009070 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d002      	beq.n	8009086 <pbuf_cat+0x16>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d107      	bne.n	8009096 <pbuf_cat+0x26>
 8009086:	4b20      	ldr	r3, [pc, #128]	; (8009108 <pbuf_cat+0x98>)
 8009088:	f240 3259 	movw	r2, #857	; 0x359
 800908c:	491f      	ldr	r1, [pc, #124]	; (800910c <pbuf_cat+0x9c>)
 800908e:	4820      	ldr	r0, [pc, #128]	; (8009110 <pbuf_cat+0xa0>)
 8009090:	f008 fbfe 	bl	8011890 <iprintf>
 8009094:	e034      	b.n	8009100 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	60fb      	str	r3, [r7, #12]
 800909a:	e00a      	b.n	80090b2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	891a      	ldrh	r2, [r3, #8]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	891b      	ldrh	r3, [r3, #8]
 80090a4:	4413      	add	r3, r2
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	60fb      	str	r3, [r7, #12]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1f0      	bne.n	800909c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	891a      	ldrh	r2, [r3, #8]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	895b      	ldrh	r3, [r3, #10]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d006      	beq.n	80090d4 <pbuf_cat+0x64>
 80090c6:	4b10      	ldr	r3, [pc, #64]	; (8009108 <pbuf_cat+0x98>)
 80090c8:	f240 3262 	movw	r2, #866	; 0x362
 80090cc:	4911      	ldr	r1, [pc, #68]	; (8009114 <pbuf_cat+0xa4>)
 80090ce:	4810      	ldr	r0, [pc, #64]	; (8009110 <pbuf_cat+0xa0>)
 80090d0:	f008 fbde 	bl	8011890 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d006      	beq.n	80090ea <pbuf_cat+0x7a>
 80090dc:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <pbuf_cat+0x98>)
 80090de:	f240 3263 	movw	r2, #867	; 0x363
 80090e2:	490d      	ldr	r1, [pc, #52]	; (8009118 <pbuf_cat+0xa8>)
 80090e4:	480a      	ldr	r0, [pc, #40]	; (8009110 <pbuf_cat+0xa0>)
 80090e6:	f008 fbd3 	bl	8011890 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	891a      	ldrh	r2, [r3, #8]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	891b      	ldrh	r3, [r3, #8]
 80090f2:	4413      	add	r3, r2
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	08012e40 	.word	0x08012e40
 800910c:	08013034 	.word	0x08013034
 8009110:	08012ea0 	.word	0x08012ea0
 8009114:	0801306c 	.word	0x0801306c
 8009118:	0801309c 	.word	0x0801309c

0800911c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009126:	2300      	movs	r3, #0
 8009128:	617b      	str	r3, [r7, #20]
 800912a:	2300      	movs	r3, #0
 800912c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d008      	beq.n	8009146 <pbuf_copy+0x2a>
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d005      	beq.n	8009146 <pbuf_copy+0x2a>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	891a      	ldrh	r2, [r3, #8]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	891b      	ldrh	r3, [r3, #8]
 8009142:	429a      	cmp	r2, r3
 8009144:	d209      	bcs.n	800915a <pbuf_copy+0x3e>
 8009146:	4b57      	ldr	r3, [pc, #348]	; (80092a4 <pbuf_copy+0x188>)
 8009148:	f240 32c9 	movw	r2, #969	; 0x3c9
 800914c:	4956      	ldr	r1, [pc, #344]	; (80092a8 <pbuf_copy+0x18c>)
 800914e:	4857      	ldr	r0, [pc, #348]	; (80092ac <pbuf_copy+0x190>)
 8009150:	f008 fb9e 	bl	8011890 <iprintf>
 8009154:	f06f 030f 	mvn.w	r3, #15
 8009158:	e09f      	b.n	800929a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	895b      	ldrh	r3, [r3, #10]
 800915e:	461a      	mov	r2, r3
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	1ad2      	subs	r2, r2, r3
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	895b      	ldrh	r3, [r3, #10]
 8009168:	4619      	mov	r1, r3
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	1acb      	subs	r3, r1, r3
 800916e:	429a      	cmp	r2, r3
 8009170:	d306      	bcc.n	8009180 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	895b      	ldrh	r3, [r3, #10]
 8009176:	461a      	mov	r2, r3
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	e005      	b.n	800918c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	895b      	ldrh	r3, [r3, #10]
 8009184:	461a      	mov	r2, r3
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	18d0      	adds	r0, r2, r3
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	4413      	add	r3, r2
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4619      	mov	r1, r3
 80091a0:	f008 facb 	bl	801173a <memcpy>
    offset_to += len;
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	4413      	add	r3, r2
 80091aa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	4413      	add	r3, r2
 80091b2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	895b      	ldrh	r3, [r3, #10]
 80091b8:	461a      	mov	r2, r3
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	4293      	cmp	r3, r2
 80091be:	d906      	bls.n	80091ce <pbuf_copy+0xb2>
 80091c0:	4b38      	ldr	r3, [pc, #224]	; (80092a4 <pbuf_copy+0x188>)
 80091c2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80091c6:	493a      	ldr	r1, [pc, #232]	; (80092b0 <pbuf_copy+0x194>)
 80091c8:	4838      	ldr	r0, [pc, #224]	; (80092ac <pbuf_copy+0x190>)
 80091ca:	f008 fb61 	bl	8011890 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	895b      	ldrh	r3, [r3, #10]
 80091d2:	461a      	mov	r2, r3
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d906      	bls.n	80091e8 <pbuf_copy+0xcc>
 80091da:	4b32      	ldr	r3, [pc, #200]	; (80092a4 <pbuf_copy+0x188>)
 80091dc:	f240 32da 	movw	r2, #986	; 0x3da
 80091e0:	4934      	ldr	r1, [pc, #208]	; (80092b4 <pbuf_copy+0x198>)
 80091e2:	4832      	ldr	r0, [pc, #200]	; (80092ac <pbuf_copy+0x190>)
 80091e4:	f008 fb54 	bl	8011890 <iprintf>
    if (offset_from >= p_from->len) {
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	895b      	ldrh	r3, [r3, #10]
 80091ec:	461a      	mov	r2, r3
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d304      	bcc.n	80091fe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	895b      	ldrh	r3, [r3, #10]
 8009202:	461a      	mov	r2, r3
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	4293      	cmp	r3, r2
 8009208:	d114      	bne.n	8009234 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800920a:	2300      	movs	r3, #0
 800920c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10c      	bne.n	8009234 <pbuf_copy+0x118>
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d009      	beq.n	8009234 <pbuf_copy+0x118>
 8009220:	4b20      	ldr	r3, [pc, #128]	; (80092a4 <pbuf_copy+0x188>)
 8009222:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009226:	4924      	ldr	r1, [pc, #144]	; (80092b8 <pbuf_copy+0x19c>)
 8009228:	4820      	ldr	r0, [pc, #128]	; (80092ac <pbuf_copy+0x190>)
 800922a:	f008 fb31 	bl	8011890 <iprintf>
 800922e:	f06f 030f 	mvn.w	r3, #15
 8009232:	e032      	b.n	800929a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d013      	beq.n	8009262 <pbuf_copy+0x146>
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	895a      	ldrh	r2, [r3, #10]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	891b      	ldrh	r3, [r3, #8]
 8009242:	429a      	cmp	r2, r3
 8009244:	d10d      	bne.n	8009262 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d009      	beq.n	8009262 <pbuf_copy+0x146>
 800924e:	4b15      	ldr	r3, [pc, #84]	; (80092a4 <pbuf_copy+0x188>)
 8009250:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009254:	4919      	ldr	r1, [pc, #100]	; (80092bc <pbuf_copy+0x1a0>)
 8009256:	4815      	ldr	r0, [pc, #84]	; (80092ac <pbuf_copy+0x190>)
 8009258:	f008 fb1a 	bl	8011890 <iprintf>
 800925c:	f06f 0305 	mvn.w	r3, #5
 8009260:	e01b      	b.n	800929a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d013      	beq.n	8009290 <pbuf_copy+0x174>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	895a      	ldrh	r2, [r3, #10]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	891b      	ldrh	r3, [r3, #8]
 8009270:	429a      	cmp	r2, r3
 8009272:	d10d      	bne.n	8009290 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d009      	beq.n	8009290 <pbuf_copy+0x174>
 800927c:	4b09      	ldr	r3, [pc, #36]	; (80092a4 <pbuf_copy+0x188>)
 800927e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009282:	490e      	ldr	r1, [pc, #56]	; (80092bc <pbuf_copy+0x1a0>)
 8009284:	4809      	ldr	r0, [pc, #36]	; (80092ac <pbuf_copy+0x190>)
 8009286:	f008 fb03 	bl	8011890 <iprintf>
 800928a:	f06f 0305 	mvn.w	r3, #5
 800928e:	e004      	b.n	800929a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	f47f af61 	bne.w	800915a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	08012e40 	.word	0x08012e40
 80092a8:	080130e8 	.word	0x080130e8
 80092ac:	08012ea0 	.word	0x08012ea0
 80092b0:	08013118 	.word	0x08013118
 80092b4:	08013130 	.word	0x08013130
 80092b8:	0801314c 	.word	0x0801314c
 80092bc:	0801315c 	.word	0x0801315c

080092c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b088      	sub	sp, #32
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	4611      	mov	r1, r2
 80092cc:	461a      	mov	r2, r3
 80092ce:	460b      	mov	r3, r1
 80092d0:	80fb      	strh	r3, [r7, #6]
 80092d2:	4613      	mov	r3, r2
 80092d4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80092da:	2300      	movs	r3, #0
 80092dc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d108      	bne.n	80092f6 <pbuf_copy_partial+0x36>
 80092e4:	4b2b      	ldr	r3, [pc, #172]	; (8009394 <pbuf_copy_partial+0xd4>)
 80092e6:	f240 420a 	movw	r2, #1034	; 0x40a
 80092ea:	492b      	ldr	r1, [pc, #172]	; (8009398 <pbuf_copy_partial+0xd8>)
 80092ec:	482b      	ldr	r0, [pc, #172]	; (800939c <pbuf_copy_partial+0xdc>)
 80092ee:	f008 facf 	bl	8011890 <iprintf>
 80092f2:	2300      	movs	r3, #0
 80092f4:	e04a      	b.n	800938c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d108      	bne.n	800930e <pbuf_copy_partial+0x4e>
 80092fc:	4b25      	ldr	r3, [pc, #148]	; (8009394 <pbuf_copy_partial+0xd4>)
 80092fe:	f240 420b 	movw	r2, #1035	; 0x40b
 8009302:	4927      	ldr	r1, [pc, #156]	; (80093a0 <pbuf_copy_partial+0xe0>)
 8009304:	4825      	ldr	r0, [pc, #148]	; (800939c <pbuf_copy_partial+0xdc>)
 8009306:	f008 fac3 	bl	8011890 <iprintf>
 800930a:	2300      	movs	r3, #0
 800930c:	e03e      	b.n	800938c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	61fb      	str	r3, [r7, #28]
 8009312:	e034      	b.n	800937e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009314:	88bb      	ldrh	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00a      	beq.n	8009330 <pbuf_copy_partial+0x70>
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	895b      	ldrh	r3, [r3, #10]
 800931e:	88ba      	ldrh	r2, [r7, #4]
 8009320:	429a      	cmp	r2, r3
 8009322:	d305      	bcc.n	8009330 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	895b      	ldrh	r3, [r3, #10]
 8009328:	88ba      	ldrh	r2, [r7, #4]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	80bb      	strh	r3, [r7, #4]
 800932e:	e023      	b.n	8009378 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	895a      	ldrh	r2, [r3, #10]
 8009334:	88bb      	ldrh	r3, [r7, #4]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800933a:	8b3a      	ldrh	r2, [r7, #24]
 800933c:	88fb      	ldrh	r3, [r7, #6]
 800933e:	429a      	cmp	r2, r3
 8009340:	d901      	bls.n	8009346 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009342:	88fb      	ldrh	r3, [r7, #6]
 8009344:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009346:	8b7b      	ldrh	r3, [r7, #26]
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	18d0      	adds	r0, r2, r3
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	88bb      	ldrh	r3, [r7, #4]
 8009352:	4413      	add	r3, r2
 8009354:	8b3a      	ldrh	r2, [r7, #24]
 8009356:	4619      	mov	r1, r3
 8009358:	f008 f9ef 	bl	801173a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800935c:	8afa      	ldrh	r2, [r7, #22]
 800935e:	8b3b      	ldrh	r3, [r7, #24]
 8009360:	4413      	add	r3, r2
 8009362:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009364:	8b7a      	ldrh	r2, [r7, #26]
 8009366:	8b3b      	ldrh	r3, [r7, #24]
 8009368:	4413      	add	r3, r2
 800936a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800936c:	88fa      	ldrh	r2, [r7, #6]
 800936e:	8b3b      	ldrh	r3, [r7, #24]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	61fb      	str	r3, [r7, #28]
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <pbuf_copy_partial+0xca>
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1c4      	bne.n	8009314 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800938a:	8afb      	ldrh	r3, [r7, #22]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3720      	adds	r7, #32
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	08012e40 	.word	0x08012e40
 8009398:	08013188 	.word	0x08013188
 800939c:	08012ea0 	.word	0x08012ea0
 80093a0:	080131a8 	.word	0x080131a8

080093a4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	4603      	mov	r3, r0
 80093ac:	603a      	str	r2, [r7, #0]
 80093ae:	71fb      	strb	r3, [r7, #7]
 80093b0:	460b      	mov	r3, r1
 80093b2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	8919      	ldrh	r1, [r3, #8]
 80093b8:	88ba      	ldrh	r2, [r7, #4]
 80093ba:	79fb      	ldrb	r3, [r7, #7]
 80093bc:	4618      	mov	r0, r3
 80093be:	f7ff faa5 	bl	800890c <pbuf_alloc>
 80093c2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <pbuf_clone+0x2a>
    return NULL;
 80093ca:	2300      	movs	r3, #0
 80093cc:	e011      	b.n	80093f2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f7ff fea3 	bl	800911c <pbuf_copy>
 80093d6:	4603      	mov	r3, r0
 80093d8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80093da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d006      	beq.n	80093f0 <pbuf_clone+0x4c>
 80093e2:	4b06      	ldr	r3, [pc, #24]	; (80093fc <pbuf_clone+0x58>)
 80093e4:	f240 5224 	movw	r2, #1316	; 0x524
 80093e8:	4905      	ldr	r1, [pc, #20]	; (8009400 <pbuf_clone+0x5c>)
 80093ea:	4806      	ldr	r0, [pc, #24]	; (8009404 <pbuf_clone+0x60>)
 80093ec:	f008 fa50 	bl	8011890 <iprintf>
  return q;
 80093f0:	68fb      	ldr	r3, [r7, #12]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	08012e40 	.word	0x08012e40
 8009400:	080132b4 	.word	0x080132b4
 8009404:	08012ea0 	.word	0x08012ea0

08009408 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800940c:	f008 fa58 	bl	80118c0 <rand>
 8009410:	4603      	mov	r3, r0
 8009412:	b29b      	uxth	r3, r3
 8009414:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009418:	b29b      	uxth	r3, r3
 800941a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800941e:	b29a      	uxth	r2, r3
 8009420:	4b01      	ldr	r3, [pc, #4]	; (8009428 <tcp_init+0x20>)
 8009422:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009424:	bf00      	nop
 8009426:	bd80      	pop	{r7, pc}
 8009428:	20000024 	.word	0x20000024

0800942c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	7d1b      	ldrb	r3, [r3, #20]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d105      	bne.n	8009448 <tcp_free+0x1c>
 800943c:	4b06      	ldr	r3, [pc, #24]	; (8009458 <tcp_free+0x2c>)
 800943e:	22d4      	movs	r2, #212	; 0xd4
 8009440:	4906      	ldr	r1, [pc, #24]	; (800945c <tcp_free+0x30>)
 8009442:	4807      	ldr	r0, [pc, #28]	; (8009460 <tcp_free+0x34>)
 8009444:	f008 fa24 	bl	8011890 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009448:	6879      	ldr	r1, [r7, #4]
 800944a:	2001      	movs	r0, #1
 800944c:	f7fe fe9e 	bl	800818c <memp_free>
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	08013340 	.word	0x08013340
 800945c:	08013370 	.word	0x08013370
 8009460:	08013384 	.word	0x08013384

08009464 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	7d1b      	ldrb	r3, [r3, #20]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d105      	bne.n	8009480 <tcp_free_listen+0x1c>
 8009474:	4b06      	ldr	r3, [pc, #24]	; (8009490 <tcp_free_listen+0x2c>)
 8009476:	22df      	movs	r2, #223	; 0xdf
 8009478:	4906      	ldr	r1, [pc, #24]	; (8009494 <tcp_free_listen+0x30>)
 800947a:	4807      	ldr	r0, [pc, #28]	; (8009498 <tcp_free_listen+0x34>)
 800947c:	f008 fa08 	bl	8011890 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	2002      	movs	r0, #2
 8009484:	f7fe fe82 	bl	800818c <memp_free>
}
 8009488:	bf00      	nop
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	08013340 	.word	0x08013340
 8009494:	080133ac 	.word	0x080133ac
 8009498:	08013384 	.word	0x08013384

0800949c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80094a0:	f000 fea2 	bl	800a1e8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80094a4:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <tcp_tmr+0x28>)
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	3301      	adds	r3, #1
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <tcp_tmr+0x28>)
 80094ae:	701a      	strb	r2, [r3, #0]
 80094b0:	4b04      	ldr	r3, [pc, #16]	; (80094c4 <tcp_tmr+0x28>)
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	f003 0301 	and.w	r3, r3, #1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d001      	beq.n	80094c0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80094bc:	f000 fb54 	bl	8009b68 <tcp_slowtmr>
  }
}
 80094c0:	bf00      	nop
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	2000c4a9 	.word	0x2000c4a9

080094c8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d105      	bne.n	80094e4 <tcp_remove_listener+0x1c>
 80094d8:	4b0d      	ldr	r3, [pc, #52]	; (8009510 <tcp_remove_listener+0x48>)
 80094da:	22ff      	movs	r2, #255	; 0xff
 80094dc:	490d      	ldr	r1, [pc, #52]	; (8009514 <tcp_remove_listener+0x4c>)
 80094de:	480e      	ldr	r0, [pc, #56]	; (8009518 <tcp_remove_listener+0x50>)
 80094e0:	f008 f9d6 	bl	8011890 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	e00a      	b.n	8009500 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d102      	bne.n	80094fa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	60fb      	str	r3, [r7, #12]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1f1      	bne.n	80094ea <tcp_remove_listener+0x22>
    }
  }
}
 8009506:	bf00      	nop
 8009508:	bf00      	nop
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	08013340 	.word	0x08013340
 8009514:	080133c8 	.word	0x080133c8
 8009518:	08013384 	.word	0x08013384

0800951c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d106      	bne.n	8009538 <tcp_listen_closed+0x1c>
 800952a:	4b14      	ldr	r3, [pc, #80]	; (800957c <tcp_listen_closed+0x60>)
 800952c:	f240 1211 	movw	r2, #273	; 0x111
 8009530:	4913      	ldr	r1, [pc, #76]	; (8009580 <tcp_listen_closed+0x64>)
 8009532:	4814      	ldr	r0, [pc, #80]	; (8009584 <tcp_listen_closed+0x68>)
 8009534:	f008 f9ac 	bl	8011890 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	7d1b      	ldrb	r3, [r3, #20]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d006      	beq.n	800954e <tcp_listen_closed+0x32>
 8009540:	4b0e      	ldr	r3, [pc, #56]	; (800957c <tcp_listen_closed+0x60>)
 8009542:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009546:	4910      	ldr	r1, [pc, #64]	; (8009588 <tcp_listen_closed+0x6c>)
 8009548:	480e      	ldr	r0, [pc, #56]	; (8009584 <tcp_listen_closed+0x68>)
 800954a:	f008 f9a1 	bl	8011890 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800954e:	2301      	movs	r3, #1
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	e00b      	b.n	800956c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009554:	4a0d      	ldr	r2, [pc, #52]	; (800958c <tcp_listen_closed+0x70>)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	4618      	mov	r0, r3
 8009562:	f7ff ffb1 	bl	80094c8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	3301      	adds	r3, #1
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2b03      	cmp	r3, #3
 8009570:	d9f0      	bls.n	8009554 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009572:	bf00      	nop
 8009574:	bf00      	nop
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	08013340 	.word	0x08013340
 8009580:	080133f0 	.word	0x080133f0
 8009584:	08013384 	.word	0x08013384
 8009588:	080133fc 	.word	0x080133fc
 800958c:	08015360 	.word	0x08015360

08009590 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009590:	b5b0      	push	{r4, r5, r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af04      	add	r7, sp, #16
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d106      	bne.n	80095b0 <tcp_close_shutdown+0x20>
 80095a2:	4b63      	ldr	r3, [pc, #396]	; (8009730 <tcp_close_shutdown+0x1a0>)
 80095a4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80095a8:	4962      	ldr	r1, [pc, #392]	; (8009734 <tcp_close_shutdown+0x1a4>)
 80095aa:	4863      	ldr	r0, [pc, #396]	; (8009738 <tcp_close_shutdown+0x1a8>)
 80095ac:	f008 f970 	bl	8011890 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80095b0:	78fb      	ldrb	r3, [r7, #3]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d066      	beq.n	8009684 <tcp_close_shutdown+0xf4>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	7d1b      	ldrb	r3, [r3, #20]
 80095ba:	2b04      	cmp	r3, #4
 80095bc:	d003      	beq.n	80095c6 <tcp_close_shutdown+0x36>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	7d1b      	ldrb	r3, [r3, #20]
 80095c2:	2b07      	cmp	r3, #7
 80095c4:	d15e      	bne.n	8009684 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d104      	bne.n	80095d8 <tcp_close_shutdown+0x48>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80095d6:	d055      	beq.n	8009684 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	8b5b      	ldrh	r3, [r3, #26]
 80095dc:	f003 0310 	and.w	r3, r3, #16
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d106      	bne.n	80095f2 <tcp_close_shutdown+0x62>
 80095e4:	4b52      	ldr	r3, [pc, #328]	; (8009730 <tcp_close_shutdown+0x1a0>)
 80095e6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80095ea:	4954      	ldr	r1, [pc, #336]	; (800973c <tcp_close_shutdown+0x1ac>)
 80095ec:	4852      	ldr	r0, [pc, #328]	; (8009738 <tcp_close_shutdown+0x1a8>)
 80095ee:	f008 f94f 	bl	8011890 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80095fa:	687d      	ldr	r5, [r7, #4]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3304      	adds	r3, #4
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	8ad2      	ldrh	r2, [r2, #22]
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	8b09      	ldrh	r1, [r1, #24]
 8009608:	9102      	str	r1, [sp, #8]
 800960a:	9201      	str	r2, [sp, #4]
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	462b      	mov	r3, r5
 8009610:	4622      	mov	r2, r4
 8009612:	4601      	mov	r1, r0
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f004 fe91 	bl	800e33c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f001 f8c6 	bl	800a7ac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009620:	4b47      	ldr	r3, [pc, #284]	; (8009740 <tcp_close_shutdown+0x1b0>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	429a      	cmp	r2, r3
 8009628:	d105      	bne.n	8009636 <tcp_close_shutdown+0xa6>
 800962a:	4b45      	ldr	r3, [pc, #276]	; (8009740 <tcp_close_shutdown+0x1b0>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	4a43      	ldr	r2, [pc, #268]	; (8009740 <tcp_close_shutdown+0x1b0>)
 8009632:	6013      	str	r3, [r2, #0]
 8009634:	e013      	b.n	800965e <tcp_close_shutdown+0xce>
 8009636:	4b42      	ldr	r3, [pc, #264]	; (8009740 <tcp_close_shutdown+0x1b0>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60fb      	str	r3, [r7, #12]
 800963c:	e00c      	b.n	8009658 <tcp_close_shutdown+0xc8>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	429a      	cmp	r2, r3
 8009646:	d104      	bne.n	8009652 <tcp_close_shutdown+0xc2>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	68da      	ldr	r2, [r3, #12]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	60da      	str	r2, [r3, #12]
 8009650:	e005      	b.n	800965e <tcp_close_shutdown+0xce>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1ef      	bne.n	800963e <tcp_close_shutdown+0xae>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	60da      	str	r2, [r3, #12]
 8009664:	4b37      	ldr	r3, [pc, #220]	; (8009744 <tcp_close_shutdown+0x1b4>)
 8009666:	2201      	movs	r2, #1
 8009668:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800966a:	4b37      	ldr	r3, [pc, #220]	; (8009748 <tcp_close_shutdown+0x1b8>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	429a      	cmp	r2, r3
 8009672:	d102      	bne.n	800967a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009674:	f003 fd5e 	bl	800d134 <tcp_trigger_input_pcb_close>
 8009678:	e002      	b.n	8009680 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7ff fed6 	bl	800942c <tcp_free>
      }
      return ERR_OK;
 8009680:	2300      	movs	r3, #0
 8009682:	e050      	b.n	8009726 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	7d1b      	ldrb	r3, [r3, #20]
 8009688:	2b02      	cmp	r3, #2
 800968a:	d03b      	beq.n	8009704 <tcp_close_shutdown+0x174>
 800968c:	2b02      	cmp	r3, #2
 800968e:	dc44      	bgt.n	800971a <tcp_close_shutdown+0x18a>
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <tcp_close_shutdown+0x10a>
 8009694:	2b01      	cmp	r3, #1
 8009696:	d02a      	beq.n	80096ee <tcp_close_shutdown+0x15e>
 8009698:	e03f      	b.n	800971a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	8adb      	ldrh	r3, [r3, #22]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d021      	beq.n	80096e6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80096a2:	4b2a      	ldr	r3, [pc, #168]	; (800974c <tcp_close_shutdown+0x1bc>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d105      	bne.n	80096b8 <tcp_close_shutdown+0x128>
 80096ac:	4b27      	ldr	r3, [pc, #156]	; (800974c <tcp_close_shutdown+0x1bc>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	4a26      	ldr	r2, [pc, #152]	; (800974c <tcp_close_shutdown+0x1bc>)
 80096b4:	6013      	str	r3, [r2, #0]
 80096b6:	e013      	b.n	80096e0 <tcp_close_shutdown+0x150>
 80096b8:	4b24      	ldr	r3, [pc, #144]	; (800974c <tcp_close_shutdown+0x1bc>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60bb      	str	r3, [r7, #8]
 80096be:	e00c      	b.n	80096da <tcp_close_shutdown+0x14a>
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d104      	bne.n	80096d4 <tcp_close_shutdown+0x144>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68da      	ldr	r2, [r3, #12]
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	60da      	str	r2, [r3, #12]
 80096d2:	e005      	b.n	80096e0 <tcp_close_shutdown+0x150>
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	60bb      	str	r3, [r7, #8]
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1ef      	bne.n	80096c0 <tcp_close_shutdown+0x130>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f7ff fea0 	bl	800942c <tcp_free>
      break;
 80096ec:	e01a      	b.n	8009724 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff ff14 	bl	800951c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	4816      	ldr	r0, [pc, #88]	; (8009750 <tcp_close_shutdown+0x1c0>)
 80096f8:	f001 f8a8 	bl	800a84c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7ff feb1 	bl	8009464 <tcp_free_listen>
      break;
 8009702:	e00f      	b.n	8009724 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009704:	6879      	ldr	r1, [r7, #4]
 8009706:	480e      	ldr	r0, [pc, #56]	; (8009740 <tcp_close_shutdown+0x1b0>)
 8009708:	f001 f8a0 	bl	800a84c <tcp_pcb_remove>
 800970c:	4b0d      	ldr	r3, [pc, #52]	; (8009744 <tcp_close_shutdown+0x1b4>)
 800970e:	2201      	movs	r2, #1
 8009710:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7ff fe8a 	bl	800942c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009718:	e004      	b.n	8009724 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f81a 	bl	8009754 <tcp_close_shutdown_fin>
 8009720:	4603      	mov	r3, r0
 8009722:	e000      	b.n	8009726 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bdb0      	pop	{r4, r5, r7, pc}
 800972e:	bf00      	nop
 8009730:	08013340 	.word	0x08013340
 8009734:	08013414 	.word	0x08013414
 8009738:	08013384 	.word	0x08013384
 800973c:	08013434 	.word	0x08013434
 8009740:	2000c4a0 	.word	0x2000c4a0
 8009744:	2000c4a8 	.word	0x2000c4a8
 8009748:	2000c4e0 	.word	0x2000c4e0
 800974c:	2000c498 	.word	0x2000c498
 8009750:	2000c49c 	.word	0x2000c49c

08009754 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d106      	bne.n	8009770 <tcp_close_shutdown_fin+0x1c>
 8009762:	4b2e      	ldr	r3, [pc, #184]	; (800981c <tcp_close_shutdown_fin+0xc8>)
 8009764:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009768:	492d      	ldr	r1, [pc, #180]	; (8009820 <tcp_close_shutdown_fin+0xcc>)
 800976a:	482e      	ldr	r0, [pc, #184]	; (8009824 <tcp_close_shutdown_fin+0xd0>)
 800976c:	f008 f890 	bl	8011890 <iprintf>

  switch (pcb->state) {
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	7d1b      	ldrb	r3, [r3, #20]
 8009774:	2b07      	cmp	r3, #7
 8009776:	d020      	beq.n	80097ba <tcp_close_shutdown_fin+0x66>
 8009778:	2b07      	cmp	r3, #7
 800977a:	dc2b      	bgt.n	80097d4 <tcp_close_shutdown_fin+0x80>
 800977c:	2b03      	cmp	r3, #3
 800977e:	d002      	beq.n	8009786 <tcp_close_shutdown_fin+0x32>
 8009780:	2b04      	cmp	r3, #4
 8009782:	d00d      	beq.n	80097a0 <tcp_close_shutdown_fin+0x4c>
 8009784:	e026      	b.n	80097d4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f003 fee6 	bl	800d558 <tcp_send_fin>
 800978c:	4603      	mov	r3, r0
 800978e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d11f      	bne.n	80097d8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2205      	movs	r2, #5
 800979c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800979e:	e01b      	b.n	80097d8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f003 fed9 	bl	800d558 <tcp_send_fin>
 80097a6:	4603      	mov	r3, r0
 80097a8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80097aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d114      	bne.n	80097dc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2205      	movs	r2, #5
 80097b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80097b8:	e010      	b.n	80097dc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f003 fecc 	bl	800d558 <tcp_send_fin>
 80097c0:	4603      	mov	r3, r0
 80097c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80097c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d109      	bne.n	80097e0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2209      	movs	r2, #9
 80097d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80097d2:	e005      	b.n	80097e0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	e01c      	b.n	8009812 <tcp_close_shutdown_fin+0xbe>
      break;
 80097d8:	bf00      	nop
 80097da:	e002      	b.n	80097e2 <tcp_close_shutdown_fin+0x8e>
      break;
 80097dc:	bf00      	nop
 80097de:	e000      	b.n	80097e2 <tcp_close_shutdown_fin+0x8e>
      break;
 80097e0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80097e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d103      	bne.n	80097f2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f003 fff2 	bl	800d7d4 <tcp_output>
 80097f0:	e00d      	b.n	800980e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80097f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fa:	d108      	bne.n	800980e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	8b5b      	ldrh	r3, [r3, #26]
 8009800:	f043 0308 	orr.w	r3, r3, #8
 8009804:	b29a      	uxth	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	e001      	b.n	8009812 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800980e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	08013340 	.word	0x08013340
 8009820:	080133f0 	.word	0x080133f0
 8009824:	08013384 	.word	0x08013384

08009828 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <tcp_close+0x22>
 8009836:	4b0f      	ldr	r3, [pc, #60]	; (8009874 <tcp_close+0x4c>)
 8009838:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800983c:	490e      	ldr	r1, [pc, #56]	; (8009878 <tcp_close+0x50>)
 800983e:	480f      	ldr	r0, [pc, #60]	; (800987c <tcp_close+0x54>)
 8009840:	f008 f826 	bl	8011890 <iprintf>
 8009844:	f06f 030f 	mvn.w	r3, #15
 8009848:	e00f      	b.n	800986a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	7d1b      	ldrb	r3, [r3, #20]
 800984e:	2b01      	cmp	r3, #1
 8009850:	d006      	beq.n	8009860 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	8b5b      	ldrh	r3, [r3, #26]
 8009856:	f043 0310 	orr.w	r3, r3, #16
 800985a:	b29a      	uxth	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009860:	2101      	movs	r1, #1
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7ff fe94 	bl	8009590 <tcp_close_shutdown>
 8009868:	4603      	mov	r3, r0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	08013340 	.word	0x08013340
 8009878:	08013450 	.word	0x08013450
 800987c:	08013384 	.word	0x08013384

08009880 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b08e      	sub	sp, #56	; 0x38
 8009884:	af04      	add	r7, sp, #16
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d107      	bne.n	80098a0 <tcp_abandon+0x20>
 8009890:	4b52      	ldr	r3, [pc, #328]	; (80099dc <tcp_abandon+0x15c>)
 8009892:	f240 223d 	movw	r2, #573	; 0x23d
 8009896:	4952      	ldr	r1, [pc, #328]	; (80099e0 <tcp_abandon+0x160>)
 8009898:	4852      	ldr	r0, [pc, #328]	; (80099e4 <tcp_abandon+0x164>)
 800989a:	f007 fff9 	bl	8011890 <iprintf>
 800989e:	e099      	b.n	80099d4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	7d1b      	ldrb	r3, [r3, #20]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d106      	bne.n	80098b6 <tcp_abandon+0x36>
 80098a8:	4b4c      	ldr	r3, [pc, #304]	; (80099dc <tcp_abandon+0x15c>)
 80098aa:	f44f 7210 	mov.w	r2, #576	; 0x240
 80098ae:	494e      	ldr	r1, [pc, #312]	; (80099e8 <tcp_abandon+0x168>)
 80098b0:	484c      	ldr	r0, [pc, #304]	; (80099e4 <tcp_abandon+0x164>)
 80098b2:	f007 ffed 	bl	8011890 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	7d1b      	ldrb	r3, [r3, #20]
 80098ba:	2b0a      	cmp	r3, #10
 80098bc:	d107      	bne.n	80098ce <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	484a      	ldr	r0, [pc, #296]	; (80099ec <tcp_abandon+0x16c>)
 80098c2:	f000 ffc3 	bl	800a84c <tcp_pcb_remove>
    tcp_free(pcb);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff fdb0 	bl	800942c <tcp_free>
 80098cc:	e082      	b.n	80099d4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80098d2:	2300      	movs	r3, #0
 80098d4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098da:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098e8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	7d1b      	ldrb	r3, [r3, #20]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d126      	bne.n	8009946 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	8adb      	ldrh	r3, [r3, #22]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d02e      	beq.n	800995e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009900:	4b3b      	ldr	r3, [pc, #236]	; (80099f0 <tcp_abandon+0x170>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	429a      	cmp	r2, r3
 8009908:	d105      	bne.n	8009916 <tcp_abandon+0x96>
 800990a:	4b39      	ldr	r3, [pc, #228]	; (80099f0 <tcp_abandon+0x170>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	4a37      	ldr	r2, [pc, #220]	; (80099f0 <tcp_abandon+0x170>)
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	e013      	b.n	800993e <tcp_abandon+0xbe>
 8009916:	4b36      	ldr	r3, [pc, #216]	; (80099f0 <tcp_abandon+0x170>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	61fb      	str	r3, [r7, #28]
 800991c:	e00c      	b.n	8009938 <tcp_abandon+0xb8>
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	429a      	cmp	r2, r3
 8009926:	d104      	bne.n	8009932 <tcp_abandon+0xb2>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68da      	ldr	r2, [r3, #12]
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	60da      	str	r2, [r3, #12]
 8009930:	e005      	b.n	800993e <tcp_abandon+0xbe>
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	61fb      	str	r3, [r7, #28]
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1ef      	bne.n	800991e <tcp_abandon+0x9e>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	60da      	str	r2, [r3, #12]
 8009944:	e00b      	b.n	800995e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	8adb      	ldrh	r3, [r3, #22]
 800994e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009950:	6879      	ldr	r1, [r7, #4]
 8009952:	4828      	ldr	r0, [pc, #160]	; (80099f4 <tcp_abandon+0x174>)
 8009954:	f000 ff7a 	bl	800a84c <tcp_pcb_remove>
 8009958:	4b27      	ldr	r3, [pc, #156]	; (80099f8 <tcp_abandon+0x178>)
 800995a:	2201      	movs	r2, #1
 800995c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009962:	2b00      	cmp	r3, #0
 8009964:	d004      	beq.n	8009970 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996a:	4618      	mov	r0, r3
 800996c:	f000 fd1c 	bl	800a3a8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009974:	2b00      	cmp	r3, #0
 8009976:	d004      	beq.n	8009982 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800997c:	4618      	mov	r0, r3
 800997e:	f000 fd13 	bl	800a3a8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009986:	2b00      	cmp	r3, #0
 8009988:	d004      	beq.n	8009994 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800998e:	4618      	mov	r0, r3
 8009990:	f000 fd0a 	bl	800a3a8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00e      	beq.n	80099b8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800999a:	6879      	ldr	r1, [r7, #4]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	3304      	adds	r3, #4
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	8b12      	ldrh	r2, [r2, #24]
 80099a4:	9202      	str	r2, [sp, #8]
 80099a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80099a8:	9201      	str	r2, [sp, #4]
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	460b      	mov	r3, r1
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	69b9      	ldr	r1, [r7, #24]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f004 fcc2 	bl	800e33c <tcp_rst>
    }
    last_state = pcb->state;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	7d1b      	ldrb	r3, [r3, #20]
 80099bc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7ff fd34 	bl	800942c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d004      	beq.n	80099d4 <tcp_abandon+0x154>
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	f06f 010c 	mvn.w	r1, #12
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	4798      	blx	r3
  }
}
 80099d4:	3728      	adds	r7, #40	; 0x28
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	08013340 	.word	0x08013340
 80099e0:	08013484 	.word	0x08013484
 80099e4:	08013384 	.word	0x08013384
 80099e8:	080134a0 	.word	0x080134a0
 80099ec:	2000c4a4 	.word	0x2000c4a4
 80099f0:	2000c498 	.word	0x2000c498
 80099f4:	2000c4a0 	.word	0x2000c4a0
 80099f8:	2000c4a8 	.word	0x2000c4a8

080099fc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009a04:	2101      	movs	r1, #1
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7ff ff3a 	bl	8009880 <tcp_abandon>
}
 8009a0c:	bf00      	nop
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d106      	bne.n	8009a30 <tcp_update_rcv_ann_wnd+0x1c>
 8009a22:	4b25      	ldr	r3, [pc, #148]	; (8009ab8 <tcp_update_rcv_ann_wnd+0xa4>)
 8009a24:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009a28:	4924      	ldr	r1, [pc, #144]	; (8009abc <tcp_update_rcv_ann_wnd+0xa8>)
 8009a2a:	4825      	ldr	r0, [pc, #148]	; (8009ac0 <tcp_update_rcv_ann_wnd+0xac>)
 8009a2c:	f007 ff30 	bl	8011890 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009a38:	4413      	add	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009a44:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009a48:	bf28      	it	cs
 8009a4a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009a4e:	b292      	uxth	r2, r2
 8009a50:	4413      	add	r3, r2
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	db08      	blt.n	8009a6c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	e020      	b.n	8009aae <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	dd03      	ble.n	8009a82 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a80:	e014      	b.n	8009aac <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a94:	d306      	bcc.n	8009aa4 <tcp_update_rcv_ann_wnd+0x90>
 8009a96:	4b08      	ldr	r3, [pc, #32]	; (8009ab8 <tcp_update_rcv_ann_wnd+0xa4>)
 8009a98:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009a9c:	4909      	ldr	r1, [pc, #36]	; (8009ac4 <tcp_update_rcv_ann_wnd+0xb0>)
 8009a9e:	4808      	ldr	r0, [pc, #32]	; (8009ac0 <tcp_update_rcv_ann_wnd+0xac>)
 8009aa0:	f007 fef6 	bl	8011890 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009aac:	2300      	movs	r3, #0
  }
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	08013340 	.word	0x08013340
 8009abc:	0801359c 	.word	0x0801359c
 8009ac0:	08013384 	.word	0x08013384
 8009ac4:	080135c0 	.word	0x080135c0

08009ac8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d107      	bne.n	8009aea <tcp_recved+0x22>
 8009ada:	4b1f      	ldr	r3, [pc, #124]	; (8009b58 <tcp_recved+0x90>)
 8009adc:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009ae0:	491e      	ldr	r1, [pc, #120]	; (8009b5c <tcp_recved+0x94>)
 8009ae2:	481f      	ldr	r0, [pc, #124]	; (8009b60 <tcp_recved+0x98>)
 8009ae4:	f007 fed4 	bl	8011890 <iprintf>
 8009ae8:	e032      	b.n	8009b50 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	7d1b      	ldrb	r3, [r3, #20]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d106      	bne.n	8009b00 <tcp_recved+0x38>
 8009af2:	4b19      	ldr	r3, [pc, #100]	; (8009b58 <tcp_recved+0x90>)
 8009af4:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009af8:	491a      	ldr	r1, [pc, #104]	; (8009b64 <tcp_recved+0x9c>)
 8009afa:	4819      	ldr	r0, [pc, #100]	; (8009b60 <tcp_recved+0x98>)
 8009afc:	f007 fec8 	bl	8011890 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b04:	887b      	ldrh	r3, [r7, #2]
 8009b06:	4413      	add	r3, r2
 8009b08:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009b0a:	89fb      	ldrh	r3, [r7, #14]
 8009b0c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009b10:	d804      	bhi.n	8009b1c <tcp_recved+0x54>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b16:	89fa      	ldrh	r2, [r7, #14]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d204      	bcs.n	8009b26 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009b22:	851a      	strh	r2, [r3, #40]	; 0x28
 8009b24:	e002      	b.n	8009b2c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	89fa      	ldrh	r2, [r7, #14]
 8009b2a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7ff ff71 	bl	8009a14 <tcp_update_rcv_ann_wnd>
 8009b32:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009b3a:	d309      	bcc.n	8009b50 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	8b5b      	ldrh	r3, [r3, #26]
 8009b40:	f043 0302 	orr.w	r3, r3, #2
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f003 fe42 	bl	800d7d4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	08013340 	.word	0x08013340
 8009b5c:	080135dc 	.word	0x080135dc
 8009b60:	08013384 	.word	0x08013384
 8009b64:	080135f4 	.word	0x080135f4

08009b68 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009b68:	b5b0      	push	{r4, r5, r7, lr}
 8009b6a:	b090      	sub	sp, #64	; 0x40
 8009b6c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009b74:	4b94      	ldr	r3, [pc, #592]	; (8009dc8 <tcp_slowtmr+0x260>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	4a93      	ldr	r2, [pc, #588]	; (8009dc8 <tcp_slowtmr+0x260>)
 8009b7c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009b7e:	4b93      	ldr	r3, [pc, #588]	; (8009dcc <tcp_slowtmr+0x264>)
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	3301      	adds	r3, #1
 8009b84:	b2da      	uxtb	r2, r3
 8009b86:	4b91      	ldr	r3, [pc, #580]	; (8009dcc <tcp_slowtmr+0x264>)
 8009b88:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009b8e:	4b90      	ldr	r3, [pc, #576]	; (8009dd0 <tcp_slowtmr+0x268>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009b94:	e29d      	b.n	800a0d2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b98:	7d1b      	ldrb	r3, [r3, #20]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d106      	bne.n	8009bac <tcp_slowtmr+0x44>
 8009b9e:	4b8d      	ldr	r3, [pc, #564]	; (8009dd4 <tcp_slowtmr+0x26c>)
 8009ba0:	f240 42be 	movw	r2, #1214	; 0x4be
 8009ba4:	498c      	ldr	r1, [pc, #560]	; (8009dd8 <tcp_slowtmr+0x270>)
 8009ba6:	488d      	ldr	r0, [pc, #564]	; (8009ddc <tcp_slowtmr+0x274>)
 8009ba8:	f007 fe72 	bl	8011890 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bae:	7d1b      	ldrb	r3, [r3, #20]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d106      	bne.n	8009bc2 <tcp_slowtmr+0x5a>
 8009bb4:	4b87      	ldr	r3, [pc, #540]	; (8009dd4 <tcp_slowtmr+0x26c>)
 8009bb6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009bba:	4989      	ldr	r1, [pc, #548]	; (8009de0 <tcp_slowtmr+0x278>)
 8009bbc:	4887      	ldr	r0, [pc, #540]	; (8009ddc <tcp_slowtmr+0x274>)
 8009bbe:	f007 fe67 	bl	8011890 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc4:	7d1b      	ldrb	r3, [r3, #20]
 8009bc6:	2b0a      	cmp	r3, #10
 8009bc8:	d106      	bne.n	8009bd8 <tcp_slowtmr+0x70>
 8009bca:	4b82      	ldr	r3, [pc, #520]	; (8009dd4 <tcp_slowtmr+0x26c>)
 8009bcc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009bd0:	4984      	ldr	r1, [pc, #528]	; (8009de4 <tcp_slowtmr+0x27c>)
 8009bd2:	4882      	ldr	r0, [pc, #520]	; (8009ddc <tcp_slowtmr+0x274>)
 8009bd4:	f007 fe5c 	bl	8011890 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bda:	7f9a      	ldrb	r2, [r3, #30]
 8009bdc:	4b7b      	ldr	r3, [pc, #492]	; (8009dcc <tcp_slowtmr+0x264>)
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d105      	bne.n	8009bf0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009bee:	e270      	b.n	800a0d2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009bf0:	4b76      	ldr	r3, [pc, #472]	; (8009dcc <tcp_slowtmr+0x264>)
 8009bf2:	781a      	ldrb	r2, [r3, #0]
 8009bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c06:	7d1b      	ldrb	r3, [r3, #20]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d10a      	bne.n	8009c22 <tcp_slowtmr+0xba>
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c12:	2b05      	cmp	r3, #5
 8009c14:	d905      	bls.n	8009c22 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8009c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c20:	e11e      	b.n	8009e60 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c28:	2b0b      	cmp	r3, #11
 8009c2a:	d905      	bls.n	8009c38 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c30:	3301      	adds	r3, #1
 8009c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c36:	e113      	b.n	8009e60 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d075      	beq.n	8009d2e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d006      	beq.n	8009c58 <tcp_slowtmr+0xf0>
 8009c4a:	4b62      	ldr	r3, [pc, #392]	; (8009dd4 <tcp_slowtmr+0x26c>)
 8009c4c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009c50:	4965      	ldr	r1, [pc, #404]	; (8009de8 <tcp_slowtmr+0x280>)
 8009c52:	4862      	ldr	r0, [pc, #392]	; (8009ddc <tcp_slowtmr+0x274>)
 8009c54:	f007 fe1c 	bl	8011890 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d106      	bne.n	8009c6e <tcp_slowtmr+0x106>
 8009c60:	4b5c      	ldr	r3, [pc, #368]	; (8009dd4 <tcp_slowtmr+0x26c>)
 8009c62:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009c66:	4961      	ldr	r1, [pc, #388]	; (8009dec <tcp_slowtmr+0x284>)
 8009c68:	485c      	ldr	r0, [pc, #368]	; (8009ddc <tcp_slowtmr+0x274>)
 8009c6a:	f007 fe11 	bl	8011890 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c70:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009c74:	2b0b      	cmp	r3, #11
 8009c76:	d905      	bls.n	8009c84 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c82:	e0ed      	b.n	8009e60 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	4a58      	ldr	r2, [pc, #352]	; (8009df0 <tcp_slowtmr+0x288>)
 8009c8e:	5cd3      	ldrb	r3, [r2, r3]
 8009c90:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009c98:	7c7a      	ldrb	r2, [r7, #17]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d907      	bls.n	8009cae <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009caa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8009cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009cb4:	7c7a      	ldrb	r2, [r7, #17]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	f200 80d2 	bhi.w	8009e60 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d108      	bne.n	8009cdc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009cca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ccc:	f004 fc2a 	bl	800e524 <tcp_zero_window_probe>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d014      	beq.n	8009d00 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	623b      	str	r3, [r7, #32]
 8009cda:	e011      	b.n	8009d00 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ce6:	f003 faef 	bl	800d2c8 <tcp_split_unsent_seg>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d107      	bne.n	8009d00 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cf2:	f003 fd6f 	bl	800d7d4 <tcp_output>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d101      	bne.n	8009d00 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 80ac 	beq.w	8009e60 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009d16:	2b06      	cmp	r3, #6
 8009d18:	f200 80a2 	bhi.w	8009e60 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009d22:	3301      	adds	r3, #1
 8009d24:	b2da      	uxtb	r2, r3
 8009d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d28:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009d2c:	e098      	b.n	8009e60 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	db0f      	blt.n	8009d58 <tcp_slowtmr+0x1f0>
 8009d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009d3e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d008      	beq.n	8009d58 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	3301      	adds	r3, #1
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	b21a      	sxth	r2, r3
 8009d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d56:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d60:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009d64:	429a      	cmp	r2, r3
 8009d66:	db7b      	blt.n	8009e60 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009d68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d6a:	f004 f825 	bl	800ddb8 <tcp_rexmit_rto_prepare>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d007      	beq.n	8009d84 <tcp_slowtmr+0x21c>
 8009d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d171      	bne.n	8009e60 <tcp_slowtmr+0x2f8>
 8009d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d06d      	beq.n	8009e60 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d86:	7d1b      	ldrb	r3, [r3, #20]
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d03a      	beq.n	8009e02 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d92:	2b0c      	cmp	r3, #12
 8009d94:	bf28      	it	cs
 8009d96:	230c      	movcs	r3, #12
 8009d98:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009da0:	10db      	asrs	r3, r3, #3
 8009da2:	b21b      	sxth	r3, r3
 8009da4:	461a      	mov	r2, r3
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009dac:	4413      	add	r3, r2
 8009dae:	7efa      	ldrb	r2, [r7, #27]
 8009db0:	4910      	ldr	r1, [pc, #64]	; (8009df4 <tcp_slowtmr+0x28c>)
 8009db2:	5c8a      	ldrb	r2, [r1, r2]
 8009db4:	4093      	lsls	r3, r2
 8009db6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	dc1a      	bgt.n	8009df8 <tcp_slowtmr+0x290>
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	b21a      	sxth	r2, r3
 8009dc6:	e019      	b.n	8009dfc <tcp_slowtmr+0x294>
 8009dc8:	2000c494 	.word	0x2000c494
 8009dcc:	2000c4aa 	.word	0x2000c4aa
 8009dd0:	2000c4a0 	.word	0x2000c4a0
 8009dd4:	08013340 	.word	0x08013340
 8009dd8:	08013684 	.word	0x08013684
 8009ddc:	08013384 	.word	0x08013384
 8009de0:	080136b0 	.word	0x080136b0
 8009de4:	080136dc 	.word	0x080136dc
 8009de8:	0801370c 	.word	0x0801370c
 8009dec:	08013740 	.word	0x08013740
 8009df0:	08015358 	.word	0x08015358
 8009df4:	08015348 	.word	0x08015348
 8009df8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8009e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e04:	2200      	movs	r2, #0
 8009e06:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e14:	4293      	cmp	r3, r2
 8009e16:	bf28      	it	cs
 8009e18:	4613      	movcs	r3, r2
 8009e1a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009e1c:	8a7b      	ldrh	r3, [r7, #18]
 8009e1e:	085b      	lsrs	r3, r3, #1
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e32:	005b      	lsls	r3, r3, #1
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d206      	bcs.n	8009e48 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e3e:	005b      	lsls	r3, r3, #1
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8009e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e54:	2200      	movs	r2, #0
 8009e56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009e5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e5c:	f004 f81c 	bl	800de98 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e62:	7d1b      	ldrb	r3, [r3, #20]
 8009e64:	2b06      	cmp	r3, #6
 8009e66:	d111      	bne.n	8009e8c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6a:	8b5b      	ldrh	r3, [r3, #26]
 8009e6c:	f003 0310 	and.w	r3, r3, #16
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00b      	beq.n	8009e8c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009e74:	4b9c      	ldr	r3, [pc, #624]	; (800a0e8 <tcp_slowtmr+0x580>)
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7a:	6a1b      	ldr	r3, [r3, #32]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	2b28      	cmp	r3, #40	; 0x28
 8009e80:	d904      	bls.n	8009e8c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e86:	3301      	adds	r3, #1
 8009e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8e:	7a5b      	ldrb	r3, [r3, #9]
 8009e90:	f003 0308 	and.w	r3, r3, #8
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d04a      	beq.n	8009f2e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	d003      	beq.n	8009ea8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009ea4:	2b07      	cmp	r3, #7
 8009ea6:	d142      	bne.n	8009f2e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ea8:	4b8f      	ldr	r3, [pc, #572]	; (800a0e8 <tcp_slowtmr+0x580>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009eb8:	4b8c      	ldr	r3, [pc, #560]	; (800a0ec <tcp_slowtmr+0x584>)
 8009eba:	440b      	add	r3, r1
 8009ebc:	498c      	ldr	r1, [pc, #560]	; (800a0f0 <tcp_slowtmr+0x588>)
 8009ebe:	fba1 1303 	umull	r1, r3, r1, r3
 8009ec2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d90a      	bls.n	8009ede <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ecc:	3301      	adds	r3, #1
 8009ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8009ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009edc:	e027      	b.n	8009f2e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ede:	4b82      	ldr	r3, [pc, #520]	; (800a0e8 <tcp_slowtmr+0x580>)
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eea:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	4b7f      	ldr	r3, [pc, #508]	; (800a0f4 <tcp_slowtmr+0x58c>)
 8009ef8:	fb00 f303 	mul.w	r3, r0, r3
 8009efc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009efe:	497c      	ldr	r1, [pc, #496]	; (800a0f0 <tcp_slowtmr+0x588>)
 8009f00:	fba1 1303 	umull	r1, r3, r1, r3
 8009f04:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d911      	bls.n	8009f2e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8009f0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f0c:	f004 faca 	bl	800e4a4 <tcp_keepalive>
 8009f10:	4603      	mov	r3, r0
 8009f12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009f16:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d107      	bne.n	8009f2e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8009f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f20:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009f24:	3301      	adds	r3, #1
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d011      	beq.n	8009f5a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009f36:	4b6c      	ldr	r3, [pc, #432]	; (800a0e8 <tcp_slowtmr+0x580>)
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	1ad2      	subs	r2, r2, r3
 8009f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f42:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009f46:	4619      	mov	r1, r3
 8009f48:	460b      	mov	r3, r1
 8009f4a:	005b      	lsls	r3, r3, #1
 8009f4c:	440b      	add	r3, r1
 8009f4e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d302      	bcc.n	8009f5a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009f54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f56:	f000 fddd 	bl	800ab14 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	7d1b      	ldrb	r3, [r3, #20]
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d10b      	bne.n	8009f7a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009f62:	4b61      	ldr	r3, [pc, #388]	; (800a0e8 <tcp_slowtmr+0x580>)
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	2b28      	cmp	r3, #40	; 0x28
 8009f6e:	d904      	bls.n	8009f7a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f74:	3301      	adds	r3, #1
 8009f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7c:	7d1b      	ldrb	r3, [r3, #20]
 8009f7e:	2b09      	cmp	r3, #9
 8009f80:	d10b      	bne.n	8009f9a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009f82:	4b59      	ldr	r3, [pc, #356]	; (800a0e8 <tcp_slowtmr+0x580>)
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	2bf0      	cmp	r3, #240	; 0xf0
 8009f8e:	d904      	bls.n	8009f9a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8009f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f94:	3301      	adds	r3, #1
 8009f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d060      	beq.n	800a064 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fa8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009faa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fac:	f000 fbfe 	bl	800a7ac <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d010      	beq.n	8009fd8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009fb6:	4b50      	ldr	r3, [pc, #320]	; (800a0f8 <tcp_slowtmr+0x590>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d106      	bne.n	8009fce <tcp_slowtmr+0x466>
 8009fc0:	4b4e      	ldr	r3, [pc, #312]	; (800a0fc <tcp_slowtmr+0x594>)
 8009fc2:	f240 526d 	movw	r2, #1389	; 0x56d
 8009fc6:	494e      	ldr	r1, [pc, #312]	; (800a100 <tcp_slowtmr+0x598>)
 8009fc8:	484e      	ldr	r0, [pc, #312]	; (800a104 <tcp_slowtmr+0x59c>)
 8009fca:	f007 fc61 	bl	8011890 <iprintf>
        prev->next = pcb->next;
 8009fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd0:	68da      	ldr	r2, [r3, #12]
 8009fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd4:	60da      	str	r2, [r3, #12]
 8009fd6:	e00f      	b.n	8009ff8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009fd8:	4b47      	ldr	r3, [pc, #284]	; (800a0f8 <tcp_slowtmr+0x590>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d006      	beq.n	8009ff0 <tcp_slowtmr+0x488>
 8009fe2:	4b46      	ldr	r3, [pc, #280]	; (800a0fc <tcp_slowtmr+0x594>)
 8009fe4:	f240 5271 	movw	r2, #1393	; 0x571
 8009fe8:	4947      	ldr	r1, [pc, #284]	; (800a108 <tcp_slowtmr+0x5a0>)
 8009fea:	4846      	ldr	r0, [pc, #280]	; (800a104 <tcp_slowtmr+0x59c>)
 8009fec:	f007 fc50 	bl	8011890 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	4a40      	ldr	r2, [pc, #256]	; (800a0f8 <tcp_slowtmr+0x590>)
 8009ff6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009ff8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d013      	beq.n	800a028 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a002:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a006:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a008:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00c:	3304      	adds	r3, #4
 800a00e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a010:	8ad2      	ldrh	r2, [r2, #22]
 800a012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a014:	8b09      	ldrh	r1, [r1, #24]
 800a016:	9102      	str	r1, [sp, #8]
 800a018:	9201      	str	r2, [sp, #4]
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	462b      	mov	r3, r5
 800a01e:	4622      	mov	r2, r4
 800a020:	4601      	mov	r1, r0
 800a022:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a024:	f004 f98a 	bl	800e33c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a030:	7d1b      	ldrb	r3, [r3, #20]
 800a032:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a036:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a03e:	6838      	ldr	r0, [r7, #0]
 800a040:	f7ff f9f4 	bl	800942c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a044:	4b31      	ldr	r3, [pc, #196]	; (800a10c <tcp_slowtmr+0x5a4>)
 800a046:	2200      	movs	r2, #0
 800a048:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d004      	beq.n	800a05a <tcp_slowtmr+0x4f2>
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f06f 010c 	mvn.w	r1, #12
 800a056:	68b8      	ldr	r0, [r7, #8]
 800a058:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a05a:	4b2c      	ldr	r3, [pc, #176]	; (800a10c <tcp_slowtmr+0x5a4>)
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d037      	beq.n	800a0d2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800a062:	e592      	b.n	8009b8a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a070:	7f1b      	ldrb	r3, [r3, #28]
 800a072:	3301      	adds	r3, #1
 800a074:	b2da      	uxtb	r2, r3
 800a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a078:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	7f1a      	ldrb	r2, [r3, #28]
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	7f5b      	ldrb	r3, [r3, #29]
 800a082:	429a      	cmp	r2, r3
 800a084:	d325      	bcc.n	800a0d2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a088:	2200      	movs	r2, #0
 800a08a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a08c:	4b1f      	ldr	r3, [pc, #124]	; (800a10c <tcp_slowtmr+0x5a4>)
 800a08e:	2200      	movs	r2, #0
 800a090:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00b      	beq.n	800a0b4 <tcp_slowtmr+0x54c>
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0a4:	6912      	ldr	r2, [r2, #16]
 800a0a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	4798      	blx	r3
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a0b2:	e002      	b.n	800a0ba <tcp_slowtmr+0x552>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a0ba:	4b14      	ldr	r3, [pc, #80]	; (800a10c <tcp_slowtmr+0x5a4>)
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d000      	beq.n	800a0c4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800a0c2:	e562      	b.n	8009b8a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a0c4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d102      	bne.n	800a0d2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800a0cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ce:	f003 fb81 	bl	800d7d4 <tcp_output>
  while (pcb != NULL) {
 800a0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f47f ad5e 	bne.w	8009b96 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a0de:	4b0c      	ldr	r3, [pc, #48]	; (800a110 <tcp_slowtmr+0x5a8>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a0e4:	e069      	b.n	800a1ba <tcp_slowtmr+0x652>
 800a0e6:	bf00      	nop
 800a0e8:	2000c494 	.word	0x2000c494
 800a0ec:	000a4cb8 	.word	0x000a4cb8
 800a0f0:	10624dd3 	.word	0x10624dd3
 800a0f4:	000124f8 	.word	0x000124f8
 800a0f8:	2000c4a0 	.word	0x2000c4a0
 800a0fc:	08013340 	.word	0x08013340
 800a100:	08013778 	.word	0x08013778
 800a104:	08013384 	.word	0x08013384
 800a108:	080137a4 	.word	0x080137a4
 800a10c:	2000c4a8 	.word	0x2000c4a8
 800a110:	2000c4a4 	.word	0x2000c4a4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a116:	7d1b      	ldrb	r3, [r3, #20]
 800a118:	2b0a      	cmp	r3, #10
 800a11a:	d006      	beq.n	800a12a <tcp_slowtmr+0x5c2>
 800a11c:	4b2b      	ldr	r3, [pc, #172]	; (800a1cc <tcp_slowtmr+0x664>)
 800a11e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a122:	492b      	ldr	r1, [pc, #172]	; (800a1d0 <tcp_slowtmr+0x668>)
 800a124:	482b      	ldr	r0, [pc, #172]	; (800a1d4 <tcp_slowtmr+0x66c>)
 800a126:	f007 fbb3 	bl	8011890 <iprintf>
    pcb_remove = 0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a130:	4b29      	ldr	r3, [pc, #164]	; (800a1d8 <tcp_slowtmr+0x670>)
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a136:	6a1b      	ldr	r3, [r3, #32]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	2bf0      	cmp	r3, #240	; 0xf0
 800a13c:	d904      	bls.n	800a148 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a13e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a142:	3301      	adds	r3, #1
 800a144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d02f      	beq.n	800a1b0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a150:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a152:	f000 fb2b 	bl	800a7ac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d010      	beq.n	800a17e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a15c:	4b1f      	ldr	r3, [pc, #124]	; (800a1dc <tcp_slowtmr+0x674>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a162:	429a      	cmp	r2, r3
 800a164:	d106      	bne.n	800a174 <tcp_slowtmr+0x60c>
 800a166:	4b19      	ldr	r3, [pc, #100]	; (800a1cc <tcp_slowtmr+0x664>)
 800a168:	f240 52af 	movw	r2, #1455	; 0x5af
 800a16c:	491c      	ldr	r1, [pc, #112]	; (800a1e0 <tcp_slowtmr+0x678>)
 800a16e:	4819      	ldr	r0, [pc, #100]	; (800a1d4 <tcp_slowtmr+0x66c>)
 800a170:	f007 fb8e 	bl	8011890 <iprintf>
        prev->next = pcb->next;
 800a174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a176:	68da      	ldr	r2, [r3, #12]
 800a178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17a:	60da      	str	r2, [r3, #12]
 800a17c:	e00f      	b.n	800a19e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a17e:	4b17      	ldr	r3, [pc, #92]	; (800a1dc <tcp_slowtmr+0x674>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a184:	429a      	cmp	r2, r3
 800a186:	d006      	beq.n	800a196 <tcp_slowtmr+0x62e>
 800a188:	4b10      	ldr	r3, [pc, #64]	; (800a1cc <tcp_slowtmr+0x664>)
 800a18a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a18e:	4915      	ldr	r1, [pc, #84]	; (800a1e4 <tcp_slowtmr+0x67c>)
 800a190:	4810      	ldr	r0, [pc, #64]	; (800a1d4 <tcp_slowtmr+0x66c>)
 800a192:	f007 fb7d 	bl	8011890 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	4a10      	ldr	r2, [pc, #64]	; (800a1dc <tcp_slowtmr+0x674>)
 800a19c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a1a8:	69f8      	ldr	r0, [r7, #28]
 800a1aa:	f7ff f93f 	bl	800942c <tcp_free>
 800a1ae:	e004      	b.n	800a1ba <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1a9      	bne.n	800a114 <tcp_slowtmr+0x5ac>
    }
  }
}
 800a1c0:	bf00      	nop
 800a1c2:	bf00      	nop
 800a1c4:	3730      	adds	r7, #48	; 0x30
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bdb0      	pop	{r4, r5, r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	08013340 	.word	0x08013340
 800a1d0:	080137d0 	.word	0x080137d0
 800a1d4:	08013384 	.word	0x08013384
 800a1d8:	2000c494 	.word	0x2000c494
 800a1dc:	2000c4a4 	.word	0x2000c4a4
 800a1e0:	08013800 	.word	0x08013800
 800a1e4:	08013828 	.word	0x08013828

0800a1e8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a1ee:	4b2d      	ldr	r3, [pc, #180]	; (800a2a4 <tcp_fasttmr+0xbc>)
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	b2da      	uxtb	r2, r3
 800a1f6:	4b2b      	ldr	r3, [pc, #172]	; (800a2a4 <tcp_fasttmr+0xbc>)
 800a1f8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a1fa:	4b2b      	ldr	r3, [pc, #172]	; (800a2a8 <tcp_fasttmr+0xc0>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a200:	e048      	b.n	800a294 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	7f9a      	ldrb	r2, [r3, #30]
 800a206:	4b27      	ldr	r3, [pc, #156]	; (800a2a4 <tcp_fasttmr+0xbc>)
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d03f      	beq.n	800a28e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a20e:	4b25      	ldr	r3, [pc, #148]	; (800a2a4 <tcp_fasttmr+0xbc>)
 800a210:	781a      	ldrb	r2, [r3, #0]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	8b5b      	ldrh	r3, [r3, #26]
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d010      	beq.n	800a244 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	8b5b      	ldrh	r3, [r3, #26]
 800a226:	f043 0302 	orr.w	r3, r3, #2
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f003 facf 	bl	800d7d4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	8b5b      	ldrh	r3, [r3, #26]
 800a23a:	f023 0303 	bic.w	r3, r3, #3
 800a23e:	b29a      	uxth	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	8b5b      	ldrh	r3, [r3, #26]
 800a248:	f003 0308 	and.w	r3, r3, #8
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d009      	beq.n	800a264 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	8b5b      	ldrh	r3, [r3, #26]
 800a254:	f023 0308 	bic.w	r3, r3, #8
 800a258:	b29a      	uxth	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7ff fa78 	bl	8009754 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00a      	beq.n	800a288 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a272:	4b0e      	ldr	r3, [pc, #56]	; (800a2ac <tcp_fasttmr+0xc4>)
 800a274:	2200      	movs	r2, #0
 800a276:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f819 	bl	800a2b0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a27e:	4b0b      	ldr	r3, [pc, #44]	; (800a2ac <tcp_fasttmr+0xc4>)
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d000      	beq.n	800a288 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a286:	e7b8      	b.n	800a1fa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	607b      	str	r3, [r7, #4]
 800a28c:	e002      	b.n	800a294 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1b3      	bne.n	800a202 <tcp_fasttmr+0x1a>
    }
  }
}
 800a29a:	bf00      	nop
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	2000c4aa 	.word	0x2000c4aa
 800a2a8:	2000c4a0 	.word	0x2000c4a0
 800a2ac:	2000c4a8 	.word	0x2000c4a8

0800a2b0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a2b0:	b590      	push	{r4, r7, lr}
 800a2b2:	b085      	sub	sp, #20
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d109      	bne.n	800a2d2 <tcp_process_refused_data+0x22>
 800a2be:	4b37      	ldr	r3, [pc, #220]	; (800a39c <tcp_process_refused_data+0xec>)
 800a2c0:	f240 6209 	movw	r2, #1545	; 0x609
 800a2c4:	4936      	ldr	r1, [pc, #216]	; (800a3a0 <tcp_process_refused_data+0xf0>)
 800a2c6:	4837      	ldr	r0, [pc, #220]	; (800a3a4 <tcp_process_refused_data+0xf4>)
 800a2c8:	f007 fae2 	bl	8011890 <iprintf>
 800a2cc:	f06f 030f 	mvn.w	r3, #15
 800a2d0:	e060      	b.n	800a394 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2d6:	7b5b      	ldrb	r3, [r3, #13]
 800a2d8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2de:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00b      	beq.n	800a308 <tcp_process_refused_data+0x58>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6918      	ldr	r0, [r3, #16]
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	47a0      	blx	r4
 800a302:	4603      	mov	r3, r0
 800a304:	73fb      	strb	r3, [r7, #15]
 800a306:	e007      	b.n	800a318 <tcp_process_refused_data+0x68>
 800a308:	2300      	movs	r3, #0
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	6879      	ldr	r1, [r7, #4]
 800a30e:	2000      	movs	r0, #0
 800a310:	f000 f8a4 	bl	800a45c <tcp_recv_null>
 800a314:	4603      	mov	r3, r0
 800a316:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d12a      	bne.n	800a376 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a320:	7bbb      	ldrb	r3, [r7, #14]
 800a322:	f003 0320 	and.w	r3, r3, #32
 800a326:	2b00      	cmp	r3, #0
 800a328:	d033      	beq.n	800a392 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a32e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a332:	d005      	beq.n	800a340 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a338:	3301      	adds	r3, #1
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00b      	beq.n	800a362 <tcp_process_refused_data+0xb2>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6918      	ldr	r0, [r3, #16]
 800a354:	2300      	movs	r3, #0
 800a356:	2200      	movs	r2, #0
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	47a0      	blx	r4
 800a35c:	4603      	mov	r3, r0
 800a35e:	73fb      	strb	r3, [r7, #15]
 800a360:	e001      	b.n	800a366 <tcp_process_refused_data+0xb6>
 800a362:	2300      	movs	r3, #0
 800a364:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a36a:	f113 0f0d 	cmn.w	r3, #13
 800a36e:	d110      	bne.n	800a392 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a370:	f06f 030c 	mvn.w	r3, #12
 800a374:	e00e      	b.n	800a394 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a37a:	f113 0f0d 	cmn.w	r3, #13
 800a37e:	d102      	bne.n	800a386 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a380:	f06f 030c 	mvn.w	r3, #12
 800a384:	e006      	b.n	800a394 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a38c:	f06f 0304 	mvn.w	r3, #4
 800a390:	e000      	b.n	800a394 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd90      	pop	{r4, r7, pc}
 800a39c:	08013340 	.word	0x08013340
 800a3a0:	08013850 	.word	0x08013850
 800a3a4:	08013384 	.word	0x08013384

0800a3a8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a3b0:	e007      	b.n	800a3c2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f80a 	bl	800a3d2 <tcp_seg_free>
    seg = next;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1f4      	bne.n	800a3b2 <tcp_segs_free+0xa>
  }
}
 800a3c8:	bf00      	nop
 800a3ca:	bf00      	nop
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b082      	sub	sp, #8
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00c      	beq.n	800a3fa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d004      	beq.n	800a3f2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7fe fd71 	bl	8008ed4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a3f2:	6879      	ldr	r1, [r7, #4]
 800a3f4:	2003      	movs	r0, #3
 800a3f6:	f7fd fec9 	bl	800818c <memp_free>
  }
}
 800a3fa:	bf00      	nop
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
	...

0800a404 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d106      	bne.n	800a420 <tcp_seg_copy+0x1c>
 800a412:	4b0f      	ldr	r3, [pc, #60]	; (800a450 <tcp_seg_copy+0x4c>)
 800a414:	f240 6282 	movw	r2, #1666	; 0x682
 800a418:	490e      	ldr	r1, [pc, #56]	; (800a454 <tcp_seg_copy+0x50>)
 800a41a:	480f      	ldr	r0, [pc, #60]	; (800a458 <tcp_seg_copy+0x54>)
 800a41c:	f007 fa38 	bl	8011890 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a420:	2003      	movs	r0, #3
 800a422:	f7fd fe3d 	bl	80080a0 <memp_malloc>
 800a426:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <tcp_seg_copy+0x2e>
    return NULL;
 800a42e:	2300      	movs	r3, #0
 800a430:	e00a      	b.n	800a448 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a432:	2210      	movs	r2, #16
 800a434:	6879      	ldr	r1, [r7, #4]
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f007 f97f 	bl	801173a <memcpy>
  pbuf_ref(cseg->p);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	4618      	mov	r0, r3
 800a442:	f7fe fded 	bl	8009020 <pbuf_ref>
  return cseg;
 800a446:	68fb      	ldr	r3, [r7, #12]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	08013340 	.word	0x08013340
 800a454:	08013894 	.word	0x08013894
 800a458:	08013384 	.word	0x08013384

0800a45c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d109      	bne.n	800a484 <tcp_recv_null+0x28>
 800a470:	4b12      	ldr	r3, [pc, #72]	; (800a4bc <tcp_recv_null+0x60>)
 800a472:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a476:	4912      	ldr	r1, [pc, #72]	; (800a4c0 <tcp_recv_null+0x64>)
 800a478:	4812      	ldr	r0, [pc, #72]	; (800a4c4 <tcp_recv_null+0x68>)
 800a47a:	f007 fa09 	bl	8011890 <iprintf>
 800a47e:	f06f 030f 	mvn.w	r3, #15
 800a482:	e016      	b.n	800a4b2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d009      	beq.n	800a49e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	891b      	ldrh	r3, [r3, #8]
 800a48e:	4619      	mov	r1, r3
 800a490:	68b8      	ldr	r0, [r7, #8]
 800a492:	f7ff fb19 	bl	8009ac8 <tcp_recved>
    pbuf_free(p);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7fe fd1c 	bl	8008ed4 <pbuf_free>
 800a49c:	e008      	b.n	800a4b0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a49e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d104      	bne.n	800a4b0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a4a6:	68b8      	ldr	r0, [r7, #8]
 800a4a8:	f7ff f9be 	bl	8009828 <tcp_close>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	e000      	b.n	800a4b2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	08013340 	.word	0x08013340
 800a4c0:	080138b0 	.word	0x080138b0
 800a4c4:	08013384 	.word	0x08013384

0800a4c8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a4d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	db01      	blt.n	800a4de <tcp_kill_prio+0x16>
 800a4da:	79fb      	ldrb	r3, [r7, #7]
 800a4dc:	e000      	b.n	800a4e0 <tcp_kill_prio+0x18>
 800a4de:	237f      	movs	r3, #127	; 0x7f
 800a4e0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a4e2:	7afb      	ldrb	r3, [r7, #11]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d034      	beq.n	800a552 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a4e8:	7afb      	ldrb	r3, [r7, #11]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a4f6:	4b19      	ldr	r3, [pc, #100]	; (800a55c <tcp_kill_prio+0x94>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	e01f      	b.n	800a53e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	7d5b      	ldrb	r3, [r3, #21]
 800a502:	7afa      	ldrb	r2, [r7, #11]
 800a504:	429a      	cmp	r2, r3
 800a506:	d80c      	bhi.n	800a522 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a50c:	7afa      	ldrb	r2, [r7, #11]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d112      	bne.n	800a538 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a512:	4b13      	ldr	r3, [pc, #76]	; (800a560 <tcp_kill_prio+0x98>)
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d80a      	bhi.n	800a538 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a522:	4b0f      	ldr	r3, [pc, #60]	; (800a560 <tcp_kill_prio+0x98>)
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	7d5b      	ldrb	r3, [r3, #21]
 800a536:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	617b      	str	r3, [r7, #20]
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1dc      	bne.n	800a4fe <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d004      	beq.n	800a554 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a54a:	6938      	ldr	r0, [r7, #16]
 800a54c:	f7ff fa56 	bl	80099fc <tcp_abort>
 800a550:	e000      	b.n	800a554 <tcp_kill_prio+0x8c>
    return;
 800a552:	bf00      	nop
  }
}
 800a554:	3718      	adds	r7, #24
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	2000c4a0 	.word	0x2000c4a0
 800a560:	2000c494 	.word	0x2000c494

0800a564 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	2b08      	cmp	r3, #8
 800a572:	d009      	beq.n	800a588 <tcp_kill_state+0x24>
 800a574:	79fb      	ldrb	r3, [r7, #7]
 800a576:	2b09      	cmp	r3, #9
 800a578:	d006      	beq.n	800a588 <tcp_kill_state+0x24>
 800a57a:	4b1a      	ldr	r3, [pc, #104]	; (800a5e4 <tcp_kill_state+0x80>)
 800a57c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a580:	4919      	ldr	r1, [pc, #100]	; (800a5e8 <tcp_kill_state+0x84>)
 800a582:	481a      	ldr	r0, [pc, #104]	; (800a5ec <tcp_kill_state+0x88>)
 800a584:	f007 f984 	bl	8011890 <iprintf>

  inactivity = 0;
 800a588:	2300      	movs	r3, #0
 800a58a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a58c:	2300      	movs	r3, #0
 800a58e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a590:	4b17      	ldr	r3, [pc, #92]	; (800a5f0 <tcp_kill_state+0x8c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	617b      	str	r3, [r7, #20]
 800a596:	e017      	b.n	800a5c8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	7d1b      	ldrb	r3, [r3, #20]
 800a59c:	79fa      	ldrb	r2, [r7, #7]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d10f      	bne.n	800a5c2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a5a2:	4b14      	ldr	r3, [pc, #80]	; (800a5f4 <tcp_kill_state+0x90>)
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d807      	bhi.n	800a5c2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a5b2:	4b10      	ldr	r3, [pc, #64]	; (800a5f4 <tcp_kill_state+0x90>)
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	617b      	str	r3, [r7, #20]
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1e4      	bne.n	800a598 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d003      	beq.n	800a5dc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	6938      	ldr	r0, [r7, #16]
 800a5d8:	f7ff f952 	bl	8009880 <tcp_abandon>
  }
}
 800a5dc:	bf00      	nop
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	08013340 	.word	0x08013340
 800a5e8:	080138cc 	.word	0x080138cc
 800a5ec:	08013384 	.word	0x08013384
 800a5f0:	2000c4a0 	.word	0x2000c4a0
 800a5f4:	2000c494 	.word	0x2000c494

0800a5f8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a602:	2300      	movs	r3, #0
 800a604:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a606:	4b12      	ldr	r3, [pc, #72]	; (800a650 <tcp_kill_timewait+0x58>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	e012      	b.n	800a634 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a60e:	4b11      	ldr	r3, [pc, #68]	; (800a654 <tcp_kill_timewait+0x5c>)
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d807      	bhi.n	800a62e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a61e:	4b0d      	ldr	r3, [pc, #52]	; (800a654 <tcp_kill_timewait+0x5c>)
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1e9      	bne.n	800a60e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a640:	68b8      	ldr	r0, [r7, #8]
 800a642:	f7ff f9db 	bl	80099fc <tcp_abort>
  }
}
 800a646:	bf00      	nop
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	2000c4a4 	.word	0x2000c4a4
 800a654:	2000c494 	.word	0x2000c494

0800a658 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a65e:	4b10      	ldr	r3, [pc, #64]	; (800a6a0 <tcp_handle_closepend+0x48>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a664:	e014      	b.n	800a690 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	8b5b      	ldrh	r3, [r3, #26]
 800a670:	f003 0308 	and.w	r3, r3, #8
 800a674:	2b00      	cmp	r3, #0
 800a676:	d009      	beq.n	800a68c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	8b5b      	ldrh	r3, [r3, #26]
 800a67c:	f023 0308 	bic.w	r3, r3, #8
 800a680:	b29a      	uxth	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff f864 	bl	8009754 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1e7      	bne.n	800a666 <tcp_handle_closepend+0xe>
  }
}
 800a696:	bf00      	nop
 800a698:	bf00      	nop
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	2000c4a0 	.word	0x2000c4a0

0800a6a4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a6ae:	2001      	movs	r0, #1
 800a6b0:	f7fd fcf6 	bl	80080a0 <memp_malloc>
 800a6b4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d126      	bne.n	800a70a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a6bc:	f7ff ffcc 	bl	800a658 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a6c0:	f7ff ff9a 	bl	800a5f8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a6c4:	2001      	movs	r0, #1
 800a6c6:	f7fd fceb 	bl	80080a0 <memp_malloc>
 800a6ca:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d11b      	bne.n	800a70a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a6d2:	2009      	movs	r0, #9
 800a6d4:	f7ff ff46 	bl	800a564 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a6d8:	2001      	movs	r0, #1
 800a6da:	f7fd fce1 	bl	80080a0 <memp_malloc>
 800a6de:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d111      	bne.n	800a70a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a6e6:	2008      	movs	r0, #8
 800a6e8:	f7ff ff3c 	bl	800a564 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a6ec:	2001      	movs	r0, #1
 800a6ee:	f7fd fcd7 	bl	80080a0 <memp_malloc>
 800a6f2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d107      	bne.n	800a70a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff fee3 	bl	800a4c8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a702:	2001      	movs	r0, #1
 800a704:	f7fd fccc 	bl	80080a0 <memp_malloc>
 800a708:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d03f      	beq.n	800a790 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a710:	229c      	movs	r2, #156	; 0x9c
 800a712:	2100      	movs	r1, #0
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f007 f81e 	bl	8011756 <memset>
    pcb->prio = prio;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	79fa      	ldrb	r2, [r7, #7]
 800a71e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a726:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a730:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	22ff      	movs	r2, #255	; 0xff
 800a73e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a746:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2206      	movs	r2, #6
 800a74c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2206      	movs	r2, #6
 800a754:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a75c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2201      	movs	r2, #1
 800a762:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a766:	4b0d      	ldr	r3, [pc, #52]	; (800a79c <tcp_alloc+0xf8>)
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a76e:	4b0c      	ldr	r3, [pc, #48]	; (800a7a0 <tcp_alloc+0xfc>)
 800a770:	781a      	ldrb	r2, [r3, #0]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a77c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	4a08      	ldr	r2, [pc, #32]	; (800a7a4 <tcp_alloc+0x100>)
 800a784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4a07      	ldr	r2, [pc, #28]	; (800a7a8 <tcp_alloc+0x104>)
 800a78c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a790:	68fb      	ldr	r3, [r7, #12]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	2000c494 	.word	0x2000c494
 800a7a0:	2000c4aa 	.word	0x2000c4aa
 800a7a4:	0800a45d 	.word	0x0800a45d
 800a7a8:	006ddd00 	.word	0x006ddd00

0800a7ac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d107      	bne.n	800a7ca <tcp_pcb_purge+0x1e>
 800a7ba:	4b21      	ldr	r3, [pc, #132]	; (800a840 <tcp_pcb_purge+0x94>)
 800a7bc:	f640 0251 	movw	r2, #2129	; 0x851
 800a7c0:	4920      	ldr	r1, [pc, #128]	; (800a844 <tcp_pcb_purge+0x98>)
 800a7c2:	4821      	ldr	r0, [pc, #132]	; (800a848 <tcp_pcb_purge+0x9c>)
 800a7c4:	f007 f864 	bl	8011890 <iprintf>
 800a7c8:	e037      	b.n	800a83a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	7d1b      	ldrb	r3, [r3, #20]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d033      	beq.n	800a83a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a7d6:	2b0a      	cmp	r3, #10
 800a7d8:	d02f      	beq.n	800a83a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d02b      	beq.n	800a83a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d007      	beq.n	800a7fa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fe fb70 	bl	8008ed4 <pbuf_free>
      pcb->refused_data = NULL;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d002      	beq.n	800a808 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f986 	bl	800ab14 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a80e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff fdc7 	bl	800a3a8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a81e:	4618      	mov	r0, r3
 800a820:	f7ff fdc2 	bl	800a3a8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	66da      	str	r2, [r3, #108]	; 0x6c
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	08013340 	.word	0x08013340
 800a844:	0801398c 	.word	0x0801398c
 800a848:	08013384 	.word	0x08013384

0800a84c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d106      	bne.n	800a86a <tcp_pcb_remove+0x1e>
 800a85c:	4b3e      	ldr	r3, [pc, #248]	; (800a958 <tcp_pcb_remove+0x10c>)
 800a85e:	f640 0283 	movw	r2, #2179	; 0x883
 800a862:	493e      	ldr	r1, [pc, #248]	; (800a95c <tcp_pcb_remove+0x110>)
 800a864:	483e      	ldr	r0, [pc, #248]	; (800a960 <tcp_pcb_remove+0x114>)
 800a866:	f007 f813 	bl	8011890 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d106      	bne.n	800a87e <tcp_pcb_remove+0x32>
 800a870:	4b39      	ldr	r3, [pc, #228]	; (800a958 <tcp_pcb_remove+0x10c>)
 800a872:	f640 0284 	movw	r2, #2180	; 0x884
 800a876:	493b      	ldr	r1, [pc, #236]	; (800a964 <tcp_pcb_remove+0x118>)
 800a878:	4839      	ldr	r0, [pc, #228]	; (800a960 <tcp_pcb_remove+0x114>)
 800a87a:	f007 f809 	bl	8011890 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	429a      	cmp	r2, r3
 800a886:	d105      	bne.n	800a894 <tcp_pcb_remove+0x48>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68da      	ldr	r2, [r3, #12]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	e013      	b.n	800a8bc <tcp_pcb_remove+0x70>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	60fb      	str	r3, [r7, #12]
 800a89a:	e00c      	b.n	800a8b6 <tcp_pcb_remove+0x6a>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d104      	bne.n	800a8b0 <tcp_pcb_remove+0x64>
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	68da      	ldr	r2, [r3, #12]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	60da      	str	r2, [r3, #12]
 800a8ae:	e005      	b.n	800a8bc <tcp_pcb_remove+0x70>
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	60fb      	str	r3, [r7, #12]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1ef      	bne.n	800a89c <tcp_pcb_remove+0x50>
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a8c2:	6838      	ldr	r0, [r7, #0]
 800a8c4:	f7ff ff72 	bl	800a7ac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	7d1b      	ldrb	r3, [r3, #20]
 800a8cc:	2b0a      	cmp	r3, #10
 800a8ce:	d013      	beq.n	800a8f8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d00f      	beq.n	800a8f8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	8b5b      	ldrh	r3, [r3, #26]
 800a8dc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d009      	beq.n	800a8f8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	8b5b      	ldrh	r3, [r3, #26]
 800a8e8:	f043 0302 	orr.w	r3, r3, #2
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a8f2:	6838      	ldr	r0, [r7, #0]
 800a8f4:	f002 ff6e 	bl	800d7d4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	7d1b      	ldrb	r3, [r3, #20]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d020      	beq.n	800a942 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a904:	2b00      	cmp	r3, #0
 800a906:	d006      	beq.n	800a916 <tcp_pcb_remove+0xca>
 800a908:	4b13      	ldr	r3, [pc, #76]	; (800a958 <tcp_pcb_remove+0x10c>)
 800a90a:	f640 0293 	movw	r2, #2195	; 0x893
 800a90e:	4916      	ldr	r1, [pc, #88]	; (800a968 <tcp_pcb_remove+0x11c>)
 800a910:	4813      	ldr	r0, [pc, #76]	; (800a960 <tcp_pcb_remove+0x114>)
 800a912:	f006 ffbd 	bl	8011890 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d006      	beq.n	800a92c <tcp_pcb_remove+0xe0>
 800a91e:	4b0e      	ldr	r3, [pc, #56]	; (800a958 <tcp_pcb_remove+0x10c>)
 800a920:	f640 0294 	movw	r2, #2196	; 0x894
 800a924:	4911      	ldr	r1, [pc, #68]	; (800a96c <tcp_pcb_remove+0x120>)
 800a926:	480e      	ldr	r0, [pc, #56]	; (800a960 <tcp_pcb_remove+0x114>)
 800a928:	f006 ffb2 	bl	8011890 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a930:	2b00      	cmp	r3, #0
 800a932:	d006      	beq.n	800a942 <tcp_pcb_remove+0xf6>
 800a934:	4b08      	ldr	r3, [pc, #32]	; (800a958 <tcp_pcb_remove+0x10c>)
 800a936:	f640 0296 	movw	r2, #2198	; 0x896
 800a93a:	490d      	ldr	r1, [pc, #52]	; (800a970 <tcp_pcb_remove+0x124>)
 800a93c:	4808      	ldr	r0, [pc, #32]	; (800a960 <tcp_pcb_remove+0x114>)
 800a93e:	f006 ffa7 	bl	8011890 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2200      	movs	r2, #0
 800a946:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	2200      	movs	r2, #0
 800a94c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a94e:	bf00      	nop
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	08013340 	.word	0x08013340
 800a95c:	080139a8 	.word	0x080139a8
 800a960:	08013384 	.word	0x08013384
 800a964:	080139c4 	.word	0x080139c4
 800a968:	080139e4 	.word	0x080139e4
 800a96c:	080139fc 	.word	0x080139fc
 800a970:	08013a18 	.word	0x08013a18

0800a974 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d106      	bne.n	800a990 <tcp_next_iss+0x1c>
 800a982:	4b0a      	ldr	r3, [pc, #40]	; (800a9ac <tcp_next_iss+0x38>)
 800a984:	f640 02af 	movw	r2, #2223	; 0x8af
 800a988:	4909      	ldr	r1, [pc, #36]	; (800a9b0 <tcp_next_iss+0x3c>)
 800a98a:	480a      	ldr	r0, [pc, #40]	; (800a9b4 <tcp_next_iss+0x40>)
 800a98c:	f006 ff80 	bl	8011890 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a990:	4b09      	ldr	r3, [pc, #36]	; (800a9b8 <tcp_next_iss+0x44>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	4b09      	ldr	r3, [pc, #36]	; (800a9bc <tcp_next_iss+0x48>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4413      	add	r3, r2
 800a99a:	4a07      	ldr	r2, [pc, #28]	; (800a9b8 <tcp_next_iss+0x44>)
 800a99c:	6013      	str	r3, [r2, #0]
  return iss;
 800a99e:	4b06      	ldr	r3, [pc, #24]	; (800a9b8 <tcp_next_iss+0x44>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	08013340 	.word	0x08013340
 800a9b0:	08013a30 	.word	0x08013a30
 800a9b4:	08013384 	.word	0x08013384
 800a9b8:	20000028 	.word	0x20000028
 800a9bc:	2000c494 	.word	0x2000c494

0800a9c0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d106      	bne.n	800a9e2 <tcp_eff_send_mss_netif+0x22>
 800a9d4:	4b14      	ldr	r3, [pc, #80]	; (800aa28 <tcp_eff_send_mss_netif+0x68>)
 800a9d6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a9da:	4914      	ldr	r1, [pc, #80]	; (800aa2c <tcp_eff_send_mss_netif+0x6c>)
 800a9dc:	4814      	ldr	r0, [pc, #80]	; (800aa30 <tcp_eff_send_mss_netif+0x70>)
 800a9de:	f006 ff57 	bl	8011890 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d101      	bne.n	800a9ec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a9e8:	89fb      	ldrh	r3, [r7, #14]
 800a9ea:	e019      	b.n	800aa20 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a9f0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a9f2:	8afb      	ldrh	r3, [r7, #22]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d012      	beq.n	800aa1e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a9f8:	2328      	movs	r3, #40	; 0x28
 800a9fa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a9fc:	8afa      	ldrh	r2, [r7, #22]
 800a9fe:	8abb      	ldrh	r3, [r7, #20]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d904      	bls.n	800aa0e <tcp_eff_send_mss_netif+0x4e>
 800aa04:	8afa      	ldrh	r2, [r7, #22]
 800aa06:	8abb      	ldrh	r3, [r7, #20]
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	e000      	b.n	800aa10 <tcp_eff_send_mss_netif+0x50>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800aa12:	8a7a      	ldrh	r2, [r7, #18]
 800aa14:	89fb      	ldrh	r3, [r7, #14]
 800aa16:	4293      	cmp	r3, r2
 800aa18:	bf28      	it	cs
 800aa1a:	4613      	movcs	r3, r2
 800aa1c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800aa1e:	89fb      	ldrh	r3, [r7, #14]
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3718      	adds	r7, #24
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	08013340 	.word	0x08013340
 800aa2c:	08013a4c 	.word	0x08013a4c
 800aa30:	08013384 	.word	0x08013384

0800aa34 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d119      	bne.n	800aa7c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800aa48:	4b10      	ldr	r3, [pc, #64]	; (800aa8c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800aa4a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800aa4e:	4910      	ldr	r1, [pc, #64]	; (800aa90 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800aa50:	4810      	ldr	r0, [pc, #64]	; (800aa94 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800aa52:	f006 ff1d 	bl	8011890 <iprintf>

  while (pcb != NULL) {
 800aa56:	e011      	b.n	800aa7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d108      	bne.n	800aa76 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f7fe ffc6 	bl	80099fc <tcp_abort>
      pcb = next;
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	60fb      	str	r3, [r7, #12]
 800aa74:	e002      	b.n	800aa7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1ea      	bne.n	800aa58 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800aa82:	bf00      	nop
 800aa84:	bf00      	nop
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	08013340 	.word	0x08013340
 800aa90:	08013a74 	.word	0x08013a74
 800aa94:	08013384 	.word	0x08013384

0800aa98 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d02a      	beq.n	800aafe <tcp_netif_ip_addr_changed+0x66>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d026      	beq.n	800aafe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800aab0:	4b15      	ldr	r3, [pc, #84]	; (800ab08 <tcp_netif_ip_addr_changed+0x70>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4619      	mov	r1, r3
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f7ff ffbc 	bl	800aa34 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800aabc:	4b13      	ldr	r3, [pc, #76]	; (800ab0c <tcp_netif_ip_addr_changed+0x74>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4619      	mov	r1, r3
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f7ff ffb6 	bl	800aa34 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d017      	beq.n	800aafe <tcp_netif_ip_addr_changed+0x66>
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d013      	beq.n	800aafe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aad6:	4b0e      	ldr	r3, [pc, #56]	; (800ab10 <tcp_netif_ip_addr_changed+0x78>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	e00c      	b.n	800aaf8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d103      	bne.n	800aaf2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	60fb      	str	r3, [r7, #12]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1ef      	bne.n	800aade <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800aafe:	bf00      	nop
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	2000c4a0 	.word	0x2000c4a0
 800ab0c:	2000c498 	.word	0x2000c498
 800ab10:	2000c49c 	.word	0x2000c49c

0800ab14 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d007      	beq.n	800ab34 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7ff fc3d 	bl	800a3a8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ab3c:	b590      	push	{r4, r7, lr}
 800ab3e:	b08d      	sub	sp, #52	; 0x34
 800ab40:	af04      	add	r7, sp, #16
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d105      	bne.n	800ab58 <tcp_input+0x1c>
 800ab4c:	4b9b      	ldr	r3, [pc, #620]	; (800adbc <tcp_input+0x280>)
 800ab4e:	2283      	movs	r2, #131	; 0x83
 800ab50:	499b      	ldr	r1, [pc, #620]	; (800adc0 <tcp_input+0x284>)
 800ab52:	489c      	ldr	r0, [pc, #624]	; (800adc4 <tcp_input+0x288>)
 800ab54:	f006 fe9c 	bl	8011890 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	4a9a      	ldr	r2, [pc, #616]	; (800adc8 <tcp_input+0x28c>)
 800ab5e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	895b      	ldrh	r3, [r3, #10]
 800ab64:	2b13      	cmp	r3, #19
 800ab66:	f240 83d1 	bls.w	800b30c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ab6a:	4b98      	ldr	r3, [pc, #608]	; (800adcc <tcp_input+0x290>)
 800ab6c:	695b      	ldr	r3, [r3, #20]
 800ab6e:	4a97      	ldr	r2, [pc, #604]	; (800adcc <tcp_input+0x290>)
 800ab70:	6812      	ldr	r2, [r2, #0]
 800ab72:	4611      	mov	r1, r2
 800ab74:	4618      	mov	r0, r3
 800ab76:	f005 fc47 	bl	8010408 <ip4_addr_isbroadcast_u32>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f040 83c7 	bne.w	800b310 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ab82:	4b92      	ldr	r3, [pc, #584]	; (800adcc <tcp_input+0x290>)
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ab8a:	2be0      	cmp	r3, #224	; 0xe0
 800ab8c:	f000 83c0 	beq.w	800b310 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ab90:	4b8d      	ldr	r3, [pc, #564]	; (800adc8 <tcp_input+0x28c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	899b      	ldrh	r3, [r3, #12]
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fc fda9 	bl	80076f0 <lwip_htons>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	0b1b      	lsrs	r3, r3, #12
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800abaa:	7cbb      	ldrb	r3, [r7, #18]
 800abac:	2b13      	cmp	r3, #19
 800abae:	f240 83b1 	bls.w	800b314 <tcp_input+0x7d8>
 800abb2:	7cbb      	ldrb	r3, [r7, #18]
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	891b      	ldrh	r3, [r3, #8]
 800abba:	429a      	cmp	r2, r3
 800abbc:	f200 83aa 	bhi.w	800b314 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800abc0:	7cbb      	ldrb	r3, [r7, #18]
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	3b14      	subs	r3, #20
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	4b81      	ldr	r3, [pc, #516]	; (800add0 <tcp_input+0x294>)
 800abca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800abcc:	4b81      	ldr	r3, [pc, #516]	; (800add4 <tcp_input+0x298>)
 800abce:	2200      	movs	r2, #0
 800abd0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	895a      	ldrh	r2, [r3, #10]
 800abd6:	7cbb      	ldrb	r3, [r7, #18]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	429a      	cmp	r2, r3
 800abdc:	d309      	bcc.n	800abf2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800abde:	4b7c      	ldr	r3, [pc, #496]	; (800add0 <tcp_input+0x294>)
 800abe0:	881a      	ldrh	r2, [r3, #0]
 800abe2:	4b7d      	ldr	r3, [pc, #500]	; (800add8 <tcp_input+0x29c>)
 800abe4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800abe6:	7cbb      	ldrb	r3, [r7, #18]
 800abe8:	4619      	mov	r1, r3
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7fe f8ec 	bl	8008dc8 <pbuf_remove_header>
 800abf0:	e04e      	b.n	800ac90 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d105      	bne.n	800ac06 <tcp_input+0xca>
 800abfa:	4b70      	ldr	r3, [pc, #448]	; (800adbc <tcp_input+0x280>)
 800abfc:	22c2      	movs	r2, #194	; 0xc2
 800abfe:	4977      	ldr	r1, [pc, #476]	; (800addc <tcp_input+0x2a0>)
 800ac00:	4870      	ldr	r0, [pc, #448]	; (800adc4 <tcp_input+0x288>)
 800ac02:	f006 fe45 	bl	8011890 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ac06:	2114      	movs	r1, #20
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f7fe f8dd 	bl	8008dc8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	895a      	ldrh	r2, [r3, #10]
 800ac12:	4b71      	ldr	r3, [pc, #452]	; (800add8 <tcp_input+0x29c>)
 800ac14:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ac16:	4b6e      	ldr	r3, [pc, #440]	; (800add0 <tcp_input+0x294>)
 800ac18:	881a      	ldrh	r2, [r3, #0]
 800ac1a:	4b6f      	ldr	r3, [pc, #444]	; (800add8 <tcp_input+0x29c>)
 800ac1c:	881b      	ldrh	r3, [r3, #0]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ac22:	4b6d      	ldr	r3, [pc, #436]	; (800add8 <tcp_input+0x29c>)
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	4619      	mov	r1, r3
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7fe f8cd 	bl	8008dc8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	895b      	ldrh	r3, [r3, #10]
 800ac34:	8a3a      	ldrh	r2, [r7, #16]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	f200 836e 	bhi.w	800b318 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	4a64      	ldr	r2, [pc, #400]	; (800add4 <tcp_input+0x298>)
 800ac44:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	8a3a      	ldrh	r2, [r7, #16]
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fe f8ba 	bl	8008dc8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	891a      	ldrh	r2, [r3, #8]
 800ac58:	8a3b      	ldrh	r3, [r7, #16]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	895b      	ldrh	r3, [r3, #10]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d005      	beq.n	800ac76 <tcp_input+0x13a>
 800ac6a:	4b54      	ldr	r3, [pc, #336]	; (800adbc <tcp_input+0x280>)
 800ac6c:	22df      	movs	r2, #223	; 0xdf
 800ac6e:	495c      	ldr	r1, [pc, #368]	; (800ade0 <tcp_input+0x2a4>)
 800ac70:	4854      	ldr	r0, [pc, #336]	; (800adc4 <tcp_input+0x288>)
 800ac72:	f006 fe0d 	bl	8011890 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	891a      	ldrh	r2, [r3, #8]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	891b      	ldrh	r3, [r3, #8]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d005      	beq.n	800ac90 <tcp_input+0x154>
 800ac84:	4b4d      	ldr	r3, [pc, #308]	; (800adbc <tcp_input+0x280>)
 800ac86:	22e0      	movs	r2, #224	; 0xe0
 800ac88:	4956      	ldr	r1, [pc, #344]	; (800ade4 <tcp_input+0x2a8>)
 800ac8a:	484e      	ldr	r0, [pc, #312]	; (800adc4 <tcp_input+0x288>)
 800ac8c:	f006 fe00 	bl	8011890 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ac90:	4b4d      	ldr	r3, [pc, #308]	; (800adc8 <tcp_input+0x28c>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	881b      	ldrh	r3, [r3, #0]
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	4a4b      	ldr	r2, [pc, #300]	; (800adc8 <tcp_input+0x28c>)
 800ac9a:	6814      	ldr	r4, [r2, #0]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7fc fd27 	bl	80076f0 <lwip_htons>
 800aca2:	4603      	mov	r3, r0
 800aca4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800aca6:	4b48      	ldr	r3, [pc, #288]	; (800adc8 <tcp_input+0x28c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	885b      	ldrh	r3, [r3, #2]
 800acac:	b29b      	uxth	r3, r3
 800acae:	4a46      	ldr	r2, [pc, #280]	; (800adc8 <tcp_input+0x28c>)
 800acb0:	6814      	ldr	r4, [r2, #0]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fc fd1c 	bl	80076f0 <lwip_htons>
 800acb8:	4603      	mov	r3, r0
 800acba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800acbc:	4b42      	ldr	r3, [pc, #264]	; (800adc8 <tcp_input+0x28c>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	4a41      	ldr	r2, [pc, #260]	; (800adc8 <tcp_input+0x28c>)
 800acc4:	6814      	ldr	r4, [r2, #0]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fc fd27 	bl	800771a <lwip_htonl>
 800accc:	4603      	mov	r3, r0
 800acce:	6063      	str	r3, [r4, #4]
 800acd0:	6863      	ldr	r3, [r4, #4]
 800acd2:	4a45      	ldr	r2, [pc, #276]	; (800ade8 <tcp_input+0x2ac>)
 800acd4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800acd6:	4b3c      	ldr	r3, [pc, #240]	; (800adc8 <tcp_input+0x28c>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	4a3a      	ldr	r2, [pc, #232]	; (800adc8 <tcp_input+0x28c>)
 800acde:	6814      	ldr	r4, [r2, #0]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fc fd1a 	bl	800771a <lwip_htonl>
 800ace6:	4603      	mov	r3, r0
 800ace8:	60a3      	str	r3, [r4, #8]
 800acea:	68a3      	ldr	r3, [r4, #8]
 800acec:	4a3f      	ldr	r2, [pc, #252]	; (800adec <tcp_input+0x2b0>)
 800acee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800acf0:	4b35      	ldr	r3, [pc, #212]	; (800adc8 <tcp_input+0x28c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	89db      	ldrh	r3, [r3, #14]
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	4a33      	ldr	r2, [pc, #204]	; (800adc8 <tcp_input+0x28c>)
 800acfa:	6814      	ldr	r4, [r2, #0]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fc fcf7 	bl	80076f0 <lwip_htons>
 800ad02:	4603      	mov	r3, r0
 800ad04:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ad06:	4b30      	ldr	r3, [pc, #192]	; (800adc8 <tcp_input+0x28c>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	899b      	ldrh	r3, [r3, #12]
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fc fcee 	bl	80076f0 <lwip_htons>
 800ad14:	4603      	mov	r3, r0
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	4b34      	ldr	r3, [pc, #208]	; (800adf0 <tcp_input+0x2b4>)
 800ad20:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	891a      	ldrh	r2, [r3, #8]
 800ad26:	4b33      	ldr	r3, [pc, #204]	; (800adf4 <tcp_input+0x2b8>)
 800ad28:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ad2a:	4b31      	ldr	r3, [pc, #196]	; (800adf0 <tcp_input+0x2b4>)
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	f003 0303 	and.w	r3, r3, #3
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00c      	beq.n	800ad50 <tcp_input+0x214>
    tcplen++;
 800ad36:	4b2f      	ldr	r3, [pc, #188]	; (800adf4 <tcp_input+0x2b8>)
 800ad38:	881b      	ldrh	r3, [r3, #0]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	4b2d      	ldr	r3, [pc, #180]	; (800adf4 <tcp_input+0x2b8>)
 800ad40:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	891a      	ldrh	r2, [r3, #8]
 800ad46:	4b2b      	ldr	r3, [pc, #172]	; (800adf4 <tcp_input+0x2b8>)
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	f200 82e6 	bhi.w	800b31c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ad50:	2300      	movs	r3, #0
 800ad52:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad54:	4b28      	ldr	r3, [pc, #160]	; (800adf8 <tcp_input+0x2bc>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	61fb      	str	r3, [r7, #28]
 800ad5a:	e09d      	b.n	800ae98 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	7d1b      	ldrb	r3, [r3, #20]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d105      	bne.n	800ad70 <tcp_input+0x234>
 800ad64:	4b15      	ldr	r3, [pc, #84]	; (800adbc <tcp_input+0x280>)
 800ad66:	22fb      	movs	r2, #251	; 0xfb
 800ad68:	4924      	ldr	r1, [pc, #144]	; (800adfc <tcp_input+0x2c0>)
 800ad6a:	4816      	ldr	r0, [pc, #88]	; (800adc4 <tcp_input+0x288>)
 800ad6c:	f006 fd90 	bl	8011890 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	7d1b      	ldrb	r3, [r3, #20]
 800ad74:	2b0a      	cmp	r3, #10
 800ad76:	d105      	bne.n	800ad84 <tcp_input+0x248>
 800ad78:	4b10      	ldr	r3, [pc, #64]	; (800adbc <tcp_input+0x280>)
 800ad7a:	22fc      	movs	r2, #252	; 0xfc
 800ad7c:	4920      	ldr	r1, [pc, #128]	; (800ae00 <tcp_input+0x2c4>)
 800ad7e:	4811      	ldr	r0, [pc, #68]	; (800adc4 <tcp_input+0x288>)
 800ad80:	f006 fd86 	bl	8011890 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	7d1b      	ldrb	r3, [r3, #20]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d105      	bne.n	800ad98 <tcp_input+0x25c>
 800ad8c:	4b0b      	ldr	r3, [pc, #44]	; (800adbc <tcp_input+0x280>)
 800ad8e:	22fd      	movs	r2, #253	; 0xfd
 800ad90:	491c      	ldr	r1, [pc, #112]	; (800ae04 <tcp_input+0x2c8>)
 800ad92:	480c      	ldr	r0, [pc, #48]	; (800adc4 <tcp_input+0x288>)
 800ad94:	f006 fd7c 	bl	8011890 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	7a1b      	ldrb	r3, [r3, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d033      	beq.n	800ae08 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	7a1a      	ldrb	r2, [r3, #8]
 800ada4:	4b09      	ldr	r3, [pc, #36]	; (800adcc <tcp_input+0x290>)
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800adac:	3301      	adds	r3, #1
 800adae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d029      	beq.n	800ae08 <tcp_input+0x2cc>
      prev = pcb;
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	61bb      	str	r3, [r7, #24]
      continue;
 800adb8:	e06b      	b.n	800ae92 <tcp_input+0x356>
 800adba:	bf00      	nop
 800adbc:	08013aa8 	.word	0x08013aa8
 800adc0:	08013adc 	.word	0x08013adc
 800adc4:	08013af4 	.word	0x08013af4
 800adc8:	2000c4bc 	.word	0x2000c4bc
 800adcc:	20008d40 	.word	0x20008d40
 800add0:	2000c4c0 	.word	0x2000c4c0
 800add4:	2000c4c4 	.word	0x2000c4c4
 800add8:	2000c4c2 	.word	0x2000c4c2
 800addc:	08013b1c 	.word	0x08013b1c
 800ade0:	08013b2c 	.word	0x08013b2c
 800ade4:	08013b38 	.word	0x08013b38
 800ade8:	2000c4cc 	.word	0x2000c4cc
 800adec:	2000c4d0 	.word	0x2000c4d0
 800adf0:	2000c4d8 	.word	0x2000c4d8
 800adf4:	2000c4d6 	.word	0x2000c4d6
 800adf8:	2000c4a0 	.word	0x2000c4a0
 800adfc:	08013b58 	.word	0x08013b58
 800ae00:	08013b80 	.word	0x08013b80
 800ae04:	08013bac 	.word	0x08013bac
    }

    if (pcb->remote_port == tcphdr->src &&
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	8b1a      	ldrh	r2, [r3, #24]
 800ae0c:	4b72      	ldr	r3, [pc, #456]	; (800afd8 <tcp_input+0x49c>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	881b      	ldrh	r3, [r3, #0]
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d13a      	bne.n	800ae8e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	8ada      	ldrh	r2, [r3, #22]
 800ae1c:	4b6e      	ldr	r3, [pc, #440]	; (800afd8 <tcp_input+0x49c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	885b      	ldrh	r3, [r3, #2]
 800ae22:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d132      	bne.n	800ae8e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	685a      	ldr	r2, [r3, #4]
 800ae2c:	4b6b      	ldr	r3, [pc, #428]	; (800afdc <tcp_input+0x4a0>)
 800ae2e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d12c      	bne.n	800ae8e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	4b68      	ldr	r3, [pc, #416]	; (800afdc <tcp_input+0x4a0>)
 800ae3a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d126      	bne.n	800ae8e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	69fa      	ldr	r2, [r7, #28]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d106      	bne.n	800ae58 <tcp_input+0x31c>
 800ae4a:	4b65      	ldr	r3, [pc, #404]	; (800afe0 <tcp_input+0x4a4>)
 800ae4c:	f240 120d 	movw	r2, #269	; 0x10d
 800ae50:	4964      	ldr	r1, [pc, #400]	; (800afe4 <tcp_input+0x4a8>)
 800ae52:	4865      	ldr	r0, [pc, #404]	; (800afe8 <tcp_input+0x4ac>)
 800ae54:	f006 fd1c 	bl	8011890 <iprintf>
      if (prev != NULL) {
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00a      	beq.n	800ae74 <tcp_input+0x338>
        prev->next = pcb->next;
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	68da      	ldr	r2, [r3, #12]
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ae66:	4b61      	ldr	r3, [pc, #388]	; (800afec <tcp_input+0x4b0>)
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ae6e:	4a5f      	ldr	r2, [pc, #380]	; (800afec <tcp_input+0x4b0>)
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	69fa      	ldr	r2, [r7, #28]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d111      	bne.n	800aea2 <tcp_input+0x366>
 800ae7e:	4b58      	ldr	r3, [pc, #352]	; (800afe0 <tcp_input+0x4a4>)
 800ae80:	f240 1215 	movw	r2, #277	; 0x115
 800ae84:	495a      	ldr	r1, [pc, #360]	; (800aff0 <tcp_input+0x4b4>)
 800ae86:	4858      	ldr	r0, [pc, #352]	; (800afe8 <tcp_input+0x4ac>)
 800ae88:	f006 fd02 	bl	8011890 <iprintf>
      break;
 800ae8c:	e009      	b.n	800aea2 <tcp_input+0x366>
    }
    prev = pcb;
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	61fb      	str	r3, [r7, #28]
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f47f af5e 	bne.w	800ad5c <tcp_input+0x220>
 800aea0:	e000      	b.n	800aea4 <tcp_input+0x368>
      break;
 800aea2:	bf00      	nop
  }

  if (pcb == NULL) {
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f040 80aa 	bne.w	800b000 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aeac:	4b51      	ldr	r3, [pc, #324]	; (800aff4 <tcp_input+0x4b8>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	61fb      	str	r3, [r7, #28]
 800aeb2:	e03f      	b.n	800af34 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	7d1b      	ldrb	r3, [r3, #20]
 800aeb8:	2b0a      	cmp	r3, #10
 800aeba:	d006      	beq.n	800aeca <tcp_input+0x38e>
 800aebc:	4b48      	ldr	r3, [pc, #288]	; (800afe0 <tcp_input+0x4a4>)
 800aebe:	f240 121f 	movw	r2, #287	; 0x11f
 800aec2:	494d      	ldr	r1, [pc, #308]	; (800aff8 <tcp_input+0x4bc>)
 800aec4:	4848      	ldr	r0, [pc, #288]	; (800afe8 <tcp_input+0x4ac>)
 800aec6:	f006 fce3 	bl	8011890 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	7a1b      	ldrb	r3, [r3, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d009      	beq.n	800aee6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	7a1a      	ldrb	r2, [r3, #8]
 800aed6:	4b41      	ldr	r3, [pc, #260]	; (800afdc <tcp_input+0x4a0>)
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aede:	3301      	adds	r3, #1
 800aee0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d122      	bne.n	800af2c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	8b1a      	ldrh	r2, [r3, #24]
 800aeea:	4b3b      	ldr	r3, [pc, #236]	; (800afd8 <tcp_input+0x49c>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	881b      	ldrh	r3, [r3, #0]
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d11b      	bne.n	800af2e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	8ada      	ldrh	r2, [r3, #22]
 800aefa:	4b37      	ldr	r3, [pc, #220]	; (800afd8 <tcp_input+0x49c>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	885b      	ldrh	r3, [r3, #2]
 800af00:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800af02:	429a      	cmp	r2, r3
 800af04:	d113      	bne.n	800af2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	685a      	ldr	r2, [r3, #4]
 800af0a:	4b34      	ldr	r3, [pc, #208]	; (800afdc <tcp_input+0x4a0>)
 800af0c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800af0e:	429a      	cmp	r2, r3
 800af10:	d10d      	bne.n	800af2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	4b31      	ldr	r3, [pc, #196]	; (800afdc <tcp_input+0x4a0>)
 800af18:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d107      	bne.n	800af2e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800af1e:	69f8      	ldr	r0, [r7, #28]
 800af20:	f000 fb56 	bl	800b5d0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7fd ffd5 	bl	8008ed4 <pbuf_free>
        return;
 800af2a:	e1fd      	b.n	800b328 <tcp_input+0x7ec>
        continue;
 800af2c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	61fb      	str	r3, [r7, #28]
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1bc      	bne.n	800aeb4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800af3a:	2300      	movs	r3, #0
 800af3c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af3e:	4b2f      	ldr	r3, [pc, #188]	; (800affc <tcp_input+0x4c0>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	617b      	str	r3, [r7, #20]
 800af44:	e02a      	b.n	800af9c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	7a1b      	ldrb	r3, [r3, #8]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00c      	beq.n	800af68 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	7a1a      	ldrb	r2, [r3, #8]
 800af52:	4b22      	ldr	r3, [pc, #136]	; (800afdc <tcp_input+0x4a0>)
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af5a:	3301      	adds	r3, #1
 800af5c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800af5e:	429a      	cmp	r2, r3
 800af60:	d002      	beq.n	800af68 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	61bb      	str	r3, [r7, #24]
        continue;
 800af66:	e016      	b.n	800af96 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	8ada      	ldrh	r2, [r3, #22]
 800af6c:	4b1a      	ldr	r3, [pc, #104]	; (800afd8 <tcp_input+0x49c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	885b      	ldrh	r3, [r3, #2]
 800af72:	b29b      	uxth	r3, r3
 800af74:	429a      	cmp	r2, r3
 800af76:	d10c      	bne.n	800af92 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	4b17      	ldr	r3, [pc, #92]	; (800afdc <tcp_input+0x4a0>)
 800af7e:	695b      	ldr	r3, [r3, #20]
 800af80:	429a      	cmp	r2, r3
 800af82:	d00f      	beq.n	800afa4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00d      	beq.n	800afa6 <tcp_input+0x46a>
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d009      	beq.n	800afa6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	617b      	str	r3, [r7, #20]
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1d1      	bne.n	800af46 <tcp_input+0x40a>
 800afa2:	e000      	b.n	800afa6 <tcp_input+0x46a>
            break;
 800afa4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d029      	beq.n	800b000 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00a      	beq.n	800afc8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	68da      	ldr	r2, [r3, #12]
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800afba:	4b10      	ldr	r3, [pc, #64]	; (800affc <tcp_input+0x4c0>)
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800afc2:	4a0e      	ldr	r2, [pc, #56]	; (800affc <tcp_input+0x4c0>)
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800afc8:	6978      	ldr	r0, [r7, #20]
 800afca:	f000 fa03 	bl	800b3d4 <tcp_listen_input>
      }
      pbuf_free(p);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7fd ff80 	bl	8008ed4 <pbuf_free>
      return;
 800afd4:	e1a8      	b.n	800b328 <tcp_input+0x7ec>
 800afd6:	bf00      	nop
 800afd8:	2000c4bc 	.word	0x2000c4bc
 800afdc:	20008d40 	.word	0x20008d40
 800afe0:	08013aa8 	.word	0x08013aa8
 800afe4:	08013bd4 	.word	0x08013bd4
 800afe8:	08013af4 	.word	0x08013af4
 800afec:	2000c4a0 	.word	0x2000c4a0
 800aff0:	08013c00 	.word	0x08013c00
 800aff4:	2000c4a4 	.word	0x2000c4a4
 800aff8:	08013c2c 	.word	0x08013c2c
 800affc:	2000c49c 	.word	0x2000c49c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	2b00      	cmp	r3, #0
 800b004:	f000 8158 	beq.w	800b2b8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b008:	4b95      	ldr	r3, [pc, #596]	; (800b260 <tcp_input+0x724>)
 800b00a:	2200      	movs	r2, #0
 800b00c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	891a      	ldrh	r2, [r3, #8]
 800b012:	4b93      	ldr	r3, [pc, #588]	; (800b260 <tcp_input+0x724>)
 800b014:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b016:	4a92      	ldr	r2, [pc, #584]	; (800b260 <tcp_input+0x724>)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b01c:	4b91      	ldr	r3, [pc, #580]	; (800b264 <tcp_input+0x728>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a8f      	ldr	r2, [pc, #572]	; (800b260 <tcp_input+0x724>)
 800b022:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b024:	4b90      	ldr	r3, [pc, #576]	; (800b268 <tcp_input+0x72c>)
 800b026:	2200      	movs	r2, #0
 800b028:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b02a:	4b90      	ldr	r3, [pc, #576]	; (800b26c <tcp_input+0x730>)
 800b02c:	2200      	movs	r2, #0
 800b02e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b030:	4b8f      	ldr	r3, [pc, #572]	; (800b270 <tcp_input+0x734>)
 800b032:	2200      	movs	r2, #0
 800b034:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b036:	4b8f      	ldr	r3, [pc, #572]	; (800b274 <tcp_input+0x738>)
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	f003 0308 	and.w	r3, r3, #8
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d006      	beq.n	800b050 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	7b5b      	ldrb	r3, [r3, #13]
 800b046:	f043 0301 	orr.w	r3, r3, #1
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b054:	2b00      	cmp	r3, #0
 800b056:	d017      	beq.n	800b088 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b058:	69f8      	ldr	r0, [r7, #28]
 800b05a:	f7ff f929 	bl	800a2b0 <tcp_process_refused_data>
 800b05e:	4603      	mov	r3, r0
 800b060:	f113 0f0d 	cmn.w	r3, #13
 800b064:	d007      	beq.n	800b076 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00c      	beq.n	800b088 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b06e:	4b82      	ldr	r3, [pc, #520]	; (800b278 <tcp_input+0x73c>)
 800b070:	881b      	ldrh	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d008      	beq.n	800b088 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f040 80e3 	bne.w	800b246 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b080:	69f8      	ldr	r0, [r7, #28]
 800b082:	f003 f9ad 	bl	800e3e0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b086:	e0de      	b.n	800b246 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b088:	4a7c      	ldr	r2, [pc, #496]	; (800b27c <tcp_input+0x740>)
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b08e:	69f8      	ldr	r0, [r7, #28]
 800b090:	f000 fb18 	bl	800b6c4 <tcp_process>
 800b094:	4603      	mov	r3, r0
 800b096:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b098:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b09c:	f113 0f0d 	cmn.w	r3, #13
 800b0a0:	f000 80d3 	beq.w	800b24a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b0a4:	4b71      	ldr	r3, [pc, #452]	; (800b26c <tcp_input+0x730>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	f003 0308 	and.w	r3, r3, #8
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d015      	beq.n	800b0dc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d008      	beq.n	800b0cc <tcp_input+0x590>
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0c0:	69fa      	ldr	r2, [r7, #28]
 800b0c2:	6912      	ldr	r2, [r2, #16]
 800b0c4:	f06f 010d 	mvn.w	r1, #13
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b0cc:	69f9      	ldr	r1, [r7, #28]
 800b0ce:	486c      	ldr	r0, [pc, #432]	; (800b280 <tcp_input+0x744>)
 800b0d0:	f7ff fbbc 	bl	800a84c <tcp_pcb_remove>
        tcp_free(pcb);
 800b0d4:	69f8      	ldr	r0, [r7, #28]
 800b0d6:	f7fe f9a9 	bl	800942c <tcp_free>
 800b0da:	e0da      	b.n	800b292 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b0e0:	4b63      	ldr	r3, [pc, #396]	; (800b270 <tcp_input+0x734>)
 800b0e2:	881b      	ldrh	r3, [r3, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d01d      	beq.n	800b124 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b0e8:	4b61      	ldr	r3, [pc, #388]	; (800b270 <tcp_input+0x734>)
 800b0ea:	881b      	ldrh	r3, [r3, #0]
 800b0ec:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b0ee:	69fb      	ldr	r3, [r7, #28]
 800b0f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00a      	beq.n	800b10e <tcp_input+0x5d2>
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0fe:	69fa      	ldr	r2, [r7, #28]
 800b100:	6910      	ldr	r0, [r2, #16]
 800b102:	89fa      	ldrh	r2, [r7, #14]
 800b104:	69f9      	ldr	r1, [r7, #28]
 800b106:	4798      	blx	r3
 800b108:	4603      	mov	r3, r0
 800b10a:	74fb      	strb	r3, [r7, #19]
 800b10c:	e001      	b.n	800b112 <tcp_input+0x5d6>
 800b10e:	2300      	movs	r3, #0
 800b110:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b112:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b116:	f113 0f0d 	cmn.w	r3, #13
 800b11a:	f000 8098 	beq.w	800b24e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b11e:	4b54      	ldr	r3, [pc, #336]	; (800b270 <tcp_input+0x734>)
 800b120:	2200      	movs	r2, #0
 800b122:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b124:	69f8      	ldr	r0, [r7, #28]
 800b126:	f000 f915 	bl	800b354 <tcp_input_delayed_close>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f040 8090 	bne.w	800b252 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b132:	4b4d      	ldr	r3, [pc, #308]	; (800b268 <tcp_input+0x72c>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d041      	beq.n	800b1be <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d006      	beq.n	800b150 <tcp_input+0x614>
 800b142:	4b50      	ldr	r3, [pc, #320]	; (800b284 <tcp_input+0x748>)
 800b144:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b148:	494f      	ldr	r1, [pc, #316]	; (800b288 <tcp_input+0x74c>)
 800b14a:	4850      	ldr	r0, [pc, #320]	; (800b28c <tcp_input+0x750>)
 800b14c:	f006 fba0 	bl	8011890 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	8b5b      	ldrh	r3, [r3, #26]
 800b154:	f003 0310 	and.w	r3, r3, #16
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d008      	beq.n	800b16e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b15c:	4b42      	ldr	r3, [pc, #264]	; (800b268 <tcp_input+0x72c>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4618      	mov	r0, r3
 800b162:	f7fd feb7 	bl	8008ed4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b166:	69f8      	ldr	r0, [r7, #28]
 800b168:	f7fe fc48 	bl	80099fc <tcp_abort>
            goto aborted;
 800b16c:	e091      	b.n	800b292 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00c      	beq.n	800b192 <tcp_input+0x656>
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	6918      	ldr	r0, [r3, #16]
 800b182:	4b39      	ldr	r3, [pc, #228]	; (800b268 <tcp_input+0x72c>)
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	2300      	movs	r3, #0
 800b188:	69f9      	ldr	r1, [r7, #28]
 800b18a:	47a0      	blx	r4
 800b18c:	4603      	mov	r3, r0
 800b18e:	74fb      	strb	r3, [r7, #19]
 800b190:	e008      	b.n	800b1a4 <tcp_input+0x668>
 800b192:	4b35      	ldr	r3, [pc, #212]	; (800b268 <tcp_input+0x72c>)
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	2300      	movs	r3, #0
 800b198:	69f9      	ldr	r1, [r7, #28]
 800b19a:	2000      	movs	r0, #0
 800b19c:	f7ff f95e 	bl	800a45c <tcp_recv_null>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b1a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b1a8:	f113 0f0d 	cmn.w	r3, #13
 800b1ac:	d053      	beq.n	800b256 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b1ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d003      	beq.n	800b1be <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b1b6:	4b2c      	ldr	r3, [pc, #176]	; (800b268 <tcp_input+0x72c>)
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b1be:	4b2b      	ldr	r3, [pc, #172]	; (800b26c <tcp_input+0x730>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	f003 0320 	and.w	r3, r3, #32
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d030      	beq.n	800b22c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d009      	beq.n	800b1e6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1d6:	7b5a      	ldrb	r2, [r3, #13]
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1dc:	f042 0220 	orr.w	r2, r2, #32
 800b1e0:	b2d2      	uxtb	r2, r2
 800b1e2:	735a      	strb	r2, [r3, #13]
 800b1e4:	e022      	b.n	800b22c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b1ee:	d005      	beq.n	800b1fc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00b      	beq.n	800b21e <tcp_input+0x6e2>
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	6918      	ldr	r0, [r3, #16]
 800b210:	2300      	movs	r3, #0
 800b212:	2200      	movs	r2, #0
 800b214:	69f9      	ldr	r1, [r7, #28]
 800b216:	47a0      	blx	r4
 800b218:	4603      	mov	r3, r0
 800b21a:	74fb      	strb	r3, [r7, #19]
 800b21c:	e001      	b.n	800b222 <tcp_input+0x6e6>
 800b21e:	2300      	movs	r3, #0
 800b220:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b222:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b226:	f113 0f0d 	cmn.w	r3, #13
 800b22a:	d016      	beq.n	800b25a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b22c:	4b13      	ldr	r3, [pc, #76]	; (800b27c <tcp_input+0x740>)
 800b22e:	2200      	movs	r2, #0
 800b230:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b232:	69f8      	ldr	r0, [r7, #28]
 800b234:	f000 f88e 	bl	800b354 <tcp_input_delayed_close>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d128      	bne.n	800b290 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b23e:	69f8      	ldr	r0, [r7, #28]
 800b240:	f002 fac8 	bl	800d7d4 <tcp_output>
 800b244:	e025      	b.n	800b292 <tcp_input+0x756>
        goto aborted;
 800b246:	bf00      	nop
 800b248:	e023      	b.n	800b292 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b24a:	bf00      	nop
 800b24c:	e021      	b.n	800b292 <tcp_input+0x756>
              goto aborted;
 800b24e:	bf00      	nop
 800b250:	e01f      	b.n	800b292 <tcp_input+0x756>
          goto aborted;
 800b252:	bf00      	nop
 800b254:	e01d      	b.n	800b292 <tcp_input+0x756>
            goto aborted;
 800b256:	bf00      	nop
 800b258:	e01b      	b.n	800b292 <tcp_input+0x756>
              goto aborted;
 800b25a:	bf00      	nop
 800b25c:	e019      	b.n	800b292 <tcp_input+0x756>
 800b25e:	bf00      	nop
 800b260:	2000c4ac 	.word	0x2000c4ac
 800b264:	2000c4bc 	.word	0x2000c4bc
 800b268:	2000c4dc 	.word	0x2000c4dc
 800b26c:	2000c4d9 	.word	0x2000c4d9
 800b270:	2000c4d4 	.word	0x2000c4d4
 800b274:	2000c4d8 	.word	0x2000c4d8
 800b278:	2000c4d6 	.word	0x2000c4d6
 800b27c:	2000c4e0 	.word	0x2000c4e0
 800b280:	2000c4a0 	.word	0x2000c4a0
 800b284:	08013aa8 	.word	0x08013aa8
 800b288:	08013c5c 	.word	0x08013c5c
 800b28c:	08013af4 	.word	0x08013af4
          goto aborted;
 800b290:	bf00      	nop
    tcp_input_pcb = NULL;
 800b292:	4b27      	ldr	r3, [pc, #156]	; (800b330 <tcp_input+0x7f4>)
 800b294:	2200      	movs	r2, #0
 800b296:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b298:	4b26      	ldr	r3, [pc, #152]	; (800b334 <tcp_input+0x7f8>)
 800b29a:	2200      	movs	r2, #0
 800b29c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b29e:	4b26      	ldr	r3, [pc, #152]	; (800b338 <tcp_input+0x7fc>)
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d03f      	beq.n	800b326 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b2a6:	4b24      	ldr	r3, [pc, #144]	; (800b338 <tcp_input+0x7fc>)
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7fd fe12 	bl	8008ed4 <pbuf_free>
      inseg.p = NULL;
 800b2b0:	4b21      	ldr	r3, [pc, #132]	; (800b338 <tcp_input+0x7fc>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b2b6:	e036      	b.n	800b326 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b2b8:	4b20      	ldr	r3, [pc, #128]	; (800b33c <tcp_input+0x800>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	899b      	ldrh	r3, [r3, #12]
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fc fa15 	bl	80076f0 <lwip_htons>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	f003 0304 	and.w	r3, r3, #4
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d118      	bne.n	800b304 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2d2:	4b1b      	ldr	r3, [pc, #108]	; (800b340 <tcp_input+0x804>)
 800b2d4:	6819      	ldr	r1, [r3, #0]
 800b2d6:	4b1b      	ldr	r3, [pc, #108]	; (800b344 <tcp_input+0x808>)
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	4b1a      	ldr	r3, [pc, #104]	; (800b348 <tcp_input+0x80c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2e2:	4b16      	ldr	r3, [pc, #88]	; (800b33c <tcp_input+0x800>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2e6:	885b      	ldrh	r3, [r3, #2]
 800b2e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2ea:	4a14      	ldr	r2, [pc, #80]	; (800b33c <tcp_input+0x800>)
 800b2ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2ee:	8812      	ldrh	r2, [r2, #0]
 800b2f0:	b292      	uxth	r2, r2
 800b2f2:	9202      	str	r2, [sp, #8]
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	4b15      	ldr	r3, [pc, #84]	; (800b34c <tcp_input+0x810>)
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	4b15      	ldr	r3, [pc, #84]	; (800b350 <tcp_input+0x814>)
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	2000      	movs	r0, #0
 800b300:	f003 f81c 	bl	800e33c <tcp_rst>
    pbuf_free(p);
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f7fd fde5 	bl	8008ed4 <pbuf_free>
  return;
 800b30a:	e00c      	b.n	800b326 <tcp_input+0x7ea>
    goto dropped;
 800b30c:	bf00      	nop
 800b30e:	e006      	b.n	800b31e <tcp_input+0x7e2>
    goto dropped;
 800b310:	bf00      	nop
 800b312:	e004      	b.n	800b31e <tcp_input+0x7e2>
    goto dropped;
 800b314:	bf00      	nop
 800b316:	e002      	b.n	800b31e <tcp_input+0x7e2>
      goto dropped;
 800b318:	bf00      	nop
 800b31a:	e000      	b.n	800b31e <tcp_input+0x7e2>
      goto dropped;
 800b31c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f7fd fdd8 	bl	8008ed4 <pbuf_free>
 800b324:	e000      	b.n	800b328 <tcp_input+0x7ec>
  return;
 800b326:	bf00      	nop
}
 800b328:	3724      	adds	r7, #36	; 0x24
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd90      	pop	{r4, r7, pc}
 800b32e:	bf00      	nop
 800b330:	2000c4e0 	.word	0x2000c4e0
 800b334:	2000c4dc 	.word	0x2000c4dc
 800b338:	2000c4ac 	.word	0x2000c4ac
 800b33c:	2000c4bc 	.word	0x2000c4bc
 800b340:	2000c4d0 	.word	0x2000c4d0
 800b344:	2000c4d6 	.word	0x2000c4d6
 800b348:	2000c4cc 	.word	0x2000c4cc
 800b34c:	20008d50 	.word	0x20008d50
 800b350:	20008d54 	.word	0x20008d54

0800b354 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d106      	bne.n	800b370 <tcp_input_delayed_close+0x1c>
 800b362:	4b17      	ldr	r3, [pc, #92]	; (800b3c0 <tcp_input_delayed_close+0x6c>)
 800b364:	f240 225a 	movw	r2, #602	; 0x25a
 800b368:	4916      	ldr	r1, [pc, #88]	; (800b3c4 <tcp_input_delayed_close+0x70>)
 800b36a:	4817      	ldr	r0, [pc, #92]	; (800b3c8 <tcp_input_delayed_close+0x74>)
 800b36c:	f006 fa90 	bl	8011890 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b370:	4b16      	ldr	r3, [pc, #88]	; (800b3cc <tcp_input_delayed_close+0x78>)
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	f003 0310 	and.w	r3, r3, #16
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d01c      	beq.n	800b3b6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	8b5b      	ldrh	r3, [r3, #26]
 800b380:	f003 0310 	and.w	r3, r3, #16
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10d      	bne.n	800b3a4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d008      	beq.n	800b3a4 <tcp_input_delayed_close+0x50>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	6912      	ldr	r2, [r2, #16]
 800b39c:	f06f 010e 	mvn.w	r1, #14
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b3a4:	6879      	ldr	r1, [r7, #4]
 800b3a6:	480a      	ldr	r0, [pc, #40]	; (800b3d0 <tcp_input_delayed_close+0x7c>)
 800b3a8:	f7ff fa50 	bl	800a84c <tcp_pcb_remove>
    tcp_free(pcb);
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f7fe f83d 	bl	800942c <tcp_free>
    return 1;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e000      	b.n	800b3b8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	08013aa8 	.word	0x08013aa8
 800b3c4:	08013c78 	.word	0x08013c78
 800b3c8:	08013af4 	.word	0x08013af4
 800b3cc:	2000c4d9 	.word	0x2000c4d9
 800b3d0:	2000c4a0 	.word	0x2000c4a0

0800b3d4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b3d4:	b590      	push	{r4, r7, lr}
 800b3d6:	b08b      	sub	sp, #44	; 0x2c
 800b3d8:	af04      	add	r7, sp, #16
 800b3da:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b3dc:	4b6f      	ldr	r3, [pc, #444]	; (800b59c <tcp_listen_input+0x1c8>)
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	f003 0304 	and.w	r3, r3, #4
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f040 80d2 	bne.w	800b58e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d106      	bne.n	800b3fe <tcp_listen_input+0x2a>
 800b3f0:	4b6b      	ldr	r3, [pc, #428]	; (800b5a0 <tcp_listen_input+0x1cc>)
 800b3f2:	f240 2281 	movw	r2, #641	; 0x281
 800b3f6:	496b      	ldr	r1, [pc, #428]	; (800b5a4 <tcp_listen_input+0x1d0>)
 800b3f8:	486b      	ldr	r0, [pc, #428]	; (800b5a8 <tcp_listen_input+0x1d4>)
 800b3fa:	f006 fa49 	bl	8011890 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b3fe:	4b67      	ldr	r3, [pc, #412]	; (800b59c <tcp_listen_input+0x1c8>)
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	f003 0310 	and.w	r3, r3, #16
 800b406:	2b00      	cmp	r3, #0
 800b408:	d019      	beq.n	800b43e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b40a:	4b68      	ldr	r3, [pc, #416]	; (800b5ac <tcp_listen_input+0x1d8>)
 800b40c:	6819      	ldr	r1, [r3, #0]
 800b40e:	4b68      	ldr	r3, [pc, #416]	; (800b5b0 <tcp_listen_input+0x1dc>)
 800b410:	881b      	ldrh	r3, [r3, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	4b67      	ldr	r3, [pc, #412]	; (800b5b4 <tcp_listen_input+0x1e0>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b41a:	4b67      	ldr	r3, [pc, #412]	; (800b5b8 <tcp_listen_input+0x1e4>)
 800b41c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b41e:	885b      	ldrh	r3, [r3, #2]
 800b420:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b422:	4a65      	ldr	r2, [pc, #404]	; (800b5b8 <tcp_listen_input+0x1e4>)
 800b424:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b426:	8812      	ldrh	r2, [r2, #0]
 800b428:	b292      	uxth	r2, r2
 800b42a:	9202      	str	r2, [sp, #8]
 800b42c:	9301      	str	r3, [sp, #4]
 800b42e:	4b63      	ldr	r3, [pc, #396]	; (800b5bc <tcp_listen_input+0x1e8>)
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	4b63      	ldr	r3, [pc, #396]	; (800b5c0 <tcp_listen_input+0x1ec>)
 800b434:	4602      	mov	r2, r0
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f002 ff80 	bl	800e33c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b43c:	e0a9      	b.n	800b592 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b43e:	4b57      	ldr	r3, [pc, #348]	; (800b59c <tcp_listen_input+0x1c8>)
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	f003 0302 	and.w	r3, r3, #2
 800b446:	2b00      	cmp	r3, #0
 800b448:	f000 80a3 	beq.w	800b592 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	7d5b      	ldrb	r3, [r3, #21]
 800b450:	4618      	mov	r0, r3
 800b452:	f7ff f927 	bl	800a6a4 <tcp_alloc>
 800b456:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d111      	bne.n	800b482 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	699b      	ldr	r3, [r3, #24]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00a      	beq.n	800b47c <tcp_listen_input+0xa8>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	699b      	ldr	r3, [r3, #24]
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	6910      	ldr	r0, [r2, #16]
 800b46e:	f04f 32ff 	mov.w	r2, #4294967295
 800b472:	2100      	movs	r1, #0
 800b474:	4798      	blx	r3
 800b476:	4603      	mov	r3, r0
 800b478:	73bb      	strb	r3, [r7, #14]
      return;
 800b47a:	e08b      	b.n	800b594 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b47c:	23f0      	movs	r3, #240	; 0xf0
 800b47e:	73bb      	strb	r3, [r7, #14]
      return;
 800b480:	e088      	b.n	800b594 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b482:	4b50      	ldr	r3, [pc, #320]	; (800b5c4 <tcp_listen_input+0x1f0>)
 800b484:	695a      	ldr	r2, [r3, #20]
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b48a:	4b4e      	ldr	r3, [pc, #312]	; (800b5c4 <tcp_listen_input+0x1f0>)
 800b48c:	691a      	ldr	r2, [r3, #16]
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	8ada      	ldrh	r2, [r3, #22]
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b49a:	4b47      	ldr	r3, [pc, #284]	; (800b5b8 <tcp_listen_input+0x1e4>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	881b      	ldrh	r3, [r3, #0]
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	2203      	movs	r2, #3
 800b4aa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b4ac:	4b41      	ldr	r3, [pc, #260]	; (800b5b4 <tcp_listen_input+0x1e0>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	1c5a      	adds	r2, r3, #1
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b4be:	6978      	ldr	r0, [r7, #20]
 800b4c0:	f7ff fa58 	bl	800a974 <tcp_next_iss>
 800b4c4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	693a      	ldr	r2, [r7, #16]
 800b4ca:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	693a      	ldr	r2, [r7, #16]
 800b4d6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	693a      	ldr	r2, [r7, #16]
 800b4dc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b4de:	4b35      	ldr	r3, [pc, #212]	; (800b5b4 <tcp_listen_input+0x1e0>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	1e5a      	subs	r2, r3, #1
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	691a      	ldr	r2, [r3, #16]
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	7a5b      	ldrb	r3, [r3, #9]
 800b4fa:	f003 030c 	and.w	r3, r3, #12
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	7a1a      	ldrb	r2, [r3, #8]
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b50c:	4b2e      	ldr	r3, [pc, #184]	; (800b5c8 <tcp_listen_input+0x1f4>)
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	60da      	str	r2, [r3, #12]
 800b514:	4a2c      	ldr	r2, [pc, #176]	; (800b5c8 <tcp_listen_input+0x1f4>)
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	6013      	str	r3, [r2, #0]
 800b51a:	f003 f8d1 	bl	800e6c0 <tcp_timer_needed>
 800b51e:	4b2b      	ldr	r3, [pc, #172]	; (800b5cc <tcp_listen_input+0x1f8>)
 800b520:	2201      	movs	r2, #1
 800b522:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b524:	6978      	ldr	r0, [r7, #20]
 800b526:	f001 fd8f 	bl	800d048 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b52a:	4b23      	ldr	r3, [pc, #140]	; (800b5b8 <tcp_listen_input+0x1e4>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	89db      	ldrh	r3, [r3, #14]
 800b530:	b29a      	uxth	r2, r3
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	3304      	adds	r3, #4
 800b54c:	4618      	mov	r0, r3
 800b54e:	f004 fcc5 	bl	800fedc <ip4_route>
 800b552:	4601      	mov	r1, r0
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	3304      	adds	r3, #4
 800b558:	461a      	mov	r2, r3
 800b55a:	4620      	mov	r0, r4
 800b55c:	f7ff fa30 	bl	800a9c0 <tcp_eff_send_mss_netif>
 800b560:	4603      	mov	r3, r0
 800b562:	461a      	mov	r2, r3
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b568:	2112      	movs	r1, #18
 800b56a:	6978      	ldr	r0, [r7, #20]
 800b56c:	f002 f844 	bl	800d5f8 <tcp_enqueue_flags>
 800b570:	4603      	mov	r3, r0
 800b572:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d004      	beq.n	800b586 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b57c:	2100      	movs	r1, #0
 800b57e:	6978      	ldr	r0, [r7, #20]
 800b580:	f7fe f97e 	bl	8009880 <tcp_abandon>
      return;
 800b584:	e006      	b.n	800b594 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b586:	6978      	ldr	r0, [r7, #20]
 800b588:	f002 f924 	bl	800d7d4 <tcp_output>
  return;
 800b58c:	e001      	b.n	800b592 <tcp_listen_input+0x1be>
    return;
 800b58e:	bf00      	nop
 800b590:	e000      	b.n	800b594 <tcp_listen_input+0x1c0>
  return;
 800b592:	bf00      	nop
}
 800b594:	371c      	adds	r7, #28
 800b596:	46bd      	mov	sp, r7
 800b598:	bd90      	pop	{r4, r7, pc}
 800b59a:	bf00      	nop
 800b59c:	2000c4d8 	.word	0x2000c4d8
 800b5a0:	08013aa8 	.word	0x08013aa8
 800b5a4:	08013ca0 	.word	0x08013ca0
 800b5a8:	08013af4 	.word	0x08013af4
 800b5ac:	2000c4d0 	.word	0x2000c4d0
 800b5b0:	2000c4d6 	.word	0x2000c4d6
 800b5b4:	2000c4cc 	.word	0x2000c4cc
 800b5b8:	2000c4bc 	.word	0x2000c4bc
 800b5bc:	20008d50 	.word	0x20008d50
 800b5c0:	20008d54 	.word	0x20008d54
 800b5c4:	20008d40 	.word	0x20008d40
 800b5c8:	2000c4a0 	.word	0x2000c4a0
 800b5cc:	2000c4a8 	.word	0x2000c4a8

0800b5d0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b086      	sub	sp, #24
 800b5d4:	af04      	add	r7, sp, #16
 800b5d6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b5d8:	4b2f      	ldr	r3, [pc, #188]	; (800b698 <tcp_timewait_input+0xc8>)
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	f003 0304 	and.w	r3, r3, #4
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d153      	bne.n	800b68c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d106      	bne.n	800b5f8 <tcp_timewait_input+0x28>
 800b5ea:	4b2c      	ldr	r3, [pc, #176]	; (800b69c <tcp_timewait_input+0xcc>)
 800b5ec:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b5f0:	492b      	ldr	r1, [pc, #172]	; (800b6a0 <tcp_timewait_input+0xd0>)
 800b5f2:	482c      	ldr	r0, [pc, #176]	; (800b6a4 <tcp_timewait_input+0xd4>)
 800b5f4:	f006 f94c 	bl	8011890 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b5f8:	4b27      	ldr	r3, [pc, #156]	; (800b698 <tcp_timewait_input+0xc8>)
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	f003 0302 	and.w	r3, r3, #2
 800b600:	2b00      	cmp	r3, #0
 800b602:	d02a      	beq.n	800b65a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b604:	4b28      	ldr	r3, [pc, #160]	; (800b6a8 <tcp_timewait_input+0xd8>)
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60c:	1ad3      	subs	r3, r2, r3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	db2d      	blt.n	800b66e <tcp_timewait_input+0x9e>
 800b612:	4b25      	ldr	r3, [pc, #148]	; (800b6a8 <tcp_timewait_input+0xd8>)
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61a:	6879      	ldr	r1, [r7, #4]
 800b61c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b61e:	440b      	add	r3, r1
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	2b00      	cmp	r3, #0
 800b624:	dc23      	bgt.n	800b66e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b626:	4b21      	ldr	r3, [pc, #132]	; (800b6ac <tcp_timewait_input+0xdc>)
 800b628:	6819      	ldr	r1, [r3, #0]
 800b62a:	4b21      	ldr	r3, [pc, #132]	; (800b6b0 <tcp_timewait_input+0xe0>)
 800b62c:	881b      	ldrh	r3, [r3, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	4b1d      	ldr	r3, [pc, #116]	; (800b6a8 <tcp_timewait_input+0xd8>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b636:	4b1f      	ldr	r3, [pc, #124]	; (800b6b4 <tcp_timewait_input+0xe4>)
 800b638:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b63a:	885b      	ldrh	r3, [r3, #2]
 800b63c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b63e:	4a1d      	ldr	r2, [pc, #116]	; (800b6b4 <tcp_timewait_input+0xe4>)
 800b640:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b642:	8812      	ldrh	r2, [r2, #0]
 800b644:	b292      	uxth	r2, r2
 800b646:	9202      	str	r2, [sp, #8]
 800b648:	9301      	str	r3, [sp, #4]
 800b64a:	4b1b      	ldr	r3, [pc, #108]	; (800b6b8 <tcp_timewait_input+0xe8>)
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	4b1b      	ldr	r3, [pc, #108]	; (800b6bc <tcp_timewait_input+0xec>)
 800b650:	4602      	mov	r2, r0
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f002 fe72 	bl	800e33c <tcp_rst>
      return;
 800b658:	e01b      	b.n	800b692 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b65a:	4b0f      	ldr	r3, [pc, #60]	; (800b698 <tcp_timewait_input+0xc8>)
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	f003 0301 	and.w	r3, r3, #1
 800b662:	2b00      	cmp	r3, #0
 800b664:	d003      	beq.n	800b66e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b666:	4b16      	ldr	r3, [pc, #88]	; (800b6c0 <tcp_timewait_input+0xf0>)
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b66e:	4b10      	ldr	r3, [pc, #64]	; (800b6b0 <tcp_timewait_input+0xe0>)
 800b670:	881b      	ldrh	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00c      	beq.n	800b690 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	8b5b      	ldrh	r3, [r3, #26]
 800b67a:	f043 0302 	orr.w	r3, r3, #2
 800b67e:	b29a      	uxth	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f002 f8a5 	bl	800d7d4 <tcp_output>
  }
  return;
 800b68a:	e001      	b.n	800b690 <tcp_timewait_input+0xc0>
    return;
 800b68c:	bf00      	nop
 800b68e:	e000      	b.n	800b692 <tcp_timewait_input+0xc2>
  return;
 800b690:	bf00      	nop
}
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	2000c4d8 	.word	0x2000c4d8
 800b69c:	08013aa8 	.word	0x08013aa8
 800b6a0:	08013cc0 	.word	0x08013cc0
 800b6a4:	08013af4 	.word	0x08013af4
 800b6a8:	2000c4cc 	.word	0x2000c4cc
 800b6ac:	2000c4d0 	.word	0x2000c4d0
 800b6b0:	2000c4d6 	.word	0x2000c4d6
 800b6b4:	2000c4bc 	.word	0x2000c4bc
 800b6b8:	20008d50 	.word	0x20008d50
 800b6bc:	20008d54 	.word	0x20008d54
 800b6c0:	2000c494 	.word	0x2000c494

0800b6c4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b6c4:	b590      	push	{r4, r7, lr}
 800b6c6:	b08d      	sub	sp, #52	; 0x34
 800b6c8:	af04      	add	r7, sp, #16
 800b6ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d106      	bne.n	800b6e8 <tcp_process+0x24>
 800b6da:	4b9d      	ldr	r3, [pc, #628]	; (800b950 <tcp_process+0x28c>)
 800b6dc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b6e0:	499c      	ldr	r1, [pc, #624]	; (800b954 <tcp_process+0x290>)
 800b6e2:	489d      	ldr	r0, [pc, #628]	; (800b958 <tcp_process+0x294>)
 800b6e4:	f006 f8d4 	bl	8011890 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b6e8:	4b9c      	ldr	r3, [pc, #624]	; (800b95c <tcp_process+0x298>)
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	f003 0304 	and.w	r3, r3, #4
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d04e      	beq.n	800b792 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	7d1b      	ldrb	r3, [r3, #20]
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d108      	bne.n	800b70e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b700:	4b97      	ldr	r3, [pc, #604]	; (800b960 <tcp_process+0x29c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	429a      	cmp	r2, r3
 800b706:	d123      	bne.n	800b750 <tcp_process+0x8c>
        acceptable = 1;
 800b708:	2301      	movs	r3, #1
 800b70a:	76fb      	strb	r3, [r7, #27]
 800b70c:	e020      	b.n	800b750 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b712:	4b94      	ldr	r3, [pc, #592]	; (800b964 <tcp_process+0x2a0>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	429a      	cmp	r2, r3
 800b718:	d102      	bne.n	800b720 <tcp_process+0x5c>
        acceptable = 1;
 800b71a:	2301      	movs	r3, #1
 800b71c:	76fb      	strb	r3, [r7, #27]
 800b71e:	e017      	b.n	800b750 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b720:	4b90      	ldr	r3, [pc, #576]	; (800b964 <tcp_process+0x2a0>)
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	db10      	blt.n	800b750 <tcp_process+0x8c>
 800b72e:	4b8d      	ldr	r3, [pc, #564]	; (800b964 <tcp_process+0x2a0>)
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b736:	6879      	ldr	r1, [r7, #4]
 800b738:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b73a:	440b      	add	r3, r1
 800b73c:	1ad3      	subs	r3, r2, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	dc06      	bgt.n	800b750 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	8b5b      	ldrh	r3, [r3, #26]
 800b746:	f043 0302 	orr.w	r3, r3, #2
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b750:	7efb      	ldrb	r3, [r7, #27]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d01b      	beq.n	800b78e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	7d1b      	ldrb	r3, [r3, #20]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d106      	bne.n	800b76c <tcp_process+0xa8>
 800b75e:	4b7c      	ldr	r3, [pc, #496]	; (800b950 <tcp_process+0x28c>)
 800b760:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b764:	4980      	ldr	r1, [pc, #512]	; (800b968 <tcp_process+0x2a4>)
 800b766:	487c      	ldr	r0, [pc, #496]	; (800b958 <tcp_process+0x294>)
 800b768:	f006 f892 	bl	8011890 <iprintf>
      recv_flags |= TF_RESET;
 800b76c:	4b7f      	ldr	r3, [pc, #508]	; (800b96c <tcp_process+0x2a8>)
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	f043 0308 	orr.w	r3, r3, #8
 800b774:	b2da      	uxtb	r2, r3
 800b776:	4b7d      	ldr	r3, [pc, #500]	; (800b96c <tcp_process+0x2a8>)
 800b778:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	8b5b      	ldrh	r3, [r3, #26]
 800b77e:	f023 0301 	bic.w	r3, r3, #1
 800b782:	b29a      	uxth	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b788:	f06f 030d 	mvn.w	r3, #13
 800b78c:	e37a      	b.n	800be84 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	e378      	b.n	800be84 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b792:	4b72      	ldr	r3, [pc, #456]	; (800b95c <tcp_process+0x298>)
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	f003 0302 	and.w	r3, r3, #2
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d010      	beq.n	800b7c0 <tcp_process+0xfc>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	7d1b      	ldrb	r3, [r3, #20]
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d00c      	beq.n	800b7c0 <tcp_process+0xfc>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	7d1b      	ldrb	r3, [r3, #20]
 800b7aa:	2b03      	cmp	r3, #3
 800b7ac:	d008      	beq.n	800b7c0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	8b5b      	ldrh	r3, [r3, #26]
 800b7b2:	f043 0302 	orr.w	r3, r3, #2
 800b7b6:	b29a      	uxth	r2, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	e361      	b.n	800be84 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	8b5b      	ldrh	r3, [r3, #26]
 800b7c4:	f003 0310 	and.w	r3, r3, #16
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d103      	bne.n	800b7d4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b7cc:	4b68      	ldr	r3, [pc, #416]	; (800b970 <tcp_process+0x2ac>)
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f001 fc2f 	bl	800d048 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	7d1b      	ldrb	r3, [r3, #20]
 800b7ee:	3b02      	subs	r3, #2
 800b7f0:	2b07      	cmp	r3, #7
 800b7f2:	f200 8337 	bhi.w	800be64 <tcp_process+0x7a0>
 800b7f6:	a201      	add	r2, pc, #4	; (adr r2, 800b7fc <tcp_process+0x138>)
 800b7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7fc:	0800b81d 	.word	0x0800b81d
 800b800:	0800ba4d 	.word	0x0800ba4d
 800b804:	0800bbc5 	.word	0x0800bbc5
 800b808:	0800bbef 	.word	0x0800bbef
 800b80c:	0800bd13 	.word	0x0800bd13
 800b810:	0800bbc5 	.word	0x0800bbc5
 800b814:	0800bd9f 	.word	0x0800bd9f
 800b818:	0800be2f 	.word	0x0800be2f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b81c:	4b4f      	ldr	r3, [pc, #316]	; (800b95c <tcp_process+0x298>)
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	f003 0310 	and.w	r3, r3, #16
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 80e4 	beq.w	800b9f2 <tcp_process+0x32e>
 800b82a:	4b4c      	ldr	r3, [pc, #304]	; (800b95c <tcp_process+0x298>)
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	f003 0302 	and.w	r3, r3, #2
 800b832:	2b00      	cmp	r3, #0
 800b834:	f000 80dd 	beq.w	800b9f2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	4b48      	ldr	r3, [pc, #288]	; (800b960 <tcp_process+0x29c>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	429a      	cmp	r2, r3
 800b844:	f040 80d5 	bne.w	800b9f2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b848:	4b46      	ldr	r3, [pc, #280]	; (800b964 <tcp_process+0x2a0>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	1c5a      	adds	r2, r3, #1
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b85a:	4b41      	ldr	r3, [pc, #260]	; (800b960 <tcp_process+0x29c>)
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b862:	4b44      	ldr	r3, [pc, #272]	; (800b974 <tcp_process+0x2b0>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	89db      	ldrh	r3, [r3, #14]
 800b868:	b29a      	uxth	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b87c:	4b39      	ldr	r3, [pc, #228]	; (800b964 <tcp_process+0x2a0>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	1e5a      	subs	r2, r3, #1
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2204      	movs	r2, #4
 800b88a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	3304      	adds	r3, #4
 800b894:	4618      	mov	r0, r3
 800b896:	f004 fb21 	bl	800fedc <ip4_route>
 800b89a:	4601      	mov	r1, r0
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f7ff f88c 	bl	800a9c0 <tcp_eff_send_mss_netif>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8b4:	009a      	lsls	r2, r3, #2
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8ba:	005b      	lsls	r3, r3, #1
 800b8bc:	f241 111c 	movw	r1, #4380	; 0x111c
 800b8c0:	428b      	cmp	r3, r1
 800b8c2:	bf38      	it	cc
 800b8c4:	460b      	movcc	r3, r1
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d204      	bcs.n	800b8d4 <tcp_process+0x210>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	e00d      	b.n	800b8f0 <tcp_process+0x22c>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	f241 121c 	movw	r2, #4380	; 0x111c
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d904      	bls.n	800b8ec <tcp_process+0x228>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8e6:	005b      	lsls	r3, r3, #1
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	e001      	b.n	800b8f0 <tcp_process+0x22c>
 800b8ec:	f241 131c 	movw	r3, #4380	; 0x111c
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d106      	bne.n	800b90e <tcp_process+0x24a>
 800b900:	4b13      	ldr	r3, [pc, #76]	; (800b950 <tcp_process+0x28c>)
 800b902:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b906:	491c      	ldr	r1, [pc, #112]	; (800b978 <tcp_process+0x2b4>)
 800b908:	4813      	ldr	r0, [pc, #76]	; (800b958 <tcp_process+0x294>)
 800b90a:	f005 ffc1 	bl	8011890 <iprintf>
        --pcb->snd_queuelen;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b914:	3b01      	subs	r3, #1
 800b916:	b29a      	uxth	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b922:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d12a      	bne.n	800b980 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b92e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d106      	bne.n	800b944 <tcp_process+0x280>
 800b936:	4b06      	ldr	r3, [pc, #24]	; (800b950 <tcp_process+0x28c>)
 800b938:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b93c:	490f      	ldr	r1, [pc, #60]	; (800b97c <tcp_process+0x2b8>)
 800b93e:	4806      	ldr	r0, [pc, #24]	; (800b958 <tcp_process+0x294>)
 800b940:	f005 ffa6 	bl	8011890 <iprintf>
          pcb->unsent = rseg->next;
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	66da      	str	r2, [r3, #108]	; 0x6c
 800b94c:	e01c      	b.n	800b988 <tcp_process+0x2c4>
 800b94e:	bf00      	nop
 800b950:	08013aa8 	.word	0x08013aa8
 800b954:	08013ce0 	.word	0x08013ce0
 800b958:	08013af4 	.word	0x08013af4
 800b95c:	2000c4d8 	.word	0x2000c4d8
 800b960:	2000c4d0 	.word	0x2000c4d0
 800b964:	2000c4cc 	.word	0x2000c4cc
 800b968:	08013cfc 	.word	0x08013cfc
 800b96c:	2000c4d9 	.word	0x2000c4d9
 800b970:	2000c494 	.word	0x2000c494
 800b974:	2000c4bc 	.word	0x2000c4bc
 800b978:	08013d1c 	.word	0x08013d1c
 800b97c:	08013d34 	.word	0x08013d34
        } else {
          pcb->unacked = rseg->next;
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b988:	69f8      	ldr	r0, [r7, #28]
 800b98a:	f7fe fd22 	bl	800a3d2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b992:	2b00      	cmp	r3, #0
 800b994:	d104      	bne.n	800b9a0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b99c:	861a      	strh	r2, [r3, #48]	; 0x30
 800b99e:	e006      	b.n	800b9ae <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00a      	beq.n	800b9ce <tcp_process+0x30a>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	6910      	ldr	r0, [r2, #16]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	6879      	ldr	r1, [r7, #4]
 800b9c6:	4798      	blx	r3
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	76bb      	strb	r3, [r7, #26]
 800b9cc:	e001      	b.n	800b9d2 <tcp_process+0x30e>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b9d2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b9d6:	f113 0f0d 	cmn.w	r3, #13
 800b9da:	d102      	bne.n	800b9e2 <tcp_process+0x31e>
          return ERR_ABRT;
 800b9dc:	f06f 030c 	mvn.w	r3, #12
 800b9e0:	e250      	b.n	800be84 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	8b5b      	ldrh	r3, [r3, #26]
 800b9e6:	f043 0302 	orr.w	r3, r3, #2
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b9f0:	e23a      	b.n	800be68 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b9f2:	4b98      	ldr	r3, [pc, #608]	; (800bc54 <tcp_process+0x590>)
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	f003 0310 	and.w	r3, r3, #16
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f000 8234 	beq.w	800be68 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba00:	4b95      	ldr	r3, [pc, #596]	; (800bc58 <tcp_process+0x594>)
 800ba02:	6819      	ldr	r1, [r3, #0]
 800ba04:	4b95      	ldr	r3, [pc, #596]	; (800bc5c <tcp_process+0x598>)
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	461a      	mov	r2, r3
 800ba0a:	4b95      	ldr	r3, [pc, #596]	; (800bc60 <tcp_process+0x59c>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba10:	4b94      	ldr	r3, [pc, #592]	; (800bc64 <tcp_process+0x5a0>)
 800ba12:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba14:	885b      	ldrh	r3, [r3, #2]
 800ba16:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba18:	4a92      	ldr	r2, [pc, #584]	; (800bc64 <tcp_process+0x5a0>)
 800ba1a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba1c:	8812      	ldrh	r2, [r2, #0]
 800ba1e:	b292      	uxth	r2, r2
 800ba20:	9202      	str	r2, [sp, #8]
 800ba22:	9301      	str	r3, [sp, #4]
 800ba24:	4b90      	ldr	r3, [pc, #576]	; (800bc68 <tcp_process+0x5a4>)
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	4b90      	ldr	r3, [pc, #576]	; (800bc6c <tcp_process+0x5a8>)
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f002 fc85 	bl	800e33c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ba38:	2b05      	cmp	r3, #5
 800ba3a:	f200 8215 	bhi.w	800be68 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f002 fa4f 	bl	800dee8 <tcp_rexmit_rto>
      break;
 800ba4a:	e20d      	b.n	800be68 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ba4c:	4b81      	ldr	r3, [pc, #516]	; (800bc54 <tcp_process+0x590>)
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	f003 0310 	and.w	r3, r3, #16
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f000 80a1 	beq.w	800bb9c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ba5a:	4b7f      	ldr	r3, [pc, #508]	; (800bc58 <tcp_process+0x594>)
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	3b01      	subs	r3, #1
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	db7e      	blt.n	800bb68 <tcp_process+0x4a4>
 800ba6a:	4b7b      	ldr	r3, [pc, #492]	; (800bc58 <tcp_process+0x594>)
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	dc77      	bgt.n	800bb68 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2204      	movs	r2, #4
 800ba7c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d102      	bne.n	800ba8c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ba86:	23fa      	movs	r3, #250	; 0xfa
 800ba88:	76bb      	strb	r3, [r7, #26]
 800ba8a:	e01d      	b.n	800bac8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba90:	699b      	ldr	r3, [r3, #24]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d106      	bne.n	800baa4 <tcp_process+0x3e0>
 800ba96:	4b76      	ldr	r3, [pc, #472]	; (800bc70 <tcp_process+0x5ac>)
 800ba98:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ba9c:	4975      	ldr	r1, [pc, #468]	; (800bc74 <tcp_process+0x5b0>)
 800ba9e:	4876      	ldr	r0, [pc, #472]	; (800bc78 <tcp_process+0x5b4>)
 800baa0:	f005 fef6 	bl	8011890 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baa8:	699b      	ldr	r3, [r3, #24]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00a      	beq.n	800bac4 <tcp_process+0x400>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bab2:	699b      	ldr	r3, [r3, #24]
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	6910      	ldr	r0, [r2, #16]
 800bab8:	2200      	movs	r2, #0
 800baba:	6879      	ldr	r1, [r7, #4]
 800babc:	4798      	blx	r3
 800babe:	4603      	mov	r3, r0
 800bac0:	76bb      	strb	r3, [r7, #26]
 800bac2:	e001      	b.n	800bac8 <tcp_process+0x404>
 800bac4:	23f0      	movs	r3, #240	; 0xf0
 800bac6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bac8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00a      	beq.n	800bae6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800bad0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bad4:	f113 0f0d 	cmn.w	r3, #13
 800bad8:	d002      	beq.n	800bae0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f7fd ff8e 	bl	80099fc <tcp_abort>
            }
            return ERR_ABRT;
 800bae0:	f06f 030c 	mvn.w	r3, #12
 800bae4:	e1ce      	b.n	800be84 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fae0 	bl	800c0ac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800baec:	4b63      	ldr	r3, [pc, #396]	; (800bc7c <tcp_process+0x5b8>)
 800baee:	881b      	ldrh	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d005      	beq.n	800bb00 <tcp_process+0x43c>
            recv_acked--;
 800baf4:	4b61      	ldr	r3, [pc, #388]	; (800bc7c <tcp_process+0x5b8>)
 800baf6:	881b      	ldrh	r3, [r3, #0]
 800baf8:	3b01      	subs	r3, #1
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	4b5f      	ldr	r3, [pc, #380]	; (800bc7c <tcp_process+0x5b8>)
 800bafe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb04:	009a      	lsls	r2, r3, #2
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb0a:	005b      	lsls	r3, r3, #1
 800bb0c:	f241 111c 	movw	r1, #4380	; 0x111c
 800bb10:	428b      	cmp	r3, r1
 800bb12:	bf38      	it	cc
 800bb14:	460b      	movcc	r3, r1
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d204      	bcs.n	800bb24 <tcp_process+0x460>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	e00d      	b.n	800bb40 <tcp_process+0x47c>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb28:	005b      	lsls	r3, r3, #1
 800bb2a:	f241 121c 	movw	r2, #4380	; 0x111c
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d904      	bls.n	800bb3c <tcp_process+0x478>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb36:	005b      	lsls	r3, r3, #1
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	e001      	b.n	800bb40 <tcp_process+0x47c>
 800bb3c:	f241 131c 	movw	r3, #4380	; 0x111c
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800bb46:	4b4e      	ldr	r3, [pc, #312]	; (800bc80 <tcp_process+0x5bc>)
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	f003 0320 	and.w	r3, r3, #32
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d037      	beq.n	800bbc2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	8b5b      	ldrh	r3, [r3, #26]
 800bb56:	f043 0302 	orr.w	r3, r3, #2
 800bb5a:	b29a      	uxth	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2207      	movs	r2, #7
 800bb64:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800bb66:	e02c      	b.n	800bbc2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb68:	4b3b      	ldr	r3, [pc, #236]	; (800bc58 <tcp_process+0x594>)
 800bb6a:	6819      	ldr	r1, [r3, #0]
 800bb6c:	4b3b      	ldr	r3, [pc, #236]	; (800bc5c <tcp_process+0x598>)
 800bb6e:	881b      	ldrh	r3, [r3, #0]
 800bb70:	461a      	mov	r2, r3
 800bb72:	4b3b      	ldr	r3, [pc, #236]	; (800bc60 <tcp_process+0x59c>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb78:	4b3a      	ldr	r3, [pc, #232]	; (800bc64 <tcp_process+0x5a0>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb7c:	885b      	ldrh	r3, [r3, #2]
 800bb7e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb80:	4a38      	ldr	r2, [pc, #224]	; (800bc64 <tcp_process+0x5a0>)
 800bb82:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb84:	8812      	ldrh	r2, [r2, #0]
 800bb86:	b292      	uxth	r2, r2
 800bb88:	9202      	str	r2, [sp, #8]
 800bb8a:	9301      	str	r3, [sp, #4]
 800bb8c:	4b36      	ldr	r3, [pc, #216]	; (800bc68 <tcp_process+0x5a4>)
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	4b36      	ldr	r3, [pc, #216]	; (800bc6c <tcp_process+0x5a8>)
 800bb92:	4602      	mov	r2, r0
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f002 fbd1 	bl	800e33c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800bb9a:	e167      	b.n	800be6c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800bb9c:	4b2d      	ldr	r3, [pc, #180]	; (800bc54 <tcp_process+0x590>)
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	f003 0302 	and.w	r3, r3, #2
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 8161 	beq.w	800be6c <tcp_process+0x7a8>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbae:	1e5a      	subs	r2, r3, #1
 800bbb0:	4b2b      	ldr	r3, [pc, #172]	; (800bc60 <tcp_process+0x59c>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	f040 8159 	bne.w	800be6c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f002 f9b6 	bl	800df2c <tcp_rexmit>
      break;
 800bbc0:	e154      	b.n	800be6c <tcp_process+0x7a8>
 800bbc2:	e153      	b.n	800be6c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 fa71 	bl	800c0ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800bbca:	4b2d      	ldr	r3, [pc, #180]	; (800bc80 <tcp_process+0x5bc>)
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	f003 0320 	and.w	r3, r3, #32
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f000 814c 	beq.w	800be70 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	8b5b      	ldrh	r3, [r3, #26]
 800bbdc:	f043 0302 	orr.w	r3, r3, #2
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2207      	movs	r2, #7
 800bbea:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bbec:	e140      	b.n	800be70 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fa5c 	bl	800c0ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bbf4:	4b22      	ldr	r3, [pc, #136]	; (800bc80 <tcp_process+0x5bc>)
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	f003 0320 	and.w	r3, r3, #32
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d071      	beq.n	800bce4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bc00:	4b14      	ldr	r3, [pc, #80]	; (800bc54 <tcp_process+0x590>)
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	f003 0310 	and.w	r3, r3, #16
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d060      	beq.n	800bcce <tcp_process+0x60a>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc10:	4b11      	ldr	r3, [pc, #68]	; (800bc58 <tcp_process+0x594>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d15a      	bne.n	800bcce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d156      	bne.n	800bcce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	8b5b      	ldrh	r3, [r3, #26]
 800bc24:	f043 0302 	orr.w	r3, r3, #2
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f7fe fdbc 	bl	800a7ac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800bc34:	4b13      	ldr	r3, [pc, #76]	; (800bc84 <tcp_process+0x5c0>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d105      	bne.n	800bc4a <tcp_process+0x586>
 800bc3e:	4b11      	ldr	r3, [pc, #68]	; (800bc84 <tcp_process+0x5c0>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	4a0f      	ldr	r2, [pc, #60]	; (800bc84 <tcp_process+0x5c0>)
 800bc46:	6013      	str	r3, [r2, #0]
 800bc48:	e02e      	b.n	800bca8 <tcp_process+0x5e4>
 800bc4a:	4b0e      	ldr	r3, [pc, #56]	; (800bc84 <tcp_process+0x5c0>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	617b      	str	r3, [r7, #20]
 800bc50:	e027      	b.n	800bca2 <tcp_process+0x5de>
 800bc52:	bf00      	nop
 800bc54:	2000c4d8 	.word	0x2000c4d8
 800bc58:	2000c4d0 	.word	0x2000c4d0
 800bc5c:	2000c4d6 	.word	0x2000c4d6
 800bc60:	2000c4cc 	.word	0x2000c4cc
 800bc64:	2000c4bc 	.word	0x2000c4bc
 800bc68:	20008d50 	.word	0x20008d50
 800bc6c:	20008d54 	.word	0x20008d54
 800bc70:	08013aa8 	.word	0x08013aa8
 800bc74:	08013d48 	.word	0x08013d48
 800bc78:	08013af4 	.word	0x08013af4
 800bc7c:	2000c4d4 	.word	0x2000c4d4
 800bc80:	2000c4d9 	.word	0x2000c4d9
 800bc84:	2000c4a0 	.word	0x2000c4a0
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d104      	bne.n	800bc9c <tcp_process+0x5d8>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	68da      	ldr	r2, [r3, #12]
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	60da      	str	r2, [r3, #12]
 800bc9a:	e005      	b.n	800bca8 <tcp_process+0x5e4>
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	617b      	str	r3, [r7, #20]
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1ef      	bne.n	800bc88 <tcp_process+0x5c4>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	60da      	str	r2, [r3, #12]
 800bcae:	4b77      	ldr	r3, [pc, #476]	; (800be8c <tcp_process+0x7c8>)
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	220a      	movs	r2, #10
 800bcb8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800bcba:	4b75      	ldr	r3, [pc, #468]	; (800be90 <tcp_process+0x7cc>)
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	60da      	str	r2, [r3, #12]
 800bcc2:	4a73      	ldr	r2, [pc, #460]	; (800be90 <tcp_process+0x7cc>)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6013      	str	r3, [r2, #0]
 800bcc8:	f002 fcfa 	bl	800e6c0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800bccc:	e0d2      	b.n	800be74 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	8b5b      	ldrh	r3, [r3, #26]
 800bcd2:	f043 0302 	orr.w	r3, r3, #2
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2208      	movs	r2, #8
 800bce0:	751a      	strb	r2, [r3, #20]
      break;
 800bce2:	e0c7      	b.n	800be74 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bce4:	4b6b      	ldr	r3, [pc, #428]	; (800be94 <tcp_process+0x7d0>)
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	f003 0310 	and.w	r3, r3, #16
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f000 80c1 	beq.w	800be74 <tcp_process+0x7b0>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bcf6:	4b68      	ldr	r3, [pc, #416]	; (800be98 <tcp_process+0x7d4>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	f040 80ba 	bne.w	800be74 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	f040 80b5 	bne.w	800be74 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2206      	movs	r2, #6
 800bd0e:	751a      	strb	r2, [r3, #20]
      break;
 800bd10:	e0b0      	b.n	800be74 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 f9ca 	bl	800c0ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bd18:	4b60      	ldr	r3, [pc, #384]	; (800be9c <tcp_process+0x7d8>)
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	f003 0320 	and.w	r3, r3, #32
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f000 80a9 	beq.w	800be78 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	8b5b      	ldrh	r3, [r3, #26]
 800bd2a:	f043 0302 	orr.w	r3, r3, #2
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7fe fd39 	bl	800a7ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bd3a:	4b59      	ldr	r3, [pc, #356]	; (800bea0 <tcp_process+0x7dc>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d105      	bne.n	800bd50 <tcp_process+0x68c>
 800bd44:	4b56      	ldr	r3, [pc, #344]	; (800bea0 <tcp_process+0x7dc>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	4a55      	ldr	r2, [pc, #340]	; (800bea0 <tcp_process+0x7dc>)
 800bd4c:	6013      	str	r3, [r2, #0]
 800bd4e:	e013      	b.n	800bd78 <tcp_process+0x6b4>
 800bd50:	4b53      	ldr	r3, [pc, #332]	; (800bea0 <tcp_process+0x7dc>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	613b      	str	r3, [r7, #16]
 800bd56:	e00c      	b.n	800bd72 <tcp_process+0x6ae>
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d104      	bne.n	800bd6c <tcp_process+0x6a8>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	68da      	ldr	r2, [r3, #12]
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	60da      	str	r2, [r3, #12]
 800bd6a:	e005      	b.n	800bd78 <tcp_process+0x6b4>
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	613b      	str	r3, [r7, #16]
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1ef      	bne.n	800bd58 <tcp_process+0x694>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	60da      	str	r2, [r3, #12]
 800bd7e:	4b43      	ldr	r3, [pc, #268]	; (800be8c <tcp_process+0x7c8>)
 800bd80:	2201      	movs	r2, #1
 800bd82:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	220a      	movs	r2, #10
 800bd88:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bd8a:	4b41      	ldr	r3, [pc, #260]	; (800be90 <tcp_process+0x7cc>)
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	60da      	str	r2, [r3, #12]
 800bd92:	4a3f      	ldr	r2, [pc, #252]	; (800be90 <tcp_process+0x7cc>)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	f002 fc92 	bl	800e6c0 <tcp_timer_needed>
      }
      break;
 800bd9c:	e06c      	b.n	800be78 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 f984 	bl	800c0ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bda4:	4b3b      	ldr	r3, [pc, #236]	; (800be94 <tcp_process+0x7d0>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	f003 0310 	and.w	r3, r3, #16
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d065      	beq.n	800be7c <tcp_process+0x7b8>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bdb4:	4b38      	ldr	r3, [pc, #224]	; (800be98 <tcp_process+0x7d4>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d15f      	bne.n	800be7c <tcp_process+0x7b8>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d15b      	bne.n	800be7c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7fe fcf1 	bl	800a7ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bdca:	4b35      	ldr	r3, [pc, #212]	; (800bea0 <tcp_process+0x7dc>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d105      	bne.n	800bde0 <tcp_process+0x71c>
 800bdd4:	4b32      	ldr	r3, [pc, #200]	; (800bea0 <tcp_process+0x7dc>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	4a31      	ldr	r2, [pc, #196]	; (800bea0 <tcp_process+0x7dc>)
 800bddc:	6013      	str	r3, [r2, #0]
 800bdde:	e013      	b.n	800be08 <tcp_process+0x744>
 800bde0:	4b2f      	ldr	r3, [pc, #188]	; (800bea0 <tcp_process+0x7dc>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	60fb      	str	r3, [r7, #12]
 800bde6:	e00c      	b.n	800be02 <tcp_process+0x73e>
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d104      	bne.n	800bdfc <tcp_process+0x738>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	68da      	ldr	r2, [r3, #12]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	60da      	str	r2, [r3, #12]
 800bdfa:	e005      	b.n	800be08 <tcp_process+0x744>
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	60fb      	str	r3, [r7, #12]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1ef      	bne.n	800bde8 <tcp_process+0x724>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	60da      	str	r2, [r3, #12]
 800be0e:	4b1f      	ldr	r3, [pc, #124]	; (800be8c <tcp_process+0x7c8>)
 800be10:	2201      	movs	r2, #1
 800be12:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	220a      	movs	r2, #10
 800be18:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800be1a:	4b1d      	ldr	r3, [pc, #116]	; (800be90 <tcp_process+0x7cc>)
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	60da      	str	r2, [r3, #12]
 800be22:	4a1b      	ldr	r2, [pc, #108]	; (800be90 <tcp_process+0x7cc>)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6013      	str	r3, [r2, #0]
 800be28:	f002 fc4a 	bl	800e6c0 <tcp_timer_needed>
      }
      break;
 800be2c:	e026      	b.n	800be7c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 f93c 	bl	800c0ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800be34:	4b17      	ldr	r3, [pc, #92]	; (800be94 <tcp_process+0x7d0>)
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	f003 0310 	and.w	r3, r3, #16
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d01f      	beq.n	800be80 <tcp_process+0x7bc>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be44:	4b14      	ldr	r3, [pc, #80]	; (800be98 <tcp_process+0x7d4>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d119      	bne.n	800be80 <tcp_process+0x7bc>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be50:	2b00      	cmp	r3, #0
 800be52:	d115      	bne.n	800be80 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800be54:	4b11      	ldr	r3, [pc, #68]	; (800be9c <tcp_process+0x7d8>)
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	f043 0310 	orr.w	r3, r3, #16
 800be5c:	b2da      	uxtb	r2, r3
 800be5e:	4b0f      	ldr	r3, [pc, #60]	; (800be9c <tcp_process+0x7d8>)
 800be60:	701a      	strb	r2, [r3, #0]
      }
      break;
 800be62:	e00d      	b.n	800be80 <tcp_process+0x7bc>
    default:
      break;
 800be64:	bf00      	nop
 800be66:	e00c      	b.n	800be82 <tcp_process+0x7be>
      break;
 800be68:	bf00      	nop
 800be6a:	e00a      	b.n	800be82 <tcp_process+0x7be>
      break;
 800be6c:	bf00      	nop
 800be6e:	e008      	b.n	800be82 <tcp_process+0x7be>
      break;
 800be70:	bf00      	nop
 800be72:	e006      	b.n	800be82 <tcp_process+0x7be>
      break;
 800be74:	bf00      	nop
 800be76:	e004      	b.n	800be82 <tcp_process+0x7be>
      break;
 800be78:	bf00      	nop
 800be7a:	e002      	b.n	800be82 <tcp_process+0x7be>
      break;
 800be7c:	bf00      	nop
 800be7e:	e000      	b.n	800be82 <tcp_process+0x7be>
      break;
 800be80:	bf00      	nop
  }
  return ERR_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3724      	adds	r7, #36	; 0x24
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd90      	pop	{r4, r7, pc}
 800be8c:	2000c4a8 	.word	0x2000c4a8
 800be90:	2000c4a4 	.word	0x2000c4a4
 800be94:	2000c4d8 	.word	0x2000c4d8
 800be98:	2000c4d0 	.word	0x2000c4d0
 800be9c:	2000c4d9 	.word	0x2000c4d9
 800bea0:	2000c4a0 	.word	0x2000c4a0

0800bea4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bea4:	b590      	push	{r4, r7, lr}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d106      	bne.n	800bec2 <tcp_oos_insert_segment+0x1e>
 800beb4:	4b3b      	ldr	r3, [pc, #236]	; (800bfa4 <tcp_oos_insert_segment+0x100>)
 800beb6:	f240 421f 	movw	r2, #1055	; 0x41f
 800beba:	493b      	ldr	r1, [pc, #236]	; (800bfa8 <tcp_oos_insert_segment+0x104>)
 800bebc:	483b      	ldr	r0, [pc, #236]	; (800bfac <tcp_oos_insert_segment+0x108>)
 800bebe:	f005 fce7 	bl	8011890 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	899b      	ldrh	r3, [r3, #12]
 800bec8:	b29b      	uxth	r3, r3
 800beca:	4618      	mov	r0, r3
 800becc:	f7fb fc10 	bl	80076f0 <lwip_htons>
 800bed0:	4603      	mov	r3, r0
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	f003 0301 	and.w	r3, r3, #1
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d028      	beq.n	800bf2e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800bedc:	6838      	ldr	r0, [r7, #0]
 800bede:	f7fe fa63 	bl	800a3a8 <tcp_segs_free>
    next = NULL;
 800bee2:	2300      	movs	r3, #0
 800bee4:	603b      	str	r3, [r7, #0]
 800bee6:	e056      	b.n	800bf96 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	899b      	ldrh	r3, [r3, #12]
 800beee:	b29b      	uxth	r3, r3
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7fb fbfd 	bl	80076f0 <lwip_htons>
 800bef6:	4603      	mov	r3, r0
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	f003 0301 	and.w	r3, r3, #1
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00d      	beq.n	800bf1e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	899b      	ldrh	r3, [r3, #12]
 800bf08:	b29c      	uxth	r4, r3
 800bf0a:	2001      	movs	r0, #1
 800bf0c:	f7fb fbf0 	bl	80076f0 <lwip_htons>
 800bf10:	4603      	mov	r3, r0
 800bf12:	461a      	mov	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	4322      	orrs	r2, r4
 800bf1a:	b292      	uxth	r2, r2
 800bf1c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f7fe fa52 	bl	800a3d2 <tcp_seg_free>
    while (next &&
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00e      	beq.n	800bf52 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	891b      	ldrh	r3, [r3, #8]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	4b1d      	ldr	r3, [pc, #116]	; (800bfb0 <tcp_oos_insert_segment+0x10c>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	441a      	add	r2, r3
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	8909      	ldrh	r1, [r1, #8]
 800bf4a:	440b      	add	r3, r1
 800bf4c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	daca      	bge.n	800bee8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d01e      	beq.n	800bf96 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	891b      	ldrh	r3, [r3, #8]
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	4b14      	ldr	r3, [pc, #80]	; (800bfb0 <tcp_oos_insert_segment+0x10c>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	441a      	add	r2, r3
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dd12      	ble.n	800bf96 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	b29a      	uxth	r2, r3
 800bf78:	4b0d      	ldr	r3, [pc, #52]	; (800bfb0 <tcp_oos_insert_segment+0x10c>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	685a      	ldr	r2, [r3, #4]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	891b      	ldrh	r3, [r3, #8]
 800bf8e:	4619      	mov	r1, r3
 800bf90:	4610      	mov	r0, r2
 800bf92:	f7fc fe19 	bl	8008bc8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	601a      	str	r2, [r3, #0]
}
 800bf9c:	bf00      	nop
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd90      	pop	{r4, r7, pc}
 800bfa4:	08013aa8 	.word	0x08013aa8
 800bfa8:	08013d68 	.word	0x08013d68
 800bfac:	08013af4 	.word	0x08013af4
 800bfb0:	2000c4cc 	.word	0x2000c4cc

0800bfb4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800bfb4:	b5b0      	push	{r4, r5, r7, lr}
 800bfb6:	b086      	sub	sp, #24
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]
 800bfc0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bfc2:	e03e      	b.n	800c042 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fd f80c 	bl	8008ff0 <pbuf_clen>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bfe2:	8a7a      	ldrh	r2, [r7, #18]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d906      	bls.n	800bff6 <tcp_free_acked_segments+0x42>
 800bfe8:	4b2a      	ldr	r3, [pc, #168]	; (800c094 <tcp_free_acked_segments+0xe0>)
 800bfea:	f240 4257 	movw	r2, #1111	; 0x457
 800bfee:	492a      	ldr	r1, [pc, #168]	; (800c098 <tcp_free_acked_segments+0xe4>)
 800bff0:	482a      	ldr	r0, [pc, #168]	; (800c09c <tcp_free_acked_segments+0xe8>)
 800bff2:	f005 fc4d 	bl	8011890 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800bffc:	8a7b      	ldrh	r3, [r7, #18]
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	b29a      	uxth	r2, r3
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	891a      	ldrh	r2, [r3, #8]
 800c00c:	4b24      	ldr	r3, [pc, #144]	; (800c0a0 <tcp_free_acked_segments+0xec>)
 800c00e:	881b      	ldrh	r3, [r3, #0]
 800c010:	4413      	add	r3, r2
 800c012:	b29a      	uxth	r2, r3
 800c014:	4b22      	ldr	r3, [pc, #136]	; (800c0a0 <tcp_free_acked_segments+0xec>)
 800c016:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c018:	6978      	ldr	r0, [r7, #20]
 800c01a:	f7fe f9da 	bl	800a3d2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00c      	beq.n	800c042 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d109      	bne.n	800c042 <tcp_free_acked_segments+0x8e>
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d106      	bne.n	800c042 <tcp_free_acked_segments+0x8e>
 800c034:	4b17      	ldr	r3, [pc, #92]	; (800c094 <tcp_free_acked_segments+0xe0>)
 800c036:	f240 4261 	movw	r2, #1121	; 0x461
 800c03a:	491a      	ldr	r1, [pc, #104]	; (800c0a4 <tcp_free_acked_segments+0xf0>)
 800c03c:	4817      	ldr	r0, [pc, #92]	; (800c09c <tcp_free_acked_segments+0xe8>)
 800c03e:	f005 fc27 	bl	8011890 <iprintf>
  while (seg_list != NULL &&
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d020      	beq.n	800c08a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fb fb63 	bl	800771a <lwip_htonl>
 800c054:	4604      	mov	r4, r0
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	891b      	ldrh	r3, [r3, #8]
 800c05a:	461d      	mov	r5, r3
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	899b      	ldrh	r3, [r3, #12]
 800c062:	b29b      	uxth	r3, r3
 800c064:	4618      	mov	r0, r3
 800c066:	f7fb fb43 	bl	80076f0 <lwip_htons>
 800c06a:	4603      	mov	r3, r0
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	f003 0303 	and.w	r3, r3, #3
 800c072:	2b00      	cmp	r3, #0
 800c074:	d001      	beq.n	800c07a <tcp_free_acked_segments+0xc6>
 800c076:	2301      	movs	r3, #1
 800c078:	e000      	b.n	800c07c <tcp_free_acked_segments+0xc8>
 800c07a:	2300      	movs	r3, #0
 800c07c:	442b      	add	r3, r5
 800c07e:	18e2      	adds	r2, r4, r3
 800c080:	4b09      	ldr	r3, [pc, #36]	; (800c0a8 <tcp_free_acked_segments+0xf4>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c086:	2b00      	cmp	r3, #0
 800c088:	dd9c      	ble.n	800bfc4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c08a:	68bb      	ldr	r3, [r7, #8]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3718      	adds	r7, #24
 800c090:	46bd      	mov	sp, r7
 800c092:	bdb0      	pop	{r4, r5, r7, pc}
 800c094:	08013aa8 	.word	0x08013aa8
 800c098:	08013d90 	.word	0x08013d90
 800c09c:	08013af4 	.word	0x08013af4
 800c0a0:	2000c4d4 	.word	0x2000c4d4
 800c0a4:	08013db8 	.word	0x08013db8
 800c0a8:	2000c4d0 	.word	0x2000c4d0

0800c0ac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c0ac:	b5b0      	push	{r4, r5, r7, lr}
 800c0ae:	b094      	sub	sp, #80	; 0x50
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d106      	bne.n	800c0cc <tcp_receive+0x20>
 800c0be:	4b91      	ldr	r3, [pc, #580]	; (800c304 <tcp_receive+0x258>)
 800c0c0:	f240 427b 	movw	r2, #1147	; 0x47b
 800c0c4:	4990      	ldr	r1, [pc, #576]	; (800c308 <tcp_receive+0x25c>)
 800c0c6:	4891      	ldr	r0, [pc, #580]	; (800c30c <tcp_receive+0x260>)
 800c0c8:	f005 fbe2 	bl	8011890 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	7d1b      	ldrb	r3, [r3, #20]
 800c0d0:	2b03      	cmp	r3, #3
 800c0d2:	d806      	bhi.n	800c0e2 <tcp_receive+0x36>
 800c0d4:	4b8b      	ldr	r3, [pc, #556]	; (800c304 <tcp_receive+0x258>)
 800c0d6:	f240 427c 	movw	r2, #1148	; 0x47c
 800c0da:	498d      	ldr	r1, [pc, #564]	; (800c310 <tcp_receive+0x264>)
 800c0dc:	488b      	ldr	r0, [pc, #556]	; (800c30c <tcp_receive+0x260>)
 800c0de:	f005 fbd7 	bl	8011890 <iprintf>

  if (flags & TCP_ACK) {
 800c0e2:	4b8c      	ldr	r3, [pc, #560]	; (800c314 <tcp_receive+0x268>)
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	f003 0310 	and.w	r3, r3, #16
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f000 8264 	beq.w	800c5b8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0fc:	4413      	add	r3, r2
 800c0fe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c104:	4b84      	ldr	r3, [pc, #528]	; (800c318 <tcp_receive+0x26c>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	1ad3      	subs	r3, r2, r3
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	db1b      	blt.n	800c146 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c112:	4b81      	ldr	r3, [pc, #516]	; (800c318 <tcp_receive+0x26c>)
 800c114:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c116:	429a      	cmp	r2, r3
 800c118:	d106      	bne.n	800c128 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c11e:	4b7f      	ldr	r3, [pc, #508]	; (800c31c <tcp_receive+0x270>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	2b00      	cmp	r3, #0
 800c126:	db0e      	blt.n	800c146 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c12c:	4b7b      	ldr	r3, [pc, #492]	; (800c31c <tcp_receive+0x270>)
 800c12e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c130:	429a      	cmp	r2, r3
 800c132:	d125      	bne.n	800c180 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c134:	4b7a      	ldr	r3, [pc, #488]	; (800c320 <tcp_receive+0x274>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	89db      	ldrh	r3, [r3, #14]
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c142:	429a      	cmp	r2, r3
 800c144:	d91c      	bls.n	800c180 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c146:	4b76      	ldr	r3, [pc, #472]	; (800c320 <tcp_receive+0x274>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	89db      	ldrh	r3, [r3, #14]
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c160:	429a      	cmp	r2, r3
 800c162:	d205      	bcs.n	800c170 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c170:	4b69      	ldr	r3, [pc, #420]	; (800c318 <tcp_receive+0x26c>)
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c178:	4b68      	ldr	r3, [pc, #416]	; (800c31c <tcp_receive+0x270>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c180:	4b66      	ldr	r3, [pc, #408]	; (800c31c <tcp_receive+0x270>)
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	dc58      	bgt.n	800c240 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c18e:	4b65      	ldr	r3, [pc, #404]	; (800c324 <tcp_receive+0x278>)
 800c190:	881b      	ldrh	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d14b      	bne.n	800c22e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c1a0:	4413      	add	r3, r2
 800c1a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d142      	bne.n	800c22e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	db3d      	blt.n	800c22e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1b6:	4b59      	ldr	r3, [pc, #356]	; (800c31c <tcp_receive+0x270>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d137      	bne.n	800c22e <tcp_receive+0x182>
              found_dupack = 1;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c1c8:	2bff      	cmp	r3, #255	; 0xff
 800c1ca:	d007      	beq.n	800c1dc <tcp_receive+0x130>
                ++pcb->dupacks;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	b2da      	uxtb	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c1e2:	2b03      	cmp	r3, #3
 800c1e4:	d91b      	bls.n	800c21e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c1f0:	4413      	add	r3, r2
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d30a      	bcc.n	800c214 <tcp_receive+0x168>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c208:	4413      	add	r3, r2
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c212:	e004      	b.n	800c21e <tcp_receive+0x172>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c21a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c224:	2b02      	cmp	r3, #2
 800c226:	d902      	bls.n	800c22e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f001 feeb 	bl	800e004 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c22e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c230:	2b00      	cmp	r3, #0
 800c232:	f040 8161 	bne.w	800c4f8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c23e:	e15b      	b.n	800c4f8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c240:	4b36      	ldr	r3, [pc, #216]	; (800c31c <tcp_receive+0x270>)
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	3b01      	subs	r3, #1
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f2c0 814e 	blt.w	800c4ee <tcp_receive+0x442>
 800c252:	4b32      	ldr	r3, [pc, #200]	; (800c31c <tcp_receive+0x270>)
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f300 8146 	bgt.w	800c4ee <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	8b5b      	ldrh	r3, [r3, #26]
 800c266:	f003 0304 	and.w	r3, r3, #4
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d010      	beq.n	800c290 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	8b5b      	ldrh	r3, [r3, #26]
 800c272:	f023 0304 	bic.w	r3, r3, #4
 800c276:	b29a      	uxth	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c29e:	10db      	asrs	r3, r3, #3
 800c2a0:	b21b      	sxth	r3, r3
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	4413      	add	r3, r2
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	b21a      	sxth	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c2b8:	4b18      	ldr	r3, [pc, #96]	; (800c31c <tcp_receive+0x270>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	b29a      	uxth	r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c2d0:	4b12      	ldr	r3, [pc, #72]	; (800c31c <tcp_receive+0x270>)
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	7d1b      	ldrb	r3, [r3, #20]
 800c2dc:	2b03      	cmp	r3, #3
 800c2de:	f240 8097 	bls.w	800c410 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d245      	bcs.n	800c37e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	8b5b      	ldrh	r3, [r3, #26]
 800c2f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d014      	beq.n	800c328 <tcp_receive+0x27c>
 800c2fe:	2301      	movs	r3, #1
 800c300:	e013      	b.n	800c32a <tcp_receive+0x27e>
 800c302:	bf00      	nop
 800c304:	08013aa8 	.word	0x08013aa8
 800c308:	08013dd8 	.word	0x08013dd8
 800c30c:	08013af4 	.word	0x08013af4
 800c310:	08013df4 	.word	0x08013df4
 800c314:	2000c4d8 	.word	0x2000c4d8
 800c318:	2000c4cc 	.word	0x2000c4cc
 800c31c:	2000c4d0 	.word	0x2000c4d0
 800c320:	2000c4bc 	.word	0x2000c4bc
 800c324:	2000c4d6 	.word	0x2000c4d6
 800c328:	2302      	movs	r3, #2
 800c32a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c32e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c332:	b29a      	uxth	r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c338:	fb12 f303 	smulbb	r3, r2, r3
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c340:	4293      	cmp	r3, r2
 800c342:	bf28      	it	cs
 800c344:	4613      	movcs	r3, r2
 800c346:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c34e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c350:	4413      	add	r3, r2
 800c352:	b29a      	uxth	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d309      	bcc.n	800c372 <tcp_receive+0x2c6>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c364:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c366:	4413      	add	r3, r2
 800c368:	b29a      	uxth	r2, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c370:	e04e      	b.n	800c410 <tcp_receive+0x364>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c378:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c37c:	e048      	b.n	800c410 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c384:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c386:	4413      	add	r3, r2
 800c388:	b29a      	uxth	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c390:	429a      	cmp	r2, r3
 800c392:	d309      	bcc.n	800c3a8 <tcp_receive+0x2fc>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c39a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c39c:	4413      	add	r3, r2
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c3a6:	e004      	b.n	800c3b2 <tcp_receive+0x306>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d326      	bcc.n	800c410 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	b29a      	uxth	r2, r3
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3e2:	4413      	add	r3, r2
 800c3e4:	b29a      	uxth	r2, r3
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d30a      	bcc.n	800c406 <tcp_receive+0x35a>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3fa:	4413      	add	r3, r2
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c404:	e004      	b.n	800c410 <tcp_receive+0x364>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c40c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c418:	4a98      	ldr	r2, [pc, #608]	; (800c67c <tcp_receive+0x5d0>)
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f7ff fdca 	bl	800bfb4 <tcp_free_acked_segments>
 800c420:	4602      	mov	r2, r0
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c42e:	4a94      	ldr	r2, [pc, #592]	; (800c680 <tcp_receive+0x5d4>)
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f7ff fdbf 	bl	800bfb4 <tcp_free_acked_segments>
 800c436:	4602      	mov	r2, r0
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c440:	2b00      	cmp	r3, #0
 800c442:	d104      	bne.n	800c44e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c44a:	861a      	strh	r2, [r3, #48]	; 0x30
 800c44c:	e002      	b.n	800c454 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d103      	bne.n	800c46a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c470:	4b84      	ldr	r3, [pc, #528]	; (800c684 <tcp_receive+0x5d8>)
 800c472:	881b      	ldrh	r3, [r3, #0]
 800c474:	4413      	add	r3, r2
 800c476:	b29a      	uxth	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	8b5b      	ldrh	r3, [r3, #26]
 800c482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c486:	2b00      	cmp	r3, #0
 800c488:	d035      	beq.n	800c4f6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d118      	bne.n	800c4c4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00c      	beq.n	800c4b4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fb f937 	bl	800771a <lwip_htonl>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	dc20      	bgt.n	800c4f6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	8b5b      	ldrh	r3, [r3, #26]
 800c4b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c4c2:	e018      	b.n	800c4f6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fb f922 	bl	800771a <lwip_htonl>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	1ae3      	subs	r3, r4, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	dc0b      	bgt.n	800c4f6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	8b5b      	ldrh	r3, [r3, #26]
 800c4e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4e6:	b29a      	uxth	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c4ec:	e003      	b.n	800c4f6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f001 ff76 	bl	800e3e0 <tcp_send_empty_ack>
 800c4f4:	e000      	b.n	800c4f8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c4f6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d05b      	beq.n	800c5b8 <tcp_receive+0x50c>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c504:	4b60      	ldr	r3, [pc, #384]	; (800c688 <tcp_receive+0x5dc>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	da54      	bge.n	800c5b8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c50e:	4b5f      	ldr	r3, [pc, #380]	; (800c68c <tcp_receive+0x5e0>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	b29a      	uxth	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c518:	b29b      	uxth	r3, r3
 800c51a:	1ad3      	subs	r3, r2, r3
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c522:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c52c:	10db      	asrs	r3, r3, #3
 800c52e:	b21b      	sxth	r3, r3
 800c530:	b29b      	uxth	r3, r3
 800c532:	1ad3      	subs	r3, r2, r3
 800c534:	b29b      	uxth	r3, r3
 800c536:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c540:	b29a      	uxth	r2, r3
 800c542:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c546:	4413      	add	r3, r2
 800c548:	b29b      	uxth	r3, r3
 800c54a:	b21a      	sxth	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c550:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c554:	2b00      	cmp	r3, #0
 800c556:	da05      	bge.n	800c564 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c558:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c55c:	425b      	negs	r3, r3
 800c55e:	b29b      	uxth	r3, r3
 800c560:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c564:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c56e:	109b      	asrs	r3, r3, #2
 800c570:	b21b      	sxth	r3, r3
 800c572:	b29b      	uxth	r3, r3
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	b29b      	uxth	r3, r3
 800c578:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c582:	b29a      	uxth	r2, r3
 800c584:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c588:	4413      	add	r3, r2
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	b21a      	sxth	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c598:	10db      	asrs	r3, r3, #3
 800c59a:	b21b      	sxth	r3, r3
 800c59c:	b29a      	uxth	r2, r3
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	4413      	add	r3, r2
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	b21a      	sxth	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c5b8:	4b35      	ldr	r3, [pc, #212]	; (800c690 <tcp_receive+0x5e4>)
 800c5ba:	881b      	ldrh	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	f000 84e2 	beq.w	800cf86 <tcp_receive+0xeda>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	7d1b      	ldrb	r3, [r3, #20]
 800c5c6:	2b06      	cmp	r3, #6
 800c5c8:	f200 84dd 	bhi.w	800cf86 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5d0:	4b30      	ldr	r3, [pc, #192]	; (800c694 <tcp_receive+0x5e8>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f2c0 808f 	blt.w	800c6fc <tcp_receive+0x650>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5e2:	4b2b      	ldr	r3, [pc, #172]	; (800c690 <tcp_receive+0x5e4>)
 800c5e4:	881b      	ldrh	r3, [r3, #0]
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	4b2a      	ldr	r3, [pc, #168]	; (800c694 <tcp_receive+0x5e8>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	440b      	add	r3, r1
 800c5ee:	1ad3      	subs	r3, r2, r3
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f300 8082 	bgt.w	800c6fc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c5f8:	4b27      	ldr	r3, [pc, #156]	; (800c698 <tcp_receive+0x5ec>)
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c602:	4b24      	ldr	r3, [pc, #144]	; (800c694 <tcp_receive+0x5e8>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	1ad3      	subs	r3, r2, r3
 800c608:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c60a:	4b23      	ldr	r3, [pc, #140]	; (800c698 <tcp_receive+0x5ec>)
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d106      	bne.n	800c620 <tcp_receive+0x574>
 800c612:	4b22      	ldr	r3, [pc, #136]	; (800c69c <tcp_receive+0x5f0>)
 800c614:	f240 5294 	movw	r2, #1428	; 0x594
 800c618:	4921      	ldr	r1, [pc, #132]	; (800c6a0 <tcp_receive+0x5f4>)
 800c61a:	4822      	ldr	r0, [pc, #136]	; (800c6a4 <tcp_receive+0x5f8>)
 800c61c:	f005 f938 	bl	8011890 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c622:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c626:	4293      	cmp	r3, r2
 800c628:	d906      	bls.n	800c638 <tcp_receive+0x58c>
 800c62a:	4b1c      	ldr	r3, [pc, #112]	; (800c69c <tcp_receive+0x5f0>)
 800c62c:	f240 5295 	movw	r2, #1429	; 0x595
 800c630:	491d      	ldr	r1, [pc, #116]	; (800c6a8 <tcp_receive+0x5fc>)
 800c632:	481c      	ldr	r0, [pc, #112]	; (800c6a4 <tcp_receive+0x5f8>)
 800c634:	f005 f92c 	bl	8011890 <iprintf>
      off = (u16_t)off32;
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c63e:	4b16      	ldr	r3, [pc, #88]	; (800c698 <tcp_receive+0x5ec>)
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	891b      	ldrh	r3, [r3, #8]
 800c644:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c648:	429a      	cmp	r2, r3
 800c64a:	d906      	bls.n	800c65a <tcp_receive+0x5ae>
 800c64c:	4b13      	ldr	r3, [pc, #76]	; (800c69c <tcp_receive+0x5f0>)
 800c64e:	f240 5297 	movw	r2, #1431	; 0x597
 800c652:	4916      	ldr	r1, [pc, #88]	; (800c6ac <tcp_receive+0x600>)
 800c654:	4813      	ldr	r0, [pc, #76]	; (800c6a4 <tcp_receive+0x5f8>)
 800c656:	f005 f91b 	bl	8011890 <iprintf>
      inseg.len -= off;
 800c65a:	4b0f      	ldr	r3, [pc, #60]	; (800c698 <tcp_receive+0x5ec>)
 800c65c:	891a      	ldrh	r2, [r3, #8]
 800c65e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c662:	1ad3      	subs	r3, r2, r3
 800c664:	b29a      	uxth	r2, r3
 800c666:	4b0c      	ldr	r3, [pc, #48]	; (800c698 <tcp_receive+0x5ec>)
 800c668:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c66a:	4b0b      	ldr	r3, [pc, #44]	; (800c698 <tcp_receive+0x5ec>)
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	891a      	ldrh	r2, [r3, #8]
 800c670:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c674:	1ad3      	subs	r3, r2, r3
 800c676:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c678:	e02a      	b.n	800c6d0 <tcp_receive+0x624>
 800c67a:	bf00      	nop
 800c67c:	08013e10 	.word	0x08013e10
 800c680:	08013e18 	.word	0x08013e18
 800c684:	2000c4d4 	.word	0x2000c4d4
 800c688:	2000c4d0 	.word	0x2000c4d0
 800c68c:	2000c494 	.word	0x2000c494
 800c690:	2000c4d6 	.word	0x2000c4d6
 800c694:	2000c4cc 	.word	0x2000c4cc
 800c698:	2000c4ac 	.word	0x2000c4ac
 800c69c:	08013aa8 	.word	0x08013aa8
 800c6a0:	08013e20 	.word	0x08013e20
 800c6a4:	08013af4 	.word	0x08013af4
 800c6a8:	08013e30 	.word	0x08013e30
 800c6ac:	08013e40 	.word	0x08013e40
        off -= p->len;
 800c6b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6b2:	895b      	ldrh	r3, [r3, #10]
 800c6b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c6be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6c0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c6c2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c6c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c6ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c6d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6d2:	895b      	ldrh	r3, [r3, #10]
 800c6d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d8e9      	bhi.n	800c6b0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c6dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c6e4:	f7fc fb70 	bl	8008dc8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ec:	4a91      	ldr	r2, [pc, #580]	; (800c934 <tcp_receive+0x888>)
 800c6ee:	6013      	str	r3, [r2, #0]
 800c6f0:	4b91      	ldr	r3, [pc, #580]	; (800c938 <tcp_receive+0x88c>)
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	4a8f      	ldr	r2, [pc, #572]	; (800c934 <tcp_receive+0x888>)
 800c6f6:	6812      	ldr	r2, [r2, #0]
 800c6f8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c6fa:	e00d      	b.n	800c718 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c6fc:	4b8d      	ldr	r3, [pc, #564]	; (800c934 <tcp_receive+0x888>)
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	da06      	bge.n	800c718 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	8b5b      	ldrh	r3, [r3, #26]
 800c70e:	f043 0302 	orr.w	r3, r3, #2
 800c712:	b29a      	uxth	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c718:	4b86      	ldr	r3, [pc, #536]	; (800c934 <tcp_receive+0x888>)
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c720:	1ad3      	subs	r3, r2, r3
 800c722:	2b00      	cmp	r3, #0
 800c724:	f2c0 842a 	blt.w	800cf7c <tcp_receive+0xed0>
 800c728:	4b82      	ldr	r3, [pc, #520]	; (800c934 <tcp_receive+0x888>)
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c730:	6879      	ldr	r1, [r7, #4]
 800c732:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c734:	440b      	add	r3, r1
 800c736:	1ad3      	subs	r3, r2, r3
 800c738:	3301      	adds	r3, #1
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f300 841e 	bgt.w	800cf7c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c744:	4b7b      	ldr	r3, [pc, #492]	; (800c934 <tcp_receive+0x888>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	429a      	cmp	r2, r3
 800c74a:	f040 829a 	bne.w	800cc82 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c74e:	4b7a      	ldr	r3, [pc, #488]	; (800c938 <tcp_receive+0x88c>)
 800c750:	891c      	ldrh	r4, [r3, #8]
 800c752:	4b79      	ldr	r3, [pc, #484]	; (800c938 <tcp_receive+0x88c>)
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	899b      	ldrh	r3, [r3, #12]
 800c758:	b29b      	uxth	r3, r3
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fa ffc8 	bl	80076f0 <lwip_htons>
 800c760:	4603      	mov	r3, r0
 800c762:	b2db      	uxtb	r3, r3
 800c764:	f003 0303 	and.w	r3, r3, #3
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d001      	beq.n	800c770 <tcp_receive+0x6c4>
 800c76c:	2301      	movs	r3, #1
 800c76e:	e000      	b.n	800c772 <tcp_receive+0x6c6>
 800c770:	2300      	movs	r3, #0
 800c772:	4423      	add	r3, r4
 800c774:	b29a      	uxth	r2, r3
 800c776:	4b71      	ldr	r3, [pc, #452]	; (800c93c <tcp_receive+0x890>)
 800c778:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c77e:	4b6f      	ldr	r3, [pc, #444]	; (800c93c <tcp_receive+0x890>)
 800c780:	881b      	ldrh	r3, [r3, #0]
 800c782:	429a      	cmp	r2, r3
 800c784:	d275      	bcs.n	800c872 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c786:	4b6c      	ldr	r3, [pc, #432]	; (800c938 <tcp_receive+0x88c>)
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	899b      	ldrh	r3, [r3, #12]
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fa ffae 	bl	80076f0 <lwip_htons>
 800c794:	4603      	mov	r3, r0
 800c796:	b2db      	uxtb	r3, r3
 800c798:	f003 0301 	and.w	r3, r3, #1
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d01f      	beq.n	800c7e0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c7a0:	4b65      	ldr	r3, [pc, #404]	; (800c938 <tcp_receive+0x88c>)
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	899b      	ldrh	r3, [r3, #12]
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	b21b      	sxth	r3, r3
 800c7aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c7ae:	b21c      	sxth	r4, r3
 800c7b0:	4b61      	ldr	r3, [pc, #388]	; (800c938 <tcp_receive+0x88c>)
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	899b      	ldrh	r3, [r3, #12]
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fa ff99 	bl	80076f0 <lwip_htons>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fa ff90 	bl	80076f0 <lwip_htons>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	b21b      	sxth	r3, r3
 800c7d4:	4323      	orrs	r3, r4
 800c7d6:	b21a      	sxth	r2, r3
 800c7d8:	4b57      	ldr	r3, [pc, #348]	; (800c938 <tcp_receive+0x88c>)
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	b292      	uxth	r2, r2
 800c7de:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c7e4:	4b54      	ldr	r3, [pc, #336]	; (800c938 <tcp_receive+0x88c>)
 800c7e6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c7e8:	4b53      	ldr	r3, [pc, #332]	; (800c938 <tcp_receive+0x88c>)
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	899b      	ldrh	r3, [r3, #12]
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fa ff7d 	bl	80076f0 <lwip_htons>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	f003 0302 	and.w	r3, r3, #2
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d005      	beq.n	800c80e <tcp_receive+0x762>
            inseg.len -= 1;
 800c802:	4b4d      	ldr	r3, [pc, #308]	; (800c938 <tcp_receive+0x88c>)
 800c804:	891b      	ldrh	r3, [r3, #8]
 800c806:	3b01      	subs	r3, #1
 800c808:	b29a      	uxth	r2, r3
 800c80a:	4b4b      	ldr	r3, [pc, #300]	; (800c938 <tcp_receive+0x88c>)
 800c80c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c80e:	4b4a      	ldr	r3, [pc, #296]	; (800c938 <tcp_receive+0x88c>)
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	4a49      	ldr	r2, [pc, #292]	; (800c938 <tcp_receive+0x88c>)
 800c814:	8912      	ldrh	r2, [r2, #8]
 800c816:	4611      	mov	r1, r2
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fc f9d5 	bl	8008bc8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c81e:	4b46      	ldr	r3, [pc, #280]	; (800c938 <tcp_receive+0x88c>)
 800c820:	891c      	ldrh	r4, [r3, #8]
 800c822:	4b45      	ldr	r3, [pc, #276]	; (800c938 <tcp_receive+0x88c>)
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	899b      	ldrh	r3, [r3, #12]
 800c828:	b29b      	uxth	r3, r3
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7fa ff60 	bl	80076f0 <lwip_htons>
 800c830:	4603      	mov	r3, r0
 800c832:	b2db      	uxtb	r3, r3
 800c834:	f003 0303 	and.w	r3, r3, #3
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d001      	beq.n	800c840 <tcp_receive+0x794>
 800c83c:	2301      	movs	r3, #1
 800c83e:	e000      	b.n	800c842 <tcp_receive+0x796>
 800c840:	2300      	movs	r3, #0
 800c842:	4423      	add	r3, r4
 800c844:	b29a      	uxth	r2, r3
 800c846:	4b3d      	ldr	r3, [pc, #244]	; (800c93c <tcp_receive+0x890>)
 800c848:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c84a:	4b3c      	ldr	r3, [pc, #240]	; (800c93c <tcp_receive+0x890>)
 800c84c:	881b      	ldrh	r3, [r3, #0]
 800c84e:	461a      	mov	r2, r3
 800c850:	4b38      	ldr	r3, [pc, #224]	; (800c934 <tcp_receive+0x888>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	441a      	add	r2, r3
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c85a:	6879      	ldr	r1, [r7, #4]
 800c85c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c85e:	440b      	add	r3, r1
 800c860:	429a      	cmp	r2, r3
 800c862:	d006      	beq.n	800c872 <tcp_receive+0x7c6>
 800c864:	4b36      	ldr	r3, [pc, #216]	; (800c940 <tcp_receive+0x894>)
 800c866:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c86a:	4936      	ldr	r1, [pc, #216]	; (800c944 <tcp_receive+0x898>)
 800c86c:	4836      	ldr	r0, [pc, #216]	; (800c948 <tcp_receive+0x89c>)
 800c86e:	f005 f80f 	bl	8011890 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c876:	2b00      	cmp	r3, #0
 800c878:	f000 80e7 	beq.w	800ca4a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c87c:	4b2e      	ldr	r3, [pc, #184]	; (800c938 <tcp_receive+0x88c>)
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	899b      	ldrh	r3, [r3, #12]
 800c882:	b29b      	uxth	r3, r3
 800c884:	4618      	mov	r0, r3
 800c886:	f7fa ff33 	bl	80076f0 <lwip_htons>
 800c88a:	4603      	mov	r3, r0
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	f003 0301 	and.w	r3, r3, #1
 800c892:	2b00      	cmp	r3, #0
 800c894:	d010      	beq.n	800c8b8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c896:	e00a      	b.n	800c8ae <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c89c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f7fd fd92 	bl	800a3d2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1f0      	bne.n	800c898 <tcp_receive+0x7ec>
 800c8b6:	e0c8      	b.n	800ca4a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c8be:	e052      	b.n	800c966 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	899b      	ldrh	r3, [r3, #12]
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fa ff11 	bl	80076f0 <lwip_htons>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d03d      	beq.n	800c956 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c8da:	4b17      	ldr	r3, [pc, #92]	; (800c938 <tcp_receive+0x88c>)
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	899b      	ldrh	r3, [r3, #12]
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fa ff04 	bl	80076f0 <lwip_htons>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d130      	bne.n	800c956 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c8f4:	4b10      	ldr	r3, [pc, #64]	; (800c938 <tcp_receive+0x88c>)
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	899b      	ldrh	r3, [r3, #12]
 800c8fa:	b29c      	uxth	r4, r3
 800c8fc:	2001      	movs	r0, #1
 800c8fe:	f7fa fef7 	bl	80076f0 <lwip_htons>
 800c902:	4603      	mov	r3, r0
 800c904:	461a      	mov	r2, r3
 800c906:	4b0c      	ldr	r3, [pc, #48]	; (800c938 <tcp_receive+0x88c>)
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	4322      	orrs	r2, r4
 800c90c:	b292      	uxth	r2, r2
 800c90e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c910:	4b09      	ldr	r3, [pc, #36]	; (800c938 <tcp_receive+0x88c>)
 800c912:	891c      	ldrh	r4, [r3, #8]
 800c914:	4b08      	ldr	r3, [pc, #32]	; (800c938 <tcp_receive+0x88c>)
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	899b      	ldrh	r3, [r3, #12]
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fa fee7 	bl	80076f0 <lwip_htons>
 800c922:	4603      	mov	r3, r0
 800c924:	b2db      	uxtb	r3, r3
 800c926:	f003 0303 	and.w	r3, r3, #3
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00e      	beq.n	800c94c <tcp_receive+0x8a0>
 800c92e:	2301      	movs	r3, #1
 800c930:	e00d      	b.n	800c94e <tcp_receive+0x8a2>
 800c932:	bf00      	nop
 800c934:	2000c4cc 	.word	0x2000c4cc
 800c938:	2000c4ac 	.word	0x2000c4ac
 800c93c:	2000c4d6 	.word	0x2000c4d6
 800c940:	08013aa8 	.word	0x08013aa8
 800c944:	08013e50 	.word	0x08013e50
 800c948:	08013af4 	.word	0x08013af4
 800c94c:	2300      	movs	r3, #0
 800c94e:	4423      	add	r3, r4
 800c950:	b29a      	uxth	r2, r3
 800c952:	4b98      	ldr	r3, [pc, #608]	; (800cbb4 <tcp_receive+0xb08>)
 800c954:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c958:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c960:	6938      	ldr	r0, [r7, #16]
 800c962:	f7fd fd36 	bl	800a3d2 <tcp_seg_free>
            while (next &&
 800c966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00e      	beq.n	800c98a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c96c:	4b91      	ldr	r3, [pc, #580]	; (800cbb4 <tcp_receive+0xb08>)
 800c96e:	881b      	ldrh	r3, [r3, #0]
 800c970:	461a      	mov	r2, r3
 800c972:	4b91      	ldr	r3, [pc, #580]	; (800cbb8 <tcp_receive+0xb0c>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	441a      	add	r2, r3
 800c978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c980:	8909      	ldrh	r1, [r1, #8]
 800c982:	440b      	add	r3, r1
 800c984:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c986:	2b00      	cmp	r3, #0
 800c988:	da9a      	bge.n	800c8c0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c98a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d059      	beq.n	800ca44 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800c990:	4b88      	ldr	r3, [pc, #544]	; (800cbb4 <tcp_receive+0xb08>)
 800c992:	881b      	ldrh	r3, [r3, #0]
 800c994:	461a      	mov	r2, r3
 800c996:	4b88      	ldr	r3, [pc, #544]	; (800cbb8 <tcp_receive+0xb0c>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	441a      	add	r2, r3
 800c99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	dd4d      	ble.n	800ca44 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	b29a      	uxth	r2, r3
 800c9b0:	4b81      	ldr	r3, [pc, #516]	; (800cbb8 <tcp_receive+0xb0c>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	4b80      	ldr	r3, [pc, #512]	; (800cbbc <tcp_receive+0xb10>)
 800c9bc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c9be:	4b7f      	ldr	r3, [pc, #508]	; (800cbbc <tcp_receive+0xb10>)
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	899b      	ldrh	r3, [r3, #12]
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fa fe92 	bl	80076f0 <lwip_htons>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	f003 0302 	and.w	r3, r3, #2
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d005      	beq.n	800c9e4 <tcp_receive+0x938>
                inseg.len -= 1;
 800c9d8:	4b78      	ldr	r3, [pc, #480]	; (800cbbc <tcp_receive+0xb10>)
 800c9da:	891b      	ldrh	r3, [r3, #8]
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	4b76      	ldr	r3, [pc, #472]	; (800cbbc <tcp_receive+0xb10>)
 800c9e2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c9e4:	4b75      	ldr	r3, [pc, #468]	; (800cbbc <tcp_receive+0xb10>)
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	4a74      	ldr	r2, [pc, #464]	; (800cbbc <tcp_receive+0xb10>)
 800c9ea:	8912      	ldrh	r2, [r2, #8]
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fc f8ea 	bl	8008bc8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c9f4:	4b71      	ldr	r3, [pc, #452]	; (800cbbc <tcp_receive+0xb10>)
 800c9f6:	891c      	ldrh	r4, [r3, #8]
 800c9f8:	4b70      	ldr	r3, [pc, #448]	; (800cbbc <tcp_receive+0xb10>)
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	899b      	ldrh	r3, [r3, #12]
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7fa fe75 	bl	80076f0 <lwip_htons>
 800ca06:	4603      	mov	r3, r0
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	f003 0303 	and.w	r3, r3, #3
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d001      	beq.n	800ca16 <tcp_receive+0x96a>
 800ca12:	2301      	movs	r3, #1
 800ca14:	e000      	b.n	800ca18 <tcp_receive+0x96c>
 800ca16:	2300      	movs	r3, #0
 800ca18:	4423      	add	r3, r4
 800ca1a:	b29a      	uxth	r2, r3
 800ca1c:	4b65      	ldr	r3, [pc, #404]	; (800cbb4 <tcp_receive+0xb08>)
 800ca1e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ca20:	4b64      	ldr	r3, [pc, #400]	; (800cbb4 <tcp_receive+0xb08>)
 800ca22:	881b      	ldrh	r3, [r3, #0]
 800ca24:	461a      	mov	r2, r3
 800ca26:	4b64      	ldr	r3, [pc, #400]	; (800cbb8 <tcp_receive+0xb0c>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	441a      	add	r2, r3
 800ca2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d006      	beq.n	800ca44 <tcp_receive+0x998>
 800ca36:	4b62      	ldr	r3, [pc, #392]	; (800cbc0 <tcp_receive+0xb14>)
 800ca38:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ca3c:	4961      	ldr	r1, [pc, #388]	; (800cbc4 <tcp_receive+0xb18>)
 800ca3e:	4862      	ldr	r0, [pc, #392]	; (800cbc8 <tcp_receive+0xb1c>)
 800ca40:	f004 ff26 	bl	8011890 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca48:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ca4a:	4b5a      	ldr	r3, [pc, #360]	; (800cbb4 <tcp_receive+0xb08>)
 800ca4c:	881b      	ldrh	r3, [r3, #0]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	4b59      	ldr	r3, [pc, #356]	; (800cbb8 <tcp_receive+0xb0c>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	441a      	add	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca5e:	4b55      	ldr	r3, [pc, #340]	; (800cbb4 <tcp_receive+0xb08>)
 800ca60:	881b      	ldrh	r3, [r3, #0]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d206      	bcs.n	800ca74 <tcp_receive+0x9c8>
 800ca66:	4b56      	ldr	r3, [pc, #344]	; (800cbc0 <tcp_receive+0xb14>)
 800ca68:	f240 6207 	movw	r2, #1543	; 0x607
 800ca6c:	4957      	ldr	r1, [pc, #348]	; (800cbcc <tcp_receive+0xb20>)
 800ca6e:	4856      	ldr	r0, [pc, #344]	; (800cbc8 <tcp_receive+0xb1c>)
 800ca70:	f004 ff0e 	bl	8011890 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca78:	4b4e      	ldr	r3, [pc, #312]	; (800cbb4 <tcp_receive+0xb08>)
 800ca7a:	881b      	ldrh	r3, [r3, #0]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7fc ffc5 	bl	8009a14 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ca8a:	4b4c      	ldr	r3, [pc, #304]	; (800cbbc <tcp_receive+0xb10>)
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	891b      	ldrh	r3, [r3, #8]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d006      	beq.n	800caa2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800ca94:	4b49      	ldr	r3, [pc, #292]	; (800cbbc <tcp_receive+0xb10>)
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	4a4d      	ldr	r2, [pc, #308]	; (800cbd0 <tcp_receive+0xb24>)
 800ca9a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ca9c:	4b47      	ldr	r3, [pc, #284]	; (800cbbc <tcp_receive+0xb10>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800caa2:	4b46      	ldr	r3, [pc, #280]	; (800cbbc <tcp_receive+0xb10>)
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	899b      	ldrh	r3, [r3, #12]
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	4618      	mov	r0, r3
 800caac:	f7fa fe20 	bl	80076f0 <lwip_htons>
 800cab0:	4603      	mov	r3, r0
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	f003 0301 	and.w	r3, r3, #1
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f000 80b8 	beq.w	800cc2e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cabe:	4b45      	ldr	r3, [pc, #276]	; (800cbd4 <tcp_receive+0xb28>)
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	f043 0320 	orr.w	r3, r3, #32
 800cac6:	b2da      	uxtb	r2, r3
 800cac8:	4b42      	ldr	r3, [pc, #264]	; (800cbd4 <tcp_receive+0xb28>)
 800caca:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cacc:	e0af      	b.n	800cc2e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cad2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	4a36      	ldr	r2, [pc, #216]	; (800cbb8 <tcp_receive+0xb0c>)
 800cade:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	891b      	ldrh	r3, [r3, #8]
 800cae4:	461c      	mov	r4, r3
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	899b      	ldrh	r3, [r3, #12]
 800caec:	b29b      	uxth	r3, r3
 800caee:	4618      	mov	r0, r3
 800caf0:	f7fa fdfe 	bl	80076f0 <lwip_htons>
 800caf4:	4603      	mov	r3, r0
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	f003 0303 	and.w	r3, r3, #3
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d001      	beq.n	800cb04 <tcp_receive+0xa58>
 800cb00:	2301      	movs	r3, #1
 800cb02:	e000      	b.n	800cb06 <tcp_receive+0xa5a>
 800cb04:	2300      	movs	r3, #0
 800cb06:	191a      	adds	r2, r3, r4
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb0c:	441a      	add	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb16:	461c      	mov	r4, r3
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	891b      	ldrh	r3, [r3, #8]
 800cb1c:	461d      	mov	r5, r3
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	899b      	ldrh	r3, [r3, #12]
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fa fde2 	bl	80076f0 <lwip_htons>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	f003 0303 	and.w	r3, r3, #3
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d001      	beq.n	800cb3c <tcp_receive+0xa90>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e000      	b.n	800cb3e <tcp_receive+0xa92>
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	442b      	add	r3, r5
 800cb40:	429c      	cmp	r4, r3
 800cb42:	d206      	bcs.n	800cb52 <tcp_receive+0xaa6>
 800cb44:	4b1e      	ldr	r3, [pc, #120]	; (800cbc0 <tcp_receive+0xb14>)
 800cb46:	f240 622b 	movw	r2, #1579	; 0x62b
 800cb4a:	4923      	ldr	r1, [pc, #140]	; (800cbd8 <tcp_receive+0xb2c>)
 800cb4c:	481e      	ldr	r0, [pc, #120]	; (800cbc8 <tcp_receive+0xb1c>)
 800cb4e:	f004 fe9f 	bl	8011890 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	891b      	ldrh	r3, [r3, #8]
 800cb56:	461c      	mov	r4, r3
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	899b      	ldrh	r3, [r3, #12]
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7fa fdc5 	bl	80076f0 <lwip_htons>
 800cb66:	4603      	mov	r3, r0
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	f003 0303 	and.w	r3, r3, #3
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d001      	beq.n	800cb76 <tcp_receive+0xaca>
 800cb72:	2301      	movs	r3, #1
 800cb74:	e000      	b.n	800cb78 <tcp_receive+0xacc>
 800cb76:	2300      	movs	r3, #0
 800cb78:	1919      	adds	r1, r3, r4
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cb7e:	b28b      	uxth	r3, r1
 800cb80:	1ad3      	subs	r3, r2, r3
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7fc ff43 	bl	8009a14 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	891b      	ldrh	r3, [r3, #8]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d028      	beq.n	800cbea <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800cb98:	4b0d      	ldr	r3, [pc, #52]	; (800cbd0 <tcp_receive+0xb24>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d01d      	beq.n	800cbdc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800cba0:	4b0b      	ldr	r3, [pc, #44]	; (800cbd0 <tcp_receive+0xb24>)
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	4619      	mov	r1, r3
 800cbaa:	4610      	mov	r0, r2
 800cbac:	f7fc fa60 	bl	8009070 <pbuf_cat>
 800cbb0:	e018      	b.n	800cbe4 <tcp_receive+0xb38>
 800cbb2:	bf00      	nop
 800cbb4:	2000c4d6 	.word	0x2000c4d6
 800cbb8:	2000c4cc 	.word	0x2000c4cc
 800cbbc:	2000c4ac 	.word	0x2000c4ac
 800cbc0:	08013aa8 	.word	0x08013aa8
 800cbc4:	08013e88 	.word	0x08013e88
 800cbc8:	08013af4 	.word	0x08013af4
 800cbcc:	08013ec4 	.word	0x08013ec4
 800cbd0:	2000c4dc 	.word	0x2000c4dc
 800cbd4:	2000c4d9 	.word	0x2000c4d9
 800cbd8:	08013ee4 	.word	0x08013ee4
            } else {
              recv_data = cseg->p;
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	4a70      	ldr	r2, [pc, #448]	; (800cda4 <tcp_receive+0xcf8>)
 800cbe2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	899b      	ldrh	r3, [r3, #12]
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fa fd7c 	bl	80076f0 <lwip_htons>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	f003 0301 	and.w	r3, r3, #1
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00d      	beq.n	800cc20 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800cc04:	4b68      	ldr	r3, [pc, #416]	; (800cda8 <tcp_receive+0xcfc>)
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	f043 0320 	orr.w	r3, r3, #32
 800cc0c:	b2da      	uxtb	r2, r3
 800cc0e:	4b66      	ldr	r3, [pc, #408]	; (800cda8 <tcp_receive+0xcfc>)
 800cc10:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	7d1b      	ldrb	r3, [r3, #20]
 800cc16:	2b04      	cmp	r3, #4
 800cc18:	d102      	bne.n	800cc20 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2207      	movs	r2, #7
 800cc1e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800cc28:	68b8      	ldr	r0, [r7, #8]
 800cc2a:	f7fd fbd2 	bl	800a3d2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d008      	beq.n	800cc48 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	685a      	ldr	r2, [r3, #4]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800cc42:	429a      	cmp	r2, r3
 800cc44:	f43f af43 	beq.w	800cace <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	8b5b      	ldrh	r3, [r3, #26]
 800cc4c:	f003 0301 	and.w	r3, r3, #1
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00e      	beq.n	800cc72 <tcp_receive+0xbc6>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	8b5b      	ldrh	r3, [r3, #26]
 800cc58:	f023 0301 	bic.w	r3, r3, #1
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	835a      	strh	r2, [r3, #26]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	8b5b      	ldrh	r3, [r3, #26]
 800cc66:	f043 0302 	orr.w	r3, r3, #2
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cc70:	e188      	b.n	800cf84 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	8b5b      	ldrh	r3, [r3, #26]
 800cc76:	f043 0301 	orr.w	r3, r3, #1
 800cc7a:	b29a      	uxth	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cc80:	e180      	b.n	800cf84 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d106      	bne.n	800cc98 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cc8a:	4848      	ldr	r0, [pc, #288]	; (800cdac <tcp_receive+0xd00>)
 800cc8c:	f7fd fbba 	bl	800a404 <tcp_seg_copy>
 800cc90:	4602      	mov	r2, r0
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	675a      	str	r2, [r3, #116]	; 0x74
 800cc96:	e16d      	b.n	800cf74 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cca0:	63bb      	str	r3, [r7, #56]	; 0x38
 800cca2:	e157      	b.n	800cf54 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800cca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	685a      	ldr	r2, [r3, #4]
 800ccaa:	4b41      	ldr	r3, [pc, #260]	; (800cdb0 <tcp_receive+0xd04>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d11d      	bne.n	800ccee <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ccb2:	4b3e      	ldr	r3, [pc, #248]	; (800cdac <tcp_receive+0xd00>)
 800ccb4:	891a      	ldrh	r2, [r3, #8]
 800ccb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb8:	891b      	ldrh	r3, [r3, #8]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	f240 814f 	bls.w	800cf5e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ccc0:	483a      	ldr	r0, [pc, #232]	; (800cdac <tcp_receive+0xd00>)
 800ccc2:	f7fd fb9f 	bl	800a404 <tcp_seg_copy>
 800ccc6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f000 8149 	beq.w	800cf62 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ccd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d003      	beq.n	800ccde <tcp_receive+0xc32>
                    prev->next = cseg;
 800ccd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd8:	697a      	ldr	r2, [r7, #20]
 800ccda:	601a      	str	r2, [r3, #0]
 800ccdc:	e002      	b.n	800cce4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	697a      	ldr	r2, [r7, #20]
 800cce2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cce4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cce6:	6978      	ldr	r0, [r7, #20]
 800cce8:	f7ff f8dc 	bl	800bea4 <tcp_oos_insert_segment>
                }
                break;
 800ccec:	e139      	b.n	800cf62 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ccee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d117      	bne.n	800cd24 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ccf4:	4b2e      	ldr	r3, [pc, #184]	; (800cdb0 <tcp_receive+0xd04>)
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	da57      	bge.n	800cdb4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cd04:	4829      	ldr	r0, [pc, #164]	; (800cdac <tcp_receive+0xd00>)
 800cd06:	f7fd fb7d 	bl	800a404 <tcp_seg_copy>
 800cd0a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f000 8129 	beq.w	800cf66 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	69ba      	ldr	r2, [r7, #24]
 800cd18:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800cd1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd1c:	69b8      	ldr	r0, [r7, #24]
 800cd1e:	f7ff f8c1 	bl	800bea4 <tcp_oos_insert_segment>
                  }
                  break;
 800cd22:	e120      	b.n	800cf66 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800cd24:	4b22      	ldr	r3, [pc, #136]	; (800cdb0 <tcp_receive+0xd04>)
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	1ad3      	subs	r3, r2, r3
 800cd30:	3b01      	subs	r3, #1
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	db3e      	blt.n	800cdb4 <tcp_receive+0xd08>
 800cd36:	4b1e      	ldr	r3, [pc, #120]	; (800cdb0 <tcp_receive+0xd04>)
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	3301      	adds	r3, #1
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	dc35      	bgt.n	800cdb4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cd48:	4818      	ldr	r0, [pc, #96]	; (800cdac <tcp_receive+0xd00>)
 800cd4a:	f7fd fb5b 	bl	800a404 <tcp_seg_copy>
 800cd4e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f000 8109 	beq.w	800cf6a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd60:	8912      	ldrh	r2, [r2, #8]
 800cd62:	441a      	add	r2, r3
 800cd64:	4b12      	ldr	r3, [pc, #72]	; (800cdb0 <tcp_receive+0xd04>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	1ad3      	subs	r3, r2, r3
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	dd12      	ble.n	800cd94 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cd6e:	4b10      	ldr	r3, [pc, #64]	; (800cdb0 <tcp_receive+0xd04>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	b29a      	uxth	r2, r3
 800cd74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	1ad3      	subs	r3, r2, r3
 800cd7e:	b29a      	uxth	r2, r3
 800cd80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd82:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cd84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd86:	685a      	ldr	r2, [r3, #4]
 800cd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd8a:	891b      	ldrh	r3, [r3, #8]
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	4610      	mov	r0, r2
 800cd90:	f7fb ff1a 	bl	8008bc8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800cd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd96:	69fa      	ldr	r2, [r7, #28]
 800cd98:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800cd9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd9c:	69f8      	ldr	r0, [r7, #28]
 800cd9e:	f7ff f881 	bl	800bea4 <tcp_oos_insert_segment>
                  }
                  break;
 800cda2:	e0e2      	b.n	800cf6a <tcp_receive+0xebe>
 800cda4:	2000c4dc 	.word	0x2000c4dc
 800cda8:	2000c4d9 	.word	0x2000c4d9
 800cdac:	2000c4ac 	.word	0x2000c4ac
 800cdb0:	2000c4cc 	.word	0x2000c4cc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800cdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f040 80c6 	bne.w	800cf4e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800cdc2:	4b80      	ldr	r3, [pc, #512]	; (800cfc4 <tcp_receive+0xf18>)
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f340 80bd 	ble.w	800cf4e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	899b      	ldrh	r3, [r3, #12]
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fa fc87 	bl	80076f0 <lwip_htons>
 800cde2:	4603      	mov	r3, r0
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	f003 0301 	and.w	r3, r3, #1
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	f040 80bf 	bne.w	800cf6e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cdf0:	4875      	ldr	r0, [pc, #468]	; (800cfc8 <tcp_receive+0xf1c>)
 800cdf2:	f7fd fb07 	bl	800a404 <tcp_seg_copy>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f000 80b6 	beq.w	800cf72 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ce06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce0e:	8912      	ldrh	r2, [r2, #8]
 800ce10:	441a      	add	r2, r3
 800ce12:	4b6c      	ldr	r3, [pc, #432]	; (800cfc4 <tcp_receive+0xf18>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	dd12      	ble.n	800ce42 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ce1c:	4b69      	ldr	r3, [pc, #420]	; (800cfc4 <tcp_receive+0xf18>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	1ad3      	subs	r3, r2, r3
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce30:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ce32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce34:	685a      	ldr	r2, [r3, #4]
 800ce36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce38:	891b      	ldrh	r3, [r3, #8]
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	f7fb fec3 	bl	8008bc8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ce42:	4b62      	ldr	r3, [pc, #392]	; (800cfcc <tcp_receive+0xf20>)
 800ce44:	881b      	ldrh	r3, [r3, #0]
 800ce46:	461a      	mov	r2, r3
 800ce48:	4b5e      	ldr	r3, [pc, #376]	; (800cfc4 <tcp_receive+0xf18>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	441a      	add	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce52:	6879      	ldr	r1, [r7, #4]
 800ce54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ce56:	440b      	add	r3, r1
 800ce58:	1ad3      	subs	r3, r2, r3
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f340 8089 	ble.w	800cf72 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ce60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	899b      	ldrh	r3, [r3, #12]
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fa fc40 	bl	80076f0 <lwip_htons>
 800ce70:	4603      	mov	r3, r0
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	f003 0301 	and.w	r3, r3, #1
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d022      	beq.n	800cec2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ce7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	899b      	ldrh	r3, [r3, #12]
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	b21b      	sxth	r3, r3
 800ce88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ce8c:	b21c      	sxth	r4, r3
 800ce8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	899b      	ldrh	r3, [r3, #12]
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7fa fc29 	bl	80076f0 <lwip_htons>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fa fc20 	bl	80076f0 <lwip_htons>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	b21b      	sxth	r3, r3
 800ceb4:	4323      	orrs	r3, r4
 800ceb6:	b21a      	sxth	r2, r3
 800ceb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	b292      	uxth	r2, r2
 800cec0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cecc:	4413      	add	r3, r2
 800cece:	b299      	uxth	r1, r3
 800ced0:	4b3c      	ldr	r3, [pc, #240]	; (800cfc4 <tcp_receive+0xf18>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	1a8a      	subs	r2, r1, r2
 800cedc:	b292      	uxth	r2, r2
 800cede:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800cee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	685a      	ldr	r2, [r3, #4]
 800cee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	891b      	ldrh	r3, [r3, #8]
 800ceec:	4619      	mov	r1, r3
 800ceee:	4610      	mov	r0, r2
 800cef0:	f7fb fe6a 	bl	8008bc8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800cef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	891c      	ldrh	r4, [r3, #8]
 800cefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	899b      	ldrh	r3, [r3, #12]
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7fa fbf3 	bl	80076f0 <lwip_htons>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	f003 0303 	and.w	r3, r3, #3
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d001      	beq.n	800cf1a <tcp_receive+0xe6e>
 800cf16:	2301      	movs	r3, #1
 800cf18:	e000      	b.n	800cf1c <tcp_receive+0xe70>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	4423      	add	r3, r4
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	4b2a      	ldr	r3, [pc, #168]	; (800cfcc <tcp_receive+0xf20>)
 800cf22:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cf24:	4b29      	ldr	r3, [pc, #164]	; (800cfcc <tcp_receive+0xf20>)
 800cf26:	881b      	ldrh	r3, [r3, #0]
 800cf28:	461a      	mov	r2, r3
 800cf2a:	4b26      	ldr	r3, [pc, #152]	; (800cfc4 <tcp_receive+0xf18>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	441a      	add	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf34:	6879      	ldr	r1, [r7, #4]
 800cf36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cf38:	440b      	add	r3, r1
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d019      	beq.n	800cf72 <tcp_receive+0xec6>
 800cf3e:	4b24      	ldr	r3, [pc, #144]	; (800cfd0 <tcp_receive+0xf24>)
 800cf40:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800cf44:	4923      	ldr	r1, [pc, #140]	; (800cfd4 <tcp_receive+0xf28>)
 800cf46:	4824      	ldr	r0, [pc, #144]	; (800cfd8 <tcp_receive+0xf2c>)
 800cf48:	f004 fca2 	bl	8011890 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800cf4c:	e011      	b.n	800cf72 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f47f aea4 	bne.w	800cca4 <tcp_receive+0xbf8>
 800cf5c:	e00a      	b.n	800cf74 <tcp_receive+0xec8>
                break;
 800cf5e:	bf00      	nop
 800cf60:	e008      	b.n	800cf74 <tcp_receive+0xec8>
                break;
 800cf62:	bf00      	nop
 800cf64:	e006      	b.n	800cf74 <tcp_receive+0xec8>
                  break;
 800cf66:	bf00      	nop
 800cf68:	e004      	b.n	800cf74 <tcp_receive+0xec8>
                  break;
 800cf6a:	bf00      	nop
 800cf6c:	e002      	b.n	800cf74 <tcp_receive+0xec8>
                  break;
 800cf6e:	bf00      	nop
 800cf70:	e000      	b.n	800cf74 <tcp_receive+0xec8>
                break;
 800cf72:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f001 fa33 	bl	800e3e0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800cf7a:	e003      	b.n	800cf84 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f001 fa2f 	bl	800e3e0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cf82:	e01a      	b.n	800cfba <tcp_receive+0xf0e>
 800cf84:	e019      	b.n	800cfba <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800cf86:	4b0f      	ldr	r3, [pc, #60]	; (800cfc4 <tcp_receive+0xf18>)
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	db0a      	blt.n	800cfaa <tcp_receive+0xefe>
 800cf94:	4b0b      	ldr	r3, [pc, #44]	; (800cfc4 <tcp_receive+0xf18>)
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf9c:	6879      	ldr	r1, [r7, #4]
 800cf9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cfa0:	440b      	add	r3, r1
 800cfa2:	1ad3      	subs	r3, r2, r3
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	dd07      	ble.n	800cfba <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	8b5b      	ldrh	r3, [r3, #26]
 800cfae:	f043 0302 	orr.w	r3, r3, #2
 800cfb2:	b29a      	uxth	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800cfb8:	e7ff      	b.n	800cfba <tcp_receive+0xf0e>
 800cfba:	bf00      	nop
 800cfbc:	3750      	adds	r7, #80	; 0x50
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bdb0      	pop	{r4, r5, r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	2000c4cc 	.word	0x2000c4cc
 800cfc8:	2000c4ac 	.word	0x2000c4ac
 800cfcc:	2000c4d6 	.word	0x2000c4d6
 800cfd0:	08013aa8 	.word	0x08013aa8
 800cfd4:	08013e50 	.word	0x08013e50
 800cfd8:	08013af4 	.word	0x08013af4

0800cfdc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800cfe2:	4b15      	ldr	r3, [pc, #84]	; (800d038 <tcp_get_next_optbyte+0x5c>)
 800cfe4:	881b      	ldrh	r3, [r3, #0]
 800cfe6:	1c5a      	adds	r2, r3, #1
 800cfe8:	b291      	uxth	r1, r2
 800cfea:	4a13      	ldr	r2, [pc, #76]	; (800d038 <tcp_get_next_optbyte+0x5c>)
 800cfec:	8011      	strh	r1, [r2, #0]
 800cfee:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cff0:	4b12      	ldr	r3, [pc, #72]	; (800d03c <tcp_get_next_optbyte+0x60>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d004      	beq.n	800d002 <tcp_get_next_optbyte+0x26>
 800cff8:	4b11      	ldr	r3, [pc, #68]	; (800d040 <tcp_get_next_optbyte+0x64>)
 800cffa:	881b      	ldrh	r3, [r3, #0]
 800cffc:	88fa      	ldrh	r2, [r7, #6]
 800cffe:	429a      	cmp	r2, r3
 800d000:	d208      	bcs.n	800d014 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d002:	4b10      	ldr	r3, [pc, #64]	; (800d044 <tcp_get_next_optbyte+0x68>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	3314      	adds	r3, #20
 800d008:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d00a:	88fb      	ldrh	r3, [r7, #6]
 800d00c:	683a      	ldr	r2, [r7, #0]
 800d00e:	4413      	add	r3, r2
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	e00b      	b.n	800d02c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d014:	88fb      	ldrh	r3, [r7, #6]
 800d016:	b2da      	uxtb	r2, r3
 800d018:	4b09      	ldr	r3, [pc, #36]	; (800d040 <tcp_get_next_optbyte+0x64>)
 800d01a:	881b      	ldrh	r3, [r3, #0]
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	1ad3      	subs	r3, r2, r3
 800d020:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d022:	4b06      	ldr	r3, [pc, #24]	; (800d03c <tcp_get_next_optbyte+0x60>)
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	797b      	ldrb	r3, [r7, #5]
 800d028:	4413      	add	r3, r2
 800d02a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	2000c4c8 	.word	0x2000c4c8
 800d03c:	2000c4c4 	.word	0x2000c4c4
 800d040:	2000c4c2 	.word	0x2000c4c2
 800d044:	2000c4bc 	.word	0x2000c4bc

0800d048 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d106      	bne.n	800d064 <tcp_parseopt+0x1c>
 800d056:	4b32      	ldr	r3, [pc, #200]	; (800d120 <tcp_parseopt+0xd8>)
 800d058:	f240 727d 	movw	r2, #1917	; 0x77d
 800d05c:	4931      	ldr	r1, [pc, #196]	; (800d124 <tcp_parseopt+0xdc>)
 800d05e:	4832      	ldr	r0, [pc, #200]	; (800d128 <tcp_parseopt+0xe0>)
 800d060:	f004 fc16 	bl	8011890 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d064:	4b31      	ldr	r3, [pc, #196]	; (800d12c <tcp_parseopt+0xe4>)
 800d066:	881b      	ldrh	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d055      	beq.n	800d118 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d06c:	4b30      	ldr	r3, [pc, #192]	; (800d130 <tcp_parseopt+0xe8>)
 800d06e:	2200      	movs	r2, #0
 800d070:	801a      	strh	r2, [r3, #0]
 800d072:	e045      	b.n	800d100 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d074:	f7ff ffb2 	bl	800cfdc <tcp_get_next_optbyte>
 800d078:	4603      	mov	r3, r0
 800d07a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d07c:	7bfb      	ldrb	r3, [r7, #15]
 800d07e:	2b02      	cmp	r3, #2
 800d080:	d006      	beq.n	800d090 <tcp_parseopt+0x48>
 800d082:	2b02      	cmp	r3, #2
 800d084:	dc2b      	bgt.n	800d0de <tcp_parseopt+0x96>
 800d086:	2b00      	cmp	r3, #0
 800d088:	d041      	beq.n	800d10e <tcp_parseopt+0xc6>
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d127      	bne.n	800d0de <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d08e:	e037      	b.n	800d100 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d090:	f7ff ffa4 	bl	800cfdc <tcp_get_next_optbyte>
 800d094:	4603      	mov	r3, r0
 800d096:	2b04      	cmp	r3, #4
 800d098:	d13b      	bne.n	800d112 <tcp_parseopt+0xca>
 800d09a:	4b25      	ldr	r3, [pc, #148]	; (800d130 <tcp_parseopt+0xe8>)
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	3301      	adds	r3, #1
 800d0a0:	4a22      	ldr	r2, [pc, #136]	; (800d12c <tcp_parseopt+0xe4>)
 800d0a2:	8812      	ldrh	r2, [r2, #0]
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	da34      	bge.n	800d112 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d0a8:	f7ff ff98 	bl	800cfdc <tcp_get_next_optbyte>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	021b      	lsls	r3, r3, #8
 800d0b2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d0b4:	f7ff ff92 	bl	800cfdc <tcp_get_next_optbyte>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	89bb      	ldrh	r3, [r7, #12]
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d0c2:	89bb      	ldrh	r3, [r7, #12]
 800d0c4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d0c8:	d804      	bhi.n	800d0d4 <tcp_parseopt+0x8c>
 800d0ca:	89bb      	ldrh	r3, [r7, #12]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d001      	beq.n	800d0d4 <tcp_parseopt+0x8c>
 800d0d0:	89ba      	ldrh	r2, [r7, #12]
 800d0d2:	e001      	b.n	800d0d8 <tcp_parseopt+0x90>
 800d0d4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d0dc:	e010      	b.n	800d100 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d0de:	f7ff ff7d 	bl	800cfdc <tcp_get_next_optbyte>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d0e6:	7afb      	ldrb	r3, [r7, #11]
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d914      	bls.n	800d116 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d0ec:	7afb      	ldrb	r3, [r7, #11]
 800d0ee:	b29a      	uxth	r2, r3
 800d0f0:	4b0f      	ldr	r3, [pc, #60]	; (800d130 <tcp_parseopt+0xe8>)
 800d0f2:	881b      	ldrh	r3, [r3, #0]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	3b02      	subs	r3, #2
 800d0fa:	b29a      	uxth	r2, r3
 800d0fc:	4b0c      	ldr	r3, [pc, #48]	; (800d130 <tcp_parseopt+0xe8>)
 800d0fe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d100:	4b0b      	ldr	r3, [pc, #44]	; (800d130 <tcp_parseopt+0xe8>)
 800d102:	881a      	ldrh	r2, [r3, #0]
 800d104:	4b09      	ldr	r3, [pc, #36]	; (800d12c <tcp_parseopt+0xe4>)
 800d106:	881b      	ldrh	r3, [r3, #0]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d3b3      	bcc.n	800d074 <tcp_parseopt+0x2c>
 800d10c:	e004      	b.n	800d118 <tcp_parseopt+0xd0>
          return;
 800d10e:	bf00      	nop
 800d110:	e002      	b.n	800d118 <tcp_parseopt+0xd0>
            return;
 800d112:	bf00      	nop
 800d114:	e000      	b.n	800d118 <tcp_parseopt+0xd0>
            return;
 800d116:	bf00      	nop
      }
    }
  }
}
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	08013aa8 	.word	0x08013aa8
 800d124:	08013f0c 	.word	0x08013f0c
 800d128:	08013af4 	.word	0x08013af4
 800d12c:	2000c4c0 	.word	0x2000c4c0
 800d130:	2000c4c8 	.word	0x2000c4c8

0800d134 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d134:	b480      	push	{r7}
 800d136:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d138:	4b05      	ldr	r3, [pc, #20]	; (800d150 <tcp_trigger_input_pcb_close+0x1c>)
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	f043 0310 	orr.w	r3, r3, #16
 800d140:	b2da      	uxtb	r2, r3
 800d142:	4b03      	ldr	r3, [pc, #12]	; (800d150 <tcp_trigger_input_pcb_close+0x1c>)
 800d144:	701a      	strb	r2, [r3, #0]
}
 800d146:	bf00      	nop
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr
 800d150:	2000c4d9 	.word	0x2000c4d9

0800d154 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00a      	beq.n	800d17c <tcp_route+0x28>
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	7a1b      	ldrb	r3, [r3, #8]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d006      	beq.n	800d17c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	7a1b      	ldrb	r3, [r3, #8]
 800d172:	4618      	mov	r0, r3
 800d174:	f7fb fb20 	bl	80087b8 <netif_get_by_index>
 800d178:	4603      	mov	r3, r0
 800d17a:	e003      	b.n	800d184 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f002 fead 	bl	800fedc <ip4_route>
 800d182:	4603      	mov	r3, r0
  }
}
 800d184:	4618      	mov	r0, r3
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d18c:	b590      	push	{r4, r7, lr}
 800d18e:	b087      	sub	sp, #28
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	603b      	str	r3, [r7, #0]
 800d198:	4613      	mov	r3, r2
 800d19a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d105      	bne.n	800d1ae <tcp_create_segment+0x22>
 800d1a2:	4b44      	ldr	r3, [pc, #272]	; (800d2b4 <tcp_create_segment+0x128>)
 800d1a4:	22a3      	movs	r2, #163	; 0xa3
 800d1a6:	4944      	ldr	r1, [pc, #272]	; (800d2b8 <tcp_create_segment+0x12c>)
 800d1a8:	4844      	ldr	r0, [pc, #272]	; (800d2bc <tcp_create_segment+0x130>)
 800d1aa:	f004 fb71 	bl	8011890 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d105      	bne.n	800d1c0 <tcp_create_segment+0x34>
 800d1b4:	4b3f      	ldr	r3, [pc, #252]	; (800d2b4 <tcp_create_segment+0x128>)
 800d1b6:	22a4      	movs	r2, #164	; 0xa4
 800d1b8:	4941      	ldr	r1, [pc, #260]	; (800d2c0 <tcp_create_segment+0x134>)
 800d1ba:	4840      	ldr	r0, [pc, #256]	; (800d2bc <tcp_create_segment+0x130>)
 800d1bc:	f004 fb68 	bl	8011890 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d1c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	f003 0304 	and.w	r3, r3, #4
 800d1cc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d1ce:	2003      	movs	r0, #3
 800d1d0:	f7fa ff66 	bl	80080a0 <memp_malloc>
 800d1d4:	6138      	str	r0, [r7, #16]
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d104      	bne.n	800d1e6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d1dc:	68b8      	ldr	r0, [r7, #8]
 800d1de:	f7fb fe79 	bl	8008ed4 <pbuf_free>
    return NULL;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	e061      	b.n	800d2aa <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d1ec:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	68ba      	ldr	r2, [r7, #8]
 800d1f8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	891a      	ldrh	r2, [r3, #8]
 800d1fe:	7dfb      	ldrb	r3, [r7, #23]
 800d200:	b29b      	uxth	r3, r3
 800d202:	429a      	cmp	r2, r3
 800d204:	d205      	bcs.n	800d212 <tcp_create_segment+0x86>
 800d206:	4b2b      	ldr	r3, [pc, #172]	; (800d2b4 <tcp_create_segment+0x128>)
 800d208:	22b0      	movs	r2, #176	; 0xb0
 800d20a:	492e      	ldr	r1, [pc, #184]	; (800d2c4 <tcp_create_segment+0x138>)
 800d20c:	482b      	ldr	r0, [pc, #172]	; (800d2bc <tcp_create_segment+0x130>)
 800d20e:	f004 fb3f 	bl	8011890 <iprintf>
  seg->len = p->tot_len - optlen;
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	891a      	ldrh	r2, [r3, #8]
 800d216:	7dfb      	ldrb	r3, [r7, #23]
 800d218:	b29b      	uxth	r3, r3
 800d21a:	1ad3      	subs	r3, r2, r3
 800d21c:	b29a      	uxth	r2, r3
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d222:	2114      	movs	r1, #20
 800d224:	68b8      	ldr	r0, [r7, #8]
 800d226:	f7fb fdbf 	bl	8008da8 <pbuf_add_header>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d004      	beq.n	800d23a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d230:	6938      	ldr	r0, [r7, #16]
 800d232:	f7fd f8ce 	bl	800a3d2 <tcp_seg_free>
    return NULL;
 800d236:	2300      	movs	r3, #0
 800d238:	e037      	b.n	800d2aa <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	685a      	ldr	r2, [r3, #4]
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	8ada      	ldrh	r2, [r3, #22]
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	68dc      	ldr	r4, [r3, #12]
 800d24c:	4610      	mov	r0, r2
 800d24e:	f7fa fa4f 	bl	80076f0 <lwip_htons>
 800d252:	4603      	mov	r3, r0
 800d254:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	8b1a      	ldrh	r2, [r3, #24]
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	68dc      	ldr	r4, [r3, #12]
 800d25e:	4610      	mov	r0, r2
 800d260:	f7fa fa46 	bl	80076f0 <lwip_htons>
 800d264:	4603      	mov	r3, r0
 800d266:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	68dc      	ldr	r4, [r3, #12]
 800d26c:	6838      	ldr	r0, [r7, #0]
 800d26e:	f7fa fa54 	bl	800771a <lwip_htonl>
 800d272:	4603      	mov	r3, r0
 800d274:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d276:	7dfb      	ldrb	r3, [r7, #23]
 800d278:	089b      	lsrs	r3, r3, #2
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	3305      	adds	r3, #5
 800d280:	b29b      	uxth	r3, r3
 800d282:	031b      	lsls	r3, r3, #12
 800d284:	b29a      	uxth	r2, r3
 800d286:	79fb      	ldrb	r3, [r7, #7]
 800d288:	b29b      	uxth	r3, r3
 800d28a:	4313      	orrs	r3, r2
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	68dc      	ldr	r4, [r3, #12]
 800d292:	4610      	mov	r0, r2
 800d294:	f7fa fa2c 	bl	80076f0 <lwip_htons>
 800d298:	4603      	mov	r3, r0
 800d29a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	749a      	strb	r2, [r3, #18]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	74da      	strb	r2, [r3, #19]
  return seg;
 800d2a8:	693b      	ldr	r3, [r7, #16]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	371c      	adds	r7, #28
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd90      	pop	{r4, r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	08013f28 	.word	0x08013f28
 800d2b8:	08013f5c 	.word	0x08013f5c
 800d2bc:	08013f7c 	.word	0x08013f7c
 800d2c0:	08013fa4 	.word	0x08013fa4
 800d2c4:	08013fc8 	.word	0x08013fc8

0800d2c8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d2c8:	b590      	push	{r4, r7, lr}
 800d2ca:	b08b      	sub	sp, #44	; 0x2c
 800d2cc:	af02      	add	r7, sp, #8
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	61fb      	str	r3, [r7, #28]
 800d2d8:	2300      	movs	r3, #0
 800d2da:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d106      	bne.n	800d2f4 <tcp_split_unsent_seg+0x2c>
 800d2e6:	4b95      	ldr	r3, [pc, #596]	; (800d53c <tcp_split_unsent_seg+0x274>)
 800d2e8:	f240 324b 	movw	r2, #843	; 0x34b
 800d2ec:	4994      	ldr	r1, [pc, #592]	; (800d540 <tcp_split_unsent_seg+0x278>)
 800d2ee:	4895      	ldr	r0, [pc, #596]	; (800d544 <tcp_split_unsent_seg+0x27c>)
 800d2f0:	f004 face 	bl	8011890 <iprintf>

  useg = pcb->unsent;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2f8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d102      	bne.n	800d306 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d300:	f04f 33ff 	mov.w	r3, #4294967295
 800d304:	e116      	b.n	800d534 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d306:	887b      	ldrh	r3, [r7, #2]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d109      	bne.n	800d320 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d30c:	4b8b      	ldr	r3, [pc, #556]	; (800d53c <tcp_split_unsent_seg+0x274>)
 800d30e:	f240 3253 	movw	r2, #851	; 0x353
 800d312:	498d      	ldr	r1, [pc, #564]	; (800d548 <tcp_split_unsent_seg+0x280>)
 800d314:	488b      	ldr	r0, [pc, #556]	; (800d544 <tcp_split_unsent_seg+0x27c>)
 800d316:	f004 fabb 	bl	8011890 <iprintf>
    return ERR_VAL;
 800d31a:	f06f 0305 	mvn.w	r3, #5
 800d31e:	e109      	b.n	800d534 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	891b      	ldrh	r3, [r3, #8]
 800d324:	887a      	ldrh	r2, [r7, #2]
 800d326:	429a      	cmp	r2, r3
 800d328:	d301      	bcc.n	800d32e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	e102      	b.n	800d534 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d332:	887a      	ldrh	r2, [r7, #2]
 800d334:	429a      	cmp	r2, r3
 800d336:	d906      	bls.n	800d346 <tcp_split_unsent_seg+0x7e>
 800d338:	4b80      	ldr	r3, [pc, #512]	; (800d53c <tcp_split_unsent_seg+0x274>)
 800d33a:	f240 325b 	movw	r2, #859	; 0x35b
 800d33e:	4983      	ldr	r1, [pc, #524]	; (800d54c <tcp_split_unsent_seg+0x284>)
 800d340:	4880      	ldr	r0, [pc, #512]	; (800d544 <tcp_split_unsent_seg+0x27c>)
 800d342:	f004 faa5 	bl	8011890 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	891b      	ldrh	r3, [r3, #8]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d106      	bne.n	800d35c <tcp_split_unsent_seg+0x94>
 800d34e:	4b7b      	ldr	r3, [pc, #492]	; (800d53c <tcp_split_unsent_seg+0x274>)
 800d350:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d354:	497e      	ldr	r1, [pc, #504]	; (800d550 <tcp_split_unsent_seg+0x288>)
 800d356:	487b      	ldr	r0, [pc, #492]	; (800d544 <tcp_split_unsent_seg+0x27c>)
 800d358:	f004 fa9a 	bl	8011890 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	7a9b      	ldrb	r3, [r3, #10]
 800d360:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d362:	7bfb      	ldrb	r3, [r7, #15]
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	b2db      	uxtb	r3, r3
 800d368:	f003 0304 	and.w	r3, r3, #4
 800d36c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	891a      	ldrh	r2, [r3, #8]
 800d372:	887b      	ldrh	r3, [r7, #2]
 800d374:	1ad3      	subs	r3, r2, r3
 800d376:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d378:	7bbb      	ldrb	r3, [r7, #14]
 800d37a:	b29a      	uxth	r2, r3
 800d37c:	89bb      	ldrh	r3, [r7, #12]
 800d37e:	4413      	add	r3, r2
 800d380:	b29b      	uxth	r3, r3
 800d382:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d386:	4619      	mov	r1, r3
 800d388:	2036      	movs	r0, #54	; 0x36
 800d38a:	f7fb fabf 	bl	800890c <pbuf_alloc>
 800d38e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 80b7 	beq.w	800d506 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	891a      	ldrh	r2, [r3, #8]
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	891b      	ldrh	r3, [r3, #8]
 800d3a2:	1ad3      	subs	r3, r2, r3
 800d3a4:	b29a      	uxth	r2, r3
 800d3a6:	887b      	ldrh	r3, [r7, #2]
 800d3a8:	4413      	add	r3, r2
 800d3aa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	6858      	ldr	r0, [r3, #4]
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	685a      	ldr	r2, [r3, #4]
 800d3b4:	7bbb      	ldrb	r3, [r7, #14]
 800d3b6:	18d1      	adds	r1, r2, r3
 800d3b8:	897b      	ldrh	r3, [r7, #10]
 800d3ba:	89ba      	ldrh	r2, [r7, #12]
 800d3bc:	f7fb ff80 	bl	80092c0 <pbuf_copy_partial>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	89bb      	ldrh	r3, [r7, #12]
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	f040 809f 	bne.w	800d50a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	899b      	ldrh	r3, [r3, #12]
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fa f98b 	bl	80076f0 <lwip_htons>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3e2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d3e8:	7efb      	ldrb	r3, [r7, #27]
 800d3ea:	f003 0308 	and.w	r3, r3, #8
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d007      	beq.n	800d402 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d3f2:	7efb      	ldrb	r3, [r7, #27]
 800d3f4:	f023 0308 	bic.w	r3, r3, #8
 800d3f8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d3fa:	7ebb      	ldrb	r3, [r7, #26]
 800d3fc:	f043 0308 	orr.w	r3, r3, #8
 800d400:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d402:	7efb      	ldrb	r3, [r7, #27]
 800d404:	f003 0301 	and.w	r3, r3, #1
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d007      	beq.n	800d41c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d40c:	7efb      	ldrb	r3, [r7, #27]
 800d40e:	f023 0301 	bic.w	r3, r3, #1
 800d412:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d414:	7ebb      	ldrb	r3, [r7, #26]
 800d416:	f043 0301 	orr.w	r3, r3, #1
 800d41a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	4618      	mov	r0, r3
 800d424:	f7fa f979 	bl	800771a <lwip_htonl>
 800d428:	4602      	mov	r2, r0
 800d42a:	887b      	ldrh	r3, [r7, #2]
 800d42c:	18d1      	adds	r1, r2, r3
 800d42e:	7eba      	ldrb	r2, [r7, #26]
 800d430:	7bfb      	ldrb	r3, [r7, #15]
 800d432:	9300      	str	r3, [sp, #0]
 800d434:	460b      	mov	r3, r1
 800d436:	6939      	ldr	r1, [r7, #16]
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f7ff fea7 	bl	800d18c <tcp_create_segment>
 800d43e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d063      	beq.n	800d50e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fb fdd0 	bl	8008ff0 <pbuf_clen>
 800d450:	4603      	mov	r3, r0
 800d452:	461a      	mov	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d45a:	1a9b      	subs	r3, r3, r2
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	6858      	ldr	r0, [r3, #4]
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	891a      	ldrh	r2, [r3, #8]
 800d46e:	89bb      	ldrh	r3, [r7, #12]
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	b29b      	uxth	r3, r3
 800d474:	4619      	mov	r1, r3
 800d476:	f7fb fba7 	bl	8008bc8 <pbuf_realloc>
  useg->len -= remainder;
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	891a      	ldrh	r2, [r3, #8]
 800d47e:	89bb      	ldrh	r3, [r7, #12]
 800d480:	1ad3      	subs	r3, r2, r3
 800d482:	b29a      	uxth	r2, r3
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	899b      	ldrh	r3, [r3, #12]
 800d48e:	b29c      	uxth	r4, r3
 800d490:	7efb      	ldrb	r3, [r7, #27]
 800d492:	b29b      	uxth	r3, r3
 800d494:	4618      	mov	r0, r3
 800d496:	f7fa f92b 	bl	80076f0 <lwip_htons>
 800d49a:	4603      	mov	r3, r0
 800d49c:	461a      	mov	r2, r3
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	68db      	ldr	r3, [r3, #12]
 800d4a2:	4322      	orrs	r2, r4
 800d4a4:	b292      	uxth	r2, r2
 800d4a6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7fb fd9f 	bl	8008ff0 <pbuf_clen>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d4bc:	4413      	add	r3, r2
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d4c6:	69fb      	ldr	r3, [r7, #28]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7fb fd90 	bl	8008ff0 <pbuf_clen>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d4da:	4413      	add	r3, r2
 800d4dc:	b29a      	uxth	r2, r3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	69fa      	ldr	r2, [r7, #28]
 800d4f0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d103      	bne.n	800d502 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d502:	2300      	movs	r3, #0
 800d504:	e016      	b.n	800d534 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d506:	bf00      	nop
 800d508:	e002      	b.n	800d510 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d50a:	bf00      	nop
 800d50c:	e000      	b.n	800d510 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d50e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d006      	beq.n	800d524 <tcp_split_unsent_seg+0x25c>
 800d516:	4b09      	ldr	r3, [pc, #36]	; (800d53c <tcp_split_unsent_seg+0x274>)
 800d518:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d51c:	490d      	ldr	r1, [pc, #52]	; (800d554 <tcp_split_unsent_seg+0x28c>)
 800d51e:	4809      	ldr	r0, [pc, #36]	; (800d544 <tcp_split_unsent_seg+0x27c>)
 800d520:	f004 f9b6 	bl	8011890 <iprintf>
  if (p != NULL) {
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d002      	beq.n	800d530 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d52a:	6938      	ldr	r0, [r7, #16]
 800d52c:	f7fb fcd2 	bl	8008ed4 <pbuf_free>
  }

  return ERR_MEM;
 800d530:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d534:	4618      	mov	r0, r3
 800d536:	3724      	adds	r7, #36	; 0x24
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd90      	pop	{r4, r7, pc}
 800d53c:	08013f28 	.word	0x08013f28
 800d540:	080142bc 	.word	0x080142bc
 800d544:	08013f7c 	.word	0x08013f7c
 800d548:	080142e0 	.word	0x080142e0
 800d54c:	08014304 	.word	0x08014304
 800d550:	08014314 	.word	0x08014314
 800d554:	08014324 	.word	0x08014324

0800d558 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d558:	b590      	push	{r4, r7, lr}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d106      	bne.n	800d574 <tcp_send_fin+0x1c>
 800d566:	4b21      	ldr	r3, [pc, #132]	; (800d5ec <tcp_send_fin+0x94>)
 800d568:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d56c:	4920      	ldr	r1, [pc, #128]	; (800d5f0 <tcp_send_fin+0x98>)
 800d56e:	4821      	ldr	r0, [pc, #132]	; (800d5f4 <tcp_send_fin+0x9c>)
 800d570:	f004 f98e 	bl	8011890 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d02e      	beq.n	800d5da <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d580:	60fb      	str	r3, [r7, #12]
 800d582:	e002      	b.n	800d58a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d1f8      	bne.n	800d584 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	899b      	ldrh	r3, [r3, #12]
 800d598:	b29b      	uxth	r3, r3
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fa f8a8 	bl	80076f0 <lwip_htons>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	f003 0307 	and.w	r3, r3, #7
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d116      	bne.n	800d5da <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	899b      	ldrh	r3, [r3, #12]
 800d5b2:	b29c      	uxth	r4, r3
 800d5b4:	2001      	movs	r0, #1
 800d5b6:	f7fa f89b 	bl	80076f0 <lwip_htons>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	461a      	mov	r2, r3
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	4322      	orrs	r2, r4
 800d5c4:	b292      	uxth	r2, r2
 800d5c6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	8b5b      	ldrh	r3, [r3, #26]
 800d5cc:	f043 0320 	orr.w	r3, r3, #32
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	e004      	b.n	800d5e4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d5da:	2101      	movs	r1, #1
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 f80b 	bl	800d5f8 <tcp_enqueue_flags>
 800d5e2:	4603      	mov	r3, r0
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3714      	adds	r7, #20
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd90      	pop	{r4, r7, pc}
 800d5ec:	08013f28 	.word	0x08013f28
 800d5f0:	08014330 	.word	0x08014330
 800d5f4:	08013f7c 	.word	0x08013f7c

0800d5f8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b08a      	sub	sp, #40	; 0x28
 800d5fc:	af02      	add	r7, sp, #8
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	460b      	mov	r3, r1
 800d602:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d604:	2300      	movs	r3, #0
 800d606:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d608:	2300      	movs	r3, #0
 800d60a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d60c:	78fb      	ldrb	r3, [r7, #3]
 800d60e:	f003 0303 	and.w	r3, r3, #3
 800d612:	2b00      	cmp	r3, #0
 800d614:	d106      	bne.n	800d624 <tcp_enqueue_flags+0x2c>
 800d616:	4b67      	ldr	r3, [pc, #412]	; (800d7b4 <tcp_enqueue_flags+0x1bc>)
 800d618:	f240 4211 	movw	r2, #1041	; 0x411
 800d61c:	4966      	ldr	r1, [pc, #408]	; (800d7b8 <tcp_enqueue_flags+0x1c0>)
 800d61e:	4867      	ldr	r0, [pc, #412]	; (800d7bc <tcp_enqueue_flags+0x1c4>)
 800d620:	f004 f936 	bl	8011890 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d106      	bne.n	800d638 <tcp_enqueue_flags+0x40>
 800d62a:	4b62      	ldr	r3, [pc, #392]	; (800d7b4 <tcp_enqueue_flags+0x1bc>)
 800d62c:	f240 4213 	movw	r2, #1043	; 0x413
 800d630:	4963      	ldr	r1, [pc, #396]	; (800d7c0 <tcp_enqueue_flags+0x1c8>)
 800d632:	4862      	ldr	r0, [pc, #392]	; (800d7bc <tcp_enqueue_flags+0x1c4>)
 800d634:	f004 f92c 	bl	8011890 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d638:	78fb      	ldrb	r3, [r7, #3]
 800d63a:	f003 0302 	and.w	r3, r3, #2
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d001      	beq.n	800d646 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d642:	2301      	movs	r3, #1
 800d644:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d646:	7ffb      	ldrb	r3, [r7, #31]
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	f003 0304 	and.w	r3, r3, #4
 800d650:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d652:	7dfb      	ldrb	r3, [r7, #23]
 800d654:	b29b      	uxth	r3, r3
 800d656:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d65a:	4619      	mov	r1, r3
 800d65c:	2036      	movs	r0, #54	; 0x36
 800d65e:	f7fb f955 	bl	800890c <pbuf_alloc>
 800d662:	6138      	str	r0, [r7, #16]
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d109      	bne.n	800d67e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	8b5b      	ldrh	r3, [r3, #26]
 800d66e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d672:	b29a      	uxth	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d678:	f04f 33ff 	mov.w	r3, #4294967295
 800d67c:	e095      	b.n	800d7aa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	895a      	ldrh	r2, [r3, #10]
 800d682:	7dfb      	ldrb	r3, [r7, #23]
 800d684:	b29b      	uxth	r3, r3
 800d686:	429a      	cmp	r2, r3
 800d688:	d206      	bcs.n	800d698 <tcp_enqueue_flags+0xa0>
 800d68a:	4b4a      	ldr	r3, [pc, #296]	; (800d7b4 <tcp_enqueue_flags+0x1bc>)
 800d68c:	f240 4239 	movw	r2, #1081	; 0x439
 800d690:	494c      	ldr	r1, [pc, #304]	; (800d7c4 <tcp_enqueue_flags+0x1cc>)
 800d692:	484a      	ldr	r0, [pc, #296]	; (800d7bc <tcp_enqueue_flags+0x1c4>)
 800d694:	f004 f8fc 	bl	8011890 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d69c:	78fa      	ldrb	r2, [r7, #3]
 800d69e:	7ffb      	ldrb	r3, [r7, #31]
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	6939      	ldr	r1, [r7, #16]
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f7ff fd70 	bl	800d18c <tcp_create_segment>
 800d6ac:	60f8      	str	r0, [r7, #12]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d109      	bne.n	800d6c8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	8b5b      	ldrh	r3, [r3, #26]
 800d6b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6c6:	e070      	b.n	800d7aa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	f003 0303 	and.w	r3, r3, #3
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d006      	beq.n	800d6e2 <tcp_enqueue_flags+0xea>
 800d6d4:	4b37      	ldr	r3, [pc, #220]	; (800d7b4 <tcp_enqueue_flags+0x1bc>)
 800d6d6:	f240 4242 	movw	r2, #1090	; 0x442
 800d6da:	493b      	ldr	r1, [pc, #236]	; (800d7c8 <tcp_enqueue_flags+0x1d0>)
 800d6dc:	4837      	ldr	r0, [pc, #220]	; (800d7bc <tcp_enqueue_flags+0x1c4>)
 800d6de:	f004 f8d7 	bl	8011890 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	891b      	ldrh	r3, [r3, #8]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d006      	beq.n	800d6f8 <tcp_enqueue_flags+0x100>
 800d6ea:	4b32      	ldr	r3, [pc, #200]	; (800d7b4 <tcp_enqueue_flags+0x1bc>)
 800d6ec:	f240 4243 	movw	r2, #1091	; 0x443
 800d6f0:	4936      	ldr	r1, [pc, #216]	; (800d7cc <tcp_enqueue_flags+0x1d4>)
 800d6f2:	4832      	ldr	r0, [pc, #200]	; (800d7bc <tcp_enqueue_flags+0x1c4>)
 800d6f4:	f004 f8cc 	bl	8011890 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d103      	bne.n	800d708 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	68fa      	ldr	r2, [r7, #12]
 800d704:	66da      	str	r2, [r3, #108]	; 0x6c
 800d706:	e00d      	b.n	800d724 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d70c:	61bb      	str	r3, [r7, #24]
 800d70e:	e002      	b.n	800d716 <tcp_enqueue_flags+0x11e>
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	61bb      	str	r3, [r7, #24]
 800d716:	69bb      	ldr	r3, [r7, #24]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d1f8      	bne.n	800d710 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d72c:	78fb      	ldrb	r3, [r7, #3]
 800d72e:	f003 0302 	and.w	r3, r3, #2
 800d732:	2b00      	cmp	r3, #0
 800d734:	d104      	bne.n	800d740 <tcp_enqueue_flags+0x148>
 800d736:	78fb      	ldrb	r3, [r7, #3]
 800d738:	f003 0301 	and.w	r3, r3, #1
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d004      	beq.n	800d74a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d744:	1c5a      	adds	r2, r3, #1
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d74a:	78fb      	ldrb	r3, [r7, #3]
 800d74c:	f003 0301 	and.w	r3, r3, #1
 800d750:	2b00      	cmp	r3, #0
 800d752:	d006      	beq.n	800d762 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	8b5b      	ldrh	r3, [r3, #26]
 800d758:	f043 0320 	orr.w	r3, r3, #32
 800d75c:	b29a      	uxth	r2, r3
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	4618      	mov	r0, r3
 800d768:	f7fb fc42 	bl	8008ff0 <pbuf_clen>
 800d76c:	4603      	mov	r3, r0
 800d76e:	461a      	mov	r2, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d776:	4413      	add	r3, r2
 800d778:	b29a      	uxth	r2, r3
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00e      	beq.n	800d7a8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d10a      	bne.n	800d7a8 <tcp_enqueue_flags+0x1b0>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d796:	2b00      	cmp	r3, #0
 800d798:	d106      	bne.n	800d7a8 <tcp_enqueue_flags+0x1b0>
 800d79a:	4b06      	ldr	r3, [pc, #24]	; (800d7b4 <tcp_enqueue_flags+0x1bc>)
 800d79c:	f240 4265 	movw	r2, #1125	; 0x465
 800d7a0:	490b      	ldr	r1, [pc, #44]	; (800d7d0 <tcp_enqueue_flags+0x1d8>)
 800d7a2:	4806      	ldr	r0, [pc, #24]	; (800d7bc <tcp_enqueue_flags+0x1c4>)
 800d7a4:	f004 f874 	bl	8011890 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d7a8:	2300      	movs	r3, #0
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3720      	adds	r7, #32
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	08013f28 	.word	0x08013f28
 800d7b8:	0801434c 	.word	0x0801434c
 800d7bc:	08013f7c 	.word	0x08013f7c
 800d7c0:	080143a4 	.word	0x080143a4
 800d7c4:	080143c4 	.word	0x080143c4
 800d7c8:	08014400 	.word	0x08014400
 800d7cc:	08014418 	.word	0x08014418
 800d7d0:	08014444 	.word	0x08014444

0800d7d4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d7d4:	b5b0      	push	{r4, r5, r7, lr}
 800d7d6:	b08a      	sub	sp, #40	; 0x28
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d106      	bne.n	800d7f0 <tcp_output+0x1c>
 800d7e2:	4b8a      	ldr	r3, [pc, #552]	; (800da0c <tcp_output+0x238>)
 800d7e4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d7e8:	4989      	ldr	r1, [pc, #548]	; (800da10 <tcp_output+0x23c>)
 800d7ea:	488a      	ldr	r0, [pc, #552]	; (800da14 <tcp_output+0x240>)
 800d7ec:	f004 f850 	bl	8011890 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	7d1b      	ldrb	r3, [r3, #20]
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d106      	bne.n	800d806 <tcp_output+0x32>
 800d7f8:	4b84      	ldr	r3, [pc, #528]	; (800da0c <tcp_output+0x238>)
 800d7fa:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d7fe:	4986      	ldr	r1, [pc, #536]	; (800da18 <tcp_output+0x244>)
 800d800:	4884      	ldr	r0, [pc, #528]	; (800da14 <tcp_output+0x240>)
 800d802:	f004 f845 	bl	8011890 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d806:	4b85      	ldr	r3, [pc, #532]	; (800da1c <tcp_output+0x248>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d101      	bne.n	800d814 <tcp_output+0x40>
    return ERR_OK;
 800d810:	2300      	movs	r3, #0
 800d812:	e1ce      	b.n	800dbb2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d820:	4293      	cmp	r3, r2
 800d822:	bf28      	it	cs
 800d824:	4613      	movcs	r3, r2
 800d826:	b29b      	uxth	r3, r3
 800d828:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d82e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d832:	2b00      	cmp	r3, #0
 800d834:	d10b      	bne.n	800d84e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	8b5b      	ldrh	r3, [r3, #26]
 800d83a:	f003 0302 	and.w	r3, r3, #2
 800d83e:	2b00      	cmp	r3, #0
 800d840:	f000 81aa 	beq.w	800db98 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 fdcb 	bl	800e3e0 <tcp_send_empty_ack>
 800d84a:	4603      	mov	r3, r0
 800d84c:	e1b1      	b.n	800dbb2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d84e:	6879      	ldr	r1, [r7, #4]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	3304      	adds	r3, #4
 800d854:	461a      	mov	r2, r3
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f7ff fc7c 	bl	800d154 <tcp_route>
 800d85c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d102      	bne.n	800d86a <tcp_output+0x96>
    return ERR_RTE;
 800d864:	f06f 0303 	mvn.w	r3, #3
 800d868:	e1a3      	b.n	800dbb2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d003      	beq.n	800d878 <tcp_output+0xa4>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d111      	bne.n	800d89c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d002      	beq.n	800d884 <tcp_output+0xb0>
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	3304      	adds	r3, #4
 800d882:	e000      	b.n	800d886 <tcp_output+0xb2>
 800d884:	2300      	movs	r3, #0
 800d886:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d102      	bne.n	800d894 <tcp_output+0xc0>
      return ERR_RTE;
 800d88e:	f06f 0303 	mvn.w	r3, #3
 800d892:	e18e      	b.n	800dbb2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7f9 ff39 	bl	800771a <lwip_htonl>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8b2:	8912      	ldrh	r2, [r2, #8]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	69ba      	ldr	r2, [r7, #24]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d227      	bcs.n	800d90c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d114      	bne.n	800d8f4 <tcp_output+0x120>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d110      	bne.n	800d8f4 <tcp_output+0x120>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d10b      	bne.n	800d8f4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	8b5b      	ldrh	r3, [r3, #26]
 800d8f8:	f003 0302 	and.w	r3, r3, #2
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f000 814d 	beq.w	800db9c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 fd6c 	bl	800e3e0 <tcp_send_empty_ack>
 800d908:	4603      	mov	r3, r0
 800d90a:	e152      	b.n	800dbb2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d918:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d91a:	6a3b      	ldr	r3, [r7, #32]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f000 811c 	beq.w	800db5a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d922:	e002      	b.n	800d92a <tcp_output+0x156>
 800d924:	6a3b      	ldr	r3, [r7, #32]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	623b      	str	r3, [r7, #32]
 800d92a:	6a3b      	ldr	r3, [r7, #32]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d1f8      	bne.n	800d924 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d932:	e112      	b.n	800db5a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	899b      	ldrh	r3, [r3, #12]
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7f9 fed7 	bl	80076f0 <lwip_htons>
 800d942:	4603      	mov	r3, r0
 800d944:	b2db      	uxtb	r3, r3
 800d946:	f003 0304 	and.w	r3, r3, #4
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d006      	beq.n	800d95c <tcp_output+0x188>
 800d94e:	4b2f      	ldr	r3, [pc, #188]	; (800da0c <tcp_output+0x238>)
 800d950:	f240 5236 	movw	r2, #1334	; 0x536
 800d954:	4932      	ldr	r1, [pc, #200]	; (800da20 <tcp_output+0x24c>)
 800d956:	482f      	ldr	r0, [pc, #188]	; (800da14 <tcp_output+0x240>)
 800d958:	f003 ff9a 	bl	8011890 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d960:	2b00      	cmp	r3, #0
 800d962:	d01f      	beq.n	800d9a4 <tcp_output+0x1d0>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	8b5b      	ldrh	r3, [r3, #26]
 800d968:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d119      	bne.n	800d9a4 <tcp_output+0x1d0>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d974:	2b00      	cmp	r3, #0
 800d976:	d00b      	beq.n	800d990 <tcp_output+0x1bc>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d110      	bne.n	800d9a4 <tcp_output+0x1d0>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d986:	891a      	ldrh	r2, [r3, #8]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d209      	bcs.n	800d9a4 <tcp_output+0x1d0>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d996:	2b00      	cmp	r3, #0
 800d998:	d004      	beq.n	800d9a4 <tcp_output+0x1d0>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d9a0:	2b08      	cmp	r3, #8
 800d9a2:	d901      	bls.n	800d9a8 <tcp_output+0x1d4>
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e000      	b.n	800d9aa <tcp_output+0x1d6>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d106      	bne.n	800d9bc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	8b5b      	ldrh	r3, [r3, #26]
 800d9b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	f000 80e4 	beq.w	800db84 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	7d1b      	ldrb	r3, [r3, #20]
 800d9c0:	2b02      	cmp	r3, #2
 800d9c2:	d00d      	beq.n	800d9e0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	899b      	ldrh	r3, [r3, #12]
 800d9ca:	b29c      	uxth	r4, r3
 800d9cc:	2010      	movs	r0, #16
 800d9ce:	f7f9 fe8f 	bl	80076f0 <lwip_htons>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	4322      	orrs	r2, r4
 800d9dc:	b292      	uxth	r2, r2
 800d9de:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	6879      	ldr	r1, [r7, #4]
 800d9e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9e6:	f000 f909 	bl	800dbfc <tcp_output_segment>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d9ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d016      	beq.n	800da24 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	8b5b      	ldrh	r3, [r3, #26]
 800d9fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	835a      	strh	r2, [r3, #26]
      return err;
 800da04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da08:	e0d3      	b.n	800dbb2 <tcp_output+0x3de>
 800da0a:	bf00      	nop
 800da0c:	08013f28 	.word	0x08013f28
 800da10:	0801446c 	.word	0x0801446c
 800da14:	08013f7c 	.word	0x08013f7c
 800da18:	08014484 	.word	0x08014484
 800da1c:	2000c4e0 	.word	0x2000c4e0
 800da20:	080144ac 	.word	0x080144ac
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800da24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	7d1b      	ldrb	r3, [r3, #20]
 800da30:	2b02      	cmp	r3, #2
 800da32:	d006      	beq.n	800da42 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	8b5b      	ldrh	r3, [r3, #26]
 800da38:	f023 0303 	bic.w	r3, r3, #3
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800da42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da44:	68db      	ldr	r3, [r3, #12]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	4618      	mov	r0, r3
 800da4a:	f7f9 fe66 	bl	800771a <lwip_htonl>
 800da4e:	4604      	mov	r4, r0
 800da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da52:	891b      	ldrh	r3, [r3, #8]
 800da54:	461d      	mov	r5, r3
 800da56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	899b      	ldrh	r3, [r3, #12]
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f9 fe46 	bl	80076f0 <lwip_htons>
 800da64:	4603      	mov	r3, r0
 800da66:	b2db      	uxtb	r3, r3
 800da68:	f003 0303 	and.w	r3, r3, #3
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d001      	beq.n	800da74 <tcp_output+0x2a0>
 800da70:	2301      	movs	r3, #1
 800da72:	e000      	b.n	800da76 <tcp_output+0x2a2>
 800da74:	2300      	movs	r3, #0
 800da76:	442b      	add	r3, r5
 800da78:	4423      	add	r3, r4
 800da7a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	2b00      	cmp	r3, #0
 800da86:	da02      	bge.n	800da8e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	68ba      	ldr	r2, [r7, #8]
 800da8c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800da8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da90:	891b      	ldrh	r3, [r3, #8]
 800da92:	461c      	mov	r4, r3
 800da94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	899b      	ldrh	r3, [r3, #12]
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7f9 fe27 	bl	80076f0 <lwip_htons>
 800daa2:	4603      	mov	r3, r0
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	f003 0303 	and.w	r3, r3, #3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d001      	beq.n	800dab2 <tcp_output+0x2de>
 800daae:	2301      	movs	r3, #1
 800dab0:	e000      	b.n	800dab4 <tcp_output+0x2e0>
 800dab2:	2300      	movs	r3, #0
 800dab4:	4423      	add	r3, r4
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d049      	beq.n	800db4e <tcp_output+0x37a>
      seg->next = NULL;
 800daba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabc:	2200      	movs	r2, #0
 800dabe:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d105      	bne.n	800dad4 <tcp_output+0x300>
        pcb->unacked = seg;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dacc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800dace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad0:	623b      	str	r3, [r7, #32]
 800dad2:	e03f      	b.n	800db54 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800dad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	4618      	mov	r0, r3
 800dadc:	f7f9 fe1d 	bl	800771a <lwip_htonl>
 800dae0:	4604      	mov	r4, r0
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	4618      	mov	r0, r3
 800daea:	f7f9 fe16 	bl	800771a <lwip_htonl>
 800daee:	4603      	mov	r3, r0
 800daf0:	1ae3      	subs	r3, r4, r3
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	da24      	bge.n	800db40 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	3370      	adds	r3, #112	; 0x70
 800dafa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dafc:	e002      	b.n	800db04 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d011      	beq.n	800db30 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	4618      	mov	r0, r3
 800db16:	f7f9 fe00 	bl	800771a <lwip_htonl>
 800db1a:	4604      	mov	r4, r0
 800db1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	4618      	mov	r0, r3
 800db24:	f7f9 fdf9 	bl	800771a <lwip_htonl>
 800db28:	4603      	mov	r3, r0
 800db2a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	dbe6      	blt.n	800dafe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db36:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db3c:	601a      	str	r2, [r3, #0]
 800db3e:	e009      	b.n	800db54 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800db40:	6a3b      	ldr	r3, [r7, #32]
 800db42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db44:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800db46:	6a3b      	ldr	r3, [r7, #32]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	623b      	str	r3, [r7, #32]
 800db4c:	e002      	b.n	800db54 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800db4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db50:	f7fc fc3f 	bl	800a3d2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db58:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800db5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d012      	beq.n	800db86 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800db60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	4618      	mov	r0, r3
 800db68:	f7f9 fdd7 	bl	800771a <lwip_htonl>
 800db6c:	4602      	mov	r2, r0
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db76:	8912      	ldrh	r2, [r2, #8]
 800db78:	4413      	add	r3, r2
  while (seg != NULL &&
 800db7a:	69ba      	ldr	r2, [r7, #24]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	f4bf aed9 	bcs.w	800d934 <tcp_output+0x160>
 800db82:	e000      	b.n	800db86 <tcp_output+0x3b2>
      break;
 800db84:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d108      	bne.n	800dba0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2200      	movs	r2, #0
 800db92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800db96:	e004      	b.n	800dba2 <tcp_output+0x3ce>
    goto output_done;
 800db98:	bf00      	nop
 800db9a:	e002      	b.n	800dba2 <tcp_output+0x3ce>
    goto output_done;
 800db9c:	bf00      	nop
 800db9e:	e000      	b.n	800dba2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800dba0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	8b5b      	ldrh	r3, [r3, #26]
 800dba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800dbb0:	2300      	movs	r3, #0
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3728      	adds	r7, #40	; 0x28
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bdb0      	pop	{r4, r5, r7, pc}
 800dbba:	bf00      	nop

0800dbbc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b082      	sub	sp, #8
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d106      	bne.n	800dbd8 <tcp_output_segment_busy+0x1c>
 800dbca:	4b09      	ldr	r3, [pc, #36]	; (800dbf0 <tcp_output_segment_busy+0x34>)
 800dbcc:	f240 529a 	movw	r2, #1434	; 0x59a
 800dbd0:	4908      	ldr	r1, [pc, #32]	; (800dbf4 <tcp_output_segment_busy+0x38>)
 800dbd2:	4809      	ldr	r0, [pc, #36]	; (800dbf8 <tcp_output_segment_busy+0x3c>)
 800dbd4:	f003 fe5c 	bl	8011890 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	7b9b      	ldrb	r3, [r3, #14]
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d001      	beq.n	800dbe6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	e000      	b.n	800dbe8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800dbe6:	2300      	movs	r3, #0
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3708      	adds	r7, #8
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	08013f28 	.word	0x08013f28
 800dbf4:	080144c4 	.word	0x080144c4
 800dbf8:	08013f7c 	.word	0x08013f7c

0800dbfc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800dbfc:	b5b0      	push	{r4, r5, r7, lr}
 800dbfe:	b08c      	sub	sp, #48	; 0x30
 800dc00:	af04      	add	r7, sp, #16
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d106      	bne.n	800dc1c <tcp_output_segment+0x20>
 800dc0e:	4b63      	ldr	r3, [pc, #396]	; (800dd9c <tcp_output_segment+0x1a0>)
 800dc10:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800dc14:	4962      	ldr	r1, [pc, #392]	; (800dda0 <tcp_output_segment+0x1a4>)
 800dc16:	4863      	ldr	r0, [pc, #396]	; (800dda4 <tcp_output_segment+0x1a8>)
 800dc18:	f003 fe3a 	bl	8011890 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d106      	bne.n	800dc30 <tcp_output_segment+0x34>
 800dc22:	4b5e      	ldr	r3, [pc, #376]	; (800dd9c <tcp_output_segment+0x1a0>)
 800dc24:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800dc28:	495f      	ldr	r1, [pc, #380]	; (800dda8 <tcp_output_segment+0x1ac>)
 800dc2a:	485e      	ldr	r0, [pc, #376]	; (800dda4 <tcp_output_segment+0x1a8>)
 800dc2c:	f003 fe30 	bl	8011890 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d106      	bne.n	800dc44 <tcp_output_segment+0x48>
 800dc36:	4b59      	ldr	r3, [pc, #356]	; (800dd9c <tcp_output_segment+0x1a0>)
 800dc38:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800dc3c:	495b      	ldr	r1, [pc, #364]	; (800ddac <tcp_output_segment+0x1b0>)
 800dc3e:	4859      	ldr	r0, [pc, #356]	; (800dda4 <tcp_output_segment+0x1a8>)
 800dc40:	f003 fe26 	bl	8011890 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800dc44:	68f8      	ldr	r0, [r7, #12]
 800dc46:	f7ff ffb9 	bl	800dbbc <tcp_output_segment_busy>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d001      	beq.n	800dc54 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800dc50:	2300      	movs	r3, #0
 800dc52:	e09f      	b.n	800dd94 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	68dc      	ldr	r4, [r3, #12]
 800dc5c:	4610      	mov	r0, r2
 800dc5e:	f7f9 fd5c 	bl	800771a <lwip_htonl>
 800dc62:	4603      	mov	r3, r0
 800dc64:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	68dc      	ldr	r4, [r3, #12]
 800dc6e:	4610      	mov	r0, r2
 800dc70:	f7f9 fd3e 	bl	80076f0 <lwip_htons>
 800dc74:	4603      	mov	r3, r0
 800dc76:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7c:	68ba      	ldr	r2, [r7, #8]
 800dc7e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dc80:	441a      	add	r2, r3
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	68db      	ldr	r3, [r3, #12]
 800dc8a:	3314      	adds	r3, #20
 800dc8c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	7a9b      	ldrb	r3, [r3, #10]
 800dc92:	f003 0301 	and.w	r3, r3, #1
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d015      	beq.n	800dcc6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	3304      	adds	r3, #4
 800dc9e:	461a      	mov	r2, r3
 800dca0:	6879      	ldr	r1, [r7, #4]
 800dca2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800dca6:	f7fc fe8b 	bl	800a9c0 <tcp_eff_send_mss_netif>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800dcae:	8b7b      	ldrh	r3, [r7, #26]
 800dcb0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7f9 fd30 	bl	800771a <lwip_htonl>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	601a      	str	r2, [r3, #0]
    opts += 1;
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	da02      	bge.n	800dcd6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d10c      	bne.n	800dcf8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800dcde:	4b34      	ldr	r3, [pc, #208]	; (800ddb0 <tcp_output_segment+0x1b4>)
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	68db      	ldr	r3, [r3, #12]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7f9 fd14 	bl	800771a <lwip_htonl>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	68da      	ldr	r2, [r3, #12]
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	1ad3      	subs	r3, r2, r3
 800dd04:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	8959      	ldrh	r1, [r3, #10]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	8b3a      	ldrh	r2, [r7, #24]
 800dd12:	1a8a      	subs	r2, r1, r2
 800dd14:	b292      	uxth	r2, r2
 800dd16:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	8919      	ldrh	r1, [r3, #8]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	8b3a      	ldrh	r2, [r7, #24]
 800dd24:	1a8a      	subs	r2, r1, r2
 800dd26:	b292      	uxth	r2, r2
 800dd28:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	68fa      	ldr	r2, [r7, #12]
 800dd30:	68d2      	ldr	r2, [r2, #12]
 800dd32:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	741a      	strb	r2, [r3, #16]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	f103 0214 	add.w	r2, r3, #20
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	7a9b      	ldrb	r3, [r3, #10]
 800dd4c:	009b      	lsls	r3, r3, #2
 800dd4e:	f003 0304 	and.w	r3, r3, #4
 800dd52:	4413      	add	r3, r2
 800dd54:	69fa      	ldr	r2, [r7, #28]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d006      	beq.n	800dd68 <tcp_output_segment+0x16c>
 800dd5a:	4b10      	ldr	r3, [pc, #64]	; (800dd9c <tcp_output_segment+0x1a0>)
 800dd5c:	f240 621c 	movw	r2, #1564	; 0x61c
 800dd60:	4914      	ldr	r1, [pc, #80]	; (800ddb4 <tcp_output_segment+0x1b8>)
 800dd62:	4810      	ldr	r0, [pc, #64]	; (800dda4 <tcp_output_segment+0x1a8>)
 800dd64:	f003 fd94 	bl	8011890 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6858      	ldr	r0, [r3, #4]
 800dd6c:	68b9      	ldr	r1, [r7, #8]
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	1d1c      	adds	r4, r3, #4
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	7add      	ldrb	r5, [r3, #11]
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	7a9b      	ldrb	r3, [r3, #10]
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	9202      	str	r2, [sp, #8]
 800dd7e:	2206      	movs	r2, #6
 800dd80:	9201      	str	r2, [sp, #4]
 800dd82:	9300      	str	r3, [sp, #0]
 800dd84:	462b      	mov	r3, r5
 800dd86:	4622      	mov	r2, r4
 800dd88:	f002 fa66 	bl	8010258 <ip4_output_if>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800dd90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3720      	adds	r7, #32
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bdb0      	pop	{r4, r5, r7, pc}
 800dd9c:	08013f28 	.word	0x08013f28
 800dda0:	080144ec 	.word	0x080144ec
 800dda4:	08013f7c 	.word	0x08013f7c
 800dda8:	0801450c 	.word	0x0801450c
 800ddac:	0801452c 	.word	0x0801452c
 800ddb0:	2000c494 	.word	0x2000c494
 800ddb4:	08014550 	.word	0x08014550

0800ddb8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ddb8:	b5b0      	push	{r4, r5, r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d106      	bne.n	800ddd4 <tcp_rexmit_rto_prepare+0x1c>
 800ddc6:	4b31      	ldr	r3, [pc, #196]	; (800de8c <tcp_rexmit_rto_prepare+0xd4>)
 800ddc8:	f240 6263 	movw	r2, #1635	; 0x663
 800ddcc:	4930      	ldr	r1, [pc, #192]	; (800de90 <tcp_rexmit_rto_prepare+0xd8>)
 800ddce:	4831      	ldr	r0, [pc, #196]	; (800de94 <tcp_rexmit_rto_prepare+0xdc>)
 800ddd0:	f003 fd5e 	bl	8011890 <iprintf>

  if (pcb->unacked == NULL) {
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d102      	bne.n	800dde2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800dddc:	f06f 0305 	mvn.w	r3, #5
 800dde0:	e050      	b.n	800de84 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dde6:	60fb      	str	r3, [r7, #12]
 800dde8:	e00b      	b.n	800de02 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f7ff fee6 	bl	800dbbc <tcp_output_segment_busy>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d002      	beq.n	800ddfc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ddf6:	f06f 0305 	mvn.w	r3, #5
 800ddfa:	e043      	b.n	800de84 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	60fb      	str	r3, [r7, #12]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1ef      	bne.n	800ddea <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800de0a:	68f8      	ldr	r0, [r7, #12]
 800de0c:	f7ff fed6 	bl	800dbbc <tcp_output_segment_busy>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d002      	beq.n	800de1c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800de16:	f06f 0305 	mvn.w	r3, #5
 800de1a:	e033      	b.n	800de84 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	8b5b      	ldrh	r3, [r3, #26]
 800de36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	68db      	ldr	r3, [r3, #12]
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	4618      	mov	r0, r3
 800de48:	f7f9 fc67 	bl	800771a <lwip_htonl>
 800de4c:	4604      	mov	r4, r0
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	891b      	ldrh	r3, [r3, #8]
 800de52:	461d      	mov	r5, r3
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	68db      	ldr	r3, [r3, #12]
 800de58:	899b      	ldrh	r3, [r3, #12]
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7f9 fc47 	bl	80076f0 <lwip_htons>
 800de62:	4603      	mov	r3, r0
 800de64:	b2db      	uxtb	r3, r3
 800de66:	f003 0303 	and.w	r3, r3, #3
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d001      	beq.n	800de72 <tcp_rexmit_rto_prepare+0xba>
 800de6e:	2301      	movs	r3, #1
 800de70:	e000      	b.n	800de74 <tcp_rexmit_rto_prepare+0xbc>
 800de72:	2300      	movs	r3, #0
 800de74:	442b      	add	r3, r5
 800de76:	18e2      	adds	r2, r4, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2200      	movs	r2, #0
 800de80:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800de82:	2300      	movs	r3, #0
}
 800de84:	4618      	mov	r0, r3
 800de86:	3710      	adds	r7, #16
 800de88:	46bd      	mov	sp, r7
 800de8a:	bdb0      	pop	{r4, r5, r7, pc}
 800de8c:	08013f28 	.word	0x08013f28
 800de90:	08014564 	.word	0x08014564
 800de94:	08013f7c 	.word	0x08013f7c

0800de98 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d106      	bne.n	800deb4 <tcp_rexmit_rto_commit+0x1c>
 800dea6:	4b0d      	ldr	r3, [pc, #52]	; (800dedc <tcp_rexmit_rto_commit+0x44>)
 800dea8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800deac:	490c      	ldr	r1, [pc, #48]	; (800dee0 <tcp_rexmit_rto_commit+0x48>)
 800deae:	480d      	ldr	r0, [pc, #52]	; (800dee4 <tcp_rexmit_rto_commit+0x4c>)
 800deb0:	f003 fcee 	bl	8011890 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800deba:	2bff      	cmp	r3, #255	; 0xff
 800debc:	d007      	beq.n	800dece <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dec4:	3301      	adds	r3, #1
 800dec6:	b2da      	uxtb	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f7ff fc80 	bl	800d7d4 <tcp_output>
}
 800ded4:	bf00      	nop
 800ded6:	3708      	adds	r7, #8
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	08013f28 	.word	0x08013f28
 800dee0:	08014588 	.word	0x08014588
 800dee4:	08013f7c 	.word	0x08013f7c

0800dee8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d106      	bne.n	800df04 <tcp_rexmit_rto+0x1c>
 800def6:	4b0a      	ldr	r3, [pc, #40]	; (800df20 <tcp_rexmit_rto+0x38>)
 800def8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800defc:	4909      	ldr	r1, [pc, #36]	; (800df24 <tcp_rexmit_rto+0x3c>)
 800defe:	480a      	ldr	r0, [pc, #40]	; (800df28 <tcp_rexmit_rto+0x40>)
 800df00:	f003 fcc6 	bl	8011890 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7ff ff57 	bl	800ddb8 <tcp_rexmit_rto_prepare>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d102      	bne.n	800df16 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f7ff ffc1 	bl	800de98 <tcp_rexmit_rto_commit>
  }
}
 800df16:	bf00      	nop
 800df18:	3708      	adds	r7, #8
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	08013f28 	.word	0x08013f28
 800df24:	080145ac 	.word	0x080145ac
 800df28:	08013f7c 	.word	0x08013f7c

0800df2c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800df2c:	b590      	push	{r4, r7, lr}
 800df2e:	b085      	sub	sp, #20
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d106      	bne.n	800df48 <tcp_rexmit+0x1c>
 800df3a:	4b2f      	ldr	r3, [pc, #188]	; (800dff8 <tcp_rexmit+0xcc>)
 800df3c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800df40:	492e      	ldr	r1, [pc, #184]	; (800dffc <tcp_rexmit+0xd0>)
 800df42:	482f      	ldr	r0, [pc, #188]	; (800e000 <tcp_rexmit+0xd4>)
 800df44:	f003 fca4 	bl	8011890 <iprintf>

  if (pcb->unacked == NULL) {
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d102      	bne.n	800df56 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800df50:	f06f 0305 	mvn.w	r3, #5
 800df54:	e04c      	b.n	800dff0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df5a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800df5c:	68b8      	ldr	r0, [r7, #8]
 800df5e:	f7ff fe2d 	bl	800dbbc <tcp_output_segment_busy>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d002      	beq.n	800df6e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800df68:	f06f 0305 	mvn.w	r3, #5
 800df6c:	e040      	b.n	800dff0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	336c      	adds	r3, #108	; 0x6c
 800df7a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800df7c:	e002      	b.n	800df84 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d011      	beq.n	800dfb0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	68db      	ldr	r3, [r3, #12]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	4618      	mov	r0, r3
 800df96:	f7f9 fbc0 	bl	800771a <lwip_htonl>
 800df9a:	4604      	mov	r4, r0
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7f9 fbb9 	bl	800771a <lwip_htonl>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	dbe6      	blt.n	800df7e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	68ba      	ldr	r2, [r7, #8]
 800dfbc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d103      	bne.n	800dfce <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dfd4:	2bff      	cmp	r3, #255	; 0xff
 800dfd6:	d007      	beq.n	800dfe8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dfde:	3301      	adds	r3, #1
 800dfe0:	b2da      	uxtb	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2200      	movs	r2, #0
 800dfec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3714      	adds	r7, #20
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd90      	pop	{r4, r7, pc}
 800dff8:	08013f28 	.word	0x08013f28
 800dffc:	080145c8 	.word	0x080145c8
 800e000:	08013f7c 	.word	0x08013f7c

0800e004 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d106      	bne.n	800e020 <tcp_rexmit_fast+0x1c>
 800e012:	4b2a      	ldr	r3, [pc, #168]	; (800e0bc <tcp_rexmit_fast+0xb8>)
 800e014:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e018:	4929      	ldr	r1, [pc, #164]	; (800e0c0 <tcp_rexmit_fast+0xbc>)
 800e01a:	482a      	ldr	r0, [pc, #168]	; (800e0c4 <tcp_rexmit_fast+0xc0>)
 800e01c:	f003 fc38 	bl	8011890 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e024:	2b00      	cmp	r3, #0
 800e026:	d045      	beq.n	800e0b4 <tcp_rexmit_fast+0xb0>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	8b5b      	ldrh	r3, [r3, #26]
 800e02c:	f003 0304 	and.w	r3, r3, #4
 800e030:	2b00      	cmp	r3, #0
 800e032:	d13f      	bne.n	800e0b4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7ff ff79 	bl	800df2c <tcp_rexmit>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d139      	bne.n	800e0b4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e04c:	4293      	cmp	r3, r2
 800e04e:	bf28      	it	cs
 800e050:	4613      	movcs	r3, r2
 800e052:	b29b      	uxth	r3, r3
 800e054:	2b00      	cmp	r3, #0
 800e056:	da00      	bge.n	800e05a <tcp_rexmit_fast+0x56>
 800e058:	3301      	adds	r3, #1
 800e05a:	105b      	asrs	r3, r3, #1
 800e05c:	b29a      	uxth	r2, r3
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e06a:	461a      	mov	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e070:	005b      	lsls	r3, r3, #1
 800e072:	429a      	cmp	r2, r3
 800e074:	d206      	bcs.n	800e084 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e07a:	005b      	lsls	r3, r3, #1
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e08e:	4619      	mov	r1, r3
 800e090:	0049      	lsls	r1, r1, #1
 800e092:	440b      	add	r3, r1
 800e094:	b29b      	uxth	r3, r3
 800e096:	4413      	add	r3, r2
 800e098:	b29a      	uxth	r2, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	8b5b      	ldrh	r3, [r3, #26]
 800e0a4:	f043 0304 	orr.w	r3, r3, #4
 800e0a8:	b29a      	uxth	r2, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e0b4:	bf00      	nop
 800e0b6:	3708      	adds	r7, #8
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	08013f28 	.word	0x08013f28
 800e0c0:	080145e0 	.word	0x080145e0
 800e0c4:	08013f7c 	.word	0x08013f7c

0800e0c8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b086      	sub	sp, #24
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	607b      	str	r3, [r7, #4]
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	817b      	strh	r3, [r7, #10]
 800e0d6:	4613      	mov	r3, r2
 800e0d8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e0da:	897a      	ldrh	r2, [r7, #10]
 800e0dc:	893b      	ldrh	r3, [r7, #8]
 800e0de:	4413      	add	r3, r2
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	3314      	adds	r3, #20
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	2022      	movs	r0, #34	; 0x22
 800e0ee:	f7fa fc0d 	bl	800890c <pbuf_alloc>
 800e0f2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d04d      	beq.n	800e196 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e0fa:	897b      	ldrh	r3, [r7, #10]
 800e0fc:	3313      	adds	r3, #19
 800e0fe:	697a      	ldr	r2, [r7, #20]
 800e100:	8952      	ldrh	r2, [r2, #10]
 800e102:	4293      	cmp	r3, r2
 800e104:	db06      	blt.n	800e114 <tcp_output_alloc_header_common+0x4c>
 800e106:	4b26      	ldr	r3, [pc, #152]	; (800e1a0 <tcp_output_alloc_header_common+0xd8>)
 800e108:	f240 7223 	movw	r2, #1827	; 0x723
 800e10c:	4925      	ldr	r1, [pc, #148]	; (800e1a4 <tcp_output_alloc_header_common+0xdc>)
 800e10e:	4826      	ldr	r0, [pc, #152]	; (800e1a8 <tcp_output_alloc_header_common+0xe0>)
 800e110:	f003 fbbe 	bl	8011890 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e11a:	8c3b      	ldrh	r3, [r7, #32]
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7f9 fae7 	bl	80076f0 <lwip_htons>
 800e122:	4603      	mov	r3, r0
 800e124:	461a      	mov	r2, r3
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e12a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7f9 fadf 	bl	80076f0 <lwip_htons>
 800e132:	4603      	mov	r3, r0
 800e134:	461a      	mov	r2, r3
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f7f9 faea 	bl	800771a <lwip_htonl>
 800e146:	4602      	mov	r2, r0
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e14c:	897b      	ldrh	r3, [r7, #10]
 800e14e:	089b      	lsrs	r3, r3, #2
 800e150:	b29b      	uxth	r3, r3
 800e152:	3305      	adds	r3, #5
 800e154:	b29b      	uxth	r3, r3
 800e156:	031b      	lsls	r3, r3, #12
 800e158:	b29a      	uxth	r2, r3
 800e15a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e15e:	b29b      	uxth	r3, r3
 800e160:	4313      	orrs	r3, r2
 800e162:	b29b      	uxth	r3, r3
 800e164:	4618      	mov	r0, r3
 800e166:	f7f9 fac3 	bl	80076f0 <lwip_htons>
 800e16a:	4603      	mov	r3, r0
 800e16c:	461a      	mov	r2, r3
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e172:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e174:	4618      	mov	r0, r3
 800e176:	f7f9 fabb 	bl	80076f0 <lwip_htons>
 800e17a:	4603      	mov	r3, r0
 800e17c:	461a      	mov	r2, r3
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	2200      	movs	r2, #0
 800e186:	741a      	strb	r2, [r3, #16]
 800e188:	2200      	movs	r2, #0
 800e18a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	2200      	movs	r2, #0
 800e190:	749a      	strb	r2, [r3, #18]
 800e192:	2200      	movs	r2, #0
 800e194:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e196:	697b      	ldr	r3, [r7, #20]
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3718      	adds	r7, #24
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	08013f28 	.word	0x08013f28
 800e1a4:	08014600 	.word	0x08014600
 800e1a8:	08013f7c 	.word	0x08013f7c

0800e1ac <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e1ac:	b5b0      	push	{r4, r5, r7, lr}
 800e1ae:	b08a      	sub	sp, #40	; 0x28
 800e1b0:	af04      	add	r7, sp, #16
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	607b      	str	r3, [r7, #4]
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	817b      	strh	r3, [r7, #10]
 800e1ba:	4613      	mov	r3, r2
 800e1bc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d106      	bne.n	800e1d2 <tcp_output_alloc_header+0x26>
 800e1c4:	4b15      	ldr	r3, [pc, #84]	; (800e21c <tcp_output_alloc_header+0x70>)
 800e1c6:	f240 7242 	movw	r2, #1858	; 0x742
 800e1ca:	4915      	ldr	r1, [pc, #84]	; (800e220 <tcp_output_alloc_header+0x74>)
 800e1cc:	4815      	ldr	r0, [pc, #84]	; (800e224 <tcp_output_alloc_header+0x78>)
 800e1ce:	f003 fb5f 	bl	8011890 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	8adb      	ldrh	r3, [r3, #22]
 800e1da:	68fa      	ldr	r2, [r7, #12]
 800e1dc:	8b12      	ldrh	r2, [r2, #24]
 800e1de:	68f9      	ldr	r1, [r7, #12]
 800e1e0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e1e2:	893d      	ldrh	r5, [r7, #8]
 800e1e4:	897c      	ldrh	r4, [r7, #10]
 800e1e6:	9103      	str	r1, [sp, #12]
 800e1e8:	2110      	movs	r1, #16
 800e1ea:	9102      	str	r1, [sp, #8]
 800e1ec:	9201      	str	r2, [sp, #4]
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	462a      	mov	r2, r5
 800e1f4:	4621      	mov	r1, r4
 800e1f6:	f7ff ff67 	bl	800e0c8 <tcp_output_alloc_header_common>
 800e1fa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d006      	beq.n	800e210 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e206:	68fa      	ldr	r2, [r7, #12]
 800e208:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e20a:	441a      	add	r2, r3
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e210:	697b      	ldr	r3, [r7, #20]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3718      	adds	r7, #24
 800e216:	46bd      	mov	sp, r7
 800e218:	bdb0      	pop	{r4, r5, r7, pc}
 800e21a:	bf00      	nop
 800e21c:	08013f28 	.word	0x08013f28
 800e220:	08014630 	.word	0x08014630
 800e224:	08013f7c 	.word	0x08013f7c

0800e228 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b088      	sub	sp, #32
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	60b9      	str	r1, [r7, #8]
 800e232:	4611      	mov	r1, r2
 800e234:	461a      	mov	r2, r3
 800e236:	460b      	mov	r3, r1
 800e238:	71fb      	strb	r3, [r7, #7]
 800e23a:	4613      	mov	r3, r2
 800e23c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e23e:	2300      	movs	r3, #0
 800e240:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d106      	bne.n	800e256 <tcp_output_fill_options+0x2e>
 800e248:	4b13      	ldr	r3, [pc, #76]	; (800e298 <tcp_output_fill_options+0x70>)
 800e24a:	f240 7256 	movw	r2, #1878	; 0x756
 800e24e:	4913      	ldr	r1, [pc, #76]	; (800e29c <tcp_output_fill_options+0x74>)
 800e250:	4813      	ldr	r0, [pc, #76]	; (800e2a0 <tcp_output_fill_options+0x78>)
 800e252:	f003 fb1d 	bl	8011890 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e25c:	69bb      	ldr	r3, [r7, #24]
 800e25e:	3314      	adds	r3, #20
 800e260:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	f103 0214 	add.w	r2, r3, #20
 800e268:	8bfb      	ldrh	r3, [r7, #30]
 800e26a:	009b      	lsls	r3, r3, #2
 800e26c:	4619      	mov	r1, r3
 800e26e:	79fb      	ldrb	r3, [r7, #7]
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	f003 0304 	and.w	r3, r3, #4
 800e276:	440b      	add	r3, r1
 800e278:	4413      	add	r3, r2
 800e27a:	697a      	ldr	r2, [r7, #20]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d006      	beq.n	800e28e <tcp_output_fill_options+0x66>
 800e280:	4b05      	ldr	r3, [pc, #20]	; (800e298 <tcp_output_fill_options+0x70>)
 800e282:	f240 7275 	movw	r2, #1909	; 0x775
 800e286:	4907      	ldr	r1, [pc, #28]	; (800e2a4 <tcp_output_fill_options+0x7c>)
 800e288:	4805      	ldr	r0, [pc, #20]	; (800e2a0 <tcp_output_fill_options+0x78>)
 800e28a:	f003 fb01 	bl	8011890 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e28e:	bf00      	nop
 800e290:	3720      	adds	r7, #32
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	08013f28 	.word	0x08013f28
 800e29c:	08014658 	.word	0x08014658
 800e2a0:	08013f7c 	.word	0x08013f7c
 800e2a4:	08014550 	.word	0x08014550

0800e2a8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b08a      	sub	sp, #40	; 0x28
 800e2ac:	af04      	add	r7, sp, #16
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	60b9      	str	r1, [r7, #8]
 800e2b2:	607a      	str	r2, [r7, #4]
 800e2b4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d106      	bne.n	800e2ca <tcp_output_control_segment+0x22>
 800e2bc:	4b1c      	ldr	r3, [pc, #112]	; (800e330 <tcp_output_control_segment+0x88>)
 800e2be:	f240 7287 	movw	r2, #1927	; 0x787
 800e2c2:	491c      	ldr	r1, [pc, #112]	; (800e334 <tcp_output_control_segment+0x8c>)
 800e2c4:	481c      	ldr	r0, [pc, #112]	; (800e338 <tcp_output_control_segment+0x90>)
 800e2c6:	f003 fae3 	bl	8011890 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e2ca:	683a      	ldr	r2, [r7, #0]
 800e2cc:	6879      	ldr	r1, [r7, #4]
 800e2ce:	68f8      	ldr	r0, [r7, #12]
 800e2d0:	f7fe ff40 	bl	800d154 <tcp_route>
 800e2d4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d102      	bne.n	800e2e2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e2dc:	23fc      	movs	r3, #252	; 0xfc
 800e2de:	75fb      	strb	r3, [r7, #23]
 800e2e0:	e01c      	b.n	800e31c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d006      	beq.n	800e2f6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	7adb      	ldrb	r3, [r3, #11]
 800e2ec:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	7a9b      	ldrb	r3, [r3, #10]
 800e2f2:	757b      	strb	r3, [r7, #21]
 800e2f4:	e003      	b.n	800e2fe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e2f6:	23ff      	movs	r3, #255	; 0xff
 800e2f8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e2fe:	7dba      	ldrb	r2, [r7, #22]
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	9302      	str	r3, [sp, #8]
 800e304:	2306      	movs	r3, #6
 800e306:	9301      	str	r3, [sp, #4]
 800e308:	7d7b      	ldrb	r3, [r7, #21]
 800e30a:	9300      	str	r3, [sp, #0]
 800e30c:	4613      	mov	r3, r2
 800e30e:	683a      	ldr	r2, [r7, #0]
 800e310:	6879      	ldr	r1, [r7, #4]
 800e312:	68b8      	ldr	r0, [r7, #8]
 800e314:	f001 ffa0 	bl	8010258 <ip4_output_if>
 800e318:	4603      	mov	r3, r0
 800e31a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e31c:	68b8      	ldr	r0, [r7, #8]
 800e31e:	f7fa fdd9 	bl	8008ed4 <pbuf_free>
  return err;
 800e322:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e326:	4618      	mov	r0, r3
 800e328:	3718      	adds	r7, #24
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	08013f28 	.word	0x08013f28
 800e334:	08014680 	.word	0x08014680
 800e338:	08013f7c 	.word	0x08013f7c

0800e33c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e33c:	b590      	push	{r4, r7, lr}
 800e33e:	b08b      	sub	sp, #44	; 0x2c
 800e340:	af04      	add	r7, sp, #16
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]
 800e348:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d106      	bne.n	800e35e <tcp_rst+0x22>
 800e350:	4b1f      	ldr	r3, [pc, #124]	; (800e3d0 <tcp_rst+0x94>)
 800e352:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e356:	491f      	ldr	r1, [pc, #124]	; (800e3d4 <tcp_rst+0x98>)
 800e358:	481f      	ldr	r0, [pc, #124]	; (800e3d8 <tcp_rst+0x9c>)
 800e35a:	f003 fa99 	bl	8011890 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e360:	2b00      	cmp	r3, #0
 800e362:	d106      	bne.n	800e372 <tcp_rst+0x36>
 800e364:	4b1a      	ldr	r3, [pc, #104]	; (800e3d0 <tcp_rst+0x94>)
 800e366:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e36a:	491c      	ldr	r1, [pc, #112]	; (800e3dc <tcp_rst+0xa0>)
 800e36c:	481a      	ldr	r0, [pc, #104]	; (800e3d8 <tcp_rst+0x9c>)
 800e36e:	f003 fa8f 	bl	8011890 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e372:	2300      	movs	r3, #0
 800e374:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e376:	f246 0308 	movw	r3, #24584	; 0x6008
 800e37a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e37c:	7dfb      	ldrb	r3, [r7, #23]
 800e37e:	b29c      	uxth	r4, r3
 800e380:	68b8      	ldr	r0, [r7, #8]
 800e382:	f7f9 f9ca 	bl	800771a <lwip_htonl>
 800e386:	4602      	mov	r2, r0
 800e388:	8abb      	ldrh	r3, [r7, #20]
 800e38a:	9303      	str	r3, [sp, #12]
 800e38c:	2314      	movs	r3, #20
 800e38e:	9302      	str	r3, [sp, #8]
 800e390:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e392:	9301      	str	r3, [sp, #4]
 800e394:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	4613      	mov	r3, r2
 800e39a:	2200      	movs	r2, #0
 800e39c:	4621      	mov	r1, r4
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f7ff fe92 	bl	800e0c8 <tcp_output_alloc_header_common>
 800e3a4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00c      	beq.n	800e3c6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e3ac:	7dfb      	ldrb	r3, [r7, #23]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	6939      	ldr	r1, [r7, #16]
 800e3b2:	68f8      	ldr	r0, [r7, #12]
 800e3b4:	f7ff ff38 	bl	800e228 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ba:	683a      	ldr	r2, [r7, #0]
 800e3bc:	6939      	ldr	r1, [r7, #16]
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f7ff ff72 	bl	800e2a8 <tcp_output_control_segment>
 800e3c4:	e000      	b.n	800e3c8 <tcp_rst+0x8c>
    return;
 800e3c6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e3c8:	371c      	adds	r7, #28
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd90      	pop	{r4, r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	08013f28 	.word	0x08013f28
 800e3d4:	080146ac 	.word	0x080146ac
 800e3d8:	08013f7c 	.word	0x08013f7c
 800e3dc:	080146c8 	.word	0x080146c8

0800e3e0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e3e0:	b590      	push	{r4, r7, lr}
 800e3e2:	b087      	sub	sp, #28
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d106      	bne.n	800e404 <tcp_send_empty_ack+0x24>
 800e3f6:	4b28      	ldr	r3, [pc, #160]	; (800e498 <tcp_send_empty_ack+0xb8>)
 800e3f8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e3fc:	4927      	ldr	r1, [pc, #156]	; (800e49c <tcp_send_empty_ack+0xbc>)
 800e3fe:	4828      	ldr	r0, [pc, #160]	; (800e4a0 <tcp_send_empty_ack+0xc0>)
 800e400:	f003 fa46 	bl	8011890 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e404:	7dfb      	ldrb	r3, [r7, #23]
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	f003 0304 	and.w	r3, r3, #4
 800e40e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e410:	7d7b      	ldrb	r3, [r7, #21]
 800e412:	b29c      	uxth	r4, r3
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e418:	4618      	mov	r0, r3
 800e41a:	f7f9 f97e 	bl	800771a <lwip_htonl>
 800e41e:	4603      	mov	r3, r0
 800e420:	2200      	movs	r2, #0
 800e422:	4621      	mov	r1, r4
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f7ff fec1 	bl	800e1ac <tcp_output_alloc_header>
 800e42a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d109      	bne.n	800e446 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	8b5b      	ldrh	r3, [r3, #26]
 800e436:	f043 0303 	orr.w	r3, r3, #3
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e440:	f06f 0301 	mvn.w	r3, #1
 800e444:	e023      	b.n	800e48e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e446:	7dbb      	ldrb	r3, [r7, #22]
 800e448:	7dfa      	ldrb	r2, [r7, #23]
 800e44a:	6939      	ldr	r1, [r7, #16]
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f7ff feeb 	bl	800e228 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	3304      	adds	r3, #4
 800e458:	6939      	ldr	r1, [r7, #16]
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f7ff ff24 	bl	800e2a8 <tcp_output_control_segment>
 800e460:	4603      	mov	r3, r0
 800e462:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d007      	beq.n	800e47c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	8b5b      	ldrh	r3, [r3, #26]
 800e470:	f043 0303 	orr.w	r3, r3, #3
 800e474:	b29a      	uxth	r2, r3
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	835a      	strh	r2, [r3, #26]
 800e47a:	e006      	b.n	800e48a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	8b5b      	ldrh	r3, [r3, #26]
 800e480:	f023 0303 	bic.w	r3, r3, #3
 800e484:	b29a      	uxth	r2, r3
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e48a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e48e:	4618      	mov	r0, r3
 800e490:	371c      	adds	r7, #28
 800e492:	46bd      	mov	sp, r7
 800e494:	bd90      	pop	{r4, r7, pc}
 800e496:	bf00      	nop
 800e498:	08013f28 	.word	0x08013f28
 800e49c:	080146e4 	.word	0x080146e4
 800e4a0:	08013f7c 	.word	0x08013f7c

0800e4a4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e4a4:	b590      	push	{r4, r7, lr}
 800e4a6:	b087      	sub	sp, #28
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d106      	bne.n	800e4c4 <tcp_keepalive+0x20>
 800e4b6:	4b18      	ldr	r3, [pc, #96]	; (800e518 <tcp_keepalive+0x74>)
 800e4b8:	f640 0224 	movw	r2, #2084	; 0x824
 800e4bc:	4917      	ldr	r1, [pc, #92]	; (800e51c <tcp_keepalive+0x78>)
 800e4be:	4818      	ldr	r0, [pc, #96]	; (800e520 <tcp_keepalive+0x7c>)
 800e4c0:	f003 f9e6 	bl	8011890 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e4c4:	7dfb      	ldrb	r3, [r7, #23]
 800e4c6:	b29c      	uxth	r4, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4cc:	3b01      	subs	r3, #1
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7f9 f923 	bl	800771a <lwip_htonl>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	4621      	mov	r1, r4
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f7ff fe66 	bl	800e1ac <tcp_output_alloc_header>
 800e4e0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d102      	bne.n	800e4ee <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ec:	e010      	b.n	800e510 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e4ee:	7dfb      	ldrb	r3, [r7, #23]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	6939      	ldr	r1, [r7, #16]
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f7ff fe97 	bl	800e228 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	3304      	adds	r3, #4
 800e500:	6939      	ldr	r1, [r7, #16]
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f7ff fed0 	bl	800e2a8 <tcp_output_control_segment>
 800e508:	4603      	mov	r3, r0
 800e50a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e50c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e510:	4618      	mov	r0, r3
 800e512:	371c      	adds	r7, #28
 800e514:	46bd      	mov	sp, r7
 800e516:	bd90      	pop	{r4, r7, pc}
 800e518:	08013f28 	.word	0x08013f28
 800e51c:	08014704 	.word	0x08014704
 800e520:	08013f7c 	.word	0x08013f7c

0800e524 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e524:	b590      	push	{r4, r7, lr}
 800e526:	b08b      	sub	sp, #44	; 0x2c
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e52c:	2300      	movs	r3, #0
 800e52e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d106      	bne.n	800e546 <tcp_zero_window_probe+0x22>
 800e538:	4b4c      	ldr	r3, [pc, #304]	; (800e66c <tcp_zero_window_probe+0x148>)
 800e53a:	f640 024f 	movw	r2, #2127	; 0x84f
 800e53e:	494c      	ldr	r1, [pc, #304]	; (800e670 <tcp_zero_window_probe+0x14c>)
 800e540:	484c      	ldr	r0, [pc, #304]	; (800e674 <tcp_zero_window_probe+0x150>)
 800e542:	f003 f9a5 	bl	8011890 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e54a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e54c:	6a3b      	ldr	r3, [r7, #32]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d101      	bne.n	800e556 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e552:	2300      	movs	r3, #0
 800e554:	e086      	b.n	800e664 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e55c:	2bff      	cmp	r3, #255	; 0xff
 800e55e:	d007      	beq.n	800e570 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e566:	3301      	adds	r3, #1
 800e568:	b2da      	uxtb	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e570:	6a3b      	ldr	r3, [r7, #32]
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	899b      	ldrh	r3, [r3, #12]
 800e576:	b29b      	uxth	r3, r3
 800e578:	4618      	mov	r0, r3
 800e57a:	f7f9 f8b9 	bl	80076f0 <lwip_htons>
 800e57e:	4603      	mov	r3, r0
 800e580:	b2db      	uxtb	r3, r3
 800e582:	f003 0301 	and.w	r3, r3, #1
 800e586:	2b00      	cmp	r3, #0
 800e588:	d005      	beq.n	800e596 <tcp_zero_window_probe+0x72>
 800e58a:	6a3b      	ldr	r3, [r7, #32]
 800e58c:	891b      	ldrh	r3, [r3, #8]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d101      	bne.n	800e596 <tcp_zero_window_probe+0x72>
 800e592:	2301      	movs	r3, #1
 800e594:	e000      	b.n	800e598 <tcp_zero_window_probe+0x74>
 800e596:	2300      	movs	r3, #0
 800e598:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e59a:	7ffb      	ldrb	r3, [r7, #31]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	bf0c      	ite	eq
 800e5a0:	2301      	moveq	r3, #1
 800e5a2:	2300      	movne	r3, #0
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e5a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5ac:	b299      	uxth	r1, r3
 800e5ae:	6a3b      	ldr	r3, [r7, #32]
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	8bba      	ldrh	r2, [r7, #28]
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f7ff fdf8 	bl	800e1ac <tcp_output_alloc_header>
 800e5bc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e5be:	69bb      	ldr	r3, [r7, #24]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d102      	bne.n	800e5ca <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e5c8:	e04c      	b.n	800e664 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e5d0:	7ffb      	ldrb	r3, [r7, #31]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d011      	beq.n	800e5fa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	899b      	ldrh	r3, [r3, #12]
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	b21b      	sxth	r3, r3
 800e5de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e5e2:	b21c      	sxth	r4, r3
 800e5e4:	2011      	movs	r0, #17
 800e5e6:	f7f9 f883 	bl	80076f0 <lwip_htons>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	b21b      	sxth	r3, r3
 800e5ee:	4323      	orrs	r3, r4
 800e5f0:	b21b      	sxth	r3, r3
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	819a      	strh	r2, [r3, #12]
 800e5f8:	e010      	b.n	800e61c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e5fa:	69bb      	ldr	r3, [r7, #24]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	3314      	adds	r3, #20
 800e600:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e602:	6a3b      	ldr	r3, [r7, #32]
 800e604:	6858      	ldr	r0, [r3, #4]
 800e606:	6a3b      	ldr	r3, [r7, #32]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	891a      	ldrh	r2, [r3, #8]
 800e60c:	6a3b      	ldr	r3, [r7, #32]
 800e60e:	891b      	ldrh	r3, [r3, #8]
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	b29b      	uxth	r3, r3
 800e614:	2201      	movs	r2, #1
 800e616:	6939      	ldr	r1, [r7, #16]
 800e618:	f7fa fe52 	bl	80092c0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e61c:	6a3b      	ldr	r3, [r7, #32]
 800e61e:	68db      	ldr	r3, [r3, #12]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	4618      	mov	r0, r3
 800e624:	f7f9 f879 	bl	800771a <lwip_htonl>
 800e628:	4603      	mov	r3, r0
 800e62a:	3301      	adds	r3, #1
 800e62c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	1ad3      	subs	r3, r2, r3
 800e636:	2b00      	cmp	r3, #0
 800e638:	da02      	bge.n	800e640 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	68fa      	ldr	r2, [r7, #12]
 800e63e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e644:	2200      	movs	r2, #0
 800e646:	69b9      	ldr	r1, [r7, #24]
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f7ff fded 	bl	800e228 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	3304      	adds	r3, #4
 800e654:	69b9      	ldr	r1, [r7, #24]
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7ff fe26 	bl	800e2a8 <tcp_output_control_segment>
 800e65c:	4603      	mov	r3, r0
 800e65e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e660:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e664:	4618      	mov	r0, r3
 800e666:	372c      	adds	r7, #44	; 0x2c
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd90      	pop	{r4, r7, pc}
 800e66c:	08013f28 	.word	0x08013f28
 800e670:	08014720 	.word	0x08014720
 800e674:	08013f7c 	.word	0x08013f7c

0800e678 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e680:	f7fa ff0c 	bl	800949c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e684:	4b0a      	ldr	r3, [pc, #40]	; (800e6b0 <tcpip_tcp_timer+0x38>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d103      	bne.n	800e694 <tcpip_tcp_timer+0x1c>
 800e68c:	4b09      	ldr	r3, [pc, #36]	; (800e6b4 <tcpip_tcp_timer+0x3c>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d005      	beq.n	800e6a0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e694:	2200      	movs	r2, #0
 800e696:	4908      	ldr	r1, [pc, #32]	; (800e6b8 <tcpip_tcp_timer+0x40>)
 800e698:	20fa      	movs	r0, #250	; 0xfa
 800e69a:	f000 f8f3 	bl	800e884 <sys_timeout>
 800e69e:	e003      	b.n	800e6a8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e6a0:	4b06      	ldr	r3, [pc, #24]	; (800e6bc <tcpip_tcp_timer+0x44>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]
  }
}
 800e6a6:	bf00      	nop
 800e6a8:	bf00      	nop
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	2000c4a0 	.word	0x2000c4a0
 800e6b4:	2000c4a4 	.word	0x2000c4a4
 800e6b8:	0800e679 	.word	0x0800e679
 800e6bc:	2000c4ec 	.word	0x2000c4ec

0800e6c0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e6c4:	4b0a      	ldr	r3, [pc, #40]	; (800e6f0 <tcp_timer_needed+0x30>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d10f      	bne.n	800e6ec <tcp_timer_needed+0x2c>
 800e6cc:	4b09      	ldr	r3, [pc, #36]	; (800e6f4 <tcp_timer_needed+0x34>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d103      	bne.n	800e6dc <tcp_timer_needed+0x1c>
 800e6d4:	4b08      	ldr	r3, [pc, #32]	; (800e6f8 <tcp_timer_needed+0x38>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d007      	beq.n	800e6ec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e6dc:	4b04      	ldr	r3, [pc, #16]	; (800e6f0 <tcp_timer_needed+0x30>)
 800e6de:	2201      	movs	r2, #1
 800e6e0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	4905      	ldr	r1, [pc, #20]	; (800e6fc <tcp_timer_needed+0x3c>)
 800e6e6:	20fa      	movs	r0, #250	; 0xfa
 800e6e8:	f000 f8cc 	bl	800e884 <sys_timeout>
  }
}
 800e6ec:	bf00      	nop
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	2000c4ec 	.word	0x2000c4ec
 800e6f4:	2000c4a0 	.word	0x2000c4a0
 800e6f8:	2000c4a4 	.word	0x2000c4a4
 800e6fc:	0800e679 	.word	0x0800e679

0800e700 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b086      	sub	sp, #24
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e70c:	200a      	movs	r0, #10
 800e70e:	f7f9 fcc7 	bl	80080a0 <memp_malloc>
 800e712:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d109      	bne.n	800e72e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d151      	bne.n	800e7c4 <sys_timeout_abs+0xc4>
 800e720:	4b2a      	ldr	r3, [pc, #168]	; (800e7cc <sys_timeout_abs+0xcc>)
 800e722:	22be      	movs	r2, #190	; 0xbe
 800e724:	492a      	ldr	r1, [pc, #168]	; (800e7d0 <sys_timeout_abs+0xd0>)
 800e726:	482b      	ldr	r0, [pc, #172]	; (800e7d4 <sys_timeout_abs+0xd4>)
 800e728:	f003 f8b2 	bl	8011890 <iprintf>
    return;
 800e72c:	e04a      	b.n	800e7c4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	2200      	movs	r2, #0
 800e732:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	68ba      	ldr	r2, [r7, #8]
 800e738:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	68fa      	ldr	r2, [r7, #12]
 800e744:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e746:	4b24      	ldr	r3, [pc, #144]	; (800e7d8 <sys_timeout_abs+0xd8>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d103      	bne.n	800e756 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e74e:	4a22      	ldr	r2, [pc, #136]	; (800e7d8 <sys_timeout_abs+0xd8>)
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	6013      	str	r3, [r2, #0]
    return;
 800e754:	e037      	b.n	800e7c6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	685a      	ldr	r2, [r3, #4]
 800e75a:	4b1f      	ldr	r3, [pc, #124]	; (800e7d8 <sys_timeout_abs+0xd8>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	1ad3      	subs	r3, r2, r3
 800e762:	0fdb      	lsrs	r3, r3, #31
 800e764:	f003 0301 	and.w	r3, r3, #1
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d007      	beq.n	800e77e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e76e:	4b1a      	ldr	r3, [pc, #104]	; (800e7d8 <sys_timeout_abs+0xd8>)
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e776:	4a18      	ldr	r2, [pc, #96]	; (800e7d8 <sys_timeout_abs+0xd8>)
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	6013      	str	r3, [r2, #0]
 800e77c:	e023      	b.n	800e7c6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e77e:	4b16      	ldr	r3, [pc, #88]	; (800e7d8 <sys_timeout_abs+0xd8>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	617b      	str	r3, [r7, #20]
 800e784:	e01a      	b.n	800e7bc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00b      	beq.n	800e7a6 <sys_timeout_abs+0xa6>
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	685a      	ldr	r2, [r3, #4]
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	1ad3      	subs	r3, r2, r3
 800e79a:	0fdb      	lsrs	r3, r3, #31
 800e79c:	f003 0301 	and.w	r3, r3, #1
 800e7a0:	b2db      	uxtb	r3, r3
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d007      	beq.n	800e7b6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	693a      	ldr	r2, [r7, #16]
 800e7b2:	601a      	str	r2, [r3, #0]
        break;
 800e7b4:	e007      	b.n	800e7c6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	617b      	str	r3, [r7, #20]
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d1e1      	bne.n	800e786 <sys_timeout_abs+0x86>
 800e7c2:	e000      	b.n	800e7c6 <sys_timeout_abs+0xc6>
    return;
 800e7c4:	bf00      	nop
      }
    }
  }
}
 800e7c6:	3718      	adds	r7, #24
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	08014744 	.word	0x08014744
 800e7d0:	08014778 	.word	0x08014778
 800e7d4:	080147b8 	.word	0x080147b8
 800e7d8:	2000c4e4 	.word	0x2000c4e4

0800e7dc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b086      	sub	sp, #24
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	4798      	blx	r3

  now = sys_now();
 800e7ee:	f7f5 fc7b 	bl	80040e8 <sys_now>
 800e7f2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	4b0f      	ldr	r3, [pc, #60]	; (800e838 <lwip_cyclic_timer+0x5c>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	1ad3      	subs	r3, r2, r3
 800e806:	0fdb      	lsrs	r3, r3, #31
 800e808:	f003 0301 	and.w	r3, r3, #1
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d009      	beq.n	800e826 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	4413      	add	r3, r2
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	4907      	ldr	r1, [pc, #28]	; (800e83c <lwip_cyclic_timer+0x60>)
 800e81e:	4618      	mov	r0, r3
 800e820:	f7ff ff6e 	bl	800e700 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e824:	e004      	b.n	800e830 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	4904      	ldr	r1, [pc, #16]	; (800e83c <lwip_cyclic_timer+0x60>)
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	f7ff ff68 	bl	800e700 <sys_timeout_abs>
}
 800e830:	bf00      	nop
 800e832:	3718      	adds	r7, #24
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}
 800e838:	2000c4e8 	.word	0x2000c4e8
 800e83c:	0800e7dd 	.word	0x0800e7dd

0800e840 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e846:	2301      	movs	r3, #1
 800e848:	607b      	str	r3, [r7, #4]
 800e84a:	e00e      	b.n	800e86a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e84c:	4a0b      	ldr	r2, [pc, #44]	; (800e87c <sys_timeouts_init+0x3c>)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	00db      	lsls	r3, r3, #3
 800e858:	4a08      	ldr	r2, [pc, #32]	; (800e87c <sys_timeouts_init+0x3c>)
 800e85a:	4413      	add	r3, r2
 800e85c:	461a      	mov	r2, r3
 800e85e:	4908      	ldr	r1, [pc, #32]	; (800e880 <sys_timeouts_init+0x40>)
 800e860:	f000 f810 	bl	800e884 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	3301      	adds	r3, #1
 800e868:	607b      	str	r3, [r7, #4]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2b02      	cmp	r3, #2
 800e86e:	d9ed      	bls.n	800e84c <sys_timeouts_init+0xc>
  }
}
 800e870:	bf00      	nop
 800e872:	bf00      	nop
 800e874:	3708      	adds	r7, #8
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	08015370 	.word	0x08015370
 800e880:	0800e7dd 	.word	0x0800e7dd

0800e884 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b086      	sub	sp, #24
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e896:	d306      	bcc.n	800e8a6 <sys_timeout+0x22>
 800e898:	4b0a      	ldr	r3, [pc, #40]	; (800e8c4 <sys_timeout+0x40>)
 800e89a:	f240 1229 	movw	r2, #297	; 0x129
 800e89e:	490a      	ldr	r1, [pc, #40]	; (800e8c8 <sys_timeout+0x44>)
 800e8a0:	480a      	ldr	r0, [pc, #40]	; (800e8cc <sys_timeout+0x48>)
 800e8a2:	f002 fff5 	bl	8011890 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e8a6:	f7f5 fc1f 	bl	80040e8 <sys_now>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	68b9      	ldr	r1, [r7, #8]
 800e8b6:	6978      	ldr	r0, [r7, #20]
 800e8b8:	f7ff ff22 	bl	800e700 <sys_timeout_abs>
#endif
}
 800e8bc:	bf00      	nop
 800e8be:	3718      	adds	r7, #24
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	08014744 	.word	0x08014744
 800e8c8:	080147e0 	.word	0x080147e0
 800e8cc:	080147b8 	.word	0x080147b8

0800e8d0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e8d6:	f7f5 fc07 	bl	80040e8 <sys_now>
 800e8da:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800e8dc:	4b17      	ldr	r3, [pc, #92]	; (800e93c <sys_check_timeouts+0x6c>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d022      	beq.n	800e92e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	68fa      	ldr	r2, [r7, #12]
 800e8ee:	1ad3      	subs	r3, r2, r3
 800e8f0:	0fdb      	lsrs	r3, r3, #31
 800e8f2:	f003 0301 	and.w	r3, r3, #1
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d11a      	bne.n	800e932 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4a0e      	ldr	r2, [pc, #56]	; (800e93c <sys_check_timeouts+0x6c>)
 800e902:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	689b      	ldr	r3, [r3, #8]
 800e908:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	68db      	ldr	r3, [r3, #12]
 800e90e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	4a0a      	ldr	r2, [pc, #40]	; (800e940 <sys_check_timeouts+0x70>)
 800e916:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e918:	68b9      	ldr	r1, [r7, #8]
 800e91a:	200a      	movs	r0, #10
 800e91c:	f7f9 fc36 	bl	800818c <memp_free>
    if (handler != NULL) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d0da      	beq.n	800e8dc <sys_check_timeouts+0xc>
      handler(arg);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6838      	ldr	r0, [r7, #0]
 800e92a:	4798      	blx	r3
  do {
 800e92c:	e7d6      	b.n	800e8dc <sys_check_timeouts+0xc>
      return;
 800e92e:	bf00      	nop
 800e930:	e000      	b.n	800e934 <sys_check_timeouts+0x64>
      return;
 800e932:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	2000c4e4 	.word	0x2000c4e4
 800e940:	2000c4e8 	.word	0x2000c4e8

0800e944 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800e94a:	4b16      	ldr	r3, [pc, #88]	; (800e9a4 <sys_timeouts_sleeptime+0x60>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d102      	bne.n	800e958 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800e952:	f04f 33ff 	mov.w	r3, #4294967295
 800e956:	e020      	b.n	800e99a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800e958:	f7f5 fbc6 	bl	80040e8 <sys_now>
 800e95c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800e95e:	4b11      	ldr	r3, [pc, #68]	; (800e9a4 <sys_timeouts_sleeptime+0x60>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	685a      	ldr	r2, [r3, #4]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	1ad3      	subs	r3, r2, r3
 800e968:	0fdb      	lsrs	r3, r3, #31
 800e96a:	f003 0301 	and.w	r3, r3, #1
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	2b00      	cmp	r3, #0
 800e972:	d001      	beq.n	800e978 <sys_timeouts_sleeptime+0x34>
    return 0;
 800e974:	2300      	movs	r3, #0
 800e976:	e010      	b.n	800e99a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800e978:	4b0a      	ldr	r3, [pc, #40]	; (800e9a4 <sys_timeouts_sleeptime+0x60>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	685a      	ldr	r2, [r3, #4]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	1ad3      	subs	r3, r2, r3
 800e982:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	2b00      	cmp	r3, #0
 800e988:	da06      	bge.n	800e998 <sys_timeouts_sleeptime+0x54>
 800e98a:	4b07      	ldr	r3, [pc, #28]	; (800e9a8 <sys_timeouts_sleeptime+0x64>)
 800e98c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800e990:	4906      	ldr	r1, [pc, #24]	; (800e9ac <sys_timeouts_sleeptime+0x68>)
 800e992:	4807      	ldr	r0, [pc, #28]	; (800e9b0 <sys_timeouts_sleeptime+0x6c>)
 800e994:	f002 ff7c 	bl	8011890 <iprintf>
    return ret;
 800e998:	683b      	ldr	r3, [r7, #0]
  }
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	2000c4e4 	.word	0x2000c4e4
 800e9a8:	08014744 	.word	0x08014744
 800e9ac:	08014818 	.word	0x08014818
 800e9b0:	080147b8 	.word	0x080147b8

0800e9b4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e9b8:	f002 ff82 	bl	80118c0 <rand>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	b29b      	uxth	r3, r3
 800e9c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e9ca:	b29a      	uxth	r2, r3
 800e9cc:	4b01      	ldr	r3, [pc, #4]	; (800e9d4 <udp_init+0x20>)
 800e9ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e9d0:	bf00      	nop
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	2000002c 	.word	0x2000002c

0800e9d8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	4613      	mov	r3, r2
 800e9e4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d105      	bne.n	800e9f8 <udp_input_local_match+0x20>
 800e9ec:	4b27      	ldr	r3, [pc, #156]	; (800ea8c <udp_input_local_match+0xb4>)
 800e9ee:	2287      	movs	r2, #135	; 0x87
 800e9f0:	4927      	ldr	r1, [pc, #156]	; (800ea90 <udp_input_local_match+0xb8>)
 800e9f2:	4828      	ldr	r0, [pc, #160]	; (800ea94 <udp_input_local_match+0xbc>)
 800e9f4:	f002 ff4c 	bl	8011890 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d105      	bne.n	800ea0a <udp_input_local_match+0x32>
 800e9fe:	4b23      	ldr	r3, [pc, #140]	; (800ea8c <udp_input_local_match+0xb4>)
 800ea00:	2288      	movs	r2, #136	; 0x88
 800ea02:	4925      	ldr	r1, [pc, #148]	; (800ea98 <udp_input_local_match+0xc0>)
 800ea04:	4823      	ldr	r0, [pc, #140]	; (800ea94 <udp_input_local_match+0xbc>)
 800ea06:	f002 ff43 	bl	8011890 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	7a1b      	ldrb	r3, [r3, #8]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d00b      	beq.n	800ea2a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	7a1a      	ldrb	r2, [r3, #8]
 800ea16:	4b21      	ldr	r3, [pc, #132]	; (800ea9c <udp_input_local_match+0xc4>)
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea1e:	3301      	adds	r3, #1
 800ea20:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d001      	beq.n	800ea2a <udp_input_local_match+0x52>
    return 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	e02b      	b.n	800ea82 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ea2a:	79fb      	ldrb	r3, [r7, #7]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d018      	beq.n	800ea62 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d013      	beq.n	800ea5e <udp_input_local_match+0x86>
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d00f      	beq.n	800ea5e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ea3e:	4b17      	ldr	r3, [pc, #92]	; (800ea9c <udp_input_local_match+0xc4>)
 800ea40:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ea42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea46:	d00a      	beq.n	800ea5e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	4b13      	ldr	r3, [pc, #76]	; (800ea9c <udp_input_local_match+0xc4>)
 800ea4e:	695b      	ldr	r3, [r3, #20]
 800ea50:	405a      	eors	r2, r3
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	3308      	adds	r3, #8
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d110      	bne.n	800ea80 <udp_input_local_match+0xa8>
          return 1;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	e00f      	b.n	800ea82 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d009      	beq.n	800ea7c <udp_input_local_match+0xa4>
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d005      	beq.n	800ea7c <udp_input_local_match+0xa4>
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	4b09      	ldr	r3, [pc, #36]	; (800ea9c <udp_input_local_match+0xc4>)
 800ea76:	695b      	ldr	r3, [r3, #20]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d101      	bne.n	800ea80 <udp_input_local_match+0xa8>
        return 1;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e000      	b.n	800ea82 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ea80:	2300      	movs	r3, #0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	0801482c 	.word	0x0801482c
 800ea90:	0801485c 	.word	0x0801485c
 800ea94:	08014880 	.word	0x08014880
 800ea98:	080148a8 	.word	0x080148a8
 800ea9c:	20008d40 	.word	0x20008d40

0800eaa0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800eaa0:	b590      	push	{r4, r7, lr}
 800eaa2:	b08d      	sub	sp, #52	; 0x34
 800eaa4:	af02      	add	r7, sp, #8
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d105      	bne.n	800eac0 <udp_input+0x20>
 800eab4:	4b7c      	ldr	r3, [pc, #496]	; (800eca8 <udp_input+0x208>)
 800eab6:	22cf      	movs	r2, #207	; 0xcf
 800eab8:	497c      	ldr	r1, [pc, #496]	; (800ecac <udp_input+0x20c>)
 800eaba:	487d      	ldr	r0, [pc, #500]	; (800ecb0 <udp_input+0x210>)
 800eabc:	f002 fee8 	bl	8011890 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d105      	bne.n	800ead2 <udp_input+0x32>
 800eac6:	4b78      	ldr	r3, [pc, #480]	; (800eca8 <udp_input+0x208>)
 800eac8:	22d0      	movs	r2, #208	; 0xd0
 800eaca:	497a      	ldr	r1, [pc, #488]	; (800ecb4 <udp_input+0x214>)
 800eacc:	4878      	ldr	r0, [pc, #480]	; (800ecb0 <udp_input+0x210>)
 800eace:	f002 fedf 	bl	8011890 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	895b      	ldrh	r3, [r3, #10]
 800ead6:	2b07      	cmp	r3, #7
 800ead8:	d803      	bhi.n	800eae2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f7fa f9fa 	bl	8008ed4 <pbuf_free>
    goto end;
 800eae0:	e0de      	b.n	800eca0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eae8:	4b73      	ldr	r3, [pc, #460]	; (800ecb8 <udp_input+0x218>)
 800eaea:	695b      	ldr	r3, [r3, #20]
 800eaec:	4a72      	ldr	r2, [pc, #456]	; (800ecb8 <udp_input+0x218>)
 800eaee:	6812      	ldr	r2, [r2, #0]
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f001 fc88 	bl	8010408 <ip4_addr_isbroadcast_u32>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	881b      	ldrh	r3, [r3, #0]
 800eb00:	b29b      	uxth	r3, r3
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7f8 fdf4 	bl	80076f0 <lwip_htons>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	885b      	ldrh	r3, [r3, #2]
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7f8 fdec 	bl	80076f0 <lwip_htons>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800eb20:	2300      	movs	r3, #0
 800eb22:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800eb24:	2300      	movs	r3, #0
 800eb26:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb28:	4b64      	ldr	r3, [pc, #400]	; (800ecbc <udp_input+0x21c>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	627b      	str	r3, [r7, #36]	; 0x24
 800eb2e:	e054      	b.n	800ebda <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800eb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb32:	8a5b      	ldrh	r3, [r3, #18]
 800eb34:	89fa      	ldrh	r2, [r7, #14]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d14a      	bne.n	800ebd0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800eb3a:	7cfb      	ldrb	r3, [r7, #19]
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	6839      	ldr	r1, [r7, #0]
 800eb40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb42:	f7ff ff49 	bl	800e9d8 <udp_input_local_match>
 800eb46:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d041      	beq.n	800ebd0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800eb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4e:	7c1b      	ldrb	r3, [r3, #16]
 800eb50:	f003 0304 	and.w	r3, r3, #4
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d11d      	bne.n	800eb94 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d102      	bne.n	800eb64 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800eb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb60:	61fb      	str	r3, [r7, #28]
 800eb62:	e017      	b.n	800eb94 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800eb64:	7cfb      	ldrb	r3, [r7, #19]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d014      	beq.n	800eb94 <udp_input+0xf4>
 800eb6a:	4b53      	ldr	r3, [pc, #332]	; (800ecb8 <udp_input+0x218>)
 800eb6c:	695b      	ldr	r3, [r3, #20]
 800eb6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb72:	d10f      	bne.n	800eb94 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	3304      	adds	r3, #4
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d008      	beq.n	800eb94 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800eb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb84:	681a      	ldr	r2, [r3, #0]
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	3304      	adds	r3, #4
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d101      	bne.n	800eb94 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb92:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800eb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb96:	8a9b      	ldrh	r3, [r3, #20]
 800eb98:	8a3a      	ldrh	r2, [r7, #16]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d118      	bne.n	800ebd0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d005      	beq.n	800ebb2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800eba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba8:	685a      	ldr	r2, [r3, #4]
 800ebaa:	4b43      	ldr	r3, [pc, #268]	; (800ecb8 <udp_input+0x218>)
 800ebac:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d10e      	bne.n	800ebd0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ebb2:	6a3b      	ldr	r3, [r7, #32]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d014      	beq.n	800ebe2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ebb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebba:	68da      	ldr	r2, [r3, #12]
 800ebbc:	6a3b      	ldr	r3, [r7, #32]
 800ebbe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ebc0:	4b3e      	ldr	r3, [pc, #248]	; (800ecbc <udp_input+0x21c>)
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ebc8:	4a3c      	ldr	r2, [pc, #240]	; (800ecbc <udp_input+0x21c>)
 800ebca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebcc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ebce:	e008      	b.n	800ebe2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800ebd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	627b      	str	r3, [r7, #36]	; 0x24
 800ebda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d1a7      	bne.n	800eb30 <udp_input+0x90>
 800ebe0:	e000      	b.n	800ebe4 <udp_input+0x144>
        break;
 800ebe2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ebe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d101      	bne.n	800ebee <udp_input+0x14e>
    pcb = uncon_pcb;
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ebee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d002      	beq.n	800ebfa <udp_input+0x15a>
    for_us = 1;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	76fb      	strb	r3, [r7, #27]
 800ebf8:	e00a      	b.n	800ec10 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	3304      	adds	r3, #4
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	4b2d      	ldr	r3, [pc, #180]	; (800ecb8 <udp_input+0x218>)
 800ec02:	695b      	ldr	r3, [r3, #20]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	bf0c      	ite	eq
 800ec08:	2301      	moveq	r3, #1
 800ec0a:	2300      	movne	r3, #0
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ec10:	7efb      	ldrb	r3, [r7, #27]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d041      	beq.n	800ec9a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ec16:	2108      	movs	r1, #8
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7fa f8d5 	bl	8008dc8 <pbuf_remove_header>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d00a      	beq.n	800ec3a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ec24:	4b20      	ldr	r3, [pc, #128]	; (800eca8 <udp_input+0x208>)
 800ec26:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ec2a:	4925      	ldr	r1, [pc, #148]	; (800ecc0 <udp_input+0x220>)
 800ec2c:	4820      	ldr	r0, [pc, #128]	; (800ecb0 <udp_input+0x210>)
 800ec2e:	f002 fe2f 	bl	8011890 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7fa f94e 	bl	8008ed4 <pbuf_free>
      goto end;
 800ec38:	e032      	b.n	800eca0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d012      	beq.n	800ec66 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ec40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec42:	699b      	ldr	r3, [r3, #24]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d00a      	beq.n	800ec5e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ec48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4a:	699c      	ldr	r4, [r3, #24]
 800ec4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4e:	69d8      	ldr	r0, [r3, #28]
 800ec50:	8a3b      	ldrh	r3, [r7, #16]
 800ec52:	9300      	str	r3, [sp, #0]
 800ec54:	4b1b      	ldr	r3, [pc, #108]	; (800ecc4 <udp_input+0x224>)
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec5a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ec5c:	e021      	b.n	800eca2 <udp_input+0x202>
        pbuf_free(p);
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f7fa f938 	bl	8008ed4 <pbuf_free>
        goto end;
 800ec64:	e01c      	b.n	800eca0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ec66:	7cfb      	ldrb	r3, [r7, #19]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d112      	bne.n	800ec92 <udp_input+0x1f2>
 800ec6c:	4b12      	ldr	r3, [pc, #72]	; (800ecb8 <udp_input+0x218>)
 800ec6e:	695b      	ldr	r3, [r3, #20]
 800ec70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec74:	2be0      	cmp	r3, #224	; 0xe0
 800ec76:	d00c      	beq.n	800ec92 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ec78:	4b0f      	ldr	r3, [pc, #60]	; (800ecb8 <udp_input+0x218>)
 800ec7a:	899b      	ldrh	r3, [r3, #12]
 800ec7c:	3308      	adds	r3, #8
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	b21b      	sxth	r3, r3
 800ec82:	4619      	mov	r1, r3
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f7fa f912 	bl	8008eae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ec8a:	2103      	movs	r1, #3
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f001 f89b 	bl	800fdc8 <icmp_dest_unreach>
      pbuf_free(p);
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f7fa f91e 	bl	8008ed4 <pbuf_free>
  return;
 800ec98:	e003      	b.n	800eca2 <udp_input+0x202>
    pbuf_free(p);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f7fa f91a 	bl	8008ed4 <pbuf_free>
  return;
 800eca0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800eca2:	372c      	adds	r7, #44	; 0x2c
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd90      	pop	{r4, r7, pc}
 800eca8:	0801482c 	.word	0x0801482c
 800ecac:	080148d0 	.word	0x080148d0
 800ecb0:	08014880 	.word	0x08014880
 800ecb4:	080148e8 	.word	0x080148e8
 800ecb8:	20008d40 	.word	0x20008d40
 800ecbc:	2000c4f0 	.word	0x2000c4f0
 800ecc0:	08014904 	.word	0x08014904
 800ecc4:	20008d50 	.word	0x20008d50

0800ecc8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d01e      	beq.n	800ed16 <udp_netif_ip_addr_changed+0x4e>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d01a      	beq.n	800ed16 <udp_netif_ip_addr_changed+0x4e>
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d017      	beq.n	800ed16 <udp_netif_ip_addr_changed+0x4e>
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d013      	beq.n	800ed16 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ecee:	4b0d      	ldr	r3, [pc, #52]	; (800ed24 <udp_netif_ip_addr_changed+0x5c>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	60fb      	str	r3, [r7, #12]
 800ecf4:	e00c      	b.n	800ed10 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d103      	bne.n	800ed0a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	681a      	ldr	r2, [r3, #0]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	68db      	ldr	r3, [r3, #12]
 800ed0e:	60fb      	str	r3, [r7, #12]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d1ef      	bne.n	800ecf6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ed16:	bf00      	nop
 800ed18:	3714      	adds	r7, #20
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr
 800ed22:	bf00      	nop
 800ed24:	2000c4f0 	.word	0x2000c4f0

0800ed28 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ed30:	4915      	ldr	r1, [pc, #84]	; (800ed88 <etharp_free_entry+0x60>)
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	4613      	mov	r3, r2
 800ed36:	005b      	lsls	r3, r3, #1
 800ed38:	4413      	add	r3, r2
 800ed3a:	00db      	lsls	r3, r3, #3
 800ed3c:	440b      	add	r3, r1
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d013      	beq.n	800ed6c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ed44:	4910      	ldr	r1, [pc, #64]	; (800ed88 <etharp_free_entry+0x60>)
 800ed46:	687a      	ldr	r2, [r7, #4]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	005b      	lsls	r3, r3, #1
 800ed4c:	4413      	add	r3, r2
 800ed4e:	00db      	lsls	r3, r3, #3
 800ed50:	440b      	add	r3, r1
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7fa f8bd 	bl	8008ed4 <pbuf_free>
    arp_table[i].q = NULL;
 800ed5a:	490b      	ldr	r1, [pc, #44]	; (800ed88 <etharp_free_entry+0x60>)
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	4613      	mov	r3, r2
 800ed60:	005b      	lsls	r3, r3, #1
 800ed62:	4413      	add	r3, r2
 800ed64:	00db      	lsls	r3, r3, #3
 800ed66:	440b      	add	r3, r1
 800ed68:	2200      	movs	r2, #0
 800ed6a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ed6c:	4906      	ldr	r1, [pc, #24]	; (800ed88 <etharp_free_entry+0x60>)
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	4613      	mov	r3, r2
 800ed72:	005b      	lsls	r3, r3, #1
 800ed74:	4413      	add	r3, r2
 800ed76:	00db      	lsls	r3, r3, #3
 800ed78:	440b      	add	r3, r1
 800ed7a:	3314      	adds	r3, #20
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ed80:	bf00      	nop
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	2000c4f4 	.word	0x2000c4f4

0800ed8c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ed92:	2300      	movs	r3, #0
 800ed94:	607b      	str	r3, [r7, #4]
 800ed96:	e096      	b.n	800eec6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ed98:	494f      	ldr	r1, [pc, #316]	; (800eed8 <etharp_tmr+0x14c>)
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	005b      	lsls	r3, r3, #1
 800eda0:	4413      	add	r3, r2
 800eda2:	00db      	lsls	r3, r3, #3
 800eda4:	440b      	add	r3, r1
 800eda6:	3314      	adds	r3, #20
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800edac:	78fb      	ldrb	r3, [r7, #3]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	f000 8086 	beq.w	800eec0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800edb4:	4948      	ldr	r1, [pc, #288]	; (800eed8 <etharp_tmr+0x14c>)
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	4613      	mov	r3, r2
 800edba:	005b      	lsls	r3, r3, #1
 800edbc:	4413      	add	r3, r2
 800edbe:	00db      	lsls	r3, r3, #3
 800edc0:	440b      	add	r3, r1
 800edc2:	3312      	adds	r3, #18
 800edc4:	881b      	ldrh	r3, [r3, #0]
 800edc6:	3301      	adds	r3, #1
 800edc8:	b298      	uxth	r0, r3
 800edca:	4943      	ldr	r1, [pc, #268]	; (800eed8 <etharp_tmr+0x14c>)
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	4613      	mov	r3, r2
 800edd0:	005b      	lsls	r3, r3, #1
 800edd2:	4413      	add	r3, r2
 800edd4:	00db      	lsls	r3, r3, #3
 800edd6:	440b      	add	r3, r1
 800edd8:	3312      	adds	r3, #18
 800edda:	4602      	mov	r2, r0
 800eddc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800edde:	493e      	ldr	r1, [pc, #248]	; (800eed8 <etharp_tmr+0x14c>)
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	4613      	mov	r3, r2
 800ede4:	005b      	lsls	r3, r3, #1
 800ede6:	4413      	add	r3, r2
 800ede8:	00db      	lsls	r3, r3, #3
 800edea:	440b      	add	r3, r1
 800edec:	3312      	adds	r3, #18
 800edee:	881b      	ldrh	r3, [r3, #0]
 800edf0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800edf4:	d215      	bcs.n	800ee22 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800edf6:	4938      	ldr	r1, [pc, #224]	; (800eed8 <etharp_tmr+0x14c>)
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	4613      	mov	r3, r2
 800edfc:	005b      	lsls	r3, r3, #1
 800edfe:	4413      	add	r3, r2
 800ee00:	00db      	lsls	r3, r3, #3
 800ee02:	440b      	add	r3, r1
 800ee04:	3314      	adds	r3, #20
 800ee06:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d10e      	bne.n	800ee2a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ee0c:	4932      	ldr	r1, [pc, #200]	; (800eed8 <etharp_tmr+0x14c>)
 800ee0e:	687a      	ldr	r2, [r7, #4]
 800ee10:	4613      	mov	r3, r2
 800ee12:	005b      	lsls	r3, r3, #1
 800ee14:	4413      	add	r3, r2
 800ee16:	00db      	lsls	r3, r3, #3
 800ee18:	440b      	add	r3, r1
 800ee1a:	3312      	adds	r3, #18
 800ee1c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ee1e:	2b04      	cmp	r3, #4
 800ee20:	d903      	bls.n	800ee2a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f7ff ff80 	bl	800ed28 <etharp_free_entry>
 800ee28:	e04a      	b.n	800eec0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ee2a:	492b      	ldr	r1, [pc, #172]	; (800eed8 <etharp_tmr+0x14c>)
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	4613      	mov	r3, r2
 800ee30:	005b      	lsls	r3, r3, #1
 800ee32:	4413      	add	r3, r2
 800ee34:	00db      	lsls	r3, r3, #3
 800ee36:	440b      	add	r3, r1
 800ee38:	3314      	adds	r3, #20
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	2b03      	cmp	r3, #3
 800ee3e:	d10a      	bne.n	800ee56 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ee40:	4925      	ldr	r1, [pc, #148]	; (800eed8 <etharp_tmr+0x14c>)
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	4613      	mov	r3, r2
 800ee46:	005b      	lsls	r3, r3, #1
 800ee48:	4413      	add	r3, r2
 800ee4a:	00db      	lsls	r3, r3, #3
 800ee4c:	440b      	add	r3, r1
 800ee4e:	3314      	adds	r3, #20
 800ee50:	2204      	movs	r2, #4
 800ee52:	701a      	strb	r2, [r3, #0]
 800ee54:	e034      	b.n	800eec0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ee56:	4920      	ldr	r1, [pc, #128]	; (800eed8 <etharp_tmr+0x14c>)
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	005b      	lsls	r3, r3, #1
 800ee5e:	4413      	add	r3, r2
 800ee60:	00db      	lsls	r3, r3, #3
 800ee62:	440b      	add	r3, r1
 800ee64:	3314      	adds	r3, #20
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	2b04      	cmp	r3, #4
 800ee6a:	d10a      	bne.n	800ee82 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ee6c:	491a      	ldr	r1, [pc, #104]	; (800eed8 <etharp_tmr+0x14c>)
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	4613      	mov	r3, r2
 800ee72:	005b      	lsls	r3, r3, #1
 800ee74:	4413      	add	r3, r2
 800ee76:	00db      	lsls	r3, r3, #3
 800ee78:	440b      	add	r3, r1
 800ee7a:	3314      	adds	r3, #20
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	701a      	strb	r2, [r3, #0]
 800ee80:	e01e      	b.n	800eec0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ee82:	4915      	ldr	r1, [pc, #84]	; (800eed8 <etharp_tmr+0x14c>)
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	4613      	mov	r3, r2
 800ee88:	005b      	lsls	r3, r3, #1
 800ee8a:	4413      	add	r3, r2
 800ee8c:	00db      	lsls	r3, r3, #3
 800ee8e:	440b      	add	r3, r1
 800ee90:	3314      	adds	r3, #20
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	d113      	bne.n	800eec0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ee98:	490f      	ldr	r1, [pc, #60]	; (800eed8 <etharp_tmr+0x14c>)
 800ee9a:	687a      	ldr	r2, [r7, #4]
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	005b      	lsls	r3, r3, #1
 800eea0:	4413      	add	r3, r2
 800eea2:	00db      	lsls	r3, r3, #3
 800eea4:	440b      	add	r3, r1
 800eea6:	3308      	adds	r3, #8
 800eea8:	6818      	ldr	r0, [r3, #0]
 800eeaa:	687a      	ldr	r2, [r7, #4]
 800eeac:	4613      	mov	r3, r2
 800eeae:	005b      	lsls	r3, r3, #1
 800eeb0:	4413      	add	r3, r2
 800eeb2:	00db      	lsls	r3, r3, #3
 800eeb4:	4a08      	ldr	r2, [pc, #32]	; (800eed8 <etharp_tmr+0x14c>)
 800eeb6:	4413      	add	r3, r2
 800eeb8:	3304      	adds	r3, #4
 800eeba:	4619      	mov	r1, r3
 800eebc:	f000 fe6e 	bl	800fb9c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	3301      	adds	r3, #1
 800eec4:	607b      	str	r3, [r7, #4]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2b09      	cmp	r3, #9
 800eeca:	f77f af65 	ble.w	800ed98 <etharp_tmr+0xc>
      }
    }
  }
}
 800eece:	bf00      	nop
 800eed0:	bf00      	nop
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	2000c4f4 	.word	0x2000c4f4

0800eedc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b08a      	sub	sp, #40	; 0x28
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	460b      	mov	r3, r1
 800eee6:	607a      	str	r2, [r7, #4]
 800eee8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800eeea:	230a      	movs	r3, #10
 800eeec:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eeee:	230a      	movs	r3, #10
 800eef0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800eef2:	230a      	movs	r3, #10
 800eef4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800eef6:	2300      	movs	r3, #0
 800eef8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800eefa:	230a      	movs	r3, #10
 800eefc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800eefe:	2300      	movs	r3, #0
 800ef00:	83bb      	strh	r3, [r7, #28]
 800ef02:	2300      	movs	r3, #0
 800ef04:	837b      	strh	r3, [r7, #26]
 800ef06:	2300      	movs	r3, #0
 800ef08:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	843b      	strh	r3, [r7, #32]
 800ef0e:	e0ae      	b.n	800f06e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ef10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef14:	49a6      	ldr	r1, [pc, #664]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800ef16:	4613      	mov	r3, r2
 800ef18:	005b      	lsls	r3, r3, #1
 800ef1a:	4413      	add	r3, r2
 800ef1c:	00db      	lsls	r3, r3, #3
 800ef1e:	440b      	add	r3, r1
 800ef20:	3314      	adds	r3, #20
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ef26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ef2a:	2b0a      	cmp	r3, #10
 800ef2c:	d105      	bne.n	800ef3a <etharp_find_entry+0x5e>
 800ef2e:	7dfb      	ldrb	r3, [r7, #23]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d102      	bne.n	800ef3a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ef34:	8c3b      	ldrh	r3, [r7, #32]
 800ef36:	847b      	strh	r3, [r7, #34]	; 0x22
 800ef38:	e095      	b.n	800f066 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ef3a:	7dfb      	ldrb	r3, [r7, #23]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	f000 8092 	beq.w	800f066 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ef42:	7dfb      	ldrb	r3, [r7, #23]
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	d009      	beq.n	800ef5c <etharp_find_entry+0x80>
 800ef48:	7dfb      	ldrb	r3, [r7, #23]
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d806      	bhi.n	800ef5c <etharp_find_entry+0x80>
 800ef4e:	4b99      	ldr	r3, [pc, #612]	; (800f1b4 <etharp_find_entry+0x2d8>)
 800ef50:	f240 1223 	movw	r2, #291	; 0x123
 800ef54:	4998      	ldr	r1, [pc, #608]	; (800f1b8 <etharp_find_entry+0x2dc>)
 800ef56:	4899      	ldr	r0, [pc, #612]	; (800f1bc <etharp_find_entry+0x2e0>)
 800ef58:	f002 fc9a 	bl	8011890 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d020      	beq.n	800efa4 <etharp_find_entry+0xc8>
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	6819      	ldr	r1, [r3, #0]
 800ef66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef6a:	4891      	ldr	r0, [pc, #580]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800ef6c:	4613      	mov	r3, r2
 800ef6e:	005b      	lsls	r3, r3, #1
 800ef70:	4413      	add	r3, r2
 800ef72:	00db      	lsls	r3, r3, #3
 800ef74:	4403      	add	r3, r0
 800ef76:	3304      	adds	r3, #4
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4299      	cmp	r1, r3
 800ef7c:	d112      	bne.n	800efa4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00c      	beq.n	800ef9e <etharp_find_entry+0xc2>
 800ef84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef88:	4989      	ldr	r1, [pc, #548]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	005b      	lsls	r3, r3, #1
 800ef8e:	4413      	add	r3, r2
 800ef90:	00db      	lsls	r3, r3, #3
 800ef92:	440b      	add	r3, r1
 800ef94:	3308      	adds	r3, #8
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	687a      	ldr	r2, [r7, #4]
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d102      	bne.n	800efa4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ef9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800efa2:	e100      	b.n	800f1a6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800efa4:	7dfb      	ldrb	r3, [r7, #23]
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d140      	bne.n	800f02c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800efaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800efae:	4980      	ldr	r1, [pc, #512]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800efb0:	4613      	mov	r3, r2
 800efb2:	005b      	lsls	r3, r3, #1
 800efb4:	4413      	add	r3, r2
 800efb6:	00db      	lsls	r3, r3, #3
 800efb8:	440b      	add	r3, r1
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d01a      	beq.n	800eff6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800efc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800efc4:	497a      	ldr	r1, [pc, #488]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800efc6:	4613      	mov	r3, r2
 800efc8:	005b      	lsls	r3, r3, #1
 800efca:	4413      	add	r3, r2
 800efcc:	00db      	lsls	r3, r3, #3
 800efce:	440b      	add	r3, r1
 800efd0:	3312      	adds	r3, #18
 800efd2:	881b      	ldrh	r3, [r3, #0]
 800efd4:	8bba      	ldrh	r2, [r7, #28]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d845      	bhi.n	800f066 <etharp_find_entry+0x18a>
            old_queue = i;
 800efda:	8c3b      	ldrh	r3, [r7, #32]
 800efdc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800efde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800efe2:	4973      	ldr	r1, [pc, #460]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800efe4:	4613      	mov	r3, r2
 800efe6:	005b      	lsls	r3, r3, #1
 800efe8:	4413      	add	r3, r2
 800efea:	00db      	lsls	r3, r3, #3
 800efec:	440b      	add	r3, r1
 800efee:	3312      	adds	r3, #18
 800eff0:	881b      	ldrh	r3, [r3, #0]
 800eff2:	83bb      	strh	r3, [r7, #28]
 800eff4:	e037      	b.n	800f066 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800eff6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800effa:	496d      	ldr	r1, [pc, #436]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800effc:	4613      	mov	r3, r2
 800effe:	005b      	lsls	r3, r3, #1
 800f000:	4413      	add	r3, r2
 800f002:	00db      	lsls	r3, r3, #3
 800f004:	440b      	add	r3, r1
 800f006:	3312      	adds	r3, #18
 800f008:	881b      	ldrh	r3, [r3, #0]
 800f00a:	8b7a      	ldrh	r2, [r7, #26]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d82a      	bhi.n	800f066 <etharp_find_entry+0x18a>
            old_pending = i;
 800f010:	8c3b      	ldrh	r3, [r7, #32]
 800f012:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f014:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f018:	4965      	ldr	r1, [pc, #404]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800f01a:	4613      	mov	r3, r2
 800f01c:	005b      	lsls	r3, r3, #1
 800f01e:	4413      	add	r3, r2
 800f020:	00db      	lsls	r3, r3, #3
 800f022:	440b      	add	r3, r1
 800f024:	3312      	adds	r3, #18
 800f026:	881b      	ldrh	r3, [r3, #0]
 800f028:	837b      	strh	r3, [r7, #26]
 800f02a:	e01c      	b.n	800f066 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f02c:	7dfb      	ldrb	r3, [r7, #23]
 800f02e:	2b01      	cmp	r3, #1
 800f030:	d919      	bls.n	800f066 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f032:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f036:	495e      	ldr	r1, [pc, #376]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800f038:	4613      	mov	r3, r2
 800f03a:	005b      	lsls	r3, r3, #1
 800f03c:	4413      	add	r3, r2
 800f03e:	00db      	lsls	r3, r3, #3
 800f040:	440b      	add	r3, r1
 800f042:	3312      	adds	r3, #18
 800f044:	881b      	ldrh	r3, [r3, #0]
 800f046:	8b3a      	ldrh	r2, [r7, #24]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d80c      	bhi.n	800f066 <etharp_find_entry+0x18a>
            old_stable = i;
 800f04c:	8c3b      	ldrh	r3, [r7, #32]
 800f04e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f050:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f054:	4956      	ldr	r1, [pc, #344]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800f056:	4613      	mov	r3, r2
 800f058:	005b      	lsls	r3, r3, #1
 800f05a:	4413      	add	r3, r2
 800f05c:	00db      	lsls	r3, r3, #3
 800f05e:	440b      	add	r3, r1
 800f060:	3312      	adds	r3, #18
 800f062:	881b      	ldrh	r3, [r3, #0]
 800f064:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f066:	8c3b      	ldrh	r3, [r7, #32]
 800f068:	3301      	adds	r3, #1
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	843b      	strh	r3, [r7, #32]
 800f06e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f072:	2b09      	cmp	r3, #9
 800f074:	f77f af4c 	ble.w	800ef10 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f078:	7afb      	ldrb	r3, [r7, #11]
 800f07a:	f003 0302 	and.w	r3, r3, #2
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d108      	bne.n	800f094 <etharp_find_entry+0x1b8>
 800f082:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f086:	2b0a      	cmp	r3, #10
 800f088:	d107      	bne.n	800f09a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f08a:	7afb      	ldrb	r3, [r7, #11]
 800f08c:	f003 0301 	and.w	r3, r3, #1
 800f090:	2b00      	cmp	r3, #0
 800f092:	d102      	bne.n	800f09a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f094:	f04f 33ff 	mov.w	r3, #4294967295
 800f098:	e085      	b.n	800f1a6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f09a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f09e:	2b09      	cmp	r3, #9
 800f0a0:	dc02      	bgt.n	800f0a8 <etharp_find_entry+0x1cc>
    i = empty;
 800f0a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0a4:	843b      	strh	r3, [r7, #32]
 800f0a6:	e039      	b.n	800f11c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f0a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f0ac:	2b09      	cmp	r3, #9
 800f0ae:	dc14      	bgt.n	800f0da <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f0b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0b2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f0b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0b8:	493d      	ldr	r1, [pc, #244]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800f0ba:	4613      	mov	r3, r2
 800f0bc:	005b      	lsls	r3, r3, #1
 800f0be:	4413      	add	r3, r2
 800f0c0:	00db      	lsls	r3, r3, #3
 800f0c2:	440b      	add	r3, r1
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d018      	beq.n	800f0fc <etharp_find_entry+0x220>
 800f0ca:	4b3a      	ldr	r3, [pc, #232]	; (800f1b4 <etharp_find_entry+0x2d8>)
 800f0cc:	f240 126d 	movw	r2, #365	; 0x16d
 800f0d0:	493b      	ldr	r1, [pc, #236]	; (800f1c0 <etharp_find_entry+0x2e4>)
 800f0d2:	483a      	ldr	r0, [pc, #232]	; (800f1bc <etharp_find_entry+0x2e0>)
 800f0d4:	f002 fbdc 	bl	8011890 <iprintf>
 800f0d8:	e010      	b.n	800f0fc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f0da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f0de:	2b09      	cmp	r3, #9
 800f0e0:	dc02      	bgt.n	800f0e8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f0e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f0e4:	843b      	strh	r3, [r7, #32]
 800f0e6:	e009      	b.n	800f0fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f0e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f0ec:	2b09      	cmp	r3, #9
 800f0ee:	dc02      	bgt.n	800f0f6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f0f0:	8bfb      	ldrh	r3, [r7, #30]
 800f0f2:	843b      	strh	r3, [r7, #32]
 800f0f4:	e002      	b.n	800f0fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800f0fa:	e054      	b.n	800f1a6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f0fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f100:	2b09      	cmp	r3, #9
 800f102:	dd06      	ble.n	800f112 <etharp_find_entry+0x236>
 800f104:	4b2b      	ldr	r3, [pc, #172]	; (800f1b4 <etharp_find_entry+0x2d8>)
 800f106:	f240 127f 	movw	r2, #383	; 0x17f
 800f10a:	492e      	ldr	r1, [pc, #184]	; (800f1c4 <etharp_find_entry+0x2e8>)
 800f10c:	482b      	ldr	r0, [pc, #172]	; (800f1bc <etharp_find_entry+0x2e0>)
 800f10e:	f002 fbbf 	bl	8011890 <iprintf>
    etharp_free_entry(i);
 800f112:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f116:	4618      	mov	r0, r3
 800f118:	f7ff fe06 	bl	800ed28 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f11c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f120:	2b09      	cmp	r3, #9
 800f122:	dd06      	ble.n	800f132 <etharp_find_entry+0x256>
 800f124:	4b23      	ldr	r3, [pc, #140]	; (800f1b4 <etharp_find_entry+0x2d8>)
 800f126:	f240 1283 	movw	r2, #387	; 0x183
 800f12a:	4926      	ldr	r1, [pc, #152]	; (800f1c4 <etharp_find_entry+0x2e8>)
 800f12c:	4823      	ldr	r0, [pc, #140]	; (800f1bc <etharp_find_entry+0x2e0>)
 800f12e:	f002 fbaf 	bl	8011890 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f132:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f136:	491e      	ldr	r1, [pc, #120]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800f138:	4613      	mov	r3, r2
 800f13a:	005b      	lsls	r3, r3, #1
 800f13c:	4413      	add	r3, r2
 800f13e:	00db      	lsls	r3, r3, #3
 800f140:	440b      	add	r3, r1
 800f142:	3314      	adds	r3, #20
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d006      	beq.n	800f158 <etharp_find_entry+0x27c>
 800f14a:	4b1a      	ldr	r3, [pc, #104]	; (800f1b4 <etharp_find_entry+0x2d8>)
 800f14c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f150:	491d      	ldr	r1, [pc, #116]	; (800f1c8 <etharp_find_entry+0x2ec>)
 800f152:	481a      	ldr	r0, [pc, #104]	; (800f1bc <etharp_find_entry+0x2e0>)
 800f154:	f002 fb9c 	bl	8011890 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d00b      	beq.n	800f176 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f15e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	6819      	ldr	r1, [r3, #0]
 800f166:	4812      	ldr	r0, [pc, #72]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800f168:	4613      	mov	r3, r2
 800f16a:	005b      	lsls	r3, r3, #1
 800f16c:	4413      	add	r3, r2
 800f16e:	00db      	lsls	r3, r3, #3
 800f170:	4403      	add	r3, r0
 800f172:	3304      	adds	r3, #4
 800f174:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f176:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f17a:	490d      	ldr	r1, [pc, #52]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800f17c:	4613      	mov	r3, r2
 800f17e:	005b      	lsls	r3, r3, #1
 800f180:	4413      	add	r3, r2
 800f182:	00db      	lsls	r3, r3, #3
 800f184:	440b      	add	r3, r1
 800f186:	3312      	adds	r3, #18
 800f188:	2200      	movs	r2, #0
 800f18a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f18c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f190:	4907      	ldr	r1, [pc, #28]	; (800f1b0 <etharp_find_entry+0x2d4>)
 800f192:	4613      	mov	r3, r2
 800f194:	005b      	lsls	r3, r3, #1
 800f196:	4413      	add	r3, r2
 800f198:	00db      	lsls	r3, r3, #3
 800f19a:	440b      	add	r3, r1
 800f19c:	3308      	adds	r3, #8
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f1a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3728      	adds	r7, #40	; 0x28
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	2000c4f4 	.word	0x2000c4f4
 800f1b4:	08014b90 	.word	0x08014b90
 800f1b8:	08014bc8 	.word	0x08014bc8
 800f1bc:	08014c08 	.word	0x08014c08
 800f1c0:	08014c30 	.word	0x08014c30
 800f1c4:	08014c48 	.word	0x08014c48
 800f1c8:	08014c5c 	.word	0x08014c5c

0800f1cc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b088      	sub	sp, #32
 800f1d0:	af02      	add	r7, sp, #8
 800f1d2:	60f8      	str	r0, [r7, #12]
 800f1d4:	60b9      	str	r1, [r7, #8]
 800f1d6:	607a      	str	r2, [r7, #4]
 800f1d8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f1e0:	2b06      	cmp	r3, #6
 800f1e2:	d006      	beq.n	800f1f2 <etharp_update_arp_entry+0x26>
 800f1e4:	4b48      	ldr	r3, [pc, #288]	; (800f308 <etharp_update_arp_entry+0x13c>)
 800f1e6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f1ea:	4948      	ldr	r1, [pc, #288]	; (800f30c <etharp_update_arp_entry+0x140>)
 800f1ec:	4848      	ldr	r0, [pc, #288]	; (800f310 <etharp_update_arp_entry+0x144>)
 800f1ee:	f002 fb4f 	bl	8011890 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d012      	beq.n	800f21e <etharp_update_arp_entry+0x52>
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d00e      	beq.n	800f21e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	68f9      	ldr	r1, [r7, #12]
 800f206:	4618      	mov	r0, r3
 800f208:	f001 f8fe 	bl	8010408 <ip4_addr_isbroadcast_u32>
 800f20c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d105      	bne.n	800f21e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f21a:	2be0      	cmp	r3, #224	; 0xe0
 800f21c:	d102      	bne.n	800f224 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f21e:	f06f 030f 	mvn.w	r3, #15
 800f222:	e06c      	b.n	800f2fe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f224:	78fb      	ldrb	r3, [r7, #3]
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	4619      	mov	r1, r3
 800f22a:	68b8      	ldr	r0, [r7, #8]
 800f22c:	f7ff fe56 	bl	800eedc <etharp_find_entry>
 800f230:	4603      	mov	r3, r0
 800f232:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f234:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	da02      	bge.n	800f242 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f23c:	8afb      	ldrh	r3, [r7, #22]
 800f23e:	b25b      	sxtb	r3, r3
 800f240:	e05d      	b.n	800f2fe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f242:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f246:	4933      	ldr	r1, [pc, #204]	; (800f314 <etharp_update_arp_entry+0x148>)
 800f248:	4613      	mov	r3, r2
 800f24a:	005b      	lsls	r3, r3, #1
 800f24c:	4413      	add	r3, r2
 800f24e:	00db      	lsls	r3, r3, #3
 800f250:	440b      	add	r3, r1
 800f252:	3314      	adds	r3, #20
 800f254:	2202      	movs	r2, #2
 800f256:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f258:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f25c:	492d      	ldr	r1, [pc, #180]	; (800f314 <etharp_update_arp_entry+0x148>)
 800f25e:	4613      	mov	r3, r2
 800f260:	005b      	lsls	r3, r3, #1
 800f262:	4413      	add	r3, r2
 800f264:	00db      	lsls	r3, r3, #3
 800f266:	440b      	add	r3, r1
 800f268:	3308      	adds	r3, #8
 800f26a:	68fa      	ldr	r2, [r7, #12]
 800f26c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f26e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f272:	4613      	mov	r3, r2
 800f274:	005b      	lsls	r3, r3, #1
 800f276:	4413      	add	r3, r2
 800f278:	00db      	lsls	r3, r3, #3
 800f27a:	3308      	adds	r3, #8
 800f27c:	4a25      	ldr	r2, [pc, #148]	; (800f314 <etharp_update_arp_entry+0x148>)
 800f27e:	4413      	add	r3, r2
 800f280:	3304      	adds	r3, #4
 800f282:	2206      	movs	r2, #6
 800f284:	6879      	ldr	r1, [r7, #4]
 800f286:	4618      	mov	r0, r3
 800f288:	f002 fa57 	bl	801173a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f28c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f290:	4920      	ldr	r1, [pc, #128]	; (800f314 <etharp_update_arp_entry+0x148>)
 800f292:	4613      	mov	r3, r2
 800f294:	005b      	lsls	r3, r3, #1
 800f296:	4413      	add	r3, r2
 800f298:	00db      	lsls	r3, r3, #3
 800f29a:	440b      	add	r3, r1
 800f29c:	3312      	adds	r3, #18
 800f29e:	2200      	movs	r2, #0
 800f2a0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f2a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f2a6:	491b      	ldr	r1, [pc, #108]	; (800f314 <etharp_update_arp_entry+0x148>)
 800f2a8:	4613      	mov	r3, r2
 800f2aa:	005b      	lsls	r3, r3, #1
 800f2ac:	4413      	add	r3, r2
 800f2ae:	00db      	lsls	r3, r3, #3
 800f2b0:	440b      	add	r3, r1
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d021      	beq.n	800f2fc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f2b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f2bc:	4915      	ldr	r1, [pc, #84]	; (800f314 <etharp_update_arp_entry+0x148>)
 800f2be:	4613      	mov	r3, r2
 800f2c0:	005b      	lsls	r3, r3, #1
 800f2c2:	4413      	add	r3, r2
 800f2c4:	00db      	lsls	r3, r3, #3
 800f2c6:	440b      	add	r3, r1
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f2cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f2d0:	4910      	ldr	r1, [pc, #64]	; (800f314 <etharp_update_arp_entry+0x148>)
 800f2d2:	4613      	mov	r3, r2
 800f2d4:	005b      	lsls	r3, r3, #1
 800f2d6:	4413      	add	r3, r2
 800f2d8:	00db      	lsls	r3, r3, #3
 800f2da:	440b      	add	r3, r1
 800f2dc:	2200      	movs	r2, #0
 800f2de:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f2e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f2ea:	9300      	str	r3, [sp, #0]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6939      	ldr	r1, [r7, #16]
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	f001 ff97 	bl	8011224 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f2f6:	6938      	ldr	r0, [r7, #16]
 800f2f8:	f7f9 fdec 	bl	8008ed4 <pbuf_free>
  }
  return ERR_OK;
 800f2fc:	2300      	movs	r3, #0
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3718      	adds	r7, #24
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	08014b90 	.word	0x08014b90
 800f30c:	08014c88 	.word	0x08014c88
 800f310:	08014c08 	.word	0x08014c08
 800f314:	2000c4f4 	.word	0x2000c4f4

0800f318 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f320:	2300      	movs	r3, #0
 800f322:	60fb      	str	r3, [r7, #12]
 800f324:	e01e      	b.n	800f364 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f326:	4913      	ldr	r1, [pc, #76]	; (800f374 <etharp_cleanup_netif+0x5c>)
 800f328:	68fa      	ldr	r2, [r7, #12]
 800f32a:	4613      	mov	r3, r2
 800f32c:	005b      	lsls	r3, r3, #1
 800f32e:	4413      	add	r3, r2
 800f330:	00db      	lsls	r3, r3, #3
 800f332:	440b      	add	r3, r1
 800f334:	3314      	adds	r3, #20
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f33a:	7afb      	ldrb	r3, [r7, #11]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d00e      	beq.n	800f35e <etharp_cleanup_netif+0x46>
 800f340:	490c      	ldr	r1, [pc, #48]	; (800f374 <etharp_cleanup_netif+0x5c>)
 800f342:	68fa      	ldr	r2, [r7, #12]
 800f344:	4613      	mov	r3, r2
 800f346:	005b      	lsls	r3, r3, #1
 800f348:	4413      	add	r3, r2
 800f34a:	00db      	lsls	r3, r3, #3
 800f34c:	440b      	add	r3, r1
 800f34e:	3308      	adds	r3, #8
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	687a      	ldr	r2, [r7, #4]
 800f354:	429a      	cmp	r2, r3
 800f356:	d102      	bne.n	800f35e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f358:	68f8      	ldr	r0, [r7, #12]
 800f35a:	f7ff fce5 	bl	800ed28 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	3301      	adds	r3, #1
 800f362:	60fb      	str	r3, [r7, #12]
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2b09      	cmp	r3, #9
 800f368:	dddd      	ble.n	800f326 <etharp_cleanup_netif+0xe>
    }
  }
}
 800f36a:	bf00      	nop
 800f36c:	bf00      	nop
 800f36e:	3710      	adds	r7, #16
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	2000c4f4 	.word	0x2000c4f4

0800f378 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f378:	b5b0      	push	{r4, r5, r7, lr}
 800f37a:	b08a      	sub	sp, #40	; 0x28
 800f37c:	af04      	add	r7, sp, #16
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d107      	bne.n	800f398 <etharp_input+0x20>
 800f388:	4b3d      	ldr	r3, [pc, #244]	; (800f480 <etharp_input+0x108>)
 800f38a:	f240 228a 	movw	r2, #650	; 0x28a
 800f38e:	493d      	ldr	r1, [pc, #244]	; (800f484 <etharp_input+0x10c>)
 800f390:	483d      	ldr	r0, [pc, #244]	; (800f488 <etharp_input+0x110>)
 800f392:	f002 fa7d 	bl	8011890 <iprintf>
 800f396:	e06f      	b.n	800f478 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	881b      	ldrh	r3, [r3, #0]
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3a8:	d10c      	bne.n	800f3c4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f3ae:	2b06      	cmp	r3, #6
 800f3b0:	d108      	bne.n	800f3c4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f3b6:	2b04      	cmp	r3, #4
 800f3b8:	d104      	bne.n	800f3c4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	885b      	ldrh	r3, [r3, #2]
 800f3be:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f3c0:	2b08      	cmp	r3, #8
 800f3c2:	d003      	beq.n	800f3cc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f7f9 fd85 	bl	8008ed4 <pbuf_free>
    return;
 800f3ca:	e055      	b.n	800f478 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	330e      	adds	r3, #14
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	3318      	adds	r3, #24
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	3304      	adds	r3, #4
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d102      	bne.n	800f3ec <etharp_input+0x74>
    for_us = 0;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	75fb      	strb	r3, [r7, #23]
 800f3ea:	e009      	b.n	800f400 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f3ec:	68ba      	ldr	r2, [r7, #8]
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	3304      	adds	r3, #4
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	bf0c      	ite	eq
 800f3f8:	2301      	moveq	r3, #1
 800f3fa:	2300      	movne	r3, #0
 800f3fc:	b2db      	uxtb	r3, r3
 800f3fe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f400:	693b      	ldr	r3, [r7, #16]
 800f402:	f103 0208 	add.w	r2, r3, #8
 800f406:	7dfb      	ldrb	r3, [r7, #23]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d001      	beq.n	800f410 <etharp_input+0x98>
 800f40c:	2301      	movs	r3, #1
 800f40e:	e000      	b.n	800f412 <etharp_input+0x9a>
 800f410:	2302      	movs	r3, #2
 800f412:	f107 010c 	add.w	r1, r7, #12
 800f416:	6838      	ldr	r0, [r7, #0]
 800f418:	f7ff fed8 	bl	800f1cc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	88db      	ldrh	r3, [r3, #6]
 800f420:	b29b      	uxth	r3, r3
 800f422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f426:	d003      	beq.n	800f430 <etharp_input+0xb8>
 800f428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f42c:	d01e      	beq.n	800f46c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f42e:	e020      	b.n	800f472 <etharp_input+0xfa>
      if (for_us) {
 800f430:	7dfb      	ldrb	r3, [r7, #23]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d01c      	beq.n	800f470 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f44c:	693a      	ldr	r2, [r7, #16]
 800f44e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f450:	2102      	movs	r1, #2
 800f452:	9103      	str	r1, [sp, #12]
 800f454:	f107 010c 	add.w	r1, r7, #12
 800f458:	9102      	str	r1, [sp, #8]
 800f45a:	9201      	str	r2, [sp, #4]
 800f45c:	9300      	str	r3, [sp, #0]
 800f45e:	462b      	mov	r3, r5
 800f460:	4622      	mov	r2, r4
 800f462:	4601      	mov	r1, r0
 800f464:	6838      	ldr	r0, [r7, #0]
 800f466:	f000 faeb 	bl	800fa40 <etharp_raw>
      break;
 800f46a:	e001      	b.n	800f470 <etharp_input+0xf8>
      break;
 800f46c:	bf00      	nop
 800f46e:	e000      	b.n	800f472 <etharp_input+0xfa>
      break;
 800f470:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f7f9 fd2e 	bl	8008ed4 <pbuf_free>
}
 800f478:	3718      	adds	r7, #24
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bdb0      	pop	{r4, r5, r7, pc}
 800f47e:	bf00      	nop
 800f480:	08014b90 	.word	0x08014b90
 800f484:	08014ce0 	.word	0x08014ce0
 800f488:	08014c08 	.word	0x08014c08

0800f48c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b086      	sub	sp, #24
 800f490:	af02      	add	r7, sp, #8
 800f492:	60f8      	str	r0, [r7, #12]
 800f494:	60b9      	str	r1, [r7, #8]
 800f496:	4613      	mov	r3, r2
 800f498:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f49a:	79fa      	ldrb	r2, [r7, #7]
 800f49c:	4944      	ldr	r1, [pc, #272]	; (800f5b0 <etharp_output_to_arp_index+0x124>)
 800f49e:	4613      	mov	r3, r2
 800f4a0:	005b      	lsls	r3, r3, #1
 800f4a2:	4413      	add	r3, r2
 800f4a4:	00db      	lsls	r3, r3, #3
 800f4a6:	440b      	add	r3, r1
 800f4a8:	3314      	adds	r3, #20
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d806      	bhi.n	800f4be <etharp_output_to_arp_index+0x32>
 800f4b0:	4b40      	ldr	r3, [pc, #256]	; (800f5b4 <etharp_output_to_arp_index+0x128>)
 800f4b2:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f4b6:	4940      	ldr	r1, [pc, #256]	; (800f5b8 <etharp_output_to_arp_index+0x12c>)
 800f4b8:	4840      	ldr	r0, [pc, #256]	; (800f5bc <etharp_output_to_arp_index+0x130>)
 800f4ba:	f002 f9e9 	bl	8011890 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f4be:	79fa      	ldrb	r2, [r7, #7]
 800f4c0:	493b      	ldr	r1, [pc, #236]	; (800f5b0 <etharp_output_to_arp_index+0x124>)
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	005b      	lsls	r3, r3, #1
 800f4c6:	4413      	add	r3, r2
 800f4c8:	00db      	lsls	r3, r3, #3
 800f4ca:	440b      	add	r3, r1
 800f4cc:	3314      	adds	r3, #20
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	2b02      	cmp	r3, #2
 800f4d2:	d153      	bne.n	800f57c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f4d4:	79fa      	ldrb	r2, [r7, #7]
 800f4d6:	4936      	ldr	r1, [pc, #216]	; (800f5b0 <etharp_output_to_arp_index+0x124>)
 800f4d8:	4613      	mov	r3, r2
 800f4da:	005b      	lsls	r3, r3, #1
 800f4dc:	4413      	add	r3, r2
 800f4de:	00db      	lsls	r3, r3, #3
 800f4e0:	440b      	add	r3, r1
 800f4e2:	3312      	adds	r3, #18
 800f4e4:	881b      	ldrh	r3, [r3, #0]
 800f4e6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f4ea:	d919      	bls.n	800f520 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f4ec:	79fa      	ldrb	r2, [r7, #7]
 800f4ee:	4613      	mov	r3, r2
 800f4f0:	005b      	lsls	r3, r3, #1
 800f4f2:	4413      	add	r3, r2
 800f4f4:	00db      	lsls	r3, r3, #3
 800f4f6:	4a2e      	ldr	r2, [pc, #184]	; (800f5b0 <etharp_output_to_arp_index+0x124>)
 800f4f8:	4413      	add	r3, r2
 800f4fa:	3304      	adds	r3, #4
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	68f8      	ldr	r0, [r7, #12]
 800f500:	f000 fb4c 	bl	800fb9c <etharp_request>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d138      	bne.n	800f57c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f50a:	79fa      	ldrb	r2, [r7, #7]
 800f50c:	4928      	ldr	r1, [pc, #160]	; (800f5b0 <etharp_output_to_arp_index+0x124>)
 800f50e:	4613      	mov	r3, r2
 800f510:	005b      	lsls	r3, r3, #1
 800f512:	4413      	add	r3, r2
 800f514:	00db      	lsls	r3, r3, #3
 800f516:	440b      	add	r3, r1
 800f518:	3314      	adds	r3, #20
 800f51a:	2203      	movs	r2, #3
 800f51c:	701a      	strb	r2, [r3, #0]
 800f51e:	e02d      	b.n	800f57c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f520:	79fa      	ldrb	r2, [r7, #7]
 800f522:	4923      	ldr	r1, [pc, #140]	; (800f5b0 <etharp_output_to_arp_index+0x124>)
 800f524:	4613      	mov	r3, r2
 800f526:	005b      	lsls	r3, r3, #1
 800f528:	4413      	add	r3, r2
 800f52a:	00db      	lsls	r3, r3, #3
 800f52c:	440b      	add	r3, r1
 800f52e:	3312      	adds	r3, #18
 800f530:	881b      	ldrh	r3, [r3, #0]
 800f532:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f536:	d321      	bcc.n	800f57c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f538:	79fa      	ldrb	r2, [r7, #7]
 800f53a:	4613      	mov	r3, r2
 800f53c:	005b      	lsls	r3, r3, #1
 800f53e:	4413      	add	r3, r2
 800f540:	00db      	lsls	r3, r3, #3
 800f542:	4a1b      	ldr	r2, [pc, #108]	; (800f5b0 <etharp_output_to_arp_index+0x124>)
 800f544:	4413      	add	r3, r2
 800f546:	1d19      	adds	r1, r3, #4
 800f548:	79fa      	ldrb	r2, [r7, #7]
 800f54a:	4613      	mov	r3, r2
 800f54c:	005b      	lsls	r3, r3, #1
 800f54e:	4413      	add	r3, r2
 800f550:	00db      	lsls	r3, r3, #3
 800f552:	3308      	adds	r3, #8
 800f554:	4a16      	ldr	r2, [pc, #88]	; (800f5b0 <etharp_output_to_arp_index+0x124>)
 800f556:	4413      	add	r3, r2
 800f558:	3304      	adds	r3, #4
 800f55a:	461a      	mov	r2, r3
 800f55c:	68f8      	ldr	r0, [r7, #12]
 800f55e:	f000 fafb 	bl	800fb58 <etharp_request_dst>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d109      	bne.n	800f57c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f568:	79fa      	ldrb	r2, [r7, #7]
 800f56a:	4911      	ldr	r1, [pc, #68]	; (800f5b0 <etharp_output_to_arp_index+0x124>)
 800f56c:	4613      	mov	r3, r2
 800f56e:	005b      	lsls	r3, r3, #1
 800f570:	4413      	add	r3, r2
 800f572:	00db      	lsls	r3, r3, #3
 800f574:	440b      	add	r3, r1
 800f576:	3314      	adds	r3, #20
 800f578:	2203      	movs	r2, #3
 800f57a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f582:	79fa      	ldrb	r2, [r7, #7]
 800f584:	4613      	mov	r3, r2
 800f586:	005b      	lsls	r3, r3, #1
 800f588:	4413      	add	r3, r2
 800f58a:	00db      	lsls	r3, r3, #3
 800f58c:	3308      	adds	r3, #8
 800f58e:	4a08      	ldr	r2, [pc, #32]	; (800f5b0 <etharp_output_to_arp_index+0x124>)
 800f590:	4413      	add	r3, r2
 800f592:	3304      	adds	r3, #4
 800f594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f598:	9200      	str	r2, [sp, #0]
 800f59a:	460a      	mov	r2, r1
 800f59c:	68b9      	ldr	r1, [r7, #8]
 800f59e:	68f8      	ldr	r0, [r7, #12]
 800f5a0:	f001 fe40 	bl	8011224 <ethernet_output>
 800f5a4:	4603      	mov	r3, r0
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3710      	adds	r7, #16
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	2000c4f4 	.word	0x2000c4f4
 800f5b4:	08014b90 	.word	0x08014b90
 800f5b8:	08014d00 	.word	0x08014d00
 800f5bc:	08014c08 	.word	0x08014c08

0800f5c0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b08a      	sub	sp, #40	; 0x28
 800f5c4:	af02      	add	r7, sp, #8
 800f5c6:	60f8      	str	r0, [r7, #12]
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d106      	bne.n	800f5e4 <etharp_output+0x24>
 800f5d6:	4b73      	ldr	r3, [pc, #460]	; (800f7a4 <etharp_output+0x1e4>)
 800f5d8:	f240 321e 	movw	r2, #798	; 0x31e
 800f5dc:	4972      	ldr	r1, [pc, #456]	; (800f7a8 <etharp_output+0x1e8>)
 800f5de:	4873      	ldr	r0, [pc, #460]	; (800f7ac <etharp_output+0x1ec>)
 800f5e0:	f002 f956 	bl	8011890 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d106      	bne.n	800f5f8 <etharp_output+0x38>
 800f5ea:	4b6e      	ldr	r3, [pc, #440]	; (800f7a4 <etharp_output+0x1e4>)
 800f5ec:	f240 321f 	movw	r2, #799	; 0x31f
 800f5f0:	496f      	ldr	r1, [pc, #444]	; (800f7b0 <etharp_output+0x1f0>)
 800f5f2:	486e      	ldr	r0, [pc, #440]	; (800f7ac <etharp_output+0x1ec>)
 800f5f4:	f002 f94c 	bl	8011890 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d106      	bne.n	800f60c <etharp_output+0x4c>
 800f5fe:	4b69      	ldr	r3, [pc, #420]	; (800f7a4 <etharp_output+0x1e4>)
 800f600:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f604:	496b      	ldr	r1, [pc, #428]	; (800f7b4 <etharp_output+0x1f4>)
 800f606:	4869      	ldr	r0, [pc, #420]	; (800f7ac <etharp_output+0x1ec>)
 800f608:	f002 f942 	bl	8011890 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68f9      	ldr	r1, [r7, #12]
 800f612:	4618      	mov	r0, r3
 800f614:	f000 fef8 	bl	8010408 <ip4_addr_isbroadcast_u32>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d002      	beq.n	800f624 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f61e:	4b66      	ldr	r3, [pc, #408]	; (800f7b8 <etharp_output+0x1f8>)
 800f620:	61fb      	str	r3, [r7, #28]
 800f622:	e0af      	b.n	800f784 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f62c:	2be0      	cmp	r3, #224	; 0xe0
 800f62e:	d118      	bne.n	800f662 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f630:	2301      	movs	r3, #1
 800f632:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f634:	2300      	movs	r3, #0
 800f636:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f638:	235e      	movs	r3, #94	; 0x5e
 800f63a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	3301      	adds	r3, #1
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f646:	b2db      	uxtb	r3, r3
 800f648:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	3302      	adds	r3, #2
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	3303      	adds	r3, #3
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f65a:	f107 0310 	add.w	r3, r7, #16
 800f65e:	61fb      	str	r3, [r7, #28]
 800f660:	e090      	b.n	800f784 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	3304      	adds	r3, #4
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	405a      	eors	r2, r3
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	3308      	adds	r3, #8
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4013      	ands	r3, r2
 800f676:	2b00      	cmp	r3, #0
 800f678:	d012      	beq.n	800f6a0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f680:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f684:	4293      	cmp	r3, r2
 800f686:	d00b      	beq.n	800f6a0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	330c      	adds	r3, #12
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d003      	beq.n	800f69a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	330c      	adds	r3, #12
 800f696:	61bb      	str	r3, [r7, #24]
 800f698:	e002      	b.n	800f6a0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f69a:	f06f 0303 	mvn.w	r3, #3
 800f69e:	e07d      	b.n	800f79c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f6a0:	4b46      	ldr	r3, [pc, #280]	; (800f7bc <etharp_output+0x1fc>)
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	4a46      	ldr	r2, [pc, #280]	; (800f7c0 <etharp_output+0x200>)
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	005b      	lsls	r3, r3, #1
 800f6ac:	440b      	add	r3, r1
 800f6ae:	00db      	lsls	r3, r3, #3
 800f6b0:	4413      	add	r3, r2
 800f6b2:	3314      	adds	r3, #20
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	d925      	bls.n	800f706 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f6ba:	4b40      	ldr	r3, [pc, #256]	; (800f7bc <etharp_output+0x1fc>)
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	4619      	mov	r1, r3
 800f6c0:	4a3f      	ldr	r2, [pc, #252]	; (800f7c0 <etharp_output+0x200>)
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	005b      	lsls	r3, r3, #1
 800f6c6:	440b      	add	r3, r1
 800f6c8:	00db      	lsls	r3, r3, #3
 800f6ca:	4413      	add	r3, r2
 800f6cc:	3308      	adds	r3, #8
 800f6ce:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f6d0:	68fa      	ldr	r2, [r7, #12]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d117      	bne.n	800f706 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	4b38      	ldr	r3, [pc, #224]	; (800f7bc <etharp_output+0x1fc>)
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	4618      	mov	r0, r3
 800f6e0:	4937      	ldr	r1, [pc, #220]	; (800f7c0 <etharp_output+0x200>)
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	005b      	lsls	r3, r3, #1
 800f6e6:	4403      	add	r3, r0
 800f6e8:	00db      	lsls	r3, r3, #3
 800f6ea:	440b      	add	r3, r1
 800f6ec:	3304      	adds	r3, #4
 800f6ee:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d108      	bne.n	800f706 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f6f4:	4b31      	ldr	r3, [pc, #196]	; (800f7bc <etharp_output+0x1fc>)
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	68b9      	ldr	r1, [r7, #8]
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	f7ff fec5 	bl	800f48c <etharp_output_to_arp_index>
 800f702:	4603      	mov	r3, r0
 800f704:	e04a      	b.n	800f79c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f706:	2300      	movs	r3, #0
 800f708:	75fb      	strb	r3, [r7, #23]
 800f70a:	e031      	b.n	800f770 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f70c:	7dfa      	ldrb	r2, [r7, #23]
 800f70e:	492c      	ldr	r1, [pc, #176]	; (800f7c0 <etharp_output+0x200>)
 800f710:	4613      	mov	r3, r2
 800f712:	005b      	lsls	r3, r3, #1
 800f714:	4413      	add	r3, r2
 800f716:	00db      	lsls	r3, r3, #3
 800f718:	440b      	add	r3, r1
 800f71a:	3314      	adds	r3, #20
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	2b01      	cmp	r3, #1
 800f720:	d923      	bls.n	800f76a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f722:	7dfa      	ldrb	r2, [r7, #23]
 800f724:	4926      	ldr	r1, [pc, #152]	; (800f7c0 <etharp_output+0x200>)
 800f726:	4613      	mov	r3, r2
 800f728:	005b      	lsls	r3, r3, #1
 800f72a:	4413      	add	r3, r2
 800f72c:	00db      	lsls	r3, r3, #3
 800f72e:	440b      	add	r3, r1
 800f730:	3308      	adds	r3, #8
 800f732:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f734:	68fa      	ldr	r2, [r7, #12]
 800f736:	429a      	cmp	r2, r3
 800f738:	d117      	bne.n	800f76a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f73a:	69bb      	ldr	r3, [r7, #24]
 800f73c:	6819      	ldr	r1, [r3, #0]
 800f73e:	7dfa      	ldrb	r2, [r7, #23]
 800f740:	481f      	ldr	r0, [pc, #124]	; (800f7c0 <etharp_output+0x200>)
 800f742:	4613      	mov	r3, r2
 800f744:	005b      	lsls	r3, r3, #1
 800f746:	4413      	add	r3, r2
 800f748:	00db      	lsls	r3, r3, #3
 800f74a:	4403      	add	r3, r0
 800f74c:	3304      	adds	r3, #4
 800f74e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f750:	4299      	cmp	r1, r3
 800f752:	d10a      	bne.n	800f76a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f754:	4a19      	ldr	r2, [pc, #100]	; (800f7bc <etharp_output+0x1fc>)
 800f756:	7dfb      	ldrb	r3, [r7, #23]
 800f758:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f75a:	7dfb      	ldrb	r3, [r7, #23]
 800f75c:	461a      	mov	r2, r3
 800f75e:	68b9      	ldr	r1, [r7, #8]
 800f760:	68f8      	ldr	r0, [r7, #12]
 800f762:	f7ff fe93 	bl	800f48c <etharp_output_to_arp_index>
 800f766:	4603      	mov	r3, r0
 800f768:	e018      	b.n	800f79c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f76a:	7dfb      	ldrb	r3, [r7, #23]
 800f76c:	3301      	adds	r3, #1
 800f76e:	75fb      	strb	r3, [r7, #23]
 800f770:	7dfb      	ldrb	r3, [r7, #23]
 800f772:	2b09      	cmp	r3, #9
 800f774:	d9ca      	bls.n	800f70c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f776:	68ba      	ldr	r2, [r7, #8]
 800f778:	69b9      	ldr	r1, [r7, #24]
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f000 f822 	bl	800f7c4 <etharp_query>
 800f780:	4603      	mov	r3, r0
 800f782:	e00b      	b.n	800f79c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f78a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f78e:	9300      	str	r3, [sp, #0]
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	68b9      	ldr	r1, [r7, #8]
 800f794:	68f8      	ldr	r0, [r7, #12]
 800f796:	f001 fd45 	bl	8011224 <ethernet_output>
 800f79a:	4603      	mov	r3, r0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3720      	adds	r7, #32
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	08014b90 	.word	0x08014b90
 800f7a8:	08014ce0 	.word	0x08014ce0
 800f7ac:	08014c08 	.word	0x08014c08
 800f7b0:	08014d30 	.word	0x08014d30
 800f7b4:	08014cd0 	.word	0x08014cd0
 800f7b8:	0801538c 	.word	0x0801538c
 800f7bc:	2000c5e4 	.word	0x2000c5e4
 800f7c0:	2000c4f4 	.word	0x2000c4f4

0800f7c4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b08c      	sub	sp, #48	; 0x30
 800f7c8:	af02      	add	r7, sp, #8
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	3326      	adds	r3, #38	; 0x26
 800f7d4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f7d6:	23ff      	movs	r3, #255	; 0xff
 800f7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	68f9      	ldr	r1, [r7, #12]
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f000 fe0e 	bl	8010408 <ip4_addr_isbroadcast_u32>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d10c      	bne.n	800f80c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f7fa:	2be0      	cmp	r3, #224	; 0xe0
 800f7fc:	d006      	beq.n	800f80c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d003      	beq.n	800f80c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d102      	bne.n	800f812 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f80c:	f06f 030f 	mvn.w	r3, #15
 800f810:	e101      	b.n	800fa16 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f812:	68fa      	ldr	r2, [r7, #12]
 800f814:	2101      	movs	r1, #1
 800f816:	68b8      	ldr	r0, [r7, #8]
 800f818:	f7ff fb60 	bl	800eedc <etharp_find_entry>
 800f81c:	4603      	mov	r3, r0
 800f81e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f820:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f824:	2b00      	cmp	r3, #0
 800f826:	da02      	bge.n	800f82e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f828:	8a7b      	ldrh	r3, [r7, #18]
 800f82a:	b25b      	sxtb	r3, r3
 800f82c:	e0f3      	b.n	800fa16 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f82e:	8a7b      	ldrh	r3, [r7, #18]
 800f830:	2b7e      	cmp	r3, #126	; 0x7e
 800f832:	d906      	bls.n	800f842 <etharp_query+0x7e>
 800f834:	4b7a      	ldr	r3, [pc, #488]	; (800fa20 <etharp_query+0x25c>)
 800f836:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f83a:	497a      	ldr	r1, [pc, #488]	; (800fa24 <etharp_query+0x260>)
 800f83c:	487a      	ldr	r0, [pc, #488]	; (800fa28 <etharp_query+0x264>)
 800f83e:	f002 f827 	bl	8011890 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f842:	8a7b      	ldrh	r3, [r7, #18]
 800f844:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f846:	7c7a      	ldrb	r2, [r7, #17]
 800f848:	4978      	ldr	r1, [pc, #480]	; (800fa2c <etharp_query+0x268>)
 800f84a:	4613      	mov	r3, r2
 800f84c:	005b      	lsls	r3, r3, #1
 800f84e:	4413      	add	r3, r2
 800f850:	00db      	lsls	r3, r3, #3
 800f852:	440b      	add	r3, r1
 800f854:	3314      	adds	r3, #20
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d115      	bne.n	800f888 <etharp_query+0xc4>
    is_new_entry = 1;
 800f85c:	2301      	movs	r3, #1
 800f85e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f860:	7c7a      	ldrb	r2, [r7, #17]
 800f862:	4972      	ldr	r1, [pc, #456]	; (800fa2c <etharp_query+0x268>)
 800f864:	4613      	mov	r3, r2
 800f866:	005b      	lsls	r3, r3, #1
 800f868:	4413      	add	r3, r2
 800f86a:	00db      	lsls	r3, r3, #3
 800f86c:	440b      	add	r3, r1
 800f86e:	3314      	adds	r3, #20
 800f870:	2201      	movs	r2, #1
 800f872:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f874:	7c7a      	ldrb	r2, [r7, #17]
 800f876:	496d      	ldr	r1, [pc, #436]	; (800fa2c <etharp_query+0x268>)
 800f878:	4613      	mov	r3, r2
 800f87a:	005b      	lsls	r3, r3, #1
 800f87c:	4413      	add	r3, r2
 800f87e:	00db      	lsls	r3, r3, #3
 800f880:	440b      	add	r3, r1
 800f882:	3308      	adds	r3, #8
 800f884:	68fa      	ldr	r2, [r7, #12]
 800f886:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f888:	7c7a      	ldrb	r2, [r7, #17]
 800f88a:	4968      	ldr	r1, [pc, #416]	; (800fa2c <etharp_query+0x268>)
 800f88c:	4613      	mov	r3, r2
 800f88e:	005b      	lsls	r3, r3, #1
 800f890:	4413      	add	r3, r2
 800f892:	00db      	lsls	r3, r3, #3
 800f894:	440b      	add	r3, r1
 800f896:	3314      	adds	r3, #20
 800f898:	781b      	ldrb	r3, [r3, #0]
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	d011      	beq.n	800f8c2 <etharp_query+0xfe>
 800f89e:	7c7a      	ldrb	r2, [r7, #17]
 800f8a0:	4962      	ldr	r1, [pc, #392]	; (800fa2c <etharp_query+0x268>)
 800f8a2:	4613      	mov	r3, r2
 800f8a4:	005b      	lsls	r3, r3, #1
 800f8a6:	4413      	add	r3, r2
 800f8a8:	00db      	lsls	r3, r3, #3
 800f8aa:	440b      	add	r3, r1
 800f8ac:	3314      	adds	r3, #20
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d806      	bhi.n	800f8c2 <etharp_query+0xfe>
 800f8b4:	4b5a      	ldr	r3, [pc, #360]	; (800fa20 <etharp_query+0x25c>)
 800f8b6:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f8ba:	495d      	ldr	r1, [pc, #372]	; (800fa30 <etharp_query+0x26c>)
 800f8bc:	485a      	ldr	r0, [pc, #360]	; (800fa28 <etharp_query+0x264>)
 800f8be:	f001 ffe7 	bl	8011890 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f8c2:	6a3b      	ldr	r3, [r7, #32]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d102      	bne.n	800f8ce <etharp_query+0x10a>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d10c      	bne.n	800f8e8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f8ce:	68b9      	ldr	r1, [r7, #8]
 800f8d0:	68f8      	ldr	r0, [r7, #12]
 800f8d2:	f000 f963 	bl	800fb9c <etharp_request>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d102      	bne.n	800f8e8 <etharp_query+0x124>
      return result;
 800f8e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f8e6:	e096      	b.n	800fa16 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d106      	bne.n	800f8fc <etharp_query+0x138>
 800f8ee:	4b4c      	ldr	r3, [pc, #304]	; (800fa20 <etharp_query+0x25c>)
 800f8f0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f8f4:	494f      	ldr	r1, [pc, #316]	; (800fa34 <etharp_query+0x270>)
 800f8f6:	484c      	ldr	r0, [pc, #304]	; (800fa28 <etharp_query+0x264>)
 800f8f8:	f001 ffca 	bl	8011890 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f8fc:	7c7a      	ldrb	r2, [r7, #17]
 800f8fe:	494b      	ldr	r1, [pc, #300]	; (800fa2c <etharp_query+0x268>)
 800f900:	4613      	mov	r3, r2
 800f902:	005b      	lsls	r3, r3, #1
 800f904:	4413      	add	r3, r2
 800f906:	00db      	lsls	r3, r3, #3
 800f908:	440b      	add	r3, r1
 800f90a:	3314      	adds	r3, #20
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d917      	bls.n	800f942 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f912:	4a49      	ldr	r2, [pc, #292]	; (800fa38 <etharp_query+0x274>)
 800f914:	7c7b      	ldrb	r3, [r7, #17]
 800f916:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f918:	7c7a      	ldrb	r2, [r7, #17]
 800f91a:	4613      	mov	r3, r2
 800f91c:	005b      	lsls	r3, r3, #1
 800f91e:	4413      	add	r3, r2
 800f920:	00db      	lsls	r3, r3, #3
 800f922:	3308      	adds	r3, #8
 800f924:	4a41      	ldr	r2, [pc, #260]	; (800fa2c <etharp_query+0x268>)
 800f926:	4413      	add	r3, r2
 800f928:	3304      	adds	r3, #4
 800f92a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f92e:	9200      	str	r2, [sp, #0]
 800f930:	697a      	ldr	r2, [r7, #20]
 800f932:	6879      	ldr	r1, [r7, #4]
 800f934:	68f8      	ldr	r0, [r7, #12]
 800f936:	f001 fc75 	bl	8011224 <ethernet_output>
 800f93a:	4603      	mov	r3, r0
 800f93c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f940:	e067      	b.n	800fa12 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f942:	7c7a      	ldrb	r2, [r7, #17]
 800f944:	4939      	ldr	r1, [pc, #228]	; (800fa2c <etharp_query+0x268>)
 800f946:	4613      	mov	r3, r2
 800f948:	005b      	lsls	r3, r3, #1
 800f94a:	4413      	add	r3, r2
 800f94c:	00db      	lsls	r3, r3, #3
 800f94e:	440b      	add	r3, r1
 800f950:	3314      	adds	r3, #20
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	2b01      	cmp	r3, #1
 800f956:	d15c      	bne.n	800fa12 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f958:	2300      	movs	r3, #0
 800f95a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f960:	e01c      	b.n	800f99c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	895a      	ldrh	r2, [r3, #10]
 800f966:	69fb      	ldr	r3, [r7, #28]
 800f968:	891b      	ldrh	r3, [r3, #8]
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d10a      	bne.n	800f984 <etharp_query+0x1c0>
 800f96e:	69fb      	ldr	r3, [r7, #28]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d006      	beq.n	800f984 <etharp_query+0x1c0>
 800f976:	4b2a      	ldr	r3, [pc, #168]	; (800fa20 <etharp_query+0x25c>)
 800f978:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f97c:	492f      	ldr	r1, [pc, #188]	; (800fa3c <etharp_query+0x278>)
 800f97e:	482a      	ldr	r0, [pc, #168]	; (800fa28 <etharp_query+0x264>)
 800f980:	f001 ff86 	bl	8011890 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	7b1b      	ldrb	r3, [r3, #12]
 800f988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d002      	beq.n	800f996 <etharp_query+0x1d2>
        copy_needed = 1;
 800f990:	2301      	movs	r3, #1
 800f992:	61bb      	str	r3, [r7, #24]
        break;
 800f994:	e005      	b.n	800f9a2 <etharp_query+0x1de>
      }
      p = p->next;
 800f996:	69fb      	ldr	r3, [r7, #28]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d1df      	bne.n	800f962 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f9a2:	69bb      	ldr	r3, [r7, #24]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d007      	beq.n	800f9b8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f9a8:	687a      	ldr	r2, [r7, #4]
 800f9aa:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f9ae:	200e      	movs	r0, #14
 800f9b0:	f7f9 fcf8 	bl	80093a4 <pbuf_clone>
 800f9b4:	61f8      	str	r0, [r7, #28]
 800f9b6:	e004      	b.n	800f9c2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f9bc:	69f8      	ldr	r0, [r7, #28]
 800f9be:	f7f9 fb2f 	bl	8009020 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f9c2:	69fb      	ldr	r3, [r7, #28]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d021      	beq.n	800fa0c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f9c8:	7c7a      	ldrb	r2, [r7, #17]
 800f9ca:	4918      	ldr	r1, [pc, #96]	; (800fa2c <etharp_query+0x268>)
 800f9cc:	4613      	mov	r3, r2
 800f9ce:	005b      	lsls	r3, r3, #1
 800f9d0:	4413      	add	r3, r2
 800f9d2:	00db      	lsls	r3, r3, #3
 800f9d4:	440b      	add	r3, r1
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d00a      	beq.n	800f9f2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f9dc:	7c7a      	ldrb	r2, [r7, #17]
 800f9de:	4913      	ldr	r1, [pc, #76]	; (800fa2c <etharp_query+0x268>)
 800f9e0:	4613      	mov	r3, r2
 800f9e2:	005b      	lsls	r3, r3, #1
 800f9e4:	4413      	add	r3, r2
 800f9e6:	00db      	lsls	r3, r3, #3
 800f9e8:	440b      	add	r3, r1
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7f9 fa71 	bl	8008ed4 <pbuf_free>
      }
      arp_table[i].q = p;
 800f9f2:	7c7a      	ldrb	r2, [r7, #17]
 800f9f4:	490d      	ldr	r1, [pc, #52]	; (800fa2c <etharp_query+0x268>)
 800f9f6:	4613      	mov	r3, r2
 800f9f8:	005b      	lsls	r3, r3, #1
 800f9fa:	4413      	add	r3, r2
 800f9fc:	00db      	lsls	r3, r3, #3
 800f9fe:	440b      	add	r3, r1
 800fa00:	69fa      	ldr	r2, [r7, #28]
 800fa02:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800fa04:	2300      	movs	r3, #0
 800fa06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa0a:	e002      	b.n	800fa12 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800fa0c:	23ff      	movs	r3, #255	; 0xff
 800fa0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800fa12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3728      	adds	r7, #40	; 0x28
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	08014b90 	.word	0x08014b90
 800fa24:	08014d3c 	.word	0x08014d3c
 800fa28:	08014c08 	.word	0x08014c08
 800fa2c:	2000c4f4 	.word	0x2000c4f4
 800fa30:	08014d4c 	.word	0x08014d4c
 800fa34:	08014d30 	.word	0x08014d30
 800fa38:	2000c5e4 	.word	0x2000c5e4
 800fa3c:	08014d74 	.word	0x08014d74

0800fa40 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b08a      	sub	sp, #40	; 0x28
 800fa44:	af02      	add	r7, sp, #8
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	60b9      	str	r1, [r7, #8]
 800fa4a:	607a      	str	r2, [r7, #4]
 800fa4c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d106      	bne.n	800fa66 <etharp_raw+0x26>
 800fa58:	4b3a      	ldr	r3, [pc, #232]	; (800fb44 <etharp_raw+0x104>)
 800fa5a:	f240 4257 	movw	r2, #1111	; 0x457
 800fa5e:	493a      	ldr	r1, [pc, #232]	; (800fb48 <etharp_raw+0x108>)
 800fa60:	483a      	ldr	r0, [pc, #232]	; (800fb4c <etharp_raw+0x10c>)
 800fa62:	f001 ff15 	bl	8011890 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fa66:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa6a:	211c      	movs	r1, #28
 800fa6c:	200e      	movs	r0, #14
 800fa6e:	f7f8 ff4d 	bl	800890c <pbuf_alloc>
 800fa72:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fa74:	69bb      	ldr	r3, [r7, #24]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d102      	bne.n	800fa80 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800fa7a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa7e:	e05d      	b.n	800fb3c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800fa80:	69bb      	ldr	r3, [r7, #24]
 800fa82:	895b      	ldrh	r3, [r3, #10]
 800fa84:	2b1b      	cmp	r3, #27
 800fa86:	d806      	bhi.n	800fa96 <etharp_raw+0x56>
 800fa88:	4b2e      	ldr	r3, [pc, #184]	; (800fb44 <etharp_raw+0x104>)
 800fa8a:	f240 4262 	movw	r2, #1122	; 0x462
 800fa8e:	4930      	ldr	r1, [pc, #192]	; (800fb50 <etharp_raw+0x110>)
 800fa90:	482e      	ldr	r0, [pc, #184]	; (800fb4c <etharp_raw+0x10c>)
 800fa92:	f001 fefd 	bl	8011890 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	685b      	ldr	r3, [r3, #4]
 800fa9a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800fa9c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7f7 fe26 	bl	80076f0 <lwip_htons>
 800faa4:	4603      	mov	r3, r0
 800faa6:	461a      	mov	r2, r3
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fab2:	2b06      	cmp	r3, #6
 800fab4:	d006      	beq.n	800fac4 <etharp_raw+0x84>
 800fab6:	4b23      	ldr	r3, [pc, #140]	; (800fb44 <etharp_raw+0x104>)
 800fab8:	f240 4269 	movw	r2, #1129	; 0x469
 800fabc:	4925      	ldr	r1, [pc, #148]	; (800fb54 <etharp_raw+0x114>)
 800fabe:	4823      	ldr	r0, [pc, #140]	; (800fb4c <etharp_raw+0x10c>)
 800fac0:	f001 fee6 	bl	8011890 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	3308      	adds	r3, #8
 800fac8:	2206      	movs	r2, #6
 800faca:	6839      	ldr	r1, [r7, #0]
 800facc:	4618      	mov	r0, r3
 800face:	f001 fe34 	bl	801173a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	3312      	adds	r3, #18
 800fad6:	2206      	movs	r2, #6
 800fad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fada:	4618      	mov	r0, r3
 800fadc:	f001 fe2d 	bl	801173a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	330e      	adds	r3, #14
 800fae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fae6:	6812      	ldr	r2, [r2, #0]
 800fae8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	3318      	adds	r3, #24
 800faee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800faf0:	6812      	ldr	r2, [r2, #0]
 800faf2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	2200      	movs	r2, #0
 800faf8:	701a      	strb	r2, [r3, #0]
 800fafa:	2200      	movs	r2, #0
 800fafc:	f042 0201 	orr.w	r2, r2, #1
 800fb00:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	2200      	movs	r2, #0
 800fb06:	f042 0208 	orr.w	r2, r2, #8
 800fb0a:	709a      	strb	r2, [r3, #2]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	2206      	movs	r2, #6
 800fb14:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	2204      	movs	r2, #4
 800fb1a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800fb1c:	f640 0306 	movw	r3, #2054	; 0x806
 800fb20:	9300      	str	r3, [sp, #0]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	68ba      	ldr	r2, [r7, #8]
 800fb26:	69b9      	ldr	r1, [r7, #24]
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f001 fb7b 	bl	8011224 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fb2e:	69b8      	ldr	r0, [r7, #24]
 800fb30:	f7f9 f9d0 	bl	8008ed4 <pbuf_free>
  p = NULL;
 800fb34:	2300      	movs	r3, #0
 800fb36:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fb38:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3720      	adds	r7, #32
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	08014b90 	.word	0x08014b90
 800fb48:	08014ce0 	.word	0x08014ce0
 800fb4c:	08014c08 	.word	0x08014c08
 800fb50:	08014d90 	.word	0x08014d90
 800fb54:	08014dc4 	.word	0x08014dc4

0800fb58 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b088      	sub	sp, #32
 800fb5c:	af04      	add	r7, sp, #16
 800fb5e:	60f8      	str	r0, [r7, #12]
 800fb60:	60b9      	str	r1, [r7, #8]
 800fb62:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fb74:	2201      	movs	r2, #1
 800fb76:	9203      	str	r2, [sp, #12]
 800fb78:	68ba      	ldr	r2, [r7, #8]
 800fb7a:	9202      	str	r2, [sp, #8]
 800fb7c:	4a06      	ldr	r2, [pc, #24]	; (800fb98 <etharp_request_dst+0x40>)
 800fb7e:	9201      	str	r2, [sp, #4]
 800fb80:	9300      	str	r3, [sp, #0]
 800fb82:	4603      	mov	r3, r0
 800fb84:	687a      	ldr	r2, [r7, #4]
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	f7ff ff5a 	bl	800fa40 <etharp_raw>
 800fb8c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3710      	adds	r7, #16
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
 800fb96:	bf00      	nop
 800fb98:	08015394 	.word	0x08015394

0800fb9c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fba6:	4a05      	ldr	r2, [pc, #20]	; (800fbbc <etharp_request+0x20>)
 800fba8:	6839      	ldr	r1, [r7, #0]
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f7ff ffd4 	bl	800fb58 <etharp_request_dst>
 800fbb0:	4603      	mov	r3, r0
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3708      	adds	r7, #8
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}
 800fbba:	bf00      	nop
 800fbbc:	0801538c 	.word	0x0801538c

0800fbc0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b08e      	sub	sp, #56	; 0x38
 800fbc4:	af04      	add	r7, sp, #16
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fbca:	4b79      	ldr	r3, [pc, #484]	; (800fdb0 <icmp_input+0x1f0>)
 800fbcc:	689b      	ldr	r3, [r3, #8]
 800fbce:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	f003 030f 	and.w	r3, r3, #15
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	009b      	lsls	r3, r3, #2
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800fbe0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbe2:	2b13      	cmp	r3, #19
 800fbe4:	f240 80cd 	bls.w	800fd82 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	895b      	ldrh	r3, [r3, #10]
 800fbec:	2b03      	cmp	r3, #3
 800fbee:	f240 80ca 	bls.w	800fd86 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fbfc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	f000 80b7 	beq.w	800fd74 <icmp_input+0x1b4>
 800fc06:	2b08      	cmp	r3, #8
 800fc08:	f040 80b7 	bne.w	800fd7a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fc0c:	4b69      	ldr	r3, [pc, #420]	; (800fdb4 <icmp_input+0x1f4>)
 800fc0e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fc10:	4b67      	ldr	r3, [pc, #412]	; (800fdb0 <icmp_input+0x1f0>)
 800fc12:	695b      	ldr	r3, [r3, #20]
 800fc14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc18:	2be0      	cmp	r3, #224	; 0xe0
 800fc1a:	f000 80bb 	beq.w	800fd94 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fc1e:	4b64      	ldr	r3, [pc, #400]	; (800fdb0 <icmp_input+0x1f0>)
 800fc20:	695b      	ldr	r3, [r3, #20]
 800fc22:	4a63      	ldr	r2, [pc, #396]	; (800fdb0 <icmp_input+0x1f0>)
 800fc24:	6812      	ldr	r2, [r2, #0]
 800fc26:	4611      	mov	r1, r2
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f000 fbed 	bl	8010408 <ip4_addr_isbroadcast_u32>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	f040 80b1 	bne.w	800fd98 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	891b      	ldrh	r3, [r3, #8]
 800fc3a:	2b07      	cmp	r3, #7
 800fc3c:	f240 80a5 	bls.w	800fd8a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fc40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc42:	330e      	adds	r3, #14
 800fc44:	4619      	mov	r1, r3
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f7f9 f8ae 	bl	8008da8 <pbuf_add_header>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d04b      	beq.n	800fcea <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	891a      	ldrh	r2, [r3, #8]
 800fc56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc58:	4413      	add	r3, r2
 800fc5a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	891b      	ldrh	r3, [r3, #8]
 800fc60:	8b7a      	ldrh	r2, [r7, #26]
 800fc62:	429a      	cmp	r2, r3
 800fc64:	f0c0 809a 	bcc.w	800fd9c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fc68:	8b7b      	ldrh	r3, [r7, #26]
 800fc6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fc6e:	4619      	mov	r1, r3
 800fc70:	200e      	movs	r0, #14
 800fc72:	f7f8 fe4b 	bl	800890c <pbuf_alloc>
 800fc76:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	f000 8090 	beq.w	800fda0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	895b      	ldrh	r3, [r3, #10]
 800fc84:	461a      	mov	r2, r3
 800fc86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc88:	3308      	adds	r3, #8
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d203      	bcs.n	800fc96 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fc8e:	6978      	ldr	r0, [r7, #20]
 800fc90:	f7f9 f920 	bl	8008ed4 <pbuf_free>
          goto icmperr;
 800fc94:	e085      	b.n	800fda2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fc9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f001 fd4b 	bl	801173a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fca4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fca6:	4619      	mov	r1, r3
 800fca8:	6978      	ldr	r0, [r7, #20]
 800fcaa:	f7f9 f88d 	bl	8008dc8 <pbuf_remove_header>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d009      	beq.n	800fcc8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fcb4:	4b40      	ldr	r3, [pc, #256]	; (800fdb8 <icmp_input+0x1f8>)
 800fcb6:	22b6      	movs	r2, #182	; 0xb6
 800fcb8:	4940      	ldr	r1, [pc, #256]	; (800fdbc <icmp_input+0x1fc>)
 800fcba:	4841      	ldr	r0, [pc, #260]	; (800fdc0 <icmp_input+0x200>)
 800fcbc:	f001 fde8 	bl	8011890 <iprintf>
          pbuf_free(r);
 800fcc0:	6978      	ldr	r0, [r7, #20]
 800fcc2:	f7f9 f907 	bl	8008ed4 <pbuf_free>
          goto icmperr;
 800fcc6:	e06c      	b.n	800fda2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fcc8:	6879      	ldr	r1, [r7, #4]
 800fcca:	6978      	ldr	r0, [r7, #20]
 800fccc:	f7f9 fa26 	bl	800911c <pbuf_copy>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d003      	beq.n	800fcde <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800fcd6:	6978      	ldr	r0, [r7, #20]
 800fcd8:	f7f9 f8fc 	bl	8008ed4 <pbuf_free>
          goto icmperr;
 800fcdc:	e061      	b.n	800fda2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f7f9 f8f8 	bl	8008ed4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	607b      	str	r3, [r7, #4]
 800fce8:	e00f      	b.n	800fd0a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fcea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fcec:	330e      	adds	r3, #14
 800fcee:	4619      	mov	r1, r3
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7f9 f869 	bl	8008dc8 <pbuf_remove_header>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d006      	beq.n	800fd0a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fcfc:	4b2e      	ldr	r3, [pc, #184]	; (800fdb8 <icmp_input+0x1f8>)
 800fcfe:	22c7      	movs	r2, #199	; 0xc7
 800fd00:	4930      	ldr	r1, [pc, #192]	; (800fdc4 <icmp_input+0x204>)
 800fd02:	482f      	ldr	r0, [pc, #188]	; (800fdc0 <icmp_input+0x200>)
 800fd04:	f001 fdc4 	bl	8011890 <iprintf>
          goto icmperr;
 800fd08:	e04b      	b.n	800fda2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fd10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd12:	4619      	mov	r1, r3
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f7f9 f847 	bl	8008da8 <pbuf_add_header>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d12b      	bne.n	800fd78 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800fd26:	69fb      	ldr	r3, [r7, #28]
 800fd28:	681a      	ldr	r2, [r3, #0]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fd2e:	4b20      	ldr	r3, [pc, #128]	; (800fdb0 <icmp_input+0x1f0>)
 800fd30:	691a      	ldr	r2, [r3, #16]
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	709a      	strb	r2, [r3, #2]
 800fd42:	2200      	movs	r2, #0
 800fd44:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	22ff      	movs	r2, #255	; 0xff
 800fd4a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	729a      	strb	r2, [r3, #10]
 800fd52:	2200      	movs	r2, #0
 800fd54:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	9302      	str	r3, [sp, #8]
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	9301      	str	r3, [sp, #4]
 800fd5e:	2300      	movs	r3, #0
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	23ff      	movs	r3, #255	; 0xff
 800fd64:	2200      	movs	r2, #0
 800fd66:	69f9      	ldr	r1, [r7, #28]
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 fa75 	bl	8010258 <ip4_output_if>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800fd72:	e001      	b.n	800fd78 <icmp_input+0x1b8>
      break;
 800fd74:	bf00      	nop
 800fd76:	e000      	b.n	800fd7a <icmp_input+0x1ba>
      break;
 800fd78:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f7f9 f8aa 	bl	8008ed4 <pbuf_free>
  return;
 800fd80:	e013      	b.n	800fdaa <icmp_input+0x1ea>
    goto lenerr;
 800fd82:	bf00      	nop
 800fd84:	e002      	b.n	800fd8c <icmp_input+0x1cc>
    goto lenerr;
 800fd86:	bf00      	nop
 800fd88:	e000      	b.n	800fd8c <icmp_input+0x1cc>
        goto lenerr;
 800fd8a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f7f9 f8a1 	bl	8008ed4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fd92:	e00a      	b.n	800fdaa <icmp_input+0x1ea>
        goto icmperr;
 800fd94:	bf00      	nop
 800fd96:	e004      	b.n	800fda2 <icmp_input+0x1e2>
        goto icmperr;
 800fd98:	bf00      	nop
 800fd9a:	e002      	b.n	800fda2 <icmp_input+0x1e2>
          goto icmperr;
 800fd9c:	bf00      	nop
 800fd9e:	e000      	b.n	800fda2 <icmp_input+0x1e2>
          goto icmperr;
 800fda0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f7f9 f896 	bl	8008ed4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fda8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800fdaa:	3728      	adds	r7, #40	; 0x28
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	20008d40 	.word	0x20008d40
 800fdb4:	20008d54 	.word	0x20008d54
 800fdb8:	08014e08 	.word	0x08014e08
 800fdbc:	08014e40 	.word	0x08014e40
 800fdc0:	08014e78 	.word	0x08014e78
 800fdc4:	08014ea0 	.word	0x08014ea0

0800fdc8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fdd4:	78fb      	ldrb	r3, [r7, #3]
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	2103      	movs	r1, #3
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f000 f814 	bl	800fe08 <icmp_send_response>
}
 800fde0:	bf00      	nop
 800fde2:	3708      	adds	r7, #8
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	460b      	mov	r3, r1
 800fdf2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800fdf4:	78fb      	ldrb	r3, [r7, #3]
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	210b      	movs	r1, #11
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f000 f804 	bl	800fe08 <icmp_send_response>
}
 800fe00:	bf00      	nop
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b08c      	sub	sp, #48	; 0x30
 800fe0c:	af04      	add	r7, sp, #16
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	460b      	mov	r3, r1
 800fe12:	70fb      	strb	r3, [r7, #3]
 800fe14:	4613      	mov	r3, r2
 800fe16:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fe18:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fe1c:	2124      	movs	r1, #36	; 0x24
 800fe1e:	2022      	movs	r0, #34	; 0x22
 800fe20:	f7f8 fd74 	bl	800890c <pbuf_alloc>
 800fe24:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d04c      	beq.n	800fec6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	895b      	ldrh	r3, [r3, #10]
 800fe30:	2b23      	cmp	r3, #35	; 0x23
 800fe32:	d806      	bhi.n	800fe42 <icmp_send_response+0x3a>
 800fe34:	4b26      	ldr	r3, [pc, #152]	; (800fed0 <icmp_send_response+0xc8>)
 800fe36:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fe3a:	4926      	ldr	r1, [pc, #152]	; (800fed4 <icmp_send_response+0xcc>)
 800fe3c:	4826      	ldr	r0, [pc, #152]	; (800fed8 <icmp_send_response+0xd0>)
 800fe3e:	f001 fd27 	bl	8011890 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fe48:	69fb      	ldr	r3, [r7, #28]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	78fa      	ldrb	r2, [r7, #3]
 800fe52:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	78ba      	ldrb	r2, [r7, #2]
 800fe58:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	711a      	strb	r2, [r3, #4]
 800fe60:	2200      	movs	r2, #0
 800fe62:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	2200      	movs	r2, #0
 800fe68:	719a      	strb	r2, [r3, #6]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fe6e:	69fb      	ldr	r3, [r7, #28]
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	f103 0008 	add.w	r0, r3, #8
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	221c      	movs	r2, #28
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	f001 fc5c 	bl	801173a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fe82:	69bb      	ldr	r3, [r7, #24]
 800fe84:	68db      	ldr	r3, [r3, #12]
 800fe86:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fe88:	f107 030c 	add.w	r3, r7, #12
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f000 f825 	bl	800fedc <ip4_route>
 800fe92:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d011      	beq.n	800febe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	709a      	strb	r2, [r3, #2]
 800fea0:	2200      	movs	r2, #0
 800fea2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fea4:	f107 020c 	add.w	r2, r7, #12
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	9302      	str	r3, [sp, #8]
 800feac:	2301      	movs	r3, #1
 800feae:	9301      	str	r3, [sp, #4]
 800feb0:	2300      	movs	r3, #0
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	23ff      	movs	r3, #255	; 0xff
 800feb6:	2100      	movs	r1, #0
 800feb8:	69f8      	ldr	r0, [r7, #28]
 800feba:	f000 f9cd 	bl	8010258 <ip4_output_if>
  }
  pbuf_free(q);
 800febe:	69f8      	ldr	r0, [r7, #28]
 800fec0:	f7f9 f808 	bl	8008ed4 <pbuf_free>
 800fec4:	e000      	b.n	800fec8 <icmp_send_response+0xc0>
    return;
 800fec6:	bf00      	nop
}
 800fec8:	3720      	adds	r7, #32
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}
 800fece:	bf00      	nop
 800fed0:	08014e08 	.word	0x08014e08
 800fed4:	08014ed4 	.word	0x08014ed4
 800fed8:	08014e78 	.word	0x08014e78

0800fedc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fedc:	b480      	push	{r7}
 800fede:	b085      	sub	sp, #20
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fee4:	4b33      	ldr	r3, [pc, #204]	; (800ffb4 <ip4_route+0xd8>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	60fb      	str	r3, [r7, #12]
 800feea:	e036      	b.n	800ff5a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fef2:	f003 0301 	and.w	r3, r3, #1
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d02b      	beq.n	800ff54 <ip4_route+0x78>
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff02:	089b      	lsrs	r3, r3, #2
 800ff04:	f003 0301 	and.w	r3, r3, #1
 800ff08:	b2db      	uxtb	r3, r3
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d022      	beq.n	800ff54 <ip4_route+0x78>
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	3304      	adds	r3, #4
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d01d      	beq.n	800ff54 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	3304      	adds	r3, #4
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	405a      	eors	r2, r3
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	3308      	adds	r3, #8
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	4013      	ands	r3, r2
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d101      	bne.n	800ff34 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	e038      	b.n	800ffa6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff3a:	f003 0302 	and.w	r3, r3, #2
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d108      	bne.n	800ff54 <ip4_route+0x78>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681a      	ldr	r2, [r3, #0]
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	330c      	adds	r3, #12
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d101      	bne.n	800ff54 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	e028      	b.n	800ffa6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	60fb      	str	r3, [r7, #12]
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d1c5      	bne.n	800feec <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ff60:	4b15      	ldr	r3, [pc, #84]	; (800ffb8 <ip4_route+0xdc>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d01a      	beq.n	800ff9e <ip4_route+0xc2>
 800ff68:	4b13      	ldr	r3, [pc, #76]	; (800ffb8 <ip4_route+0xdc>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff70:	f003 0301 	and.w	r3, r3, #1
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d012      	beq.n	800ff9e <ip4_route+0xc2>
 800ff78:	4b0f      	ldr	r3, [pc, #60]	; (800ffb8 <ip4_route+0xdc>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff80:	f003 0304 	and.w	r3, r3, #4
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d00a      	beq.n	800ff9e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ff88:	4b0b      	ldr	r3, [pc, #44]	; (800ffb8 <ip4_route+0xdc>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	3304      	adds	r3, #4
 800ff8e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d004      	beq.n	800ff9e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	2b7f      	cmp	r3, #127	; 0x7f
 800ff9c:	d101      	bne.n	800ffa2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	e001      	b.n	800ffa6 <ip4_route+0xca>
  }

  return netif_default;
 800ffa2:	4b05      	ldr	r3, [pc, #20]	; (800ffb8 <ip4_route+0xdc>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3714      	adds	r7, #20
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr
 800ffb2:	bf00      	nop
 800ffb4:	2000c488 	.word	0x2000c488
 800ffb8:	2000c48c 	.word	0x2000c48c

0800ffbc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffca:	f003 0301 	and.w	r3, r3, #1
 800ffce:	b2db      	uxtb	r3, r3
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d016      	beq.n	8010002 <ip4_input_accept+0x46>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	3304      	adds	r3, #4
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d011      	beq.n	8010002 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ffde:	4b0b      	ldr	r3, [pc, #44]	; (801000c <ip4_input_accept+0x50>)
 800ffe0:	695a      	ldr	r2, [r3, #20]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	3304      	adds	r3, #4
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d008      	beq.n	800fffe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ffec:	4b07      	ldr	r3, [pc, #28]	; (801000c <ip4_input_accept+0x50>)
 800ffee:	695b      	ldr	r3, [r3, #20]
 800fff0:	6879      	ldr	r1, [r7, #4]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f000 fa08 	bl	8010408 <ip4_addr_isbroadcast_u32>
 800fff8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d001      	beq.n	8010002 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fffe:	2301      	movs	r3, #1
 8010000:	e000      	b.n	8010004 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010002:	2300      	movs	r3, #0
}
 8010004:	4618      	mov	r0, r3
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	20008d40 	.word	0x20008d40

08010010 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b086      	sub	sp, #24
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	091b      	lsrs	r3, r3, #4
 8010026:	b2db      	uxtb	r3, r3
 8010028:	2b04      	cmp	r3, #4
 801002a:	d004      	beq.n	8010036 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f7f8 ff51 	bl	8008ed4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010032:	2300      	movs	r3, #0
 8010034:	e107      	b.n	8010246 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	f003 030f 	and.w	r3, r3, #15
 801003e:	b2db      	uxtb	r3, r3
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	b2db      	uxtb	r3, r3
 8010044:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	885b      	ldrh	r3, [r3, #2]
 801004a:	b29b      	uxth	r3, r3
 801004c:	4618      	mov	r0, r3
 801004e:	f7f7 fb4f 	bl	80076f0 <lwip_htons>
 8010052:	4603      	mov	r3, r0
 8010054:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	891b      	ldrh	r3, [r3, #8]
 801005a:	89ba      	ldrh	r2, [r7, #12]
 801005c:	429a      	cmp	r2, r3
 801005e:	d204      	bcs.n	801006a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010060:	89bb      	ldrh	r3, [r7, #12]
 8010062:	4619      	mov	r1, r3
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f7f8 fdaf 	bl	8008bc8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	895b      	ldrh	r3, [r3, #10]
 801006e:	89fa      	ldrh	r2, [r7, #14]
 8010070:	429a      	cmp	r2, r3
 8010072:	d807      	bhi.n	8010084 <ip4_input+0x74>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	891b      	ldrh	r3, [r3, #8]
 8010078:	89ba      	ldrh	r2, [r7, #12]
 801007a:	429a      	cmp	r2, r3
 801007c:	d802      	bhi.n	8010084 <ip4_input+0x74>
 801007e:	89fb      	ldrh	r3, [r7, #14]
 8010080:	2b13      	cmp	r3, #19
 8010082:	d804      	bhi.n	801008e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7f8 ff25 	bl	8008ed4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801008a:	2300      	movs	r3, #0
 801008c:	e0db      	b.n	8010246 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	691b      	ldr	r3, [r3, #16]
 8010092:	4a6f      	ldr	r2, [pc, #444]	; (8010250 <ip4_input+0x240>)
 8010094:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	68db      	ldr	r3, [r3, #12]
 801009a:	4a6d      	ldr	r2, [pc, #436]	; (8010250 <ip4_input+0x240>)
 801009c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801009e:	4b6c      	ldr	r3, [pc, #432]	; (8010250 <ip4_input+0x240>)
 80100a0:	695b      	ldr	r3, [r3, #20]
 80100a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100a6:	2be0      	cmp	r3, #224	; 0xe0
 80100a8:	d112      	bne.n	80100d0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80100b0:	f003 0301 	and.w	r3, r3, #1
 80100b4:	b2db      	uxtb	r3, r3
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d007      	beq.n	80100ca <ip4_input+0xba>
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	3304      	adds	r3, #4
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d002      	beq.n	80100ca <ip4_input+0xba>
      netif = inp;
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	613b      	str	r3, [r7, #16]
 80100c8:	e02a      	b.n	8010120 <ip4_input+0x110>
    } else {
      netif = NULL;
 80100ca:	2300      	movs	r3, #0
 80100cc:	613b      	str	r3, [r7, #16]
 80100ce:	e027      	b.n	8010120 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80100d0:	6838      	ldr	r0, [r7, #0]
 80100d2:	f7ff ff73 	bl	800ffbc <ip4_input_accept>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d002      	beq.n	80100e2 <ip4_input+0xd2>
      netif = inp;
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	613b      	str	r3, [r7, #16]
 80100e0:	e01e      	b.n	8010120 <ip4_input+0x110>
    } else {
      netif = NULL;
 80100e2:	2300      	movs	r3, #0
 80100e4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80100e6:	4b5a      	ldr	r3, [pc, #360]	; (8010250 <ip4_input+0x240>)
 80100e8:	695b      	ldr	r3, [r3, #20]
 80100ea:	b2db      	uxtb	r3, r3
 80100ec:	2b7f      	cmp	r3, #127	; 0x7f
 80100ee:	d017      	beq.n	8010120 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80100f0:	4b58      	ldr	r3, [pc, #352]	; (8010254 <ip4_input+0x244>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	613b      	str	r3, [r7, #16]
 80100f6:	e00e      	b.n	8010116 <ip4_input+0x106>
          if (netif == inp) {
 80100f8:	693a      	ldr	r2, [r7, #16]
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d006      	beq.n	801010e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010100:	6938      	ldr	r0, [r7, #16]
 8010102:	f7ff ff5b 	bl	800ffbc <ip4_input_accept>
 8010106:	4603      	mov	r3, r0
 8010108:	2b00      	cmp	r3, #0
 801010a:	d108      	bne.n	801011e <ip4_input+0x10e>
 801010c:	e000      	b.n	8010110 <ip4_input+0x100>
            continue;
 801010e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	613b      	str	r3, [r7, #16]
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d1ed      	bne.n	80100f8 <ip4_input+0xe8>
 801011c:	e000      	b.n	8010120 <ip4_input+0x110>
            break;
 801011e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010120:	4b4b      	ldr	r3, [pc, #300]	; (8010250 <ip4_input+0x240>)
 8010122:	691b      	ldr	r3, [r3, #16]
 8010124:	6839      	ldr	r1, [r7, #0]
 8010126:	4618      	mov	r0, r3
 8010128:	f000 f96e 	bl	8010408 <ip4_addr_isbroadcast_u32>
 801012c:	4603      	mov	r3, r0
 801012e:	2b00      	cmp	r3, #0
 8010130:	d105      	bne.n	801013e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010132:	4b47      	ldr	r3, [pc, #284]	; (8010250 <ip4_input+0x240>)
 8010134:	691b      	ldr	r3, [r3, #16]
 8010136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801013a:	2be0      	cmp	r3, #224	; 0xe0
 801013c:	d104      	bne.n	8010148 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f7f8 fec8 	bl	8008ed4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010144:	2300      	movs	r3, #0
 8010146:	e07e      	b.n	8010246 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d104      	bne.n	8010158 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f7f8 fec0 	bl	8008ed4 <pbuf_free>
    return ERR_OK;
 8010154:	2300      	movs	r3, #0
 8010156:	e076      	b.n	8010246 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	88db      	ldrh	r3, [r3, #6]
 801015c:	b29b      	uxth	r3, r3
 801015e:	461a      	mov	r2, r3
 8010160:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010164:	4013      	ands	r3, r2
 8010166:	2b00      	cmp	r3, #0
 8010168:	d00b      	beq.n	8010182 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 fc92 	bl	8010a94 <ip4_reass>
 8010170:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d101      	bne.n	801017c <ip4_input+0x16c>
      return ERR_OK;
 8010178:	2300      	movs	r3, #0
 801017a:	e064      	b.n	8010246 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010182:	4a33      	ldr	r2, [pc, #204]	; (8010250 <ip4_input+0x240>)
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010188:	4a31      	ldr	r2, [pc, #196]	; (8010250 <ip4_input+0x240>)
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801018e:	4a30      	ldr	r2, [pc, #192]	; (8010250 <ip4_input+0x240>)
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	f003 030f 	and.w	r3, r3, #15
 801019c:	b2db      	uxtb	r3, r3
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	b29a      	uxth	r2, r3
 80101a4:	4b2a      	ldr	r3, [pc, #168]	; (8010250 <ip4_input+0x240>)
 80101a6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80101a8:	89fb      	ldrh	r3, [r7, #14]
 80101aa:	4619      	mov	r1, r3
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f7f8 fe0b 	bl	8008dc8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	7a5b      	ldrb	r3, [r3, #9]
 80101b6:	2b11      	cmp	r3, #17
 80101b8:	d006      	beq.n	80101c8 <ip4_input+0x1b8>
 80101ba:	2b11      	cmp	r3, #17
 80101bc:	dc13      	bgt.n	80101e6 <ip4_input+0x1d6>
 80101be:	2b01      	cmp	r3, #1
 80101c0:	d00c      	beq.n	80101dc <ip4_input+0x1cc>
 80101c2:	2b06      	cmp	r3, #6
 80101c4:	d005      	beq.n	80101d2 <ip4_input+0x1c2>
 80101c6:	e00e      	b.n	80101e6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80101c8:	6839      	ldr	r1, [r7, #0]
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f7fe fc68 	bl	800eaa0 <udp_input>
        break;
 80101d0:	e026      	b.n	8010220 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80101d2:	6839      	ldr	r1, [r7, #0]
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f7fa fcb1 	bl	800ab3c <tcp_input>
        break;
 80101da:	e021      	b.n	8010220 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80101dc:	6839      	ldr	r1, [r7, #0]
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f7ff fcee 	bl	800fbc0 <icmp_input>
        break;
 80101e4:	e01c      	b.n	8010220 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80101e6:	4b1a      	ldr	r3, [pc, #104]	; (8010250 <ip4_input+0x240>)
 80101e8:	695b      	ldr	r3, [r3, #20]
 80101ea:	6939      	ldr	r1, [r7, #16]
 80101ec:	4618      	mov	r0, r3
 80101ee:	f000 f90b 	bl	8010408 <ip4_addr_isbroadcast_u32>
 80101f2:	4603      	mov	r3, r0
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d10f      	bne.n	8010218 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80101f8:	4b15      	ldr	r3, [pc, #84]	; (8010250 <ip4_input+0x240>)
 80101fa:	695b      	ldr	r3, [r3, #20]
 80101fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010200:	2be0      	cmp	r3, #224	; 0xe0
 8010202:	d009      	beq.n	8010218 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010204:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010208:	4619      	mov	r1, r3
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f7f8 fe4f 	bl	8008eae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010210:	2102      	movs	r1, #2
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f7ff fdd8 	bl	800fdc8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f7f8 fe5b 	bl	8008ed4 <pbuf_free>
        break;
 801021e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010220:	4b0b      	ldr	r3, [pc, #44]	; (8010250 <ip4_input+0x240>)
 8010222:	2200      	movs	r2, #0
 8010224:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010226:	4b0a      	ldr	r3, [pc, #40]	; (8010250 <ip4_input+0x240>)
 8010228:	2200      	movs	r2, #0
 801022a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801022c:	4b08      	ldr	r3, [pc, #32]	; (8010250 <ip4_input+0x240>)
 801022e:	2200      	movs	r2, #0
 8010230:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010232:	4b07      	ldr	r3, [pc, #28]	; (8010250 <ip4_input+0x240>)
 8010234:	2200      	movs	r2, #0
 8010236:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010238:	4b05      	ldr	r3, [pc, #20]	; (8010250 <ip4_input+0x240>)
 801023a:	2200      	movs	r2, #0
 801023c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801023e:	4b04      	ldr	r3, [pc, #16]	; (8010250 <ip4_input+0x240>)
 8010240:	2200      	movs	r2, #0
 8010242:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010244:	2300      	movs	r3, #0
}
 8010246:	4618      	mov	r0, r3
 8010248:	3718      	adds	r7, #24
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	20008d40 	.word	0x20008d40
 8010254:	2000c488 	.word	0x2000c488

08010258 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b08a      	sub	sp, #40	; 0x28
 801025c:	af04      	add	r7, sp, #16
 801025e:	60f8      	str	r0, [r7, #12]
 8010260:	60b9      	str	r1, [r7, #8]
 8010262:	607a      	str	r2, [r7, #4]
 8010264:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d009      	beq.n	8010284 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d003      	beq.n	801027e <ip4_output_if+0x26>
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d102      	bne.n	8010284 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801027e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010280:	3304      	adds	r3, #4
 8010282:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010284:	78fa      	ldrb	r2, [r7, #3]
 8010286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010288:	9302      	str	r3, [sp, #8]
 801028a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801028e:	9301      	str	r3, [sp, #4]
 8010290:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010294:	9300      	str	r3, [sp, #0]
 8010296:	4613      	mov	r3, r2
 8010298:	687a      	ldr	r2, [r7, #4]
 801029a:	6979      	ldr	r1, [r7, #20]
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f000 f805 	bl	80102ac <ip4_output_if_src>
 80102a2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3718      	adds	r7, #24
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b088      	sub	sp, #32
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	607a      	str	r2, [r7, #4]
 80102b8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	7b9b      	ldrb	r3, [r3, #14]
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d006      	beq.n	80102d0 <ip4_output_if_src+0x24>
 80102c2:	4b4b      	ldr	r3, [pc, #300]	; (80103f0 <ip4_output_if_src+0x144>)
 80102c4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80102c8:	494a      	ldr	r1, [pc, #296]	; (80103f4 <ip4_output_if_src+0x148>)
 80102ca:	484b      	ldr	r0, [pc, #300]	; (80103f8 <ip4_output_if_src+0x14c>)
 80102cc:	f001 fae0 	bl	8011890 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d060      	beq.n	8010398 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80102d6:	2314      	movs	r3, #20
 80102d8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80102da:	2114      	movs	r1, #20
 80102dc:	68f8      	ldr	r0, [r7, #12]
 80102de:	f7f8 fd63 	bl	8008da8 <pbuf_add_header>
 80102e2:	4603      	mov	r3, r0
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d002      	beq.n	80102ee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80102e8:	f06f 0301 	mvn.w	r3, #1
 80102ec:	e07c      	b.n	80103e8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	895b      	ldrh	r3, [r3, #10]
 80102f8:	2b13      	cmp	r3, #19
 80102fa:	d806      	bhi.n	801030a <ip4_output_if_src+0x5e>
 80102fc:	4b3c      	ldr	r3, [pc, #240]	; (80103f0 <ip4_output_if_src+0x144>)
 80102fe:	f44f 7262 	mov.w	r2, #904	; 0x388
 8010302:	493e      	ldr	r1, [pc, #248]	; (80103fc <ip4_output_if_src+0x150>)
 8010304:	483c      	ldr	r0, [pc, #240]	; (80103f8 <ip4_output_if_src+0x14c>)
 8010306:	f001 fac3 	bl	8011890 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	78fa      	ldrb	r2, [r7, #3]
 801030e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010310:	69fb      	ldr	r3, [r7, #28]
 8010312:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010316:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010320:	8b7b      	ldrh	r3, [r7, #26]
 8010322:	089b      	lsrs	r3, r3, #2
 8010324:	b29b      	uxth	r3, r3
 8010326:	b2db      	uxtb	r3, r3
 8010328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801032c:	b2da      	uxtb	r2, r3
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010332:	69fb      	ldr	r3, [r7, #28]
 8010334:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010338:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	891b      	ldrh	r3, [r3, #8]
 801033e:	4618      	mov	r0, r3
 8010340:	f7f7 f9d6 	bl	80076f0 <lwip_htons>
 8010344:	4603      	mov	r3, r0
 8010346:	461a      	mov	r2, r3
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	2200      	movs	r2, #0
 8010350:	719a      	strb	r2, [r3, #6]
 8010352:	2200      	movs	r2, #0
 8010354:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010356:	4b2a      	ldr	r3, [pc, #168]	; (8010400 <ip4_output_if_src+0x154>)
 8010358:	881b      	ldrh	r3, [r3, #0]
 801035a:	4618      	mov	r0, r3
 801035c:	f7f7 f9c8 	bl	80076f0 <lwip_htons>
 8010360:	4603      	mov	r3, r0
 8010362:	461a      	mov	r2, r3
 8010364:	69fb      	ldr	r3, [r7, #28]
 8010366:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010368:	4b25      	ldr	r3, [pc, #148]	; (8010400 <ip4_output_if_src+0x154>)
 801036a:	881b      	ldrh	r3, [r3, #0]
 801036c:	3301      	adds	r3, #1
 801036e:	b29a      	uxth	r2, r3
 8010370:	4b23      	ldr	r3, [pc, #140]	; (8010400 <ip4_output_if_src+0x154>)
 8010372:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d104      	bne.n	8010384 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801037a:	4b22      	ldr	r3, [pc, #136]	; (8010404 <ip4_output_if_src+0x158>)
 801037c:	681a      	ldr	r2, [r3, #0]
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	60da      	str	r2, [r3, #12]
 8010382:	e003      	b.n	801038c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	681a      	ldr	r2, [r3, #0]
 8010388:	69fb      	ldr	r3, [r7, #28]
 801038a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801038c:	69fb      	ldr	r3, [r7, #28]
 801038e:	2200      	movs	r2, #0
 8010390:	729a      	strb	r2, [r3, #10]
 8010392:	2200      	movs	r2, #0
 8010394:	72da      	strb	r2, [r3, #11]
 8010396:	e00f      	b.n	80103b8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	895b      	ldrh	r3, [r3, #10]
 801039c:	2b13      	cmp	r3, #19
 801039e:	d802      	bhi.n	80103a6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80103a0:	f06f 0301 	mvn.w	r3, #1
 80103a4:	e020      	b.n	80103e8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80103ac:	69fb      	ldr	r3, [r7, #28]
 80103ae:	691b      	ldr	r3, [r3, #16]
 80103b0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80103b2:	f107 0314 	add.w	r3, r7, #20
 80103b6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80103b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d00c      	beq.n	80103da <ip4_output_if_src+0x12e>
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	891a      	ldrh	r2, [r3, #8]
 80103c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d906      	bls.n	80103da <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80103cc:	687a      	ldr	r2, [r7, #4]
 80103ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f000 fd53 	bl	8010e7c <ip4_frag>
 80103d6:	4603      	mov	r3, r0
 80103d8:	e006      	b.n	80103e8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80103da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103dc:	695b      	ldr	r3, [r3, #20]
 80103de:	687a      	ldr	r2, [r7, #4]
 80103e0:	68f9      	ldr	r1, [r7, #12]
 80103e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103e4:	4798      	blx	r3
 80103e6:	4603      	mov	r3, r0
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3720      	adds	r7, #32
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	08014f00 	.word	0x08014f00
 80103f4:	08014f34 	.word	0x08014f34
 80103f8:	08014f40 	.word	0x08014f40
 80103fc:	08014f68 	.word	0x08014f68
 8010400:	2000c5e6 	.word	0x2000c5e6
 8010404:	08015388 	.word	0x08015388

08010408 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010408:	b480      	push	{r7}
 801040a:	b085      	sub	sp, #20
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f1b3 3fff 	cmp.w	r3, #4294967295
 801041c:	d002      	beq.n	8010424 <ip4_addr_isbroadcast_u32+0x1c>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d101      	bne.n	8010428 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010424:	2301      	movs	r3, #1
 8010426:	e02a      	b.n	801047e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801042e:	f003 0302 	and.w	r3, r3, #2
 8010432:	2b00      	cmp	r3, #0
 8010434:	d101      	bne.n	801043a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010436:	2300      	movs	r3, #0
 8010438:	e021      	b.n	801047e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	3304      	adds	r3, #4
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	687a      	ldr	r2, [r7, #4]
 8010442:	429a      	cmp	r2, r3
 8010444:	d101      	bne.n	801044a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010446:	2300      	movs	r3, #0
 8010448:	e019      	b.n	801047e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801044a:	68fa      	ldr	r2, [r7, #12]
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	3304      	adds	r3, #4
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	405a      	eors	r2, r3
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	3308      	adds	r3, #8
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	4013      	ands	r3, r2
 801045c:	2b00      	cmp	r3, #0
 801045e:	d10d      	bne.n	801047c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	3308      	adds	r3, #8
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	43da      	mvns	r2, r3
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	3308      	adds	r3, #8
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010474:	429a      	cmp	r2, r3
 8010476:	d101      	bne.n	801047c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010478:	2301      	movs	r3, #1
 801047a:	e000      	b.n	801047e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801047c:	2300      	movs	r3, #0
  }
}
 801047e:	4618      	mov	r0, r3
 8010480:	3714      	adds	r7, #20
 8010482:	46bd      	mov	sp, r7
 8010484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010488:	4770      	bx	lr
	...

0801048c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010492:	2300      	movs	r3, #0
 8010494:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010496:	4b12      	ldr	r3, [pc, #72]	; (80104e0 <ip_reass_tmr+0x54>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801049c:	e018      	b.n	80104d0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	7fdb      	ldrb	r3, [r3, #31]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d00b      	beq.n	80104be <ip_reass_tmr+0x32>
      r->timer--;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	7fdb      	ldrb	r3, [r3, #31]
 80104aa:	3b01      	subs	r3, #1
 80104ac:	b2da      	uxtb	r2, r3
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	60fb      	str	r3, [r7, #12]
 80104bc:	e008      	b.n	80104d0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80104c8:	68b9      	ldr	r1, [r7, #8]
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f000 f80a 	bl	80104e4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d1e3      	bne.n	801049e <ip_reass_tmr+0x12>
    }
  }
}
 80104d6:	bf00      	nop
 80104d8:	bf00      	nop
 80104da:	3710      	adds	r7, #16
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}
 80104e0:	2000c5e8 	.word	0x2000c5e8

080104e4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b088      	sub	sp, #32
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80104ee:	2300      	movs	r3, #0
 80104f0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80104f2:	683a      	ldr	r2, [r7, #0]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d105      	bne.n	8010506 <ip_reass_free_complete_datagram+0x22>
 80104fa:	4b45      	ldr	r3, [pc, #276]	; (8010610 <ip_reass_free_complete_datagram+0x12c>)
 80104fc:	22ab      	movs	r2, #171	; 0xab
 80104fe:	4945      	ldr	r1, [pc, #276]	; (8010614 <ip_reass_free_complete_datagram+0x130>)
 8010500:	4845      	ldr	r0, [pc, #276]	; (8010618 <ip_reass_free_complete_datagram+0x134>)
 8010502:	f001 f9c5 	bl	8011890 <iprintf>
  if (prev != NULL) {
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00a      	beq.n	8010522 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	687a      	ldr	r2, [r7, #4]
 8010512:	429a      	cmp	r2, r3
 8010514:	d005      	beq.n	8010522 <ip_reass_free_complete_datagram+0x3e>
 8010516:	4b3e      	ldr	r3, [pc, #248]	; (8010610 <ip_reass_free_complete_datagram+0x12c>)
 8010518:	22ad      	movs	r2, #173	; 0xad
 801051a:	4940      	ldr	r1, [pc, #256]	; (801061c <ip_reass_free_complete_datagram+0x138>)
 801051c:	483e      	ldr	r0, [pc, #248]	; (8010618 <ip_reass_free_complete_datagram+0x134>)
 801051e:	f001 f9b7 	bl	8011890 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	889b      	ldrh	r3, [r3, #4]
 801052e:	b29b      	uxth	r3, r3
 8010530:	2b00      	cmp	r3, #0
 8010532:	d12a      	bne.n	801058a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010542:	69bb      	ldr	r3, [r7, #24]
 8010544:	6858      	ldr	r0, [r3, #4]
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	3308      	adds	r3, #8
 801054a:	2214      	movs	r2, #20
 801054c:	4619      	mov	r1, r3
 801054e:	f001 f8f4 	bl	801173a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010552:	2101      	movs	r1, #1
 8010554:	69b8      	ldr	r0, [r7, #24]
 8010556:	f7ff fc47 	bl	800fde8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801055a:	69b8      	ldr	r0, [r7, #24]
 801055c:	f7f8 fd48 	bl	8008ff0 <pbuf_clen>
 8010560:	4603      	mov	r3, r0
 8010562:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010564:	8bfa      	ldrh	r2, [r7, #30]
 8010566:	8a7b      	ldrh	r3, [r7, #18]
 8010568:	4413      	add	r3, r2
 801056a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801056e:	db05      	blt.n	801057c <ip_reass_free_complete_datagram+0x98>
 8010570:	4b27      	ldr	r3, [pc, #156]	; (8010610 <ip_reass_free_complete_datagram+0x12c>)
 8010572:	22bc      	movs	r2, #188	; 0xbc
 8010574:	492a      	ldr	r1, [pc, #168]	; (8010620 <ip_reass_free_complete_datagram+0x13c>)
 8010576:	4828      	ldr	r0, [pc, #160]	; (8010618 <ip_reass_free_complete_datagram+0x134>)
 8010578:	f001 f98a 	bl	8011890 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801057c:	8bfa      	ldrh	r2, [r7, #30]
 801057e:	8a7b      	ldrh	r3, [r7, #18]
 8010580:	4413      	add	r3, r2
 8010582:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010584:	69b8      	ldr	r0, [r7, #24]
 8010586:	f7f8 fca5 	bl	8008ed4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010590:	e01f      	b.n	80105d2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	685b      	ldr	r3, [r3, #4]
 8010596:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010598:	69bb      	ldr	r3, [r7, #24]
 801059a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80105a2:	68f8      	ldr	r0, [r7, #12]
 80105a4:	f7f8 fd24 	bl	8008ff0 <pbuf_clen>
 80105a8:	4603      	mov	r3, r0
 80105aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80105ac:	8bfa      	ldrh	r2, [r7, #30]
 80105ae:	8a7b      	ldrh	r3, [r7, #18]
 80105b0:	4413      	add	r3, r2
 80105b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105b6:	db05      	blt.n	80105c4 <ip_reass_free_complete_datagram+0xe0>
 80105b8:	4b15      	ldr	r3, [pc, #84]	; (8010610 <ip_reass_free_complete_datagram+0x12c>)
 80105ba:	22cc      	movs	r2, #204	; 0xcc
 80105bc:	4918      	ldr	r1, [pc, #96]	; (8010620 <ip_reass_free_complete_datagram+0x13c>)
 80105be:	4816      	ldr	r0, [pc, #88]	; (8010618 <ip_reass_free_complete_datagram+0x134>)
 80105c0:	f001 f966 	bl	8011890 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80105c4:	8bfa      	ldrh	r2, [r7, #30]
 80105c6:	8a7b      	ldrh	r3, [r7, #18]
 80105c8:	4413      	add	r3, r2
 80105ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80105cc:	68f8      	ldr	r0, [r7, #12]
 80105ce:	f7f8 fc81 	bl	8008ed4 <pbuf_free>
  while (p != NULL) {
 80105d2:	69bb      	ldr	r3, [r7, #24]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d1dc      	bne.n	8010592 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80105d8:	6839      	ldr	r1, [r7, #0]
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f000 f8c2 	bl	8010764 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80105e0:	4b10      	ldr	r3, [pc, #64]	; (8010624 <ip_reass_free_complete_datagram+0x140>)
 80105e2:	881b      	ldrh	r3, [r3, #0]
 80105e4:	8bfa      	ldrh	r2, [r7, #30]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d905      	bls.n	80105f6 <ip_reass_free_complete_datagram+0x112>
 80105ea:	4b09      	ldr	r3, [pc, #36]	; (8010610 <ip_reass_free_complete_datagram+0x12c>)
 80105ec:	22d2      	movs	r2, #210	; 0xd2
 80105ee:	490e      	ldr	r1, [pc, #56]	; (8010628 <ip_reass_free_complete_datagram+0x144>)
 80105f0:	4809      	ldr	r0, [pc, #36]	; (8010618 <ip_reass_free_complete_datagram+0x134>)
 80105f2:	f001 f94d 	bl	8011890 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80105f6:	4b0b      	ldr	r3, [pc, #44]	; (8010624 <ip_reass_free_complete_datagram+0x140>)
 80105f8:	881a      	ldrh	r2, [r3, #0]
 80105fa:	8bfb      	ldrh	r3, [r7, #30]
 80105fc:	1ad3      	subs	r3, r2, r3
 80105fe:	b29a      	uxth	r2, r3
 8010600:	4b08      	ldr	r3, [pc, #32]	; (8010624 <ip_reass_free_complete_datagram+0x140>)
 8010602:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010604:	8bfb      	ldrh	r3, [r7, #30]
}
 8010606:	4618      	mov	r0, r3
 8010608:	3720      	adds	r7, #32
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	08014f98 	.word	0x08014f98
 8010614:	08014fd4 	.word	0x08014fd4
 8010618:	08014fe0 	.word	0x08014fe0
 801061c:	08015008 	.word	0x08015008
 8010620:	0801501c 	.word	0x0801501c
 8010624:	2000c5ec 	.word	0x2000c5ec
 8010628:	0801503c 	.word	0x0801503c

0801062c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b08a      	sub	sp, #40	; 0x28
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
 8010634:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010636:	2300      	movs	r3, #0
 8010638:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801063a:	2300      	movs	r3, #0
 801063c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801063e:	2300      	movs	r3, #0
 8010640:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010642:	2300      	movs	r3, #0
 8010644:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010646:	2300      	movs	r3, #0
 8010648:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801064a:	4b28      	ldr	r3, [pc, #160]	; (80106ec <ip_reass_remove_oldest_datagram+0xc0>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010650:	e030      	b.n	80106b4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010654:	695a      	ldr	r2, [r3, #20]
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	68db      	ldr	r3, [r3, #12]
 801065a:	429a      	cmp	r2, r3
 801065c:	d10c      	bne.n	8010678 <ip_reass_remove_oldest_datagram+0x4c>
 801065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010660:	699a      	ldr	r2, [r3, #24]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	691b      	ldr	r3, [r3, #16]
 8010666:	429a      	cmp	r2, r3
 8010668:	d106      	bne.n	8010678 <ip_reass_remove_oldest_datagram+0x4c>
 801066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066c:	899a      	ldrh	r2, [r3, #12]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	889b      	ldrh	r3, [r3, #4]
 8010672:	b29b      	uxth	r3, r3
 8010674:	429a      	cmp	r2, r3
 8010676:	d014      	beq.n	80106a2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010678:	693b      	ldr	r3, [r7, #16]
 801067a:	3301      	adds	r3, #1
 801067c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801067e:	6a3b      	ldr	r3, [r7, #32]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d104      	bne.n	801068e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010686:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010688:	69fb      	ldr	r3, [r7, #28]
 801068a:	61bb      	str	r3, [r7, #24]
 801068c:	e009      	b.n	80106a2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010690:	7fda      	ldrb	r2, [r3, #31]
 8010692:	6a3b      	ldr	r3, [r7, #32]
 8010694:	7fdb      	ldrb	r3, [r3, #31]
 8010696:	429a      	cmp	r2, r3
 8010698:	d803      	bhi.n	80106a2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801069e:	69fb      	ldr	r3, [r7, #28]
 80106a0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80106a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d001      	beq.n	80106ae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80106aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80106ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80106b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d1cb      	bne.n	8010652 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80106ba:	6a3b      	ldr	r3, [r7, #32]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d008      	beq.n	80106d2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80106c0:	69b9      	ldr	r1, [r7, #24]
 80106c2:	6a38      	ldr	r0, [r7, #32]
 80106c4:	f7ff ff0e 	bl	80104e4 <ip_reass_free_complete_datagram>
 80106c8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80106ca:	697a      	ldr	r2, [r7, #20]
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	4413      	add	r3, r2
 80106d0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80106d2:	697a      	ldr	r2, [r7, #20]
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	da02      	bge.n	80106e0 <ip_reass_remove_oldest_datagram+0xb4>
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	2b01      	cmp	r3, #1
 80106de:	dcac      	bgt.n	801063a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80106e0:	697b      	ldr	r3, [r7, #20]
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3728      	adds	r7, #40	; 0x28
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	2000c5e8 	.word	0x2000c5e8

080106f0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80106fa:	2004      	movs	r0, #4
 80106fc:	f7f7 fcd0 	bl	80080a0 <memp_malloc>
 8010700:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d110      	bne.n	801072a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010708:	6839      	ldr	r1, [r7, #0]
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f7ff ff8e 	bl	801062c <ip_reass_remove_oldest_datagram>
 8010710:	4602      	mov	r2, r0
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	4293      	cmp	r3, r2
 8010716:	dc03      	bgt.n	8010720 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010718:	2004      	movs	r0, #4
 801071a:	f7f7 fcc1 	bl	80080a0 <memp_malloc>
 801071e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d101      	bne.n	801072a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010726:	2300      	movs	r3, #0
 8010728:	e016      	b.n	8010758 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801072a:	2220      	movs	r2, #32
 801072c:	2100      	movs	r1, #0
 801072e:	68f8      	ldr	r0, [r7, #12]
 8010730:	f001 f811 	bl	8011756 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	220f      	movs	r2, #15
 8010738:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801073a:	4b09      	ldr	r3, [pc, #36]	; (8010760 <ip_reass_enqueue_new_datagram+0x70>)
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010742:	4a07      	ldr	r2, [pc, #28]	; (8010760 <ip_reass_enqueue_new_datagram+0x70>)
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	3308      	adds	r3, #8
 801074c:	2214      	movs	r2, #20
 801074e:	6879      	ldr	r1, [r7, #4]
 8010750:	4618      	mov	r0, r3
 8010752:	f000 fff2 	bl	801173a <memcpy>
  return ipr;
 8010756:	68fb      	ldr	r3, [r7, #12]
}
 8010758:	4618      	mov	r0, r3
 801075a:	3710      	adds	r7, #16
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}
 8010760:	2000c5e8 	.word	0x2000c5e8

08010764 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801076e:	4b10      	ldr	r3, [pc, #64]	; (80107b0 <ip_reass_dequeue_datagram+0x4c>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	429a      	cmp	r2, r3
 8010776:	d104      	bne.n	8010782 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	4a0c      	ldr	r2, [pc, #48]	; (80107b0 <ip_reass_dequeue_datagram+0x4c>)
 801077e:	6013      	str	r3, [r2, #0]
 8010780:	e00d      	b.n	801079e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d106      	bne.n	8010796 <ip_reass_dequeue_datagram+0x32>
 8010788:	4b0a      	ldr	r3, [pc, #40]	; (80107b4 <ip_reass_dequeue_datagram+0x50>)
 801078a:	f240 1245 	movw	r2, #325	; 0x145
 801078e:	490a      	ldr	r1, [pc, #40]	; (80107b8 <ip_reass_dequeue_datagram+0x54>)
 8010790:	480a      	ldr	r0, [pc, #40]	; (80107bc <ip_reass_dequeue_datagram+0x58>)
 8010792:	f001 f87d 	bl	8011890 <iprintf>
    prev->next = ipr->next;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681a      	ldr	r2, [r3, #0]
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801079e:	6879      	ldr	r1, [r7, #4]
 80107a0:	2004      	movs	r0, #4
 80107a2:	f7f7 fcf3 	bl	800818c <memp_free>
}
 80107a6:	bf00      	nop
 80107a8:	3708      	adds	r7, #8
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}
 80107ae:	bf00      	nop
 80107b0:	2000c5e8 	.word	0x2000c5e8
 80107b4:	08014f98 	.word	0x08014f98
 80107b8:	08015060 	.word	0x08015060
 80107bc:	08014fe0 	.word	0x08014fe0

080107c0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b08c      	sub	sp, #48	; 0x30
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	60b9      	str	r1, [r7, #8]
 80107ca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80107cc:	2300      	movs	r3, #0
 80107ce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80107d0:	2301      	movs	r3, #1
 80107d2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	685b      	ldr	r3, [r3, #4]
 80107d8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	885b      	ldrh	r3, [r3, #2]
 80107de:	b29b      	uxth	r3, r3
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7f6 ff85 	bl	80076f0 <lwip_htons>
 80107e6:	4603      	mov	r3, r0
 80107e8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80107ea:	69fb      	ldr	r3, [r7, #28]
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	f003 030f 	and.w	r3, r3, #15
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	009b      	lsls	r3, r3, #2
 80107f6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80107f8:	7e7b      	ldrb	r3, [r7, #25]
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	8b7a      	ldrh	r2, [r7, #26]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d202      	bcs.n	8010808 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010802:	f04f 33ff 	mov.w	r3, #4294967295
 8010806:	e135      	b.n	8010a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010808:	7e7b      	ldrb	r3, [r7, #25]
 801080a:	b29b      	uxth	r3, r3
 801080c:	8b7a      	ldrh	r2, [r7, #26]
 801080e:	1ad3      	subs	r3, r2, r3
 8010810:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010812:	69fb      	ldr	r3, [r7, #28]
 8010814:	88db      	ldrh	r3, [r3, #6]
 8010816:	b29b      	uxth	r3, r3
 8010818:	4618      	mov	r0, r3
 801081a:	f7f6 ff69 	bl	80076f0 <lwip_htons>
 801081e:	4603      	mov	r3, r0
 8010820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010824:	b29b      	uxth	r3, r3
 8010826:	00db      	lsls	r3, r3, #3
 8010828:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	685b      	ldr	r3, [r3, #4]
 801082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010832:	2200      	movs	r2, #0
 8010834:	701a      	strb	r2, [r3, #0]
 8010836:	2200      	movs	r2, #0
 8010838:	705a      	strb	r2, [r3, #1]
 801083a:	2200      	movs	r2, #0
 801083c:	709a      	strb	r2, [r3, #2]
 801083e:	2200      	movs	r2, #0
 8010840:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010844:	8afa      	ldrh	r2, [r7, #22]
 8010846:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010848:	8afa      	ldrh	r2, [r7, #22]
 801084a:	8b7b      	ldrh	r3, [r7, #26]
 801084c:	4413      	add	r3, r2
 801084e:	b29a      	uxth	r2, r3
 8010850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010852:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010856:	88db      	ldrh	r3, [r3, #6]
 8010858:	b29b      	uxth	r3, r3
 801085a:	8afa      	ldrh	r2, [r7, #22]
 801085c:	429a      	cmp	r2, r3
 801085e:	d902      	bls.n	8010866 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010860:	f04f 33ff 	mov.w	r3, #4294967295
 8010864:	e106      	b.n	8010a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	685b      	ldr	r3, [r3, #4]
 801086a:	627b      	str	r3, [r7, #36]	; 0x24
 801086c:	e068      	b.n	8010940 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010876:	889b      	ldrh	r3, [r3, #4]
 8010878:	b29a      	uxth	r2, r3
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	889b      	ldrh	r3, [r3, #4]
 801087e:	b29b      	uxth	r3, r3
 8010880:	429a      	cmp	r2, r3
 8010882:	d235      	bcs.n	80108f0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010888:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801088a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088c:	2b00      	cmp	r3, #0
 801088e:	d020      	beq.n	80108d2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010892:	889b      	ldrh	r3, [r3, #4]
 8010894:	b29a      	uxth	r2, r3
 8010896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010898:	88db      	ldrh	r3, [r3, #6]
 801089a:	b29b      	uxth	r3, r3
 801089c:	429a      	cmp	r2, r3
 801089e:	d307      	bcc.n	80108b0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80108a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a2:	88db      	ldrh	r3, [r3, #6]
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	889b      	ldrh	r3, [r3, #4]
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d902      	bls.n	80108b6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80108b0:	f04f 33ff 	mov.w	r3, #4294967295
 80108b4:	e0de      	b.n	8010a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80108b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b8:	68ba      	ldr	r2, [r7, #8]
 80108ba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80108bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108be:	88db      	ldrh	r3, [r3, #6]
 80108c0:	b29a      	uxth	r2, r3
 80108c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c4:	889b      	ldrh	r3, [r3, #4]
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d03d      	beq.n	8010948 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80108cc:	2300      	movs	r3, #0
 80108ce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80108d0:	e03a      	b.n	8010948 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80108d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d4:	88db      	ldrh	r3, [r3, #6]
 80108d6:	b29a      	uxth	r2, r3
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	889b      	ldrh	r3, [r3, #4]
 80108dc:	b29b      	uxth	r3, r3
 80108de:	429a      	cmp	r2, r3
 80108e0:	d902      	bls.n	80108e8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80108e2:	f04f 33ff 	mov.w	r3, #4294967295
 80108e6:	e0c5      	b.n	8010a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	68ba      	ldr	r2, [r7, #8]
 80108ec:	605a      	str	r2, [r3, #4]
      break;
 80108ee:	e02b      	b.n	8010948 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80108f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f2:	889b      	ldrh	r3, [r3, #4]
 80108f4:	b29a      	uxth	r2, r3
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	889b      	ldrh	r3, [r3, #4]
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d102      	bne.n	8010906 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010900:	f04f 33ff 	mov.w	r3, #4294967295
 8010904:	e0b6      	b.n	8010a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010908:	889b      	ldrh	r3, [r3, #4]
 801090a:	b29a      	uxth	r2, r3
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	88db      	ldrh	r3, [r3, #6]
 8010910:	b29b      	uxth	r3, r3
 8010912:	429a      	cmp	r2, r3
 8010914:	d202      	bcs.n	801091c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010916:	f04f 33ff 	mov.w	r3, #4294967295
 801091a:	e0ab      	b.n	8010a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801091c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801091e:	2b00      	cmp	r3, #0
 8010920:	d009      	beq.n	8010936 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010924:	88db      	ldrh	r3, [r3, #6]
 8010926:	b29a      	uxth	r2, r3
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	889b      	ldrh	r3, [r3, #4]
 801092c:	b29b      	uxth	r3, r3
 801092e:	429a      	cmp	r2, r3
 8010930:	d001      	beq.n	8010936 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010932:	2300      	movs	r3, #0
 8010934:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010942:	2b00      	cmp	r3, #0
 8010944:	d193      	bne.n	801086e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010946:	e000      	b.n	801094a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010948:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094c:	2b00      	cmp	r3, #0
 801094e:	d12d      	bne.n	80109ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010952:	2b00      	cmp	r3, #0
 8010954:	d01c      	beq.n	8010990 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010958:	88db      	ldrh	r3, [r3, #6]
 801095a:	b29a      	uxth	r2, r3
 801095c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801095e:	889b      	ldrh	r3, [r3, #4]
 8010960:	b29b      	uxth	r3, r3
 8010962:	429a      	cmp	r2, r3
 8010964:	d906      	bls.n	8010974 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010966:	4b45      	ldr	r3, [pc, #276]	; (8010a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010968:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801096c:	4944      	ldr	r1, [pc, #272]	; (8010a80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801096e:	4845      	ldr	r0, [pc, #276]	; (8010a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010970:	f000 ff8e 	bl	8011890 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010976:	68ba      	ldr	r2, [r7, #8]
 8010978:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801097a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801097c:	88db      	ldrh	r3, [r3, #6]
 801097e:	b29a      	uxth	r2, r3
 8010980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010982:	889b      	ldrh	r3, [r3, #4]
 8010984:	b29b      	uxth	r3, r3
 8010986:	429a      	cmp	r2, r3
 8010988:	d010      	beq.n	80109ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801098a:	2300      	movs	r3, #0
 801098c:	623b      	str	r3, [r7, #32]
 801098e:	e00d      	b.n	80109ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d006      	beq.n	80109a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010998:	4b38      	ldr	r3, [pc, #224]	; (8010a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801099a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801099e:	493a      	ldr	r1, [pc, #232]	; (8010a88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80109a0:	4838      	ldr	r0, [pc, #224]	; (8010a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80109a2:	f000 ff75 	bl	8011890 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	68ba      	ldr	r2, [r7, #8]
 80109aa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d105      	bne.n	80109be <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	7f9b      	ldrb	r3, [r3, #30]
 80109b6:	f003 0301 	and.w	r3, r3, #1
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d059      	beq.n	8010a72 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80109be:	6a3b      	ldr	r3, [r7, #32]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d04f      	beq.n	8010a64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	685b      	ldr	r3, [r3, #4]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d006      	beq.n	80109da <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	685b      	ldr	r3, [r3, #4]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	889b      	ldrh	r3, [r3, #4]
 80109d4:	b29b      	uxth	r3, r3
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d002      	beq.n	80109e0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80109da:	2300      	movs	r3, #0
 80109dc:	623b      	str	r3, [r7, #32]
 80109de:	e041      	b.n	8010a64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80109e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80109e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80109ea:	e012      	b.n	8010a12 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80109ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80109f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f4:	88db      	ldrh	r3, [r3, #6]
 80109f6:	b29a      	uxth	r2, r3
 80109f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109fa:	889b      	ldrh	r3, [r3, #4]
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d002      	beq.n	8010a08 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010a02:	2300      	movs	r3, #0
 8010a04:	623b      	str	r3, [r7, #32]
            break;
 8010a06:	e007      	b.n	8010a18 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d1e9      	bne.n	80109ec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010a18:	6a3b      	ldr	r3, [r7, #32]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d022      	beq.n	8010a64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d106      	bne.n	8010a34 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010a26:	4b15      	ldr	r3, [pc, #84]	; (8010a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010a28:	f240 12df 	movw	r2, #479	; 0x1df
 8010a2c:	4917      	ldr	r1, [pc, #92]	; (8010a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010a2e:	4815      	ldr	r0, [pc, #84]	; (8010a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010a30:	f000 ff2e 	bl	8011890 <iprintf>
          LWIP_ASSERT("sanity check",
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	685b      	ldr	r3, [r3, #4]
 8010a38:	685b      	ldr	r3, [r3, #4]
 8010a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d106      	bne.n	8010a4e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010a40:	4b0e      	ldr	r3, [pc, #56]	; (8010a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010a42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010a46:	4911      	ldr	r1, [pc, #68]	; (8010a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010a48:	480e      	ldr	r0, [pc, #56]	; (8010a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010a4a:	f000 ff21 	bl	8011890 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d006      	beq.n	8010a64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010a56:	4b09      	ldr	r3, [pc, #36]	; (8010a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010a58:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010a5c:	490c      	ldr	r1, [pc, #48]	; (8010a90 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010a5e:	4809      	ldr	r0, [pc, #36]	; (8010a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010a60:	f000 ff16 	bl	8011890 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010a64:	6a3b      	ldr	r3, [r7, #32]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	bf14      	ite	ne
 8010a6a:	2301      	movne	r3, #1
 8010a6c:	2300      	moveq	r3, #0
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	e000      	b.n	8010a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010a72:	2300      	movs	r3, #0
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3730      	adds	r7, #48	; 0x30
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}
 8010a7c:	08014f98 	.word	0x08014f98
 8010a80:	0801507c 	.word	0x0801507c
 8010a84:	08014fe0 	.word	0x08014fe0
 8010a88:	0801509c 	.word	0x0801509c
 8010a8c:	080150d4 	.word	0x080150d4
 8010a90:	080150e4 	.word	0x080150e4

08010a94 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b08e      	sub	sp, #56	; 0x38
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa4:	781b      	ldrb	r3, [r3, #0]
 8010aa6:	f003 030f 	and.w	r3, r3, #15
 8010aaa:	b2db      	uxtb	r3, r3
 8010aac:	009b      	lsls	r3, r3, #2
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	2b14      	cmp	r3, #20
 8010ab2:	f040 8171 	bne.w	8010d98 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab8:	88db      	ldrh	r3, [r3, #6]
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7f6 fe17 	bl	80076f0 <lwip_htons>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ac8:	b29b      	uxth	r3, r3
 8010aca:	00db      	lsls	r3, r3, #3
 8010acc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad0:	885b      	ldrh	r3, [r3, #2]
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7f6 fe0b 	bl	80076f0 <lwip_htons>
 8010ada:	4603      	mov	r3, r0
 8010adc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	f003 030f 	and.w	r3, r3, #15
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010aee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010af2:	b29b      	uxth	r3, r3
 8010af4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010af6:	429a      	cmp	r2, r3
 8010af8:	f0c0 8150 	bcc.w	8010d9c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010afc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010b00:	b29b      	uxth	r3, r3
 8010b02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010b04:	1ad3      	subs	r3, r2, r3
 8010b06:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f7f8 fa71 	bl	8008ff0 <pbuf_clen>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010b12:	4b8c      	ldr	r3, [pc, #560]	; (8010d44 <ip4_reass+0x2b0>)
 8010b14:	881b      	ldrh	r3, [r3, #0]
 8010b16:	461a      	mov	r2, r3
 8010b18:	8c3b      	ldrh	r3, [r7, #32]
 8010b1a:	4413      	add	r3, r2
 8010b1c:	2b0a      	cmp	r3, #10
 8010b1e:	dd10      	ble.n	8010b42 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010b20:	8c3b      	ldrh	r3, [r7, #32]
 8010b22:	4619      	mov	r1, r3
 8010b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b26:	f7ff fd81 	bl	801062c <ip_reass_remove_oldest_datagram>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	f000 8137 	beq.w	8010da0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010b32:	4b84      	ldr	r3, [pc, #528]	; (8010d44 <ip4_reass+0x2b0>)
 8010b34:	881b      	ldrh	r3, [r3, #0]
 8010b36:	461a      	mov	r2, r3
 8010b38:	8c3b      	ldrh	r3, [r7, #32]
 8010b3a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010b3c:	2b0a      	cmp	r3, #10
 8010b3e:	f300 812f 	bgt.w	8010da0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010b42:	4b81      	ldr	r3, [pc, #516]	; (8010d48 <ip4_reass+0x2b4>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	633b      	str	r3, [r7, #48]	; 0x30
 8010b48:	e015      	b.n	8010b76 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b4c:	695a      	ldr	r2, [r3, #20]
 8010b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b50:	68db      	ldr	r3, [r3, #12]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d10c      	bne.n	8010b70 <ip4_reass+0xdc>
 8010b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b58:	699a      	ldr	r2, [r3, #24]
 8010b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5c:	691b      	ldr	r3, [r3, #16]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d106      	bne.n	8010b70 <ip4_reass+0xdc>
 8010b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b64:	899a      	ldrh	r2, [r3, #12]
 8010b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b68:	889b      	ldrh	r3, [r3, #4]
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d006      	beq.n	8010b7e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	633b      	str	r3, [r7, #48]	; 0x30
 8010b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d1e6      	bne.n	8010b4a <ip4_reass+0xb6>
 8010b7c:	e000      	b.n	8010b80 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010b7e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d109      	bne.n	8010b9a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010b86:	8c3b      	ldrh	r3, [r7, #32]
 8010b88:	4619      	mov	r1, r3
 8010b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b8c:	f7ff fdb0 	bl	80106f0 <ip_reass_enqueue_new_datagram>
 8010b90:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d11c      	bne.n	8010bd2 <ip4_reass+0x13e>
      goto nullreturn;
 8010b98:	e105      	b.n	8010da6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b9c:	88db      	ldrh	r3, [r3, #6]
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7f6 fda5 	bl	80076f0 <lwip_htons>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d110      	bne.n	8010bd2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb2:	89db      	ldrh	r3, [r3, #14]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7f6 fd9b 	bl	80076f0 <lwip_htons>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d006      	beq.n	8010bd2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc6:	3308      	adds	r3, #8
 8010bc8:	2214      	movs	r2, #20
 8010bca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f000 fdb4 	bl	801173a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd4:	88db      	ldrh	r3, [r3, #6]
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	f003 0320 	and.w	r3, r3, #32
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	bf0c      	ite	eq
 8010be0:	2301      	moveq	r3, #1
 8010be2:	2300      	movne	r3, #0
 8010be4:	b2db      	uxtb	r3, r3
 8010be6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010be8:	69fb      	ldr	r3, [r7, #28]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00e      	beq.n	8010c0c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010bee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010bf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bf2:	4413      	add	r3, r2
 8010bf4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010bf6:	8b7a      	ldrh	r2, [r7, #26]
 8010bf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	f0c0 80a0 	bcc.w	8010d40 <ip4_reass+0x2ac>
 8010c00:	8b7b      	ldrh	r3, [r7, #26]
 8010c02:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010c06:	4293      	cmp	r3, r2
 8010c08:	f200 809a 	bhi.w	8010d40 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010c0c:	69fa      	ldr	r2, [r7, #28]
 8010c0e:	6879      	ldr	r1, [r7, #4]
 8010c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c12:	f7ff fdd5 	bl	80107c0 <ip_reass_chain_frag_into_datagram_and_validate>
 8010c16:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c1e:	f000 809b 	beq.w	8010d58 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010c22:	4b48      	ldr	r3, [pc, #288]	; (8010d44 <ip4_reass+0x2b0>)
 8010c24:	881a      	ldrh	r2, [r3, #0]
 8010c26:	8c3b      	ldrh	r3, [r7, #32]
 8010c28:	4413      	add	r3, r2
 8010c2a:	b29a      	uxth	r2, r3
 8010c2c:	4b45      	ldr	r3, [pc, #276]	; (8010d44 <ip4_reass+0x2b0>)
 8010c2e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d00d      	beq.n	8010c52 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010c36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c3a:	4413      	add	r3, r2
 8010c3c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c40:	8a7a      	ldrh	r2, [r7, #18]
 8010c42:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c46:	7f9b      	ldrb	r3, [r3, #30]
 8010c48:	f043 0301 	orr.w	r3, r3, #1
 8010c4c:	b2da      	uxtb	r2, r3
 8010c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c50:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	2b01      	cmp	r3, #1
 8010c56:	d171      	bne.n	8010d3c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5a:	8b9b      	ldrh	r3, [r3, #28]
 8010c5c:	3314      	adds	r3, #20
 8010c5e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6c:	685b      	ldr	r3, [r3, #4]
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c74:	3308      	adds	r3, #8
 8010c76:	2214      	movs	r2, #20
 8010c78:	4619      	mov	r1, r3
 8010c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c7c:	f000 fd5d 	bl	801173a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010c80:	8a3b      	ldrh	r3, [r7, #16]
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7f6 fd34 	bl	80076f0 <lwip_htons>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c92:	2200      	movs	r2, #0
 8010c94:	719a      	strb	r2, [r3, #6]
 8010c96:	2200      	movs	r2, #0
 8010c98:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	729a      	strb	r2, [r3, #10]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca6:	685b      	ldr	r3, [r3, #4]
 8010ca8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010caa:	e00d      	b.n	8010cc8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010cb2:	2114      	movs	r1, #20
 8010cb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010cb6:	f7f8 f887 	bl	8008dc8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010cba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f7f8 f9d7 	bl	8009070 <pbuf_cat>
      r = iprh->next_pbuf;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d1ee      	bne.n	8010cac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010cce:	4b1e      	ldr	r3, [pc, #120]	; (8010d48 <ip4_reass+0x2b4>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d102      	bne.n	8010cde <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cdc:	e010      	b.n	8010d00 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010cde:	4b1a      	ldr	r3, [pc, #104]	; (8010d48 <ip4_reass+0x2b4>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ce4:	e007      	b.n	8010cf6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d006      	beq.n	8010cfe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d1f4      	bne.n	8010ce6 <ip4_reass+0x252>
 8010cfc:	e000      	b.n	8010d00 <ip4_reass+0x26c>
          break;
 8010cfe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010d00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d04:	f7ff fd2e 	bl	8010764 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f7f8 f971 	bl	8008ff0 <pbuf_clen>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010d12:	4b0c      	ldr	r3, [pc, #48]	; (8010d44 <ip4_reass+0x2b0>)
 8010d14:	881b      	ldrh	r3, [r3, #0]
 8010d16:	8c3a      	ldrh	r2, [r7, #32]
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d906      	bls.n	8010d2a <ip4_reass+0x296>
 8010d1c:	4b0b      	ldr	r3, [pc, #44]	; (8010d4c <ip4_reass+0x2b8>)
 8010d1e:	f240 229b 	movw	r2, #667	; 0x29b
 8010d22:	490b      	ldr	r1, [pc, #44]	; (8010d50 <ip4_reass+0x2bc>)
 8010d24:	480b      	ldr	r0, [pc, #44]	; (8010d54 <ip4_reass+0x2c0>)
 8010d26:	f000 fdb3 	bl	8011890 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010d2a:	4b06      	ldr	r3, [pc, #24]	; (8010d44 <ip4_reass+0x2b0>)
 8010d2c:	881a      	ldrh	r2, [r3, #0]
 8010d2e:	8c3b      	ldrh	r3, [r7, #32]
 8010d30:	1ad3      	subs	r3, r2, r3
 8010d32:	b29a      	uxth	r2, r3
 8010d34:	4b03      	ldr	r3, [pc, #12]	; (8010d44 <ip4_reass+0x2b0>)
 8010d36:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	e038      	b.n	8010dae <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	e036      	b.n	8010dae <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010d40:	bf00      	nop
 8010d42:	e00a      	b.n	8010d5a <ip4_reass+0x2c6>
 8010d44:	2000c5ec 	.word	0x2000c5ec
 8010d48:	2000c5e8 	.word	0x2000c5e8
 8010d4c:	08014f98 	.word	0x08014f98
 8010d50:	08015108 	.word	0x08015108
 8010d54:	08014fe0 	.word	0x08014fe0
    goto nullreturn_ipr;
 8010d58:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d106      	bne.n	8010d6e <ip4_reass+0x2da>
 8010d60:	4b15      	ldr	r3, [pc, #84]	; (8010db8 <ip4_reass+0x324>)
 8010d62:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010d66:	4915      	ldr	r1, [pc, #84]	; (8010dbc <ip4_reass+0x328>)
 8010d68:	4815      	ldr	r0, [pc, #84]	; (8010dc0 <ip4_reass+0x32c>)
 8010d6a:	f000 fd91 	bl	8011890 <iprintf>
  if (ipr->p == NULL) {
 8010d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d116      	bne.n	8010da4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010d76:	4b13      	ldr	r3, [pc, #76]	; (8010dc4 <ip4_reass+0x330>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d006      	beq.n	8010d8e <ip4_reass+0x2fa>
 8010d80:	4b0d      	ldr	r3, [pc, #52]	; (8010db8 <ip4_reass+0x324>)
 8010d82:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010d86:	4910      	ldr	r1, [pc, #64]	; (8010dc8 <ip4_reass+0x334>)
 8010d88:	480d      	ldr	r0, [pc, #52]	; (8010dc0 <ip4_reass+0x32c>)
 8010d8a:	f000 fd81 	bl	8011890 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010d8e:	2100      	movs	r1, #0
 8010d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d92:	f7ff fce7 	bl	8010764 <ip_reass_dequeue_datagram>
 8010d96:	e006      	b.n	8010da6 <ip4_reass+0x312>
    goto nullreturn;
 8010d98:	bf00      	nop
 8010d9a:	e004      	b.n	8010da6 <ip4_reass+0x312>
    goto nullreturn;
 8010d9c:	bf00      	nop
 8010d9e:	e002      	b.n	8010da6 <ip4_reass+0x312>
      goto nullreturn;
 8010da0:	bf00      	nop
 8010da2:	e000      	b.n	8010da6 <ip4_reass+0x312>
  }

nullreturn:
 8010da4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f7f8 f894 	bl	8008ed4 <pbuf_free>
  return NULL;
 8010dac:	2300      	movs	r3, #0
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	3738      	adds	r7, #56	; 0x38
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop
 8010db8:	08014f98 	.word	0x08014f98
 8010dbc:	08015124 	.word	0x08015124
 8010dc0:	08014fe0 	.word	0x08014fe0
 8010dc4:	2000c5e8 	.word	0x2000c5e8
 8010dc8:	08015130 	.word	0x08015130

08010dcc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010dd0:	2005      	movs	r0, #5
 8010dd2:	f7f7 f965 	bl	80080a0 <memp_malloc>
 8010dd6:	4603      	mov	r3, r0
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d106      	bne.n	8010df8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010dea:	4b07      	ldr	r3, [pc, #28]	; (8010e08 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010dec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010df0:	4906      	ldr	r1, [pc, #24]	; (8010e0c <ip_frag_free_pbuf_custom_ref+0x30>)
 8010df2:	4807      	ldr	r0, [pc, #28]	; (8010e10 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010df4:	f000 fd4c 	bl	8011890 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010df8:	6879      	ldr	r1, [r7, #4]
 8010dfa:	2005      	movs	r0, #5
 8010dfc:	f7f7 f9c6 	bl	800818c <memp_free>
}
 8010e00:	bf00      	nop
 8010e02:	3708      	adds	r7, #8
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	08014f98 	.word	0x08014f98
 8010e0c:	08015150 	.word	0x08015150
 8010e10:	08014fe0 	.word	0x08014fe0

08010e14 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b084      	sub	sp, #16
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d106      	bne.n	8010e34 <ipfrag_free_pbuf_custom+0x20>
 8010e26:	4b11      	ldr	r3, [pc, #68]	; (8010e6c <ipfrag_free_pbuf_custom+0x58>)
 8010e28:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010e2c:	4910      	ldr	r1, [pc, #64]	; (8010e70 <ipfrag_free_pbuf_custom+0x5c>)
 8010e2e:	4811      	ldr	r0, [pc, #68]	; (8010e74 <ipfrag_free_pbuf_custom+0x60>)
 8010e30:	f000 fd2e 	bl	8011890 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010e34:	68fa      	ldr	r2, [r7, #12]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d006      	beq.n	8010e4a <ipfrag_free_pbuf_custom+0x36>
 8010e3c:	4b0b      	ldr	r3, [pc, #44]	; (8010e6c <ipfrag_free_pbuf_custom+0x58>)
 8010e3e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010e42:	490d      	ldr	r1, [pc, #52]	; (8010e78 <ipfrag_free_pbuf_custom+0x64>)
 8010e44:	480b      	ldr	r0, [pc, #44]	; (8010e74 <ipfrag_free_pbuf_custom+0x60>)
 8010e46:	f000 fd23 	bl	8011890 <iprintf>
  if (pcr->original != NULL) {
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	695b      	ldr	r3, [r3, #20]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d004      	beq.n	8010e5c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	695b      	ldr	r3, [r3, #20]
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7f8 f83c 	bl	8008ed4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010e5c:	68f8      	ldr	r0, [r7, #12]
 8010e5e:	f7ff ffbd 	bl	8010ddc <ip_frag_free_pbuf_custom_ref>
}
 8010e62:	bf00      	nop
 8010e64:	3710      	adds	r7, #16
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	08014f98 	.word	0x08014f98
 8010e70:	0801515c 	.word	0x0801515c
 8010e74:	08014fe0 	.word	0x08014fe0
 8010e78:	08015168 	.word	0x08015168

08010e7c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b094      	sub	sp, #80	; 0x50
 8010e80:	af02      	add	r7, sp, #8
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010e92:	3b14      	subs	r3, #20
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	da00      	bge.n	8010e9a <ip4_frag+0x1e>
 8010e98:	3307      	adds	r3, #7
 8010e9a:	10db      	asrs	r3, r3, #3
 8010e9c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010e9e:	2314      	movs	r3, #20
 8010ea0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	685b      	ldr	r3, [r3, #4]
 8010ea6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eaa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	f003 030f 	and.w	r3, r3, #15
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	009b      	lsls	r3, r3, #2
 8010eb8:	b2db      	uxtb	r3, r3
 8010eba:	2b14      	cmp	r3, #20
 8010ebc:	d002      	beq.n	8010ec4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010ebe:	f06f 0305 	mvn.w	r3, #5
 8010ec2:	e110      	b.n	80110e6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	895b      	ldrh	r3, [r3, #10]
 8010ec8:	2b13      	cmp	r3, #19
 8010eca:	d809      	bhi.n	8010ee0 <ip4_frag+0x64>
 8010ecc:	4b88      	ldr	r3, [pc, #544]	; (80110f0 <ip4_frag+0x274>)
 8010ece:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010ed2:	4988      	ldr	r1, [pc, #544]	; (80110f4 <ip4_frag+0x278>)
 8010ed4:	4888      	ldr	r0, [pc, #544]	; (80110f8 <ip4_frag+0x27c>)
 8010ed6:	f000 fcdb 	bl	8011890 <iprintf>
 8010eda:	f06f 0305 	mvn.w	r3, #5
 8010ede:	e102      	b.n	80110e6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee2:	88db      	ldrh	r3, [r3, #6]
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7f6 fc02 	bl	80076f0 <lwip_htons>
 8010eec:	4603      	mov	r3, r0
 8010eee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010ef0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ef2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ef6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010efa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010f00:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	891b      	ldrh	r3, [r3, #8]
 8010f06:	3b14      	subs	r3, #20
 8010f08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010f0c:	e0e1      	b.n	80110d2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010f0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010f10:	00db      	lsls	r3, r3, #3
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	bf28      	it	cs
 8010f1c:	4613      	movcs	r3, r2
 8010f1e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010f20:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f24:	2114      	movs	r1, #20
 8010f26:	200e      	movs	r0, #14
 8010f28:	f7f7 fcf0 	bl	800890c <pbuf_alloc>
 8010f2c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f000 80d5 	beq.w	80110e0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f38:	895b      	ldrh	r3, [r3, #10]
 8010f3a:	2b13      	cmp	r3, #19
 8010f3c:	d806      	bhi.n	8010f4c <ip4_frag+0xd0>
 8010f3e:	4b6c      	ldr	r3, [pc, #432]	; (80110f0 <ip4_frag+0x274>)
 8010f40:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010f44:	496d      	ldr	r1, [pc, #436]	; (80110fc <ip4_frag+0x280>)
 8010f46:	486c      	ldr	r0, [pc, #432]	; (80110f8 <ip4_frag+0x27c>)
 8010f48:	f000 fca2 	bl	8011890 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	2214      	movs	r2, #20
 8010f52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010f54:	4618      	mov	r0, r3
 8010f56:	f000 fbf0 	bl	801173a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f5c:	685b      	ldr	r3, [r3, #4]
 8010f5e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010f60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010f66:	e064      	b.n	8011032 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	895a      	ldrh	r2, [r3, #10]
 8010f6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010f6e:	1ad3      	subs	r3, r2, r3
 8010f70:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	895b      	ldrh	r3, [r3, #10]
 8010f76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d906      	bls.n	8010f8a <ip4_frag+0x10e>
 8010f7c:	4b5c      	ldr	r3, [pc, #368]	; (80110f0 <ip4_frag+0x274>)
 8010f7e:	f240 322d 	movw	r2, #813	; 0x32d
 8010f82:	495f      	ldr	r1, [pc, #380]	; (8011100 <ip4_frag+0x284>)
 8010f84:	485c      	ldr	r0, [pc, #368]	; (80110f8 <ip4_frag+0x27c>)
 8010f86:	f000 fc83 	bl	8011890 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010f8a:	8bfa      	ldrh	r2, [r7, #30]
 8010f8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010f90:	4293      	cmp	r3, r2
 8010f92:	bf28      	it	cs
 8010f94:	4613      	movcs	r3, r2
 8010f96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010f9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d105      	bne.n	8010fae <ip4_frag+0x132>
        poff = 0;
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	60fb      	str	r3, [r7, #12]
        continue;
 8010fac:	e041      	b.n	8011032 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010fae:	f7ff ff0d 	bl	8010dcc <ip_frag_alloc_pbuf_custom_ref>
 8010fb2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010fb4:	69bb      	ldr	r3, [r7, #24]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d103      	bne.n	8010fc2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010fba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fbc:	f7f7 ff8a 	bl	8008ed4 <pbuf_free>
        goto memerr;
 8010fc0:	e08f      	b.n	80110e2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010fc2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010fc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010fca:	4413      	add	r3, r2
 8010fcc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010fd0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010fd4:	9201      	str	r2, [sp, #4]
 8010fd6:	9300      	str	r3, [sp, #0]
 8010fd8:	4603      	mov	r3, r0
 8010fda:	2241      	movs	r2, #65	; 0x41
 8010fdc:	2000      	movs	r0, #0
 8010fde:	f7f7 fdbf 	bl	8008b60 <pbuf_alloced_custom>
 8010fe2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d106      	bne.n	8010ff8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010fea:	69b8      	ldr	r0, [r7, #24]
 8010fec:	f7ff fef6 	bl	8010ddc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010ff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ff2:	f7f7 ff6f 	bl	8008ed4 <pbuf_free>
        goto memerr;
 8010ff6:	e074      	b.n	80110e2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010ff8:	68f8      	ldr	r0, [r7, #12]
 8010ffa:	f7f8 f811 	bl	8009020 <pbuf_ref>
      pcr->original = p;
 8010ffe:	69bb      	ldr	r3, [r7, #24]
 8011000:	68fa      	ldr	r2, [r7, #12]
 8011002:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011004:	69bb      	ldr	r3, [r7, #24]
 8011006:	4a3f      	ldr	r2, [pc, #252]	; (8011104 <ip4_frag+0x288>)
 8011008:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801100a:	6979      	ldr	r1, [r7, #20]
 801100c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801100e:	f7f8 f82f 	bl	8009070 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011012:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011016:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801101a:	1ad3      	subs	r3, r2, r3
 801101c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011020:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011024:	2b00      	cmp	r3, #0
 8011026:	d004      	beq.n	8011032 <ip4_frag+0x1b6>
        poff = 0;
 8011028:	2300      	movs	r3, #0
 801102a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011032:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011036:	2b00      	cmp	r3, #0
 8011038:	d196      	bne.n	8010f68 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801103a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801103c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011040:	4413      	add	r3, r2
 8011042:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011048:	f1a3 0213 	sub.w	r2, r3, #19
 801104c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011050:	429a      	cmp	r2, r3
 8011052:	bfcc      	ite	gt
 8011054:	2301      	movgt	r3, #1
 8011056:	2300      	movle	r3, #0
 8011058:	b2db      	uxtb	r3, r3
 801105a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801105c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011064:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011066:	6a3b      	ldr	r3, [r7, #32]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d002      	beq.n	8011072 <ip4_frag+0x1f6>
 801106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106e:	2b00      	cmp	r3, #0
 8011070:	d003      	beq.n	801107a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011072:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011074:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011078:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801107a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801107c:	4618      	mov	r0, r3
 801107e:	f7f6 fb37 	bl	80076f0 <lwip_htons>
 8011082:	4603      	mov	r3, r0
 8011084:	461a      	mov	r2, r3
 8011086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011088:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801108a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801108c:	3314      	adds	r3, #20
 801108e:	b29b      	uxth	r3, r3
 8011090:	4618      	mov	r0, r3
 8011092:	f7f6 fb2d 	bl	80076f0 <lwip_htons>
 8011096:	4603      	mov	r3, r0
 8011098:	461a      	mov	r2, r3
 801109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801109e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a0:	2200      	movs	r2, #0
 80110a2:	729a      	strb	r2, [r3, #10]
 80110a4:	2200      	movs	r2, #0
 80110a6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	695b      	ldr	r3, [r3, #20]
 80110ac:	687a      	ldr	r2, [r7, #4]
 80110ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110b0:	68b8      	ldr	r0, [r7, #8]
 80110b2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80110b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110b6:	f7f7 ff0d 	bl	8008ed4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80110ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80110be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80110c6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80110ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80110cc:	4413      	add	r3, r2
 80110ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80110d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	f47f af19 	bne.w	8010f0e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80110dc:	2300      	movs	r3, #0
 80110de:	e002      	b.n	80110e6 <ip4_frag+0x26a>
      goto memerr;
 80110e0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80110e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3748      	adds	r7, #72	; 0x48
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}
 80110ee:	bf00      	nop
 80110f0:	08014f98 	.word	0x08014f98
 80110f4:	08015174 	.word	0x08015174
 80110f8:	08014fe0 	.word	0x08014fe0
 80110fc:	08015190 	.word	0x08015190
 8011100:	080151b0 	.word	0x080151b0
 8011104:	08010e15 	.word	0x08010e15

08011108 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b086      	sub	sp, #24
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011112:	230e      	movs	r3, #14
 8011114:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	895b      	ldrh	r3, [r3, #10]
 801111a:	2b0e      	cmp	r3, #14
 801111c:	d96e      	bls.n	80111fc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	7bdb      	ldrb	r3, [r3, #15]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d106      	bne.n	8011134 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801112c:	3301      	adds	r3, #1
 801112e:	b2da      	uxtb	r2, r3
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	685b      	ldr	r3, [r3, #4]
 8011138:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	7b1a      	ldrb	r2, [r3, #12]
 801113e:	7b5b      	ldrb	r3, [r3, #13]
 8011140:	021b      	lsls	r3, r3, #8
 8011142:	4313      	orrs	r3, r2
 8011144:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	f003 0301 	and.w	r3, r3, #1
 801114e:	2b00      	cmp	r3, #0
 8011150:	d023      	beq.n	801119a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	2b01      	cmp	r3, #1
 8011158:	d10f      	bne.n	801117a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	785b      	ldrb	r3, [r3, #1]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d11b      	bne.n	801119a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011166:	2b5e      	cmp	r3, #94	; 0x5e
 8011168:	d117      	bne.n	801119a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	7b5b      	ldrb	r3, [r3, #13]
 801116e:	f043 0310 	orr.w	r3, r3, #16
 8011172:	b2da      	uxtb	r2, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	735a      	strb	r2, [r3, #13]
 8011178:	e00f      	b.n	801119a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	2206      	movs	r2, #6
 801117e:	4928      	ldr	r1, [pc, #160]	; (8011220 <ethernet_input+0x118>)
 8011180:	4618      	mov	r0, r3
 8011182:	f000 faca 	bl	801171a <memcmp>
 8011186:	4603      	mov	r3, r0
 8011188:	2b00      	cmp	r3, #0
 801118a:	d106      	bne.n	801119a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	7b5b      	ldrb	r3, [r3, #13]
 8011190:	f043 0308 	orr.w	r3, r3, #8
 8011194:	b2da      	uxtb	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801119a:	89fb      	ldrh	r3, [r7, #14]
 801119c:	2b08      	cmp	r3, #8
 801119e:	d003      	beq.n	80111a8 <ethernet_input+0xa0>
 80111a0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80111a4:	d014      	beq.n	80111d0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80111a6:	e032      	b.n	801120e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80111ae:	f003 0308 	and.w	r3, r3, #8
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d024      	beq.n	8011200 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80111b6:	8afb      	ldrh	r3, [r7, #22]
 80111b8:	4619      	mov	r1, r3
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f7f7 fe04 	bl	8008dc8 <pbuf_remove_header>
 80111c0:	4603      	mov	r3, r0
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d11e      	bne.n	8011204 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80111c6:	6839      	ldr	r1, [r7, #0]
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f7fe ff21 	bl	8010010 <ip4_input>
      break;
 80111ce:	e013      	b.n	80111f8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80111d6:	f003 0308 	and.w	r3, r3, #8
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d014      	beq.n	8011208 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80111de:	8afb      	ldrh	r3, [r7, #22]
 80111e0:	4619      	mov	r1, r3
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f7f7 fdf0 	bl	8008dc8 <pbuf_remove_header>
 80111e8:	4603      	mov	r3, r0
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d10e      	bne.n	801120c <ethernet_input+0x104>
        etharp_input(p, netif);
 80111ee:	6839      	ldr	r1, [r7, #0]
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f7fe f8c1 	bl	800f378 <etharp_input>
      break;
 80111f6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80111f8:	2300      	movs	r3, #0
 80111fa:	e00c      	b.n	8011216 <ethernet_input+0x10e>
    goto free_and_return;
 80111fc:	bf00      	nop
 80111fe:	e006      	b.n	801120e <ethernet_input+0x106>
        goto free_and_return;
 8011200:	bf00      	nop
 8011202:	e004      	b.n	801120e <ethernet_input+0x106>
        goto free_and_return;
 8011204:	bf00      	nop
 8011206:	e002      	b.n	801120e <ethernet_input+0x106>
        goto free_and_return;
 8011208:	bf00      	nop
 801120a:	e000      	b.n	801120e <ethernet_input+0x106>
        goto free_and_return;
 801120c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f7f7 fe60 	bl	8008ed4 <pbuf_free>
  return ERR_OK;
 8011214:	2300      	movs	r3, #0
}
 8011216:	4618      	mov	r0, r3
 8011218:	3718      	adds	r7, #24
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
 801121e:	bf00      	nop
 8011220:	0801538c 	.word	0x0801538c

08011224 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011224:	b580      	push	{r7, lr}
 8011226:	b086      	sub	sp, #24
 8011228:	af00      	add	r7, sp, #0
 801122a:	60f8      	str	r0, [r7, #12]
 801122c:	60b9      	str	r1, [r7, #8]
 801122e:	607a      	str	r2, [r7, #4]
 8011230:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011232:	8c3b      	ldrh	r3, [r7, #32]
 8011234:	4618      	mov	r0, r3
 8011236:	f7f6 fa5b 	bl	80076f0 <lwip_htons>
 801123a:	4603      	mov	r3, r0
 801123c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801123e:	210e      	movs	r1, #14
 8011240:	68b8      	ldr	r0, [r7, #8]
 8011242:	f7f7 fdb1 	bl	8008da8 <pbuf_add_header>
 8011246:	4603      	mov	r3, r0
 8011248:	2b00      	cmp	r3, #0
 801124a:	d125      	bne.n	8011298 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	8afa      	ldrh	r2, [r7, #22]
 8011256:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	2206      	movs	r2, #6
 801125c:	6839      	ldr	r1, [r7, #0]
 801125e:	4618      	mov	r0, r3
 8011260:	f000 fa6b 	bl	801173a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	3306      	adds	r3, #6
 8011268:	2206      	movs	r2, #6
 801126a:	6879      	ldr	r1, [r7, #4]
 801126c:	4618      	mov	r0, r3
 801126e:	f000 fa64 	bl	801173a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011278:	2b06      	cmp	r3, #6
 801127a:	d006      	beq.n	801128a <ethernet_output+0x66>
 801127c:	4b0a      	ldr	r3, [pc, #40]	; (80112a8 <ethernet_output+0x84>)
 801127e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011282:	490a      	ldr	r1, [pc, #40]	; (80112ac <ethernet_output+0x88>)
 8011284:	480a      	ldr	r0, [pc, #40]	; (80112b0 <ethernet_output+0x8c>)
 8011286:	f000 fb03 	bl	8011890 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	699b      	ldr	r3, [r3, #24]
 801128e:	68b9      	ldr	r1, [r7, #8]
 8011290:	68f8      	ldr	r0, [r7, #12]
 8011292:	4798      	blx	r3
 8011294:	4603      	mov	r3, r0
 8011296:	e002      	b.n	801129e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011298:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801129a:	f06f 0301 	mvn.w	r3, #1
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3718      	adds	r7, #24
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	bf00      	nop
 80112a8:	080151c0 	.word	0x080151c0
 80112ac:	080151f8 	.word	0x080151f8
 80112b0:	0801522c 	.word	0x0801522c

080112b4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b086      	sub	sp, #24
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	60bb      	str	r3, [r7, #8]
 80112c2:	2304      	movs	r3, #4
 80112c4:	60fb      	str	r3, [r7, #12]
 80112c6:	2300      	movs	r3, #0
 80112c8:	613b      	str	r3, [r7, #16]
 80112ca:	2300      	movs	r3, #0
 80112cc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80112ce:	f107 0308 	add.w	r3, r7, #8
 80112d2:	2100      	movs	r1, #0
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7f3 facb 	bl	8004870 <osMessageCreate>
 80112da:	4602      	mov	r2, r0
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d102      	bne.n	80112ee <sys_mbox_new+0x3a>
    return ERR_MEM;
 80112e8:	f04f 33ff 	mov.w	r3, #4294967295
 80112ec:	e000      	b.n	80112f0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80112ee:	2300      	movs	r3, #0
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	3718      	adds	r7, #24
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}

080112f8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	6839      	ldr	r1, [r7, #0]
 8011308:	2200      	movs	r2, #0
 801130a:	4618      	mov	r0, r3
 801130c:	f7f3 fad8 	bl	80048c0 <osMessagePut>
 8011310:	4603      	mov	r3, r0
 8011312:	2b00      	cmp	r3, #0
 8011314:	d102      	bne.n	801131c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8011316:	2300      	movs	r3, #0
 8011318:	73fb      	strb	r3, [r7, #15]
 801131a:	e001      	b.n	8011320 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801131c:	23ff      	movs	r3, #255	; 0xff
 801131e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8011320:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011324:	4618      	mov	r0, r3
 8011326:	3710      	adds	r7, #16
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b08c      	sub	sp, #48	; 0x30
 8011330:	af00      	add	r7, sp, #0
 8011332:	61f8      	str	r0, [r7, #28]
 8011334:	61b9      	str	r1, [r7, #24]
 8011336:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8011338:	f7f3 f90a 	bl	8004550 <osKernelSysTick>
 801133c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d017      	beq.n	8011374 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8011344:	69fb      	ldr	r3, [r7, #28]
 8011346:	6819      	ldr	r1, [r3, #0]
 8011348:	f107 0320 	add.w	r3, r7, #32
 801134c:	697a      	ldr	r2, [r7, #20]
 801134e:	4618      	mov	r0, r3
 8011350:	f7f3 faf6 	bl	8004940 <osMessageGet>

    if(event.status == osEventMessage)
 8011354:	6a3b      	ldr	r3, [r7, #32]
 8011356:	2b10      	cmp	r3, #16
 8011358:	d109      	bne.n	801136e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135c:	461a      	mov	r2, r3
 801135e:	69bb      	ldr	r3, [r7, #24]
 8011360:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8011362:	f7f3 f8f5 	bl	8004550 <osKernelSysTick>
 8011366:	4602      	mov	r2, r0
 8011368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136a:	1ad3      	subs	r3, r2, r3
 801136c:	e019      	b.n	80113a2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801136e:	f04f 33ff 	mov.w	r3, #4294967295
 8011372:	e016      	b.n	80113a2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	6819      	ldr	r1, [r3, #0]
 8011378:	463b      	mov	r3, r7
 801137a:	f04f 32ff 	mov.w	r2, #4294967295
 801137e:	4618      	mov	r0, r3
 8011380:	f7f3 fade 	bl	8004940 <osMessageGet>
 8011384:	f107 0320 	add.w	r3, r7, #32
 8011388:	463a      	mov	r2, r7
 801138a:	ca07      	ldmia	r2, {r0, r1, r2}
 801138c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8011390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011392:	461a      	mov	r2, r3
 8011394:	69bb      	ldr	r3, [r7, #24]
 8011396:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8011398:	f7f3 f8da 	bl	8004550 <osKernelSysTick>
 801139c:	4602      	mov	r2, r0
 801139e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3730      	adds	r7, #48	; 0x30
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}

080113aa <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80113aa:	b480      	push	{r7}
 80113ac:	b083      	sub	sp, #12
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d101      	bne.n	80113be <sys_mbox_valid+0x14>
    return 0;
 80113ba:	2300      	movs	r3, #0
 80113bc:	e000      	b.n	80113c0 <sys_mbox_valid+0x16>
  else
    return 1;
 80113be:	2301      	movs	r3, #1
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	370c      	adds	r7, #12
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr

080113cc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80113d0:	4803      	ldr	r0, [pc, #12]	; (80113e0 <sys_init+0x14>)
 80113d2:	f7f3 f92d 	bl	8004630 <osMutexCreate>
 80113d6:	4603      	mov	r3, r0
 80113d8:	4a02      	ldr	r2, [pc, #8]	; (80113e4 <sys_init+0x18>)
 80113da:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80113dc:	bf00      	nop
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	0801539c 	.word	0x0801539c
 80113e4:	2000c5f0 	.word	0x2000c5f0

080113e8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80113f0:	2300      	movs	r3, #0
 80113f2:	60bb      	str	r3, [r7, #8]
 80113f4:	2300      	movs	r3, #0
 80113f6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80113f8:	f107 0308 	add.w	r3, r7, #8
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7f3 f917 	bl	8004630 <osMutexCreate>
 8011402:	4602      	mov	r2, r0
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d102      	bne.n	8011416 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8011410:	f04f 33ff 	mov.w	r3, #4294967295
 8011414:	e000      	b.n	8011418 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8011416:	2300      	movs	r3, #0
}
 8011418:	4618      	mov	r0, r3
 801141a:	3710      	adds	r7, #16
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}

08011420 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b082      	sub	sp, #8
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f04f 31ff 	mov.w	r1, #4294967295
 8011430:	4618      	mov	r0, r3
 8011432:	f7f3 f915 	bl	8004660 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8011436:	bf00      	nop
 8011438:	3708      	adds	r7, #8
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}

0801143e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801143e:	b580      	push	{r7, lr}
 8011440:	b082      	sub	sp, #8
 8011442:	af00      	add	r7, sp, #0
 8011444:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	4618      	mov	r0, r3
 801144c:	f7f3 f956 	bl	80046fc <osMutexRelease>
}
 8011450:	bf00      	nop
 8011452:	3708      	adds	r7, #8
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b08c      	sub	sp, #48	; 0x30
 801145c:	af00      	add	r7, sp, #0
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	60b9      	str	r1, [r7, #8]
 8011462:	607a      	str	r2, [r7, #4]
 8011464:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8011466:	f107 0314 	add.w	r3, r7, #20
 801146a:	2200      	movs	r2, #0
 801146c:	601a      	str	r2, [r3, #0]
 801146e:	605a      	str	r2, [r3, #4]
 8011470:	609a      	str	r2, [r3, #8]
 8011472:	60da      	str	r2, [r3, #12]
 8011474:	611a      	str	r2, [r3, #16]
 8011476:	615a      	str	r2, [r3, #20]
 8011478:	619a      	str	r2, [r3, #24]
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	617b      	str	r3, [r7, #20]
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	61bb      	str	r3, [r7, #24]
 8011482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011484:	b21b      	sxth	r3, r3
 8011486:	83bb      	strh	r3, [r7, #28]
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801148c:	f107 0314 	add.w	r3, r7, #20
 8011490:	6879      	ldr	r1, [r7, #4]
 8011492:	4618      	mov	r0, r3
 8011494:	f7f3 f86c 	bl	8004570 <osThreadCreate>
 8011498:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801149a:	4618      	mov	r0, r3
 801149c:	3730      	adds	r7, #48	; 0x30
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}
	...

080114a4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80114a8:	4b04      	ldr	r3, [pc, #16]	; (80114bc <sys_arch_protect+0x18>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f04f 31ff 	mov.w	r1, #4294967295
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7f3 f8d5 	bl	8004660 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80114b6:	2301      	movs	r3, #1
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	bd80      	pop	{r7, pc}
 80114bc:	2000c5f0 	.word	0x2000c5f0

080114c0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b082      	sub	sp, #8
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80114c8:	4b04      	ldr	r3, [pc, #16]	; (80114dc <sys_arch_unprotect+0x1c>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7f3 f915 	bl	80046fc <osMutexRelease>
}
 80114d2:	bf00      	nop
 80114d4:	3708      	adds	r7, #8
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}
 80114da:	bf00      	nop
 80114dc:	2000c5f0 	.word	0x2000c5f0

080114e0 <std>:
 80114e0:	2300      	movs	r3, #0
 80114e2:	b510      	push	{r4, lr}
 80114e4:	4604      	mov	r4, r0
 80114e6:	e9c0 3300 	strd	r3, r3, [r0]
 80114ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80114ee:	6083      	str	r3, [r0, #8]
 80114f0:	8181      	strh	r1, [r0, #12]
 80114f2:	6643      	str	r3, [r0, #100]	; 0x64
 80114f4:	81c2      	strh	r2, [r0, #14]
 80114f6:	6183      	str	r3, [r0, #24]
 80114f8:	4619      	mov	r1, r3
 80114fa:	2208      	movs	r2, #8
 80114fc:	305c      	adds	r0, #92	; 0x5c
 80114fe:	f000 f92a 	bl	8011756 <memset>
 8011502:	4b05      	ldr	r3, [pc, #20]	; (8011518 <std+0x38>)
 8011504:	6263      	str	r3, [r4, #36]	; 0x24
 8011506:	4b05      	ldr	r3, [pc, #20]	; (801151c <std+0x3c>)
 8011508:	62a3      	str	r3, [r4, #40]	; 0x28
 801150a:	4b05      	ldr	r3, [pc, #20]	; (8011520 <std+0x40>)
 801150c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801150e:	4b05      	ldr	r3, [pc, #20]	; (8011524 <std+0x44>)
 8011510:	6224      	str	r4, [r4, #32]
 8011512:	6323      	str	r3, [r4, #48]	; 0x30
 8011514:	bd10      	pop	{r4, pc}
 8011516:	bf00      	nop
 8011518:	08011a31 	.word	0x08011a31
 801151c:	08011a53 	.word	0x08011a53
 8011520:	08011a8b 	.word	0x08011a8b
 8011524:	08011aaf 	.word	0x08011aaf

08011528 <_cleanup_r>:
 8011528:	4901      	ldr	r1, [pc, #4]	; (8011530 <_cleanup_r+0x8>)
 801152a:	f000 b8af 	b.w	801168c <_fwalk_reent>
 801152e:	bf00      	nop
 8011530:	08011c45 	.word	0x08011c45

08011534 <__sfmoreglue>:
 8011534:	b570      	push	{r4, r5, r6, lr}
 8011536:	2268      	movs	r2, #104	; 0x68
 8011538:	1e4d      	subs	r5, r1, #1
 801153a:	4355      	muls	r5, r2
 801153c:	460e      	mov	r6, r1
 801153e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011542:	f000 f931 	bl	80117a8 <_malloc_r>
 8011546:	4604      	mov	r4, r0
 8011548:	b140      	cbz	r0, 801155c <__sfmoreglue+0x28>
 801154a:	2100      	movs	r1, #0
 801154c:	e9c0 1600 	strd	r1, r6, [r0]
 8011550:	300c      	adds	r0, #12
 8011552:	60a0      	str	r0, [r4, #8]
 8011554:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011558:	f000 f8fd 	bl	8011756 <memset>
 801155c:	4620      	mov	r0, r4
 801155e:	bd70      	pop	{r4, r5, r6, pc}

08011560 <__sfp_lock_acquire>:
 8011560:	4801      	ldr	r0, [pc, #4]	; (8011568 <__sfp_lock_acquire+0x8>)
 8011562:	f000 b8d8 	b.w	8011716 <__retarget_lock_acquire_recursive>
 8011566:	bf00      	nop
 8011568:	2000c5f5 	.word	0x2000c5f5

0801156c <__sfp_lock_release>:
 801156c:	4801      	ldr	r0, [pc, #4]	; (8011574 <__sfp_lock_release+0x8>)
 801156e:	f000 b8d3 	b.w	8011718 <__retarget_lock_release_recursive>
 8011572:	bf00      	nop
 8011574:	2000c5f5 	.word	0x2000c5f5

08011578 <__sinit_lock_acquire>:
 8011578:	4801      	ldr	r0, [pc, #4]	; (8011580 <__sinit_lock_acquire+0x8>)
 801157a:	f000 b8cc 	b.w	8011716 <__retarget_lock_acquire_recursive>
 801157e:	bf00      	nop
 8011580:	2000c5f6 	.word	0x2000c5f6

08011584 <__sinit_lock_release>:
 8011584:	4801      	ldr	r0, [pc, #4]	; (801158c <__sinit_lock_release+0x8>)
 8011586:	f000 b8c7 	b.w	8011718 <__retarget_lock_release_recursive>
 801158a:	bf00      	nop
 801158c:	2000c5f6 	.word	0x2000c5f6

08011590 <__sinit>:
 8011590:	b510      	push	{r4, lr}
 8011592:	4604      	mov	r4, r0
 8011594:	f7ff fff0 	bl	8011578 <__sinit_lock_acquire>
 8011598:	69a3      	ldr	r3, [r4, #24]
 801159a:	b11b      	cbz	r3, 80115a4 <__sinit+0x14>
 801159c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115a0:	f7ff bff0 	b.w	8011584 <__sinit_lock_release>
 80115a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80115a8:	6523      	str	r3, [r4, #80]	; 0x50
 80115aa:	4b13      	ldr	r3, [pc, #76]	; (80115f8 <__sinit+0x68>)
 80115ac:	4a13      	ldr	r2, [pc, #76]	; (80115fc <__sinit+0x6c>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80115b2:	42a3      	cmp	r3, r4
 80115b4:	bf04      	itt	eq
 80115b6:	2301      	moveq	r3, #1
 80115b8:	61a3      	streq	r3, [r4, #24]
 80115ba:	4620      	mov	r0, r4
 80115bc:	f000 f820 	bl	8011600 <__sfp>
 80115c0:	6060      	str	r0, [r4, #4]
 80115c2:	4620      	mov	r0, r4
 80115c4:	f000 f81c 	bl	8011600 <__sfp>
 80115c8:	60a0      	str	r0, [r4, #8]
 80115ca:	4620      	mov	r0, r4
 80115cc:	f000 f818 	bl	8011600 <__sfp>
 80115d0:	2200      	movs	r2, #0
 80115d2:	60e0      	str	r0, [r4, #12]
 80115d4:	2104      	movs	r1, #4
 80115d6:	6860      	ldr	r0, [r4, #4]
 80115d8:	f7ff ff82 	bl	80114e0 <std>
 80115dc:	68a0      	ldr	r0, [r4, #8]
 80115de:	2201      	movs	r2, #1
 80115e0:	2109      	movs	r1, #9
 80115e2:	f7ff ff7d 	bl	80114e0 <std>
 80115e6:	68e0      	ldr	r0, [r4, #12]
 80115e8:	2202      	movs	r2, #2
 80115ea:	2112      	movs	r1, #18
 80115ec:	f7ff ff78 	bl	80114e0 <std>
 80115f0:	2301      	movs	r3, #1
 80115f2:	61a3      	str	r3, [r4, #24]
 80115f4:	e7d2      	b.n	801159c <__sinit+0xc>
 80115f6:	bf00      	nop
 80115f8:	08015404 	.word	0x08015404
 80115fc:	08011529 	.word	0x08011529

08011600 <__sfp>:
 8011600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011602:	4607      	mov	r7, r0
 8011604:	f7ff ffac 	bl	8011560 <__sfp_lock_acquire>
 8011608:	4b1e      	ldr	r3, [pc, #120]	; (8011684 <__sfp+0x84>)
 801160a:	681e      	ldr	r6, [r3, #0]
 801160c:	69b3      	ldr	r3, [r6, #24]
 801160e:	b913      	cbnz	r3, 8011616 <__sfp+0x16>
 8011610:	4630      	mov	r0, r6
 8011612:	f7ff ffbd 	bl	8011590 <__sinit>
 8011616:	3648      	adds	r6, #72	; 0x48
 8011618:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801161c:	3b01      	subs	r3, #1
 801161e:	d503      	bpl.n	8011628 <__sfp+0x28>
 8011620:	6833      	ldr	r3, [r6, #0]
 8011622:	b30b      	cbz	r3, 8011668 <__sfp+0x68>
 8011624:	6836      	ldr	r6, [r6, #0]
 8011626:	e7f7      	b.n	8011618 <__sfp+0x18>
 8011628:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801162c:	b9d5      	cbnz	r5, 8011664 <__sfp+0x64>
 801162e:	4b16      	ldr	r3, [pc, #88]	; (8011688 <__sfp+0x88>)
 8011630:	60e3      	str	r3, [r4, #12]
 8011632:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011636:	6665      	str	r5, [r4, #100]	; 0x64
 8011638:	f000 f86c 	bl	8011714 <__retarget_lock_init_recursive>
 801163c:	f7ff ff96 	bl	801156c <__sfp_lock_release>
 8011640:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011644:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011648:	6025      	str	r5, [r4, #0]
 801164a:	61a5      	str	r5, [r4, #24]
 801164c:	2208      	movs	r2, #8
 801164e:	4629      	mov	r1, r5
 8011650:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011654:	f000 f87f 	bl	8011756 <memset>
 8011658:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801165c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011660:	4620      	mov	r0, r4
 8011662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011664:	3468      	adds	r4, #104	; 0x68
 8011666:	e7d9      	b.n	801161c <__sfp+0x1c>
 8011668:	2104      	movs	r1, #4
 801166a:	4638      	mov	r0, r7
 801166c:	f7ff ff62 	bl	8011534 <__sfmoreglue>
 8011670:	4604      	mov	r4, r0
 8011672:	6030      	str	r0, [r6, #0]
 8011674:	2800      	cmp	r0, #0
 8011676:	d1d5      	bne.n	8011624 <__sfp+0x24>
 8011678:	f7ff ff78 	bl	801156c <__sfp_lock_release>
 801167c:	230c      	movs	r3, #12
 801167e:	603b      	str	r3, [r7, #0]
 8011680:	e7ee      	b.n	8011660 <__sfp+0x60>
 8011682:	bf00      	nop
 8011684:	08015404 	.word	0x08015404
 8011688:	ffff0001 	.word	0xffff0001

0801168c <_fwalk_reent>:
 801168c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011690:	4606      	mov	r6, r0
 8011692:	4688      	mov	r8, r1
 8011694:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011698:	2700      	movs	r7, #0
 801169a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801169e:	f1b9 0901 	subs.w	r9, r9, #1
 80116a2:	d505      	bpl.n	80116b0 <_fwalk_reent+0x24>
 80116a4:	6824      	ldr	r4, [r4, #0]
 80116a6:	2c00      	cmp	r4, #0
 80116a8:	d1f7      	bne.n	801169a <_fwalk_reent+0xe>
 80116aa:	4638      	mov	r0, r7
 80116ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116b0:	89ab      	ldrh	r3, [r5, #12]
 80116b2:	2b01      	cmp	r3, #1
 80116b4:	d907      	bls.n	80116c6 <_fwalk_reent+0x3a>
 80116b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116ba:	3301      	adds	r3, #1
 80116bc:	d003      	beq.n	80116c6 <_fwalk_reent+0x3a>
 80116be:	4629      	mov	r1, r5
 80116c0:	4630      	mov	r0, r6
 80116c2:	47c0      	blx	r8
 80116c4:	4307      	orrs	r7, r0
 80116c6:	3568      	adds	r5, #104	; 0x68
 80116c8:	e7e9      	b.n	801169e <_fwalk_reent+0x12>
	...

080116cc <__libc_init_array>:
 80116cc:	b570      	push	{r4, r5, r6, lr}
 80116ce:	4d0d      	ldr	r5, [pc, #52]	; (8011704 <__libc_init_array+0x38>)
 80116d0:	4c0d      	ldr	r4, [pc, #52]	; (8011708 <__libc_init_array+0x3c>)
 80116d2:	1b64      	subs	r4, r4, r5
 80116d4:	10a4      	asrs	r4, r4, #2
 80116d6:	2600      	movs	r6, #0
 80116d8:	42a6      	cmp	r6, r4
 80116da:	d109      	bne.n	80116f0 <__libc_init_array+0x24>
 80116dc:	4d0b      	ldr	r5, [pc, #44]	; (801170c <__libc_init_array+0x40>)
 80116de:	4c0c      	ldr	r4, [pc, #48]	; (8011710 <__libc_init_array+0x44>)
 80116e0:	f001 f802 	bl	80126e8 <_init>
 80116e4:	1b64      	subs	r4, r4, r5
 80116e6:	10a4      	asrs	r4, r4, #2
 80116e8:	2600      	movs	r6, #0
 80116ea:	42a6      	cmp	r6, r4
 80116ec:	d105      	bne.n	80116fa <__libc_init_array+0x2e>
 80116ee:	bd70      	pop	{r4, r5, r6, pc}
 80116f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80116f4:	4798      	blx	r3
 80116f6:	3601      	adds	r6, #1
 80116f8:	e7ee      	b.n	80116d8 <__libc_init_array+0xc>
 80116fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80116fe:	4798      	blx	r3
 8011700:	3601      	adds	r6, #1
 8011702:	e7f2      	b.n	80116ea <__libc_init_array+0x1e>
 8011704:	080154f4 	.word	0x080154f4
 8011708:	080154f4 	.word	0x080154f4
 801170c:	080154f4 	.word	0x080154f4
 8011710:	080154f8 	.word	0x080154f8

08011714 <__retarget_lock_init_recursive>:
 8011714:	4770      	bx	lr

08011716 <__retarget_lock_acquire_recursive>:
 8011716:	4770      	bx	lr

08011718 <__retarget_lock_release_recursive>:
 8011718:	4770      	bx	lr

0801171a <memcmp>:
 801171a:	b510      	push	{r4, lr}
 801171c:	3901      	subs	r1, #1
 801171e:	4402      	add	r2, r0
 8011720:	4290      	cmp	r0, r2
 8011722:	d101      	bne.n	8011728 <memcmp+0xe>
 8011724:	2000      	movs	r0, #0
 8011726:	e005      	b.n	8011734 <memcmp+0x1a>
 8011728:	7803      	ldrb	r3, [r0, #0]
 801172a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801172e:	42a3      	cmp	r3, r4
 8011730:	d001      	beq.n	8011736 <memcmp+0x1c>
 8011732:	1b18      	subs	r0, r3, r4
 8011734:	bd10      	pop	{r4, pc}
 8011736:	3001      	adds	r0, #1
 8011738:	e7f2      	b.n	8011720 <memcmp+0x6>

0801173a <memcpy>:
 801173a:	440a      	add	r2, r1
 801173c:	4291      	cmp	r1, r2
 801173e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011742:	d100      	bne.n	8011746 <memcpy+0xc>
 8011744:	4770      	bx	lr
 8011746:	b510      	push	{r4, lr}
 8011748:	f811 4b01 	ldrb.w	r4, [r1], #1
 801174c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011750:	4291      	cmp	r1, r2
 8011752:	d1f9      	bne.n	8011748 <memcpy+0xe>
 8011754:	bd10      	pop	{r4, pc}

08011756 <memset>:
 8011756:	4402      	add	r2, r0
 8011758:	4603      	mov	r3, r0
 801175a:	4293      	cmp	r3, r2
 801175c:	d100      	bne.n	8011760 <memset+0xa>
 801175e:	4770      	bx	lr
 8011760:	f803 1b01 	strb.w	r1, [r3], #1
 8011764:	e7f9      	b.n	801175a <memset+0x4>
	...

08011768 <sbrk_aligned>:
 8011768:	b570      	push	{r4, r5, r6, lr}
 801176a:	4e0e      	ldr	r6, [pc, #56]	; (80117a4 <sbrk_aligned+0x3c>)
 801176c:	460c      	mov	r4, r1
 801176e:	6831      	ldr	r1, [r6, #0]
 8011770:	4605      	mov	r5, r0
 8011772:	b911      	cbnz	r1, 801177a <sbrk_aligned+0x12>
 8011774:	f000 f94c 	bl	8011a10 <_sbrk_r>
 8011778:	6030      	str	r0, [r6, #0]
 801177a:	4621      	mov	r1, r4
 801177c:	4628      	mov	r0, r5
 801177e:	f000 f947 	bl	8011a10 <_sbrk_r>
 8011782:	1c43      	adds	r3, r0, #1
 8011784:	d00a      	beq.n	801179c <sbrk_aligned+0x34>
 8011786:	1cc4      	adds	r4, r0, #3
 8011788:	f024 0403 	bic.w	r4, r4, #3
 801178c:	42a0      	cmp	r0, r4
 801178e:	d007      	beq.n	80117a0 <sbrk_aligned+0x38>
 8011790:	1a21      	subs	r1, r4, r0
 8011792:	4628      	mov	r0, r5
 8011794:	f000 f93c 	bl	8011a10 <_sbrk_r>
 8011798:	3001      	adds	r0, #1
 801179a:	d101      	bne.n	80117a0 <sbrk_aligned+0x38>
 801179c:	f04f 34ff 	mov.w	r4, #4294967295
 80117a0:	4620      	mov	r0, r4
 80117a2:	bd70      	pop	{r4, r5, r6, pc}
 80117a4:	2000c5fc 	.word	0x2000c5fc

080117a8 <_malloc_r>:
 80117a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117ac:	1ccd      	adds	r5, r1, #3
 80117ae:	f025 0503 	bic.w	r5, r5, #3
 80117b2:	3508      	adds	r5, #8
 80117b4:	2d0c      	cmp	r5, #12
 80117b6:	bf38      	it	cc
 80117b8:	250c      	movcc	r5, #12
 80117ba:	2d00      	cmp	r5, #0
 80117bc:	4607      	mov	r7, r0
 80117be:	db01      	blt.n	80117c4 <_malloc_r+0x1c>
 80117c0:	42a9      	cmp	r1, r5
 80117c2:	d905      	bls.n	80117d0 <_malloc_r+0x28>
 80117c4:	230c      	movs	r3, #12
 80117c6:	603b      	str	r3, [r7, #0]
 80117c8:	2600      	movs	r6, #0
 80117ca:	4630      	mov	r0, r6
 80117cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117d0:	4e2e      	ldr	r6, [pc, #184]	; (801188c <_malloc_r+0xe4>)
 80117d2:	f000 fa9f 	bl	8011d14 <__malloc_lock>
 80117d6:	6833      	ldr	r3, [r6, #0]
 80117d8:	461c      	mov	r4, r3
 80117da:	bb34      	cbnz	r4, 801182a <_malloc_r+0x82>
 80117dc:	4629      	mov	r1, r5
 80117de:	4638      	mov	r0, r7
 80117e0:	f7ff ffc2 	bl	8011768 <sbrk_aligned>
 80117e4:	1c43      	adds	r3, r0, #1
 80117e6:	4604      	mov	r4, r0
 80117e8:	d14d      	bne.n	8011886 <_malloc_r+0xde>
 80117ea:	6834      	ldr	r4, [r6, #0]
 80117ec:	4626      	mov	r6, r4
 80117ee:	2e00      	cmp	r6, #0
 80117f0:	d140      	bne.n	8011874 <_malloc_r+0xcc>
 80117f2:	6823      	ldr	r3, [r4, #0]
 80117f4:	4631      	mov	r1, r6
 80117f6:	4638      	mov	r0, r7
 80117f8:	eb04 0803 	add.w	r8, r4, r3
 80117fc:	f000 f908 	bl	8011a10 <_sbrk_r>
 8011800:	4580      	cmp	r8, r0
 8011802:	d13a      	bne.n	801187a <_malloc_r+0xd2>
 8011804:	6821      	ldr	r1, [r4, #0]
 8011806:	3503      	adds	r5, #3
 8011808:	1a6d      	subs	r5, r5, r1
 801180a:	f025 0503 	bic.w	r5, r5, #3
 801180e:	3508      	adds	r5, #8
 8011810:	2d0c      	cmp	r5, #12
 8011812:	bf38      	it	cc
 8011814:	250c      	movcc	r5, #12
 8011816:	4629      	mov	r1, r5
 8011818:	4638      	mov	r0, r7
 801181a:	f7ff ffa5 	bl	8011768 <sbrk_aligned>
 801181e:	3001      	adds	r0, #1
 8011820:	d02b      	beq.n	801187a <_malloc_r+0xd2>
 8011822:	6823      	ldr	r3, [r4, #0]
 8011824:	442b      	add	r3, r5
 8011826:	6023      	str	r3, [r4, #0]
 8011828:	e00e      	b.n	8011848 <_malloc_r+0xa0>
 801182a:	6822      	ldr	r2, [r4, #0]
 801182c:	1b52      	subs	r2, r2, r5
 801182e:	d41e      	bmi.n	801186e <_malloc_r+0xc6>
 8011830:	2a0b      	cmp	r2, #11
 8011832:	d916      	bls.n	8011862 <_malloc_r+0xba>
 8011834:	1961      	adds	r1, r4, r5
 8011836:	42a3      	cmp	r3, r4
 8011838:	6025      	str	r5, [r4, #0]
 801183a:	bf18      	it	ne
 801183c:	6059      	strne	r1, [r3, #4]
 801183e:	6863      	ldr	r3, [r4, #4]
 8011840:	bf08      	it	eq
 8011842:	6031      	streq	r1, [r6, #0]
 8011844:	5162      	str	r2, [r4, r5]
 8011846:	604b      	str	r3, [r1, #4]
 8011848:	4638      	mov	r0, r7
 801184a:	f104 060b 	add.w	r6, r4, #11
 801184e:	f000 fa67 	bl	8011d20 <__malloc_unlock>
 8011852:	f026 0607 	bic.w	r6, r6, #7
 8011856:	1d23      	adds	r3, r4, #4
 8011858:	1af2      	subs	r2, r6, r3
 801185a:	d0b6      	beq.n	80117ca <_malloc_r+0x22>
 801185c:	1b9b      	subs	r3, r3, r6
 801185e:	50a3      	str	r3, [r4, r2]
 8011860:	e7b3      	b.n	80117ca <_malloc_r+0x22>
 8011862:	6862      	ldr	r2, [r4, #4]
 8011864:	42a3      	cmp	r3, r4
 8011866:	bf0c      	ite	eq
 8011868:	6032      	streq	r2, [r6, #0]
 801186a:	605a      	strne	r2, [r3, #4]
 801186c:	e7ec      	b.n	8011848 <_malloc_r+0xa0>
 801186e:	4623      	mov	r3, r4
 8011870:	6864      	ldr	r4, [r4, #4]
 8011872:	e7b2      	b.n	80117da <_malloc_r+0x32>
 8011874:	4634      	mov	r4, r6
 8011876:	6876      	ldr	r6, [r6, #4]
 8011878:	e7b9      	b.n	80117ee <_malloc_r+0x46>
 801187a:	230c      	movs	r3, #12
 801187c:	603b      	str	r3, [r7, #0]
 801187e:	4638      	mov	r0, r7
 8011880:	f000 fa4e 	bl	8011d20 <__malloc_unlock>
 8011884:	e7a1      	b.n	80117ca <_malloc_r+0x22>
 8011886:	6025      	str	r5, [r4, #0]
 8011888:	e7de      	b.n	8011848 <_malloc_r+0xa0>
 801188a:	bf00      	nop
 801188c:	2000c5f8 	.word	0x2000c5f8

08011890 <iprintf>:
 8011890:	b40f      	push	{r0, r1, r2, r3}
 8011892:	4b0a      	ldr	r3, [pc, #40]	; (80118bc <iprintf+0x2c>)
 8011894:	b513      	push	{r0, r1, r4, lr}
 8011896:	681c      	ldr	r4, [r3, #0]
 8011898:	b124      	cbz	r4, 80118a4 <iprintf+0x14>
 801189a:	69a3      	ldr	r3, [r4, #24]
 801189c:	b913      	cbnz	r3, 80118a4 <iprintf+0x14>
 801189e:	4620      	mov	r0, r4
 80118a0:	f7ff fe76 	bl	8011590 <__sinit>
 80118a4:	ab05      	add	r3, sp, #20
 80118a6:	9a04      	ldr	r2, [sp, #16]
 80118a8:	68a1      	ldr	r1, [r4, #8]
 80118aa:	9301      	str	r3, [sp, #4]
 80118ac:	4620      	mov	r0, r4
 80118ae:	f000 fab3 	bl	8011e18 <_vfiprintf_r>
 80118b2:	b002      	add	sp, #8
 80118b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118b8:	b004      	add	sp, #16
 80118ba:	4770      	bx	lr
 80118bc:	20000030 	.word	0x20000030

080118c0 <rand>:
 80118c0:	4b16      	ldr	r3, [pc, #88]	; (801191c <rand+0x5c>)
 80118c2:	b510      	push	{r4, lr}
 80118c4:	681c      	ldr	r4, [r3, #0]
 80118c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80118c8:	b9b3      	cbnz	r3, 80118f8 <rand+0x38>
 80118ca:	2018      	movs	r0, #24
 80118cc:	f000 fa1a 	bl	8011d04 <malloc>
 80118d0:	63a0      	str	r0, [r4, #56]	; 0x38
 80118d2:	b928      	cbnz	r0, 80118e0 <rand+0x20>
 80118d4:	4602      	mov	r2, r0
 80118d6:	4b12      	ldr	r3, [pc, #72]	; (8011920 <rand+0x60>)
 80118d8:	4812      	ldr	r0, [pc, #72]	; (8011924 <rand+0x64>)
 80118da:	214e      	movs	r1, #78	; 0x4e
 80118dc:	f000 f8fe 	bl	8011adc <__assert_func>
 80118e0:	4a11      	ldr	r2, [pc, #68]	; (8011928 <rand+0x68>)
 80118e2:	4b12      	ldr	r3, [pc, #72]	; (801192c <rand+0x6c>)
 80118e4:	e9c0 2300 	strd	r2, r3, [r0]
 80118e8:	4b11      	ldr	r3, [pc, #68]	; (8011930 <rand+0x70>)
 80118ea:	6083      	str	r3, [r0, #8]
 80118ec:	230b      	movs	r3, #11
 80118ee:	8183      	strh	r3, [r0, #12]
 80118f0:	2201      	movs	r2, #1
 80118f2:	2300      	movs	r3, #0
 80118f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80118f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80118fa:	4a0e      	ldr	r2, [pc, #56]	; (8011934 <rand+0x74>)
 80118fc:	6920      	ldr	r0, [r4, #16]
 80118fe:	6963      	ldr	r3, [r4, #20]
 8011900:	490d      	ldr	r1, [pc, #52]	; (8011938 <rand+0x78>)
 8011902:	4342      	muls	r2, r0
 8011904:	fb01 2203 	mla	r2, r1, r3, r2
 8011908:	fba0 0101 	umull	r0, r1, r0, r1
 801190c:	1c43      	adds	r3, r0, #1
 801190e:	eb42 0001 	adc.w	r0, r2, r1
 8011912:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8011916:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801191a:	bd10      	pop	{r4, pc}
 801191c:	20000030 	.word	0x20000030
 8011920:	08015408 	.word	0x08015408
 8011924:	0801541f 	.word	0x0801541f
 8011928:	abcd330e 	.word	0xabcd330e
 801192c:	e66d1234 	.word	0xe66d1234
 8011930:	0005deec 	.word	0x0005deec
 8011934:	5851f42d 	.word	0x5851f42d
 8011938:	4c957f2d 	.word	0x4c957f2d

0801193c <cleanup_glue>:
 801193c:	b538      	push	{r3, r4, r5, lr}
 801193e:	460c      	mov	r4, r1
 8011940:	6809      	ldr	r1, [r1, #0]
 8011942:	4605      	mov	r5, r0
 8011944:	b109      	cbz	r1, 801194a <cleanup_glue+0xe>
 8011946:	f7ff fff9 	bl	801193c <cleanup_glue>
 801194a:	4621      	mov	r1, r4
 801194c:	4628      	mov	r0, r5
 801194e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011952:	f000 b9eb 	b.w	8011d2c <_free_r>
	...

08011958 <_reclaim_reent>:
 8011958:	4b2c      	ldr	r3, [pc, #176]	; (8011a0c <_reclaim_reent+0xb4>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	4283      	cmp	r3, r0
 801195e:	b570      	push	{r4, r5, r6, lr}
 8011960:	4604      	mov	r4, r0
 8011962:	d051      	beq.n	8011a08 <_reclaim_reent+0xb0>
 8011964:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011966:	b143      	cbz	r3, 801197a <_reclaim_reent+0x22>
 8011968:	68db      	ldr	r3, [r3, #12]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d14a      	bne.n	8011a04 <_reclaim_reent+0xac>
 801196e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011970:	6819      	ldr	r1, [r3, #0]
 8011972:	b111      	cbz	r1, 801197a <_reclaim_reent+0x22>
 8011974:	4620      	mov	r0, r4
 8011976:	f000 f9d9 	bl	8011d2c <_free_r>
 801197a:	6961      	ldr	r1, [r4, #20]
 801197c:	b111      	cbz	r1, 8011984 <_reclaim_reent+0x2c>
 801197e:	4620      	mov	r0, r4
 8011980:	f000 f9d4 	bl	8011d2c <_free_r>
 8011984:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011986:	b111      	cbz	r1, 801198e <_reclaim_reent+0x36>
 8011988:	4620      	mov	r0, r4
 801198a:	f000 f9cf 	bl	8011d2c <_free_r>
 801198e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011990:	b111      	cbz	r1, 8011998 <_reclaim_reent+0x40>
 8011992:	4620      	mov	r0, r4
 8011994:	f000 f9ca 	bl	8011d2c <_free_r>
 8011998:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801199a:	b111      	cbz	r1, 80119a2 <_reclaim_reent+0x4a>
 801199c:	4620      	mov	r0, r4
 801199e:	f000 f9c5 	bl	8011d2c <_free_r>
 80119a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80119a4:	b111      	cbz	r1, 80119ac <_reclaim_reent+0x54>
 80119a6:	4620      	mov	r0, r4
 80119a8:	f000 f9c0 	bl	8011d2c <_free_r>
 80119ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80119ae:	b111      	cbz	r1, 80119b6 <_reclaim_reent+0x5e>
 80119b0:	4620      	mov	r0, r4
 80119b2:	f000 f9bb 	bl	8011d2c <_free_r>
 80119b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80119b8:	b111      	cbz	r1, 80119c0 <_reclaim_reent+0x68>
 80119ba:	4620      	mov	r0, r4
 80119bc:	f000 f9b6 	bl	8011d2c <_free_r>
 80119c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119c2:	b111      	cbz	r1, 80119ca <_reclaim_reent+0x72>
 80119c4:	4620      	mov	r0, r4
 80119c6:	f000 f9b1 	bl	8011d2c <_free_r>
 80119ca:	69a3      	ldr	r3, [r4, #24]
 80119cc:	b1e3      	cbz	r3, 8011a08 <_reclaim_reent+0xb0>
 80119ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80119d0:	4620      	mov	r0, r4
 80119d2:	4798      	blx	r3
 80119d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80119d6:	b1b9      	cbz	r1, 8011a08 <_reclaim_reent+0xb0>
 80119d8:	4620      	mov	r0, r4
 80119da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119de:	f7ff bfad 	b.w	801193c <cleanup_glue>
 80119e2:	5949      	ldr	r1, [r1, r5]
 80119e4:	b941      	cbnz	r1, 80119f8 <_reclaim_reent+0xa0>
 80119e6:	3504      	adds	r5, #4
 80119e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80119ea:	2d80      	cmp	r5, #128	; 0x80
 80119ec:	68d9      	ldr	r1, [r3, #12]
 80119ee:	d1f8      	bne.n	80119e2 <_reclaim_reent+0x8a>
 80119f0:	4620      	mov	r0, r4
 80119f2:	f000 f99b 	bl	8011d2c <_free_r>
 80119f6:	e7ba      	b.n	801196e <_reclaim_reent+0x16>
 80119f8:	680e      	ldr	r6, [r1, #0]
 80119fa:	4620      	mov	r0, r4
 80119fc:	f000 f996 	bl	8011d2c <_free_r>
 8011a00:	4631      	mov	r1, r6
 8011a02:	e7ef      	b.n	80119e4 <_reclaim_reent+0x8c>
 8011a04:	2500      	movs	r5, #0
 8011a06:	e7ef      	b.n	80119e8 <_reclaim_reent+0x90>
 8011a08:	bd70      	pop	{r4, r5, r6, pc}
 8011a0a:	bf00      	nop
 8011a0c:	20000030 	.word	0x20000030

08011a10 <_sbrk_r>:
 8011a10:	b538      	push	{r3, r4, r5, lr}
 8011a12:	4d06      	ldr	r5, [pc, #24]	; (8011a2c <_sbrk_r+0x1c>)
 8011a14:	2300      	movs	r3, #0
 8011a16:	4604      	mov	r4, r0
 8011a18:	4608      	mov	r0, r1
 8011a1a:	602b      	str	r3, [r5, #0]
 8011a1c:	f7ef f82a 	bl	8000a74 <_sbrk>
 8011a20:	1c43      	adds	r3, r0, #1
 8011a22:	d102      	bne.n	8011a2a <_sbrk_r+0x1a>
 8011a24:	682b      	ldr	r3, [r5, #0]
 8011a26:	b103      	cbz	r3, 8011a2a <_sbrk_r+0x1a>
 8011a28:	6023      	str	r3, [r4, #0]
 8011a2a:	bd38      	pop	{r3, r4, r5, pc}
 8011a2c:	2000c600 	.word	0x2000c600

08011a30 <__sread>:
 8011a30:	b510      	push	{r4, lr}
 8011a32:	460c      	mov	r4, r1
 8011a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a38:	f000 fcb2 	bl	80123a0 <_read_r>
 8011a3c:	2800      	cmp	r0, #0
 8011a3e:	bfab      	itete	ge
 8011a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a42:	89a3      	ldrhlt	r3, [r4, #12]
 8011a44:	181b      	addge	r3, r3, r0
 8011a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a4a:	bfac      	ite	ge
 8011a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a4e:	81a3      	strhlt	r3, [r4, #12]
 8011a50:	bd10      	pop	{r4, pc}

08011a52 <__swrite>:
 8011a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a56:	461f      	mov	r7, r3
 8011a58:	898b      	ldrh	r3, [r1, #12]
 8011a5a:	05db      	lsls	r3, r3, #23
 8011a5c:	4605      	mov	r5, r0
 8011a5e:	460c      	mov	r4, r1
 8011a60:	4616      	mov	r6, r2
 8011a62:	d505      	bpl.n	8011a70 <__swrite+0x1e>
 8011a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a68:	2302      	movs	r3, #2
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	f000 f938 	bl	8011ce0 <_lseek_r>
 8011a70:	89a3      	ldrh	r3, [r4, #12]
 8011a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a7a:	81a3      	strh	r3, [r4, #12]
 8011a7c:	4632      	mov	r2, r6
 8011a7e:	463b      	mov	r3, r7
 8011a80:	4628      	mov	r0, r5
 8011a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a86:	f000 b817 	b.w	8011ab8 <_write_r>

08011a8a <__sseek>:
 8011a8a:	b510      	push	{r4, lr}
 8011a8c:	460c      	mov	r4, r1
 8011a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a92:	f000 f925 	bl	8011ce0 <_lseek_r>
 8011a96:	1c43      	adds	r3, r0, #1
 8011a98:	89a3      	ldrh	r3, [r4, #12]
 8011a9a:	bf15      	itete	ne
 8011a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011aa6:	81a3      	strheq	r3, [r4, #12]
 8011aa8:	bf18      	it	ne
 8011aaa:	81a3      	strhne	r3, [r4, #12]
 8011aac:	bd10      	pop	{r4, pc}

08011aae <__sclose>:
 8011aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ab2:	f000 b831 	b.w	8011b18 <_close_r>
	...

08011ab8 <_write_r>:
 8011ab8:	b538      	push	{r3, r4, r5, lr}
 8011aba:	4d07      	ldr	r5, [pc, #28]	; (8011ad8 <_write_r+0x20>)
 8011abc:	4604      	mov	r4, r0
 8011abe:	4608      	mov	r0, r1
 8011ac0:	4611      	mov	r1, r2
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	602a      	str	r2, [r5, #0]
 8011ac6:	461a      	mov	r2, r3
 8011ac8:	f7ee ff83 	bl	80009d2 <_write>
 8011acc:	1c43      	adds	r3, r0, #1
 8011ace:	d102      	bne.n	8011ad6 <_write_r+0x1e>
 8011ad0:	682b      	ldr	r3, [r5, #0]
 8011ad2:	b103      	cbz	r3, 8011ad6 <_write_r+0x1e>
 8011ad4:	6023      	str	r3, [r4, #0]
 8011ad6:	bd38      	pop	{r3, r4, r5, pc}
 8011ad8:	2000c600 	.word	0x2000c600

08011adc <__assert_func>:
 8011adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ade:	4614      	mov	r4, r2
 8011ae0:	461a      	mov	r2, r3
 8011ae2:	4b09      	ldr	r3, [pc, #36]	; (8011b08 <__assert_func+0x2c>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	4605      	mov	r5, r0
 8011ae8:	68d8      	ldr	r0, [r3, #12]
 8011aea:	b14c      	cbz	r4, 8011b00 <__assert_func+0x24>
 8011aec:	4b07      	ldr	r3, [pc, #28]	; (8011b0c <__assert_func+0x30>)
 8011aee:	9100      	str	r1, [sp, #0]
 8011af0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011af4:	4906      	ldr	r1, [pc, #24]	; (8011b10 <__assert_func+0x34>)
 8011af6:	462b      	mov	r3, r5
 8011af8:	f000 f8e0 	bl	8011cbc <fiprintf>
 8011afc:	f000 fd22 	bl	8012544 <abort>
 8011b00:	4b04      	ldr	r3, [pc, #16]	; (8011b14 <__assert_func+0x38>)
 8011b02:	461c      	mov	r4, r3
 8011b04:	e7f3      	b.n	8011aee <__assert_func+0x12>
 8011b06:	bf00      	nop
 8011b08:	20000030 	.word	0x20000030
 8011b0c:	0801547a 	.word	0x0801547a
 8011b10:	08015487 	.word	0x08015487
 8011b14:	080154b5 	.word	0x080154b5

08011b18 <_close_r>:
 8011b18:	b538      	push	{r3, r4, r5, lr}
 8011b1a:	4d06      	ldr	r5, [pc, #24]	; (8011b34 <_close_r+0x1c>)
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	4604      	mov	r4, r0
 8011b20:	4608      	mov	r0, r1
 8011b22:	602b      	str	r3, [r5, #0]
 8011b24:	f7ee ff71 	bl	8000a0a <_close>
 8011b28:	1c43      	adds	r3, r0, #1
 8011b2a:	d102      	bne.n	8011b32 <_close_r+0x1a>
 8011b2c:	682b      	ldr	r3, [r5, #0]
 8011b2e:	b103      	cbz	r3, 8011b32 <_close_r+0x1a>
 8011b30:	6023      	str	r3, [r4, #0]
 8011b32:	bd38      	pop	{r3, r4, r5, pc}
 8011b34:	2000c600 	.word	0x2000c600

08011b38 <__sflush_r>:
 8011b38:	898a      	ldrh	r2, [r1, #12]
 8011b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b3e:	4605      	mov	r5, r0
 8011b40:	0710      	lsls	r0, r2, #28
 8011b42:	460c      	mov	r4, r1
 8011b44:	d458      	bmi.n	8011bf8 <__sflush_r+0xc0>
 8011b46:	684b      	ldr	r3, [r1, #4]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	dc05      	bgt.n	8011b58 <__sflush_r+0x20>
 8011b4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	dc02      	bgt.n	8011b58 <__sflush_r+0x20>
 8011b52:	2000      	movs	r0, #0
 8011b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b5a:	2e00      	cmp	r6, #0
 8011b5c:	d0f9      	beq.n	8011b52 <__sflush_r+0x1a>
 8011b5e:	2300      	movs	r3, #0
 8011b60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011b64:	682f      	ldr	r7, [r5, #0]
 8011b66:	602b      	str	r3, [r5, #0]
 8011b68:	d032      	beq.n	8011bd0 <__sflush_r+0x98>
 8011b6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011b6c:	89a3      	ldrh	r3, [r4, #12]
 8011b6e:	075a      	lsls	r2, r3, #29
 8011b70:	d505      	bpl.n	8011b7e <__sflush_r+0x46>
 8011b72:	6863      	ldr	r3, [r4, #4]
 8011b74:	1ac0      	subs	r0, r0, r3
 8011b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b78:	b10b      	cbz	r3, 8011b7e <__sflush_r+0x46>
 8011b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011b7c:	1ac0      	subs	r0, r0, r3
 8011b7e:	2300      	movs	r3, #0
 8011b80:	4602      	mov	r2, r0
 8011b82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b84:	6a21      	ldr	r1, [r4, #32]
 8011b86:	4628      	mov	r0, r5
 8011b88:	47b0      	blx	r6
 8011b8a:	1c43      	adds	r3, r0, #1
 8011b8c:	89a3      	ldrh	r3, [r4, #12]
 8011b8e:	d106      	bne.n	8011b9e <__sflush_r+0x66>
 8011b90:	6829      	ldr	r1, [r5, #0]
 8011b92:	291d      	cmp	r1, #29
 8011b94:	d82c      	bhi.n	8011bf0 <__sflush_r+0xb8>
 8011b96:	4a2a      	ldr	r2, [pc, #168]	; (8011c40 <__sflush_r+0x108>)
 8011b98:	40ca      	lsrs	r2, r1
 8011b9a:	07d6      	lsls	r6, r2, #31
 8011b9c:	d528      	bpl.n	8011bf0 <__sflush_r+0xb8>
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	6062      	str	r2, [r4, #4]
 8011ba2:	04d9      	lsls	r1, r3, #19
 8011ba4:	6922      	ldr	r2, [r4, #16]
 8011ba6:	6022      	str	r2, [r4, #0]
 8011ba8:	d504      	bpl.n	8011bb4 <__sflush_r+0x7c>
 8011baa:	1c42      	adds	r2, r0, #1
 8011bac:	d101      	bne.n	8011bb2 <__sflush_r+0x7a>
 8011bae:	682b      	ldr	r3, [r5, #0]
 8011bb0:	b903      	cbnz	r3, 8011bb4 <__sflush_r+0x7c>
 8011bb2:	6560      	str	r0, [r4, #84]	; 0x54
 8011bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bb6:	602f      	str	r7, [r5, #0]
 8011bb8:	2900      	cmp	r1, #0
 8011bba:	d0ca      	beq.n	8011b52 <__sflush_r+0x1a>
 8011bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011bc0:	4299      	cmp	r1, r3
 8011bc2:	d002      	beq.n	8011bca <__sflush_r+0x92>
 8011bc4:	4628      	mov	r0, r5
 8011bc6:	f000 f8b1 	bl	8011d2c <_free_r>
 8011bca:	2000      	movs	r0, #0
 8011bcc:	6360      	str	r0, [r4, #52]	; 0x34
 8011bce:	e7c1      	b.n	8011b54 <__sflush_r+0x1c>
 8011bd0:	6a21      	ldr	r1, [r4, #32]
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	47b0      	blx	r6
 8011bd8:	1c41      	adds	r1, r0, #1
 8011bda:	d1c7      	bne.n	8011b6c <__sflush_r+0x34>
 8011bdc:	682b      	ldr	r3, [r5, #0]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d0c4      	beq.n	8011b6c <__sflush_r+0x34>
 8011be2:	2b1d      	cmp	r3, #29
 8011be4:	d001      	beq.n	8011bea <__sflush_r+0xb2>
 8011be6:	2b16      	cmp	r3, #22
 8011be8:	d101      	bne.n	8011bee <__sflush_r+0xb6>
 8011bea:	602f      	str	r7, [r5, #0]
 8011bec:	e7b1      	b.n	8011b52 <__sflush_r+0x1a>
 8011bee:	89a3      	ldrh	r3, [r4, #12]
 8011bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bf4:	81a3      	strh	r3, [r4, #12]
 8011bf6:	e7ad      	b.n	8011b54 <__sflush_r+0x1c>
 8011bf8:	690f      	ldr	r7, [r1, #16]
 8011bfa:	2f00      	cmp	r7, #0
 8011bfc:	d0a9      	beq.n	8011b52 <__sflush_r+0x1a>
 8011bfe:	0793      	lsls	r3, r2, #30
 8011c00:	680e      	ldr	r6, [r1, #0]
 8011c02:	bf08      	it	eq
 8011c04:	694b      	ldreq	r3, [r1, #20]
 8011c06:	600f      	str	r7, [r1, #0]
 8011c08:	bf18      	it	ne
 8011c0a:	2300      	movne	r3, #0
 8011c0c:	eba6 0807 	sub.w	r8, r6, r7
 8011c10:	608b      	str	r3, [r1, #8]
 8011c12:	f1b8 0f00 	cmp.w	r8, #0
 8011c16:	dd9c      	ble.n	8011b52 <__sflush_r+0x1a>
 8011c18:	6a21      	ldr	r1, [r4, #32]
 8011c1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c1c:	4643      	mov	r3, r8
 8011c1e:	463a      	mov	r2, r7
 8011c20:	4628      	mov	r0, r5
 8011c22:	47b0      	blx	r6
 8011c24:	2800      	cmp	r0, #0
 8011c26:	dc06      	bgt.n	8011c36 <__sflush_r+0xfe>
 8011c28:	89a3      	ldrh	r3, [r4, #12]
 8011c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c2e:	81a3      	strh	r3, [r4, #12]
 8011c30:	f04f 30ff 	mov.w	r0, #4294967295
 8011c34:	e78e      	b.n	8011b54 <__sflush_r+0x1c>
 8011c36:	4407      	add	r7, r0
 8011c38:	eba8 0800 	sub.w	r8, r8, r0
 8011c3c:	e7e9      	b.n	8011c12 <__sflush_r+0xda>
 8011c3e:	bf00      	nop
 8011c40:	20400001 	.word	0x20400001

08011c44 <_fflush_r>:
 8011c44:	b538      	push	{r3, r4, r5, lr}
 8011c46:	690b      	ldr	r3, [r1, #16]
 8011c48:	4605      	mov	r5, r0
 8011c4a:	460c      	mov	r4, r1
 8011c4c:	b913      	cbnz	r3, 8011c54 <_fflush_r+0x10>
 8011c4e:	2500      	movs	r5, #0
 8011c50:	4628      	mov	r0, r5
 8011c52:	bd38      	pop	{r3, r4, r5, pc}
 8011c54:	b118      	cbz	r0, 8011c5e <_fflush_r+0x1a>
 8011c56:	6983      	ldr	r3, [r0, #24]
 8011c58:	b90b      	cbnz	r3, 8011c5e <_fflush_r+0x1a>
 8011c5a:	f7ff fc99 	bl	8011590 <__sinit>
 8011c5e:	4b14      	ldr	r3, [pc, #80]	; (8011cb0 <_fflush_r+0x6c>)
 8011c60:	429c      	cmp	r4, r3
 8011c62:	d11b      	bne.n	8011c9c <_fflush_r+0x58>
 8011c64:	686c      	ldr	r4, [r5, #4]
 8011c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d0ef      	beq.n	8011c4e <_fflush_r+0xa>
 8011c6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011c70:	07d0      	lsls	r0, r2, #31
 8011c72:	d404      	bmi.n	8011c7e <_fflush_r+0x3a>
 8011c74:	0599      	lsls	r1, r3, #22
 8011c76:	d402      	bmi.n	8011c7e <_fflush_r+0x3a>
 8011c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c7a:	f7ff fd4c 	bl	8011716 <__retarget_lock_acquire_recursive>
 8011c7e:	4628      	mov	r0, r5
 8011c80:	4621      	mov	r1, r4
 8011c82:	f7ff ff59 	bl	8011b38 <__sflush_r>
 8011c86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c88:	07da      	lsls	r2, r3, #31
 8011c8a:	4605      	mov	r5, r0
 8011c8c:	d4e0      	bmi.n	8011c50 <_fflush_r+0xc>
 8011c8e:	89a3      	ldrh	r3, [r4, #12]
 8011c90:	059b      	lsls	r3, r3, #22
 8011c92:	d4dd      	bmi.n	8011c50 <_fflush_r+0xc>
 8011c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c96:	f7ff fd3f 	bl	8011718 <__retarget_lock_release_recursive>
 8011c9a:	e7d9      	b.n	8011c50 <_fflush_r+0xc>
 8011c9c:	4b05      	ldr	r3, [pc, #20]	; (8011cb4 <_fflush_r+0x70>)
 8011c9e:	429c      	cmp	r4, r3
 8011ca0:	d101      	bne.n	8011ca6 <_fflush_r+0x62>
 8011ca2:	68ac      	ldr	r4, [r5, #8]
 8011ca4:	e7df      	b.n	8011c66 <_fflush_r+0x22>
 8011ca6:	4b04      	ldr	r3, [pc, #16]	; (8011cb8 <_fflush_r+0x74>)
 8011ca8:	429c      	cmp	r4, r3
 8011caa:	bf08      	it	eq
 8011cac:	68ec      	ldreq	r4, [r5, #12]
 8011cae:	e7da      	b.n	8011c66 <_fflush_r+0x22>
 8011cb0:	080153c4 	.word	0x080153c4
 8011cb4:	080153e4 	.word	0x080153e4
 8011cb8:	080153a4 	.word	0x080153a4

08011cbc <fiprintf>:
 8011cbc:	b40e      	push	{r1, r2, r3}
 8011cbe:	b503      	push	{r0, r1, lr}
 8011cc0:	4601      	mov	r1, r0
 8011cc2:	ab03      	add	r3, sp, #12
 8011cc4:	4805      	ldr	r0, [pc, #20]	; (8011cdc <fiprintf+0x20>)
 8011cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cca:	6800      	ldr	r0, [r0, #0]
 8011ccc:	9301      	str	r3, [sp, #4]
 8011cce:	f000 f8a3 	bl	8011e18 <_vfiprintf_r>
 8011cd2:	b002      	add	sp, #8
 8011cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cd8:	b003      	add	sp, #12
 8011cda:	4770      	bx	lr
 8011cdc:	20000030 	.word	0x20000030

08011ce0 <_lseek_r>:
 8011ce0:	b538      	push	{r3, r4, r5, lr}
 8011ce2:	4d07      	ldr	r5, [pc, #28]	; (8011d00 <_lseek_r+0x20>)
 8011ce4:	4604      	mov	r4, r0
 8011ce6:	4608      	mov	r0, r1
 8011ce8:	4611      	mov	r1, r2
 8011cea:	2200      	movs	r2, #0
 8011cec:	602a      	str	r2, [r5, #0]
 8011cee:	461a      	mov	r2, r3
 8011cf0:	f7ee feb2 	bl	8000a58 <_lseek>
 8011cf4:	1c43      	adds	r3, r0, #1
 8011cf6:	d102      	bne.n	8011cfe <_lseek_r+0x1e>
 8011cf8:	682b      	ldr	r3, [r5, #0]
 8011cfa:	b103      	cbz	r3, 8011cfe <_lseek_r+0x1e>
 8011cfc:	6023      	str	r3, [r4, #0]
 8011cfe:	bd38      	pop	{r3, r4, r5, pc}
 8011d00:	2000c600 	.word	0x2000c600

08011d04 <malloc>:
 8011d04:	4b02      	ldr	r3, [pc, #8]	; (8011d10 <malloc+0xc>)
 8011d06:	4601      	mov	r1, r0
 8011d08:	6818      	ldr	r0, [r3, #0]
 8011d0a:	f7ff bd4d 	b.w	80117a8 <_malloc_r>
 8011d0e:	bf00      	nop
 8011d10:	20000030 	.word	0x20000030

08011d14 <__malloc_lock>:
 8011d14:	4801      	ldr	r0, [pc, #4]	; (8011d1c <__malloc_lock+0x8>)
 8011d16:	f7ff bcfe 	b.w	8011716 <__retarget_lock_acquire_recursive>
 8011d1a:	bf00      	nop
 8011d1c:	2000c5f4 	.word	0x2000c5f4

08011d20 <__malloc_unlock>:
 8011d20:	4801      	ldr	r0, [pc, #4]	; (8011d28 <__malloc_unlock+0x8>)
 8011d22:	f7ff bcf9 	b.w	8011718 <__retarget_lock_release_recursive>
 8011d26:	bf00      	nop
 8011d28:	2000c5f4 	.word	0x2000c5f4

08011d2c <_free_r>:
 8011d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d2e:	2900      	cmp	r1, #0
 8011d30:	d044      	beq.n	8011dbc <_free_r+0x90>
 8011d32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d36:	9001      	str	r0, [sp, #4]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	f1a1 0404 	sub.w	r4, r1, #4
 8011d3e:	bfb8      	it	lt
 8011d40:	18e4      	addlt	r4, r4, r3
 8011d42:	f7ff ffe7 	bl	8011d14 <__malloc_lock>
 8011d46:	4a1e      	ldr	r2, [pc, #120]	; (8011dc0 <_free_r+0x94>)
 8011d48:	9801      	ldr	r0, [sp, #4]
 8011d4a:	6813      	ldr	r3, [r2, #0]
 8011d4c:	b933      	cbnz	r3, 8011d5c <_free_r+0x30>
 8011d4e:	6063      	str	r3, [r4, #4]
 8011d50:	6014      	str	r4, [r2, #0]
 8011d52:	b003      	add	sp, #12
 8011d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d58:	f7ff bfe2 	b.w	8011d20 <__malloc_unlock>
 8011d5c:	42a3      	cmp	r3, r4
 8011d5e:	d908      	bls.n	8011d72 <_free_r+0x46>
 8011d60:	6825      	ldr	r5, [r4, #0]
 8011d62:	1961      	adds	r1, r4, r5
 8011d64:	428b      	cmp	r3, r1
 8011d66:	bf01      	itttt	eq
 8011d68:	6819      	ldreq	r1, [r3, #0]
 8011d6a:	685b      	ldreq	r3, [r3, #4]
 8011d6c:	1949      	addeq	r1, r1, r5
 8011d6e:	6021      	streq	r1, [r4, #0]
 8011d70:	e7ed      	b.n	8011d4e <_free_r+0x22>
 8011d72:	461a      	mov	r2, r3
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	b10b      	cbz	r3, 8011d7c <_free_r+0x50>
 8011d78:	42a3      	cmp	r3, r4
 8011d7a:	d9fa      	bls.n	8011d72 <_free_r+0x46>
 8011d7c:	6811      	ldr	r1, [r2, #0]
 8011d7e:	1855      	adds	r5, r2, r1
 8011d80:	42a5      	cmp	r5, r4
 8011d82:	d10b      	bne.n	8011d9c <_free_r+0x70>
 8011d84:	6824      	ldr	r4, [r4, #0]
 8011d86:	4421      	add	r1, r4
 8011d88:	1854      	adds	r4, r2, r1
 8011d8a:	42a3      	cmp	r3, r4
 8011d8c:	6011      	str	r1, [r2, #0]
 8011d8e:	d1e0      	bne.n	8011d52 <_free_r+0x26>
 8011d90:	681c      	ldr	r4, [r3, #0]
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	6053      	str	r3, [r2, #4]
 8011d96:	4421      	add	r1, r4
 8011d98:	6011      	str	r1, [r2, #0]
 8011d9a:	e7da      	b.n	8011d52 <_free_r+0x26>
 8011d9c:	d902      	bls.n	8011da4 <_free_r+0x78>
 8011d9e:	230c      	movs	r3, #12
 8011da0:	6003      	str	r3, [r0, #0]
 8011da2:	e7d6      	b.n	8011d52 <_free_r+0x26>
 8011da4:	6825      	ldr	r5, [r4, #0]
 8011da6:	1961      	adds	r1, r4, r5
 8011da8:	428b      	cmp	r3, r1
 8011daa:	bf04      	itt	eq
 8011dac:	6819      	ldreq	r1, [r3, #0]
 8011dae:	685b      	ldreq	r3, [r3, #4]
 8011db0:	6063      	str	r3, [r4, #4]
 8011db2:	bf04      	itt	eq
 8011db4:	1949      	addeq	r1, r1, r5
 8011db6:	6021      	streq	r1, [r4, #0]
 8011db8:	6054      	str	r4, [r2, #4]
 8011dba:	e7ca      	b.n	8011d52 <_free_r+0x26>
 8011dbc:	b003      	add	sp, #12
 8011dbe:	bd30      	pop	{r4, r5, pc}
 8011dc0:	2000c5f8 	.word	0x2000c5f8

08011dc4 <__sfputc_r>:
 8011dc4:	6893      	ldr	r3, [r2, #8]
 8011dc6:	3b01      	subs	r3, #1
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	b410      	push	{r4}
 8011dcc:	6093      	str	r3, [r2, #8]
 8011dce:	da08      	bge.n	8011de2 <__sfputc_r+0x1e>
 8011dd0:	6994      	ldr	r4, [r2, #24]
 8011dd2:	42a3      	cmp	r3, r4
 8011dd4:	db01      	blt.n	8011dda <__sfputc_r+0x16>
 8011dd6:	290a      	cmp	r1, #10
 8011dd8:	d103      	bne.n	8011de2 <__sfputc_r+0x1e>
 8011dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dde:	f000 baf1 	b.w	80123c4 <__swbuf_r>
 8011de2:	6813      	ldr	r3, [r2, #0]
 8011de4:	1c58      	adds	r0, r3, #1
 8011de6:	6010      	str	r0, [r2, #0]
 8011de8:	7019      	strb	r1, [r3, #0]
 8011dea:	4608      	mov	r0, r1
 8011dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011df0:	4770      	bx	lr

08011df2 <__sfputs_r>:
 8011df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011df4:	4606      	mov	r6, r0
 8011df6:	460f      	mov	r7, r1
 8011df8:	4614      	mov	r4, r2
 8011dfa:	18d5      	adds	r5, r2, r3
 8011dfc:	42ac      	cmp	r4, r5
 8011dfe:	d101      	bne.n	8011e04 <__sfputs_r+0x12>
 8011e00:	2000      	movs	r0, #0
 8011e02:	e007      	b.n	8011e14 <__sfputs_r+0x22>
 8011e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e08:	463a      	mov	r2, r7
 8011e0a:	4630      	mov	r0, r6
 8011e0c:	f7ff ffda 	bl	8011dc4 <__sfputc_r>
 8011e10:	1c43      	adds	r3, r0, #1
 8011e12:	d1f3      	bne.n	8011dfc <__sfputs_r+0xa>
 8011e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011e18 <_vfiprintf_r>:
 8011e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e1c:	460d      	mov	r5, r1
 8011e1e:	b09d      	sub	sp, #116	; 0x74
 8011e20:	4614      	mov	r4, r2
 8011e22:	4698      	mov	r8, r3
 8011e24:	4606      	mov	r6, r0
 8011e26:	b118      	cbz	r0, 8011e30 <_vfiprintf_r+0x18>
 8011e28:	6983      	ldr	r3, [r0, #24]
 8011e2a:	b90b      	cbnz	r3, 8011e30 <_vfiprintf_r+0x18>
 8011e2c:	f7ff fbb0 	bl	8011590 <__sinit>
 8011e30:	4b89      	ldr	r3, [pc, #548]	; (8012058 <_vfiprintf_r+0x240>)
 8011e32:	429d      	cmp	r5, r3
 8011e34:	d11b      	bne.n	8011e6e <_vfiprintf_r+0x56>
 8011e36:	6875      	ldr	r5, [r6, #4]
 8011e38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e3a:	07d9      	lsls	r1, r3, #31
 8011e3c:	d405      	bmi.n	8011e4a <_vfiprintf_r+0x32>
 8011e3e:	89ab      	ldrh	r3, [r5, #12]
 8011e40:	059a      	lsls	r2, r3, #22
 8011e42:	d402      	bmi.n	8011e4a <_vfiprintf_r+0x32>
 8011e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e46:	f7ff fc66 	bl	8011716 <__retarget_lock_acquire_recursive>
 8011e4a:	89ab      	ldrh	r3, [r5, #12]
 8011e4c:	071b      	lsls	r3, r3, #28
 8011e4e:	d501      	bpl.n	8011e54 <_vfiprintf_r+0x3c>
 8011e50:	692b      	ldr	r3, [r5, #16]
 8011e52:	b9eb      	cbnz	r3, 8011e90 <_vfiprintf_r+0x78>
 8011e54:	4629      	mov	r1, r5
 8011e56:	4630      	mov	r0, r6
 8011e58:	f000 fb06 	bl	8012468 <__swsetup_r>
 8011e5c:	b1c0      	cbz	r0, 8011e90 <_vfiprintf_r+0x78>
 8011e5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e60:	07dc      	lsls	r4, r3, #31
 8011e62:	d50e      	bpl.n	8011e82 <_vfiprintf_r+0x6a>
 8011e64:	f04f 30ff 	mov.w	r0, #4294967295
 8011e68:	b01d      	add	sp, #116	; 0x74
 8011e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e6e:	4b7b      	ldr	r3, [pc, #492]	; (801205c <_vfiprintf_r+0x244>)
 8011e70:	429d      	cmp	r5, r3
 8011e72:	d101      	bne.n	8011e78 <_vfiprintf_r+0x60>
 8011e74:	68b5      	ldr	r5, [r6, #8]
 8011e76:	e7df      	b.n	8011e38 <_vfiprintf_r+0x20>
 8011e78:	4b79      	ldr	r3, [pc, #484]	; (8012060 <_vfiprintf_r+0x248>)
 8011e7a:	429d      	cmp	r5, r3
 8011e7c:	bf08      	it	eq
 8011e7e:	68f5      	ldreq	r5, [r6, #12]
 8011e80:	e7da      	b.n	8011e38 <_vfiprintf_r+0x20>
 8011e82:	89ab      	ldrh	r3, [r5, #12]
 8011e84:	0598      	lsls	r0, r3, #22
 8011e86:	d4ed      	bmi.n	8011e64 <_vfiprintf_r+0x4c>
 8011e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e8a:	f7ff fc45 	bl	8011718 <__retarget_lock_release_recursive>
 8011e8e:	e7e9      	b.n	8011e64 <_vfiprintf_r+0x4c>
 8011e90:	2300      	movs	r3, #0
 8011e92:	9309      	str	r3, [sp, #36]	; 0x24
 8011e94:	2320      	movs	r3, #32
 8011e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e9e:	2330      	movs	r3, #48	; 0x30
 8011ea0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012064 <_vfiprintf_r+0x24c>
 8011ea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ea8:	f04f 0901 	mov.w	r9, #1
 8011eac:	4623      	mov	r3, r4
 8011eae:	469a      	mov	sl, r3
 8011eb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011eb4:	b10a      	cbz	r2, 8011eba <_vfiprintf_r+0xa2>
 8011eb6:	2a25      	cmp	r2, #37	; 0x25
 8011eb8:	d1f9      	bne.n	8011eae <_vfiprintf_r+0x96>
 8011eba:	ebba 0b04 	subs.w	fp, sl, r4
 8011ebe:	d00b      	beq.n	8011ed8 <_vfiprintf_r+0xc0>
 8011ec0:	465b      	mov	r3, fp
 8011ec2:	4622      	mov	r2, r4
 8011ec4:	4629      	mov	r1, r5
 8011ec6:	4630      	mov	r0, r6
 8011ec8:	f7ff ff93 	bl	8011df2 <__sfputs_r>
 8011ecc:	3001      	adds	r0, #1
 8011ece:	f000 80aa 	beq.w	8012026 <_vfiprintf_r+0x20e>
 8011ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ed4:	445a      	add	r2, fp
 8011ed6:	9209      	str	r2, [sp, #36]	; 0x24
 8011ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	f000 80a2 	beq.w	8012026 <_vfiprintf_r+0x20e>
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011eec:	f10a 0a01 	add.w	sl, sl, #1
 8011ef0:	9304      	str	r3, [sp, #16]
 8011ef2:	9307      	str	r3, [sp, #28]
 8011ef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8011efa:	4654      	mov	r4, sl
 8011efc:	2205      	movs	r2, #5
 8011efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f02:	4858      	ldr	r0, [pc, #352]	; (8012064 <_vfiprintf_r+0x24c>)
 8011f04:	f7ee f984 	bl	8000210 <memchr>
 8011f08:	9a04      	ldr	r2, [sp, #16]
 8011f0a:	b9d8      	cbnz	r0, 8011f44 <_vfiprintf_r+0x12c>
 8011f0c:	06d1      	lsls	r1, r2, #27
 8011f0e:	bf44      	itt	mi
 8011f10:	2320      	movmi	r3, #32
 8011f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f16:	0713      	lsls	r3, r2, #28
 8011f18:	bf44      	itt	mi
 8011f1a:	232b      	movmi	r3, #43	; 0x2b
 8011f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f20:	f89a 3000 	ldrb.w	r3, [sl]
 8011f24:	2b2a      	cmp	r3, #42	; 0x2a
 8011f26:	d015      	beq.n	8011f54 <_vfiprintf_r+0x13c>
 8011f28:	9a07      	ldr	r2, [sp, #28]
 8011f2a:	4654      	mov	r4, sl
 8011f2c:	2000      	movs	r0, #0
 8011f2e:	f04f 0c0a 	mov.w	ip, #10
 8011f32:	4621      	mov	r1, r4
 8011f34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f38:	3b30      	subs	r3, #48	; 0x30
 8011f3a:	2b09      	cmp	r3, #9
 8011f3c:	d94e      	bls.n	8011fdc <_vfiprintf_r+0x1c4>
 8011f3e:	b1b0      	cbz	r0, 8011f6e <_vfiprintf_r+0x156>
 8011f40:	9207      	str	r2, [sp, #28]
 8011f42:	e014      	b.n	8011f6e <_vfiprintf_r+0x156>
 8011f44:	eba0 0308 	sub.w	r3, r0, r8
 8011f48:	fa09 f303 	lsl.w	r3, r9, r3
 8011f4c:	4313      	orrs	r3, r2
 8011f4e:	9304      	str	r3, [sp, #16]
 8011f50:	46a2      	mov	sl, r4
 8011f52:	e7d2      	b.n	8011efa <_vfiprintf_r+0xe2>
 8011f54:	9b03      	ldr	r3, [sp, #12]
 8011f56:	1d19      	adds	r1, r3, #4
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	9103      	str	r1, [sp, #12]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	bfbb      	ittet	lt
 8011f60:	425b      	neglt	r3, r3
 8011f62:	f042 0202 	orrlt.w	r2, r2, #2
 8011f66:	9307      	strge	r3, [sp, #28]
 8011f68:	9307      	strlt	r3, [sp, #28]
 8011f6a:	bfb8      	it	lt
 8011f6c:	9204      	strlt	r2, [sp, #16]
 8011f6e:	7823      	ldrb	r3, [r4, #0]
 8011f70:	2b2e      	cmp	r3, #46	; 0x2e
 8011f72:	d10c      	bne.n	8011f8e <_vfiprintf_r+0x176>
 8011f74:	7863      	ldrb	r3, [r4, #1]
 8011f76:	2b2a      	cmp	r3, #42	; 0x2a
 8011f78:	d135      	bne.n	8011fe6 <_vfiprintf_r+0x1ce>
 8011f7a:	9b03      	ldr	r3, [sp, #12]
 8011f7c:	1d1a      	adds	r2, r3, #4
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	9203      	str	r2, [sp, #12]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	bfb8      	it	lt
 8011f86:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f8a:	3402      	adds	r4, #2
 8011f8c:	9305      	str	r3, [sp, #20]
 8011f8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012074 <_vfiprintf_r+0x25c>
 8011f92:	7821      	ldrb	r1, [r4, #0]
 8011f94:	2203      	movs	r2, #3
 8011f96:	4650      	mov	r0, sl
 8011f98:	f7ee f93a 	bl	8000210 <memchr>
 8011f9c:	b140      	cbz	r0, 8011fb0 <_vfiprintf_r+0x198>
 8011f9e:	2340      	movs	r3, #64	; 0x40
 8011fa0:	eba0 000a 	sub.w	r0, r0, sl
 8011fa4:	fa03 f000 	lsl.w	r0, r3, r0
 8011fa8:	9b04      	ldr	r3, [sp, #16]
 8011faa:	4303      	orrs	r3, r0
 8011fac:	3401      	adds	r4, #1
 8011fae:	9304      	str	r3, [sp, #16]
 8011fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fb4:	482c      	ldr	r0, [pc, #176]	; (8012068 <_vfiprintf_r+0x250>)
 8011fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011fba:	2206      	movs	r2, #6
 8011fbc:	f7ee f928 	bl	8000210 <memchr>
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	d03f      	beq.n	8012044 <_vfiprintf_r+0x22c>
 8011fc4:	4b29      	ldr	r3, [pc, #164]	; (801206c <_vfiprintf_r+0x254>)
 8011fc6:	bb1b      	cbnz	r3, 8012010 <_vfiprintf_r+0x1f8>
 8011fc8:	9b03      	ldr	r3, [sp, #12]
 8011fca:	3307      	adds	r3, #7
 8011fcc:	f023 0307 	bic.w	r3, r3, #7
 8011fd0:	3308      	adds	r3, #8
 8011fd2:	9303      	str	r3, [sp, #12]
 8011fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fd6:	443b      	add	r3, r7
 8011fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8011fda:	e767      	b.n	8011eac <_vfiprintf_r+0x94>
 8011fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fe0:	460c      	mov	r4, r1
 8011fe2:	2001      	movs	r0, #1
 8011fe4:	e7a5      	b.n	8011f32 <_vfiprintf_r+0x11a>
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	3401      	adds	r4, #1
 8011fea:	9305      	str	r3, [sp, #20]
 8011fec:	4619      	mov	r1, r3
 8011fee:	f04f 0c0a 	mov.w	ip, #10
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ff8:	3a30      	subs	r2, #48	; 0x30
 8011ffa:	2a09      	cmp	r2, #9
 8011ffc:	d903      	bls.n	8012006 <_vfiprintf_r+0x1ee>
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d0c5      	beq.n	8011f8e <_vfiprintf_r+0x176>
 8012002:	9105      	str	r1, [sp, #20]
 8012004:	e7c3      	b.n	8011f8e <_vfiprintf_r+0x176>
 8012006:	fb0c 2101 	mla	r1, ip, r1, r2
 801200a:	4604      	mov	r4, r0
 801200c:	2301      	movs	r3, #1
 801200e:	e7f0      	b.n	8011ff2 <_vfiprintf_r+0x1da>
 8012010:	ab03      	add	r3, sp, #12
 8012012:	9300      	str	r3, [sp, #0]
 8012014:	462a      	mov	r2, r5
 8012016:	4b16      	ldr	r3, [pc, #88]	; (8012070 <_vfiprintf_r+0x258>)
 8012018:	a904      	add	r1, sp, #16
 801201a:	4630      	mov	r0, r6
 801201c:	f3af 8000 	nop.w
 8012020:	4607      	mov	r7, r0
 8012022:	1c78      	adds	r0, r7, #1
 8012024:	d1d6      	bne.n	8011fd4 <_vfiprintf_r+0x1bc>
 8012026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012028:	07d9      	lsls	r1, r3, #31
 801202a:	d405      	bmi.n	8012038 <_vfiprintf_r+0x220>
 801202c:	89ab      	ldrh	r3, [r5, #12]
 801202e:	059a      	lsls	r2, r3, #22
 8012030:	d402      	bmi.n	8012038 <_vfiprintf_r+0x220>
 8012032:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012034:	f7ff fb70 	bl	8011718 <__retarget_lock_release_recursive>
 8012038:	89ab      	ldrh	r3, [r5, #12]
 801203a:	065b      	lsls	r3, r3, #25
 801203c:	f53f af12 	bmi.w	8011e64 <_vfiprintf_r+0x4c>
 8012040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012042:	e711      	b.n	8011e68 <_vfiprintf_r+0x50>
 8012044:	ab03      	add	r3, sp, #12
 8012046:	9300      	str	r3, [sp, #0]
 8012048:	462a      	mov	r2, r5
 801204a:	4b09      	ldr	r3, [pc, #36]	; (8012070 <_vfiprintf_r+0x258>)
 801204c:	a904      	add	r1, sp, #16
 801204e:	4630      	mov	r0, r6
 8012050:	f000 f880 	bl	8012154 <_printf_i>
 8012054:	e7e4      	b.n	8012020 <_vfiprintf_r+0x208>
 8012056:	bf00      	nop
 8012058:	080153c4 	.word	0x080153c4
 801205c:	080153e4 	.word	0x080153e4
 8012060:	080153a4 	.word	0x080153a4
 8012064:	080154b6 	.word	0x080154b6
 8012068:	080154c0 	.word	0x080154c0
 801206c:	00000000 	.word	0x00000000
 8012070:	08011df3 	.word	0x08011df3
 8012074:	080154bc 	.word	0x080154bc

08012078 <_printf_common>:
 8012078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801207c:	4616      	mov	r6, r2
 801207e:	4699      	mov	r9, r3
 8012080:	688a      	ldr	r2, [r1, #8]
 8012082:	690b      	ldr	r3, [r1, #16]
 8012084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012088:	4293      	cmp	r3, r2
 801208a:	bfb8      	it	lt
 801208c:	4613      	movlt	r3, r2
 801208e:	6033      	str	r3, [r6, #0]
 8012090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012094:	4607      	mov	r7, r0
 8012096:	460c      	mov	r4, r1
 8012098:	b10a      	cbz	r2, 801209e <_printf_common+0x26>
 801209a:	3301      	adds	r3, #1
 801209c:	6033      	str	r3, [r6, #0]
 801209e:	6823      	ldr	r3, [r4, #0]
 80120a0:	0699      	lsls	r1, r3, #26
 80120a2:	bf42      	ittt	mi
 80120a4:	6833      	ldrmi	r3, [r6, #0]
 80120a6:	3302      	addmi	r3, #2
 80120a8:	6033      	strmi	r3, [r6, #0]
 80120aa:	6825      	ldr	r5, [r4, #0]
 80120ac:	f015 0506 	ands.w	r5, r5, #6
 80120b0:	d106      	bne.n	80120c0 <_printf_common+0x48>
 80120b2:	f104 0a19 	add.w	sl, r4, #25
 80120b6:	68e3      	ldr	r3, [r4, #12]
 80120b8:	6832      	ldr	r2, [r6, #0]
 80120ba:	1a9b      	subs	r3, r3, r2
 80120bc:	42ab      	cmp	r3, r5
 80120be:	dc26      	bgt.n	801210e <_printf_common+0x96>
 80120c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80120c4:	1e13      	subs	r3, r2, #0
 80120c6:	6822      	ldr	r2, [r4, #0]
 80120c8:	bf18      	it	ne
 80120ca:	2301      	movne	r3, #1
 80120cc:	0692      	lsls	r2, r2, #26
 80120ce:	d42b      	bmi.n	8012128 <_printf_common+0xb0>
 80120d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80120d4:	4649      	mov	r1, r9
 80120d6:	4638      	mov	r0, r7
 80120d8:	47c0      	blx	r8
 80120da:	3001      	adds	r0, #1
 80120dc:	d01e      	beq.n	801211c <_printf_common+0xa4>
 80120de:	6823      	ldr	r3, [r4, #0]
 80120e0:	68e5      	ldr	r5, [r4, #12]
 80120e2:	6832      	ldr	r2, [r6, #0]
 80120e4:	f003 0306 	and.w	r3, r3, #6
 80120e8:	2b04      	cmp	r3, #4
 80120ea:	bf08      	it	eq
 80120ec:	1aad      	subeq	r5, r5, r2
 80120ee:	68a3      	ldr	r3, [r4, #8]
 80120f0:	6922      	ldr	r2, [r4, #16]
 80120f2:	bf0c      	ite	eq
 80120f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80120f8:	2500      	movne	r5, #0
 80120fa:	4293      	cmp	r3, r2
 80120fc:	bfc4      	itt	gt
 80120fe:	1a9b      	subgt	r3, r3, r2
 8012100:	18ed      	addgt	r5, r5, r3
 8012102:	2600      	movs	r6, #0
 8012104:	341a      	adds	r4, #26
 8012106:	42b5      	cmp	r5, r6
 8012108:	d11a      	bne.n	8012140 <_printf_common+0xc8>
 801210a:	2000      	movs	r0, #0
 801210c:	e008      	b.n	8012120 <_printf_common+0xa8>
 801210e:	2301      	movs	r3, #1
 8012110:	4652      	mov	r2, sl
 8012112:	4649      	mov	r1, r9
 8012114:	4638      	mov	r0, r7
 8012116:	47c0      	blx	r8
 8012118:	3001      	adds	r0, #1
 801211a:	d103      	bne.n	8012124 <_printf_common+0xac>
 801211c:	f04f 30ff 	mov.w	r0, #4294967295
 8012120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012124:	3501      	adds	r5, #1
 8012126:	e7c6      	b.n	80120b6 <_printf_common+0x3e>
 8012128:	18e1      	adds	r1, r4, r3
 801212a:	1c5a      	adds	r2, r3, #1
 801212c:	2030      	movs	r0, #48	; 0x30
 801212e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012132:	4422      	add	r2, r4
 8012134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801213c:	3302      	adds	r3, #2
 801213e:	e7c7      	b.n	80120d0 <_printf_common+0x58>
 8012140:	2301      	movs	r3, #1
 8012142:	4622      	mov	r2, r4
 8012144:	4649      	mov	r1, r9
 8012146:	4638      	mov	r0, r7
 8012148:	47c0      	blx	r8
 801214a:	3001      	adds	r0, #1
 801214c:	d0e6      	beq.n	801211c <_printf_common+0xa4>
 801214e:	3601      	adds	r6, #1
 8012150:	e7d9      	b.n	8012106 <_printf_common+0x8e>
	...

08012154 <_printf_i>:
 8012154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012158:	7e0f      	ldrb	r7, [r1, #24]
 801215a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801215c:	2f78      	cmp	r7, #120	; 0x78
 801215e:	4691      	mov	r9, r2
 8012160:	4680      	mov	r8, r0
 8012162:	460c      	mov	r4, r1
 8012164:	469a      	mov	sl, r3
 8012166:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801216a:	d807      	bhi.n	801217c <_printf_i+0x28>
 801216c:	2f62      	cmp	r7, #98	; 0x62
 801216e:	d80a      	bhi.n	8012186 <_printf_i+0x32>
 8012170:	2f00      	cmp	r7, #0
 8012172:	f000 80d8 	beq.w	8012326 <_printf_i+0x1d2>
 8012176:	2f58      	cmp	r7, #88	; 0x58
 8012178:	f000 80a3 	beq.w	80122c2 <_printf_i+0x16e>
 801217c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012184:	e03a      	b.n	80121fc <_printf_i+0xa8>
 8012186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801218a:	2b15      	cmp	r3, #21
 801218c:	d8f6      	bhi.n	801217c <_printf_i+0x28>
 801218e:	a101      	add	r1, pc, #4	; (adr r1, 8012194 <_printf_i+0x40>)
 8012190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012194:	080121ed 	.word	0x080121ed
 8012198:	08012201 	.word	0x08012201
 801219c:	0801217d 	.word	0x0801217d
 80121a0:	0801217d 	.word	0x0801217d
 80121a4:	0801217d 	.word	0x0801217d
 80121a8:	0801217d 	.word	0x0801217d
 80121ac:	08012201 	.word	0x08012201
 80121b0:	0801217d 	.word	0x0801217d
 80121b4:	0801217d 	.word	0x0801217d
 80121b8:	0801217d 	.word	0x0801217d
 80121bc:	0801217d 	.word	0x0801217d
 80121c0:	0801230d 	.word	0x0801230d
 80121c4:	08012231 	.word	0x08012231
 80121c8:	080122ef 	.word	0x080122ef
 80121cc:	0801217d 	.word	0x0801217d
 80121d0:	0801217d 	.word	0x0801217d
 80121d4:	0801232f 	.word	0x0801232f
 80121d8:	0801217d 	.word	0x0801217d
 80121dc:	08012231 	.word	0x08012231
 80121e0:	0801217d 	.word	0x0801217d
 80121e4:	0801217d 	.word	0x0801217d
 80121e8:	080122f7 	.word	0x080122f7
 80121ec:	682b      	ldr	r3, [r5, #0]
 80121ee:	1d1a      	adds	r2, r3, #4
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	602a      	str	r2, [r5, #0]
 80121f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80121f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80121fc:	2301      	movs	r3, #1
 80121fe:	e0a3      	b.n	8012348 <_printf_i+0x1f4>
 8012200:	6820      	ldr	r0, [r4, #0]
 8012202:	6829      	ldr	r1, [r5, #0]
 8012204:	0606      	lsls	r6, r0, #24
 8012206:	f101 0304 	add.w	r3, r1, #4
 801220a:	d50a      	bpl.n	8012222 <_printf_i+0xce>
 801220c:	680e      	ldr	r6, [r1, #0]
 801220e:	602b      	str	r3, [r5, #0]
 8012210:	2e00      	cmp	r6, #0
 8012212:	da03      	bge.n	801221c <_printf_i+0xc8>
 8012214:	232d      	movs	r3, #45	; 0x2d
 8012216:	4276      	negs	r6, r6
 8012218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801221c:	485e      	ldr	r0, [pc, #376]	; (8012398 <_printf_i+0x244>)
 801221e:	230a      	movs	r3, #10
 8012220:	e019      	b.n	8012256 <_printf_i+0x102>
 8012222:	680e      	ldr	r6, [r1, #0]
 8012224:	602b      	str	r3, [r5, #0]
 8012226:	f010 0f40 	tst.w	r0, #64	; 0x40
 801222a:	bf18      	it	ne
 801222c:	b236      	sxthne	r6, r6
 801222e:	e7ef      	b.n	8012210 <_printf_i+0xbc>
 8012230:	682b      	ldr	r3, [r5, #0]
 8012232:	6820      	ldr	r0, [r4, #0]
 8012234:	1d19      	adds	r1, r3, #4
 8012236:	6029      	str	r1, [r5, #0]
 8012238:	0601      	lsls	r1, r0, #24
 801223a:	d501      	bpl.n	8012240 <_printf_i+0xec>
 801223c:	681e      	ldr	r6, [r3, #0]
 801223e:	e002      	b.n	8012246 <_printf_i+0xf2>
 8012240:	0646      	lsls	r6, r0, #25
 8012242:	d5fb      	bpl.n	801223c <_printf_i+0xe8>
 8012244:	881e      	ldrh	r6, [r3, #0]
 8012246:	4854      	ldr	r0, [pc, #336]	; (8012398 <_printf_i+0x244>)
 8012248:	2f6f      	cmp	r7, #111	; 0x6f
 801224a:	bf0c      	ite	eq
 801224c:	2308      	moveq	r3, #8
 801224e:	230a      	movne	r3, #10
 8012250:	2100      	movs	r1, #0
 8012252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012256:	6865      	ldr	r5, [r4, #4]
 8012258:	60a5      	str	r5, [r4, #8]
 801225a:	2d00      	cmp	r5, #0
 801225c:	bfa2      	ittt	ge
 801225e:	6821      	ldrge	r1, [r4, #0]
 8012260:	f021 0104 	bicge.w	r1, r1, #4
 8012264:	6021      	strge	r1, [r4, #0]
 8012266:	b90e      	cbnz	r6, 801226c <_printf_i+0x118>
 8012268:	2d00      	cmp	r5, #0
 801226a:	d04d      	beq.n	8012308 <_printf_i+0x1b4>
 801226c:	4615      	mov	r5, r2
 801226e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012272:	fb03 6711 	mls	r7, r3, r1, r6
 8012276:	5dc7      	ldrb	r7, [r0, r7]
 8012278:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801227c:	4637      	mov	r7, r6
 801227e:	42bb      	cmp	r3, r7
 8012280:	460e      	mov	r6, r1
 8012282:	d9f4      	bls.n	801226e <_printf_i+0x11a>
 8012284:	2b08      	cmp	r3, #8
 8012286:	d10b      	bne.n	80122a0 <_printf_i+0x14c>
 8012288:	6823      	ldr	r3, [r4, #0]
 801228a:	07de      	lsls	r6, r3, #31
 801228c:	d508      	bpl.n	80122a0 <_printf_i+0x14c>
 801228e:	6923      	ldr	r3, [r4, #16]
 8012290:	6861      	ldr	r1, [r4, #4]
 8012292:	4299      	cmp	r1, r3
 8012294:	bfde      	ittt	le
 8012296:	2330      	movle	r3, #48	; 0x30
 8012298:	f805 3c01 	strble.w	r3, [r5, #-1]
 801229c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80122a0:	1b52      	subs	r2, r2, r5
 80122a2:	6122      	str	r2, [r4, #16]
 80122a4:	f8cd a000 	str.w	sl, [sp]
 80122a8:	464b      	mov	r3, r9
 80122aa:	aa03      	add	r2, sp, #12
 80122ac:	4621      	mov	r1, r4
 80122ae:	4640      	mov	r0, r8
 80122b0:	f7ff fee2 	bl	8012078 <_printf_common>
 80122b4:	3001      	adds	r0, #1
 80122b6:	d14c      	bne.n	8012352 <_printf_i+0x1fe>
 80122b8:	f04f 30ff 	mov.w	r0, #4294967295
 80122bc:	b004      	add	sp, #16
 80122be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122c2:	4835      	ldr	r0, [pc, #212]	; (8012398 <_printf_i+0x244>)
 80122c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80122c8:	6829      	ldr	r1, [r5, #0]
 80122ca:	6823      	ldr	r3, [r4, #0]
 80122cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80122d0:	6029      	str	r1, [r5, #0]
 80122d2:	061d      	lsls	r5, r3, #24
 80122d4:	d514      	bpl.n	8012300 <_printf_i+0x1ac>
 80122d6:	07df      	lsls	r7, r3, #31
 80122d8:	bf44      	itt	mi
 80122da:	f043 0320 	orrmi.w	r3, r3, #32
 80122de:	6023      	strmi	r3, [r4, #0]
 80122e0:	b91e      	cbnz	r6, 80122ea <_printf_i+0x196>
 80122e2:	6823      	ldr	r3, [r4, #0]
 80122e4:	f023 0320 	bic.w	r3, r3, #32
 80122e8:	6023      	str	r3, [r4, #0]
 80122ea:	2310      	movs	r3, #16
 80122ec:	e7b0      	b.n	8012250 <_printf_i+0xfc>
 80122ee:	6823      	ldr	r3, [r4, #0]
 80122f0:	f043 0320 	orr.w	r3, r3, #32
 80122f4:	6023      	str	r3, [r4, #0]
 80122f6:	2378      	movs	r3, #120	; 0x78
 80122f8:	4828      	ldr	r0, [pc, #160]	; (801239c <_printf_i+0x248>)
 80122fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80122fe:	e7e3      	b.n	80122c8 <_printf_i+0x174>
 8012300:	0659      	lsls	r1, r3, #25
 8012302:	bf48      	it	mi
 8012304:	b2b6      	uxthmi	r6, r6
 8012306:	e7e6      	b.n	80122d6 <_printf_i+0x182>
 8012308:	4615      	mov	r5, r2
 801230a:	e7bb      	b.n	8012284 <_printf_i+0x130>
 801230c:	682b      	ldr	r3, [r5, #0]
 801230e:	6826      	ldr	r6, [r4, #0]
 8012310:	6961      	ldr	r1, [r4, #20]
 8012312:	1d18      	adds	r0, r3, #4
 8012314:	6028      	str	r0, [r5, #0]
 8012316:	0635      	lsls	r5, r6, #24
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	d501      	bpl.n	8012320 <_printf_i+0x1cc>
 801231c:	6019      	str	r1, [r3, #0]
 801231e:	e002      	b.n	8012326 <_printf_i+0x1d2>
 8012320:	0670      	lsls	r0, r6, #25
 8012322:	d5fb      	bpl.n	801231c <_printf_i+0x1c8>
 8012324:	8019      	strh	r1, [r3, #0]
 8012326:	2300      	movs	r3, #0
 8012328:	6123      	str	r3, [r4, #16]
 801232a:	4615      	mov	r5, r2
 801232c:	e7ba      	b.n	80122a4 <_printf_i+0x150>
 801232e:	682b      	ldr	r3, [r5, #0]
 8012330:	1d1a      	adds	r2, r3, #4
 8012332:	602a      	str	r2, [r5, #0]
 8012334:	681d      	ldr	r5, [r3, #0]
 8012336:	6862      	ldr	r2, [r4, #4]
 8012338:	2100      	movs	r1, #0
 801233a:	4628      	mov	r0, r5
 801233c:	f7ed ff68 	bl	8000210 <memchr>
 8012340:	b108      	cbz	r0, 8012346 <_printf_i+0x1f2>
 8012342:	1b40      	subs	r0, r0, r5
 8012344:	6060      	str	r0, [r4, #4]
 8012346:	6863      	ldr	r3, [r4, #4]
 8012348:	6123      	str	r3, [r4, #16]
 801234a:	2300      	movs	r3, #0
 801234c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012350:	e7a8      	b.n	80122a4 <_printf_i+0x150>
 8012352:	6923      	ldr	r3, [r4, #16]
 8012354:	462a      	mov	r2, r5
 8012356:	4649      	mov	r1, r9
 8012358:	4640      	mov	r0, r8
 801235a:	47d0      	blx	sl
 801235c:	3001      	adds	r0, #1
 801235e:	d0ab      	beq.n	80122b8 <_printf_i+0x164>
 8012360:	6823      	ldr	r3, [r4, #0]
 8012362:	079b      	lsls	r3, r3, #30
 8012364:	d413      	bmi.n	801238e <_printf_i+0x23a>
 8012366:	68e0      	ldr	r0, [r4, #12]
 8012368:	9b03      	ldr	r3, [sp, #12]
 801236a:	4298      	cmp	r0, r3
 801236c:	bfb8      	it	lt
 801236e:	4618      	movlt	r0, r3
 8012370:	e7a4      	b.n	80122bc <_printf_i+0x168>
 8012372:	2301      	movs	r3, #1
 8012374:	4632      	mov	r2, r6
 8012376:	4649      	mov	r1, r9
 8012378:	4640      	mov	r0, r8
 801237a:	47d0      	blx	sl
 801237c:	3001      	adds	r0, #1
 801237e:	d09b      	beq.n	80122b8 <_printf_i+0x164>
 8012380:	3501      	adds	r5, #1
 8012382:	68e3      	ldr	r3, [r4, #12]
 8012384:	9903      	ldr	r1, [sp, #12]
 8012386:	1a5b      	subs	r3, r3, r1
 8012388:	42ab      	cmp	r3, r5
 801238a:	dcf2      	bgt.n	8012372 <_printf_i+0x21e>
 801238c:	e7eb      	b.n	8012366 <_printf_i+0x212>
 801238e:	2500      	movs	r5, #0
 8012390:	f104 0619 	add.w	r6, r4, #25
 8012394:	e7f5      	b.n	8012382 <_printf_i+0x22e>
 8012396:	bf00      	nop
 8012398:	080154c7 	.word	0x080154c7
 801239c:	080154d8 	.word	0x080154d8

080123a0 <_read_r>:
 80123a0:	b538      	push	{r3, r4, r5, lr}
 80123a2:	4d07      	ldr	r5, [pc, #28]	; (80123c0 <_read_r+0x20>)
 80123a4:	4604      	mov	r4, r0
 80123a6:	4608      	mov	r0, r1
 80123a8:	4611      	mov	r1, r2
 80123aa:	2200      	movs	r2, #0
 80123ac:	602a      	str	r2, [r5, #0]
 80123ae:	461a      	mov	r2, r3
 80123b0:	f7ee faf2 	bl	8000998 <_read>
 80123b4:	1c43      	adds	r3, r0, #1
 80123b6:	d102      	bne.n	80123be <_read_r+0x1e>
 80123b8:	682b      	ldr	r3, [r5, #0]
 80123ba:	b103      	cbz	r3, 80123be <_read_r+0x1e>
 80123bc:	6023      	str	r3, [r4, #0]
 80123be:	bd38      	pop	{r3, r4, r5, pc}
 80123c0:	2000c600 	.word	0x2000c600

080123c4 <__swbuf_r>:
 80123c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123c6:	460e      	mov	r6, r1
 80123c8:	4614      	mov	r4, r2
 80123ca:	4605      	mov	r5, r0
 80123cc:	b118      	cbz	r0, 80123d6 <__swbuf_r+0x12>
 80123ce:	6983      	ldr	r3, [r0, #24]
 80123d0:	b90b      	cbnz	r3, 80123d6 <__swbuf_r+0x12>
 80123d2:	f7ff f8dd 	bl	8011590 <__sinit>
 80123d6:	4b21      	ldr	r3, [pc, #132]	; (801245c <__swbuf_r+0x98>)
 80123d8:	429c      	cmp	r4, r3
 80123da:	d12b      	bne.n	8012434 <__swbuf_r+0x70>
 80123dc:	686c      	ldr	r4, [r5, #4]
 80123de:	69a3      	ldr	r3, [r4, #24]
 80123e0:	60a3      	str	r3, [r4, #8]
 80123e2:	89a3      	ldrh	r3, [r4, #12]
 80123e4:	071a      	lsls	r2, r3, #28
 80123e6:	d52f      	bpl.n	8012448 <__swbuf_r+0x84>
 80123e8:	6923      	ldr	r3, [r4, #16]
 80123ea:	b36b      	cbz	r3, 8012448 <__swbuf_r+0x84>
 80123ec:	6923      	ldr	r3, [r4, #16]
 80123ee:	6820      	ldr	r0, [r4, #0]
 80123f0:	1ac0      	subs	r0, r0, r3
 80123f2:	6963      	ldr	r3, [r4, #20]
 80123f4:	b2f6      	uxtb	r6, r6
 80123f6:	4283      	cmp	r3, r0
 80123f8:	4637      	mov	r7, r6
 80123fa:	dc04      	bgt.n	8012406 <__swbuf_r+0x42>
 80123fc:	4621      	mov	r1, r4
 80123fe:	4628      	mov	r0, r5
 8012400:	f7ff fc20 	bl	8011c44 <_fflush_r>
 8012404:	bb30      	cbnz	r0, 8012454 <__swbuf_r+0x90>
 8012406:	68a3      	ldr	r3, [r4, #8]
 8012408:	3b01      	subs	r3, #1
 801240a:	60a3      	str	r3, [r4, #8]
 801240c:	6823      	ldr	r3, [r4, #0]
 801240e:	1c5a      	adds	r2, r3, #1
 8012410:	6022      	str	r2, [r4, #0]
 8012412:	701e      	strb	r6, [r3, #0]
 8012414:	6963      	ldr	r3, [r4, #20]
 8012416:	3001      	adds	r0, #1
 8012418:	4283      	cmp	r3, r0
 801241a:	d004      	beq.n	8012426 <__swbuf_r+0x62>
 801241c:	89a3      	ldrh	r3, [r4, #12]
 801241e:	07db      	lsls	r3, r3, #31
 8012420:	d506      	bpl.n	8012430 <__swbuf_r+0x6c>
 8012422:	2e0a      	cmp	r6, #10
 8012424:	d104      	bne.n	8012430 <__swbuf_r+0x6c>
 8012426:	4621      	mov	r1, r4
 8012428:	4628      	mov	r0, r5
 801242a:	f7ff fc0b 	bl	8011c44 <_fflush_r>
 801242e:	b988      	cbnz	r0, 8012454 <__swbuf_r+0x90>
 8012430:	4638      	mov	r0, r7
 8012432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012434:	4b0a      	ldr	r3, [pc, #40]	; (8012460 <__swbuf_r+0x9c>)
 8012436:	429c      	cmp	r4, r3
 8012438:	d101      	bne.n	801243e <__swbuf_r+0x7a>
 801243a:	68ac      	ldr	r4, [r5, #8]
 801243c:	e7cf      	b.n	80123de <__swbuf_r+0x1a>
 801243e:	4b09      	ldr	r3, [pc, #36]	; (8012464 <__swbuf_r+0xa0>)
 8012440:	429c      	cmp	r4, r3
 8012442:	bf08      	it	eq
 8012444:	68ec      	ldreq	r4, [r5, #12]
 8012446:	e7ca      	b.n	80123de <__swbuf_r+0x1a>
 8012448:	4621      	mov	r1, r4
 801244a:	4628      	mov	r0, r5
 801244c:	f000 f80c 	bl	8012468 <__swsetup_r>
 8012450:	2800      	cmp	r0, #0
 8012452:	d0cb      	beq.n	80123ec <__swbuf_r+0x28>
 8012454:	f04f 37ff 	mov.w	r7, #4294967295
 8012458:	e7ea      	b.n	8012430 <__swbuf_r+0x6c>
 801245a:	bf00      	nop
 801245c:	080153c4 	.word	0x080153c4
 8012460:	080153e4 	.word	0x080153e4
 8012464:	080153a4 	.word	0x080153a4

08012468 <__swsetup_r>:
 8012468:	4b32      	ldr	r3, [pc, #200]	; (8012534 <__swsetup_r+0xcc>)
 801246a:	b570      	push	{r4, r5, r6, lr}
 801246c:	681d      	ldr	r5, [r3, #0]
 801246e:	4606      	mov	r6, r0
 8012470:	460c      	mov	r4, r1
 8012472:	b125      	cbz	r5, 801247e <__swsetup_r+0x16>
 8012474:	69ab      	ldr	r3, [r5, #24]
 8012476:	b913      	cbnz	r3, 801247e <__swsetup_r+0x16>
 8012478:	4628      	mov	r0, r5
 801247a:	f7ff f889 	bl	8011590 <__sinit>
 801247e:	4b2e      	ldr	r3, [pc, #184]	; (8012538 <__swsetup_r+0xd0>)
 8012480:	429c      	cmp	r4, r3
 8012482:	d10f      	bne.n	80124a4 <__swsetup_r+0x3c>
 8012484:	686c      	ldr	r4, [r5, #4]
 8012486:	89a3      	ldrh	r3, [r4, #12]
 8012488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801248c:	0719      	lsls	r1, r3, #28
 801248e:	d42c      	bmi.n	80124ea <__swsetup_r+0x82>
 8012490:	06dd      	lsls	r5, r3, #27
 8012492:	d411      	bmi.n	80124b8 <__swsetup_r+0x50>
 8012494:	2309      	movs	r3, #9
 8012496:	6033      	str	r3, [r6, #0]
 8012498:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801249c:	81a3      	strh	r3, [r4, #12]
 801249e:	f04f 30ff 	mov.w	r0, #4294967295
 80124a2:	e03e      	b.n	8012522 <__swsetup_r+0xba>
 80124a4:	4b25      	ldr	r3, [pc, #148]	; (801253c <__swsetup_r+0xd4>)
 80124a6:	429c      	cmp	r4, r3
 80124a8:	d101      	bne.n	80124ae <__swsetup_r+0x46>
 80124aa:	68ac      	ldr	r4, [r5, #8]
 80124ac:	e7eb      	b.n	8012486 <__swsetup_r+0x1e>
 80124ae:	4b24      	ldr	r3, [pc, #144]	; (8012540 <__swsetup_r+0xd8>)
 80124b0:	429c      	cmp	r4, r3
 80124b2:	bf08      	it	eq
 80124b4:	68ec      	ldreq	r4, [r5, #12]
 80124b6:	e7e6      	b.n	8012486 <__swsetup_r+0x1e>
 80124b8:	0758      	lsls	r0, r3, #29
 80124ba:	d512      	bpl.n	80124e2 <__swsetup_r+0x7a>
 80124bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80124be:	b141      	cbz	r1, 80124d2 <__swsetup_r+0x6a>
 80124c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124c4:	4299      	cmp	r1, r3
 80124c6:	d002      	beq.n	80124ce <__swsetup_r+0x66>
 80124c8:	4630      	mov	r0, r6
 80124ca:	f7ff fc2f 	bl	8011d2c <_free_r>
 80124ce:	2300      	movs	r3, #0
 80124d0:	6363      	str	r3, [r4, #52]	; 0x34
 80124d2:	89a3      	ldrh	r3, [r4, #12]
 80124d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80124d8:	81a3      	strh	r3, [r4, #12]
 80124da:	2300      	movs	r3, #0
 80124dc:	6063      	str	r3, [r4, #4]
 80124de:	6923      	ldr	r3, [r4, #16]
 80124e0:	6023      	str	r3, [r4, #0]
 80124e2:	89a3      	ldrh	r3, [r4, #12]
 80124e4:	f043 0308 	orr.w	r3, r3, #8
 80124e8:	81a3      	strh	r3, [r4, #12]
 80124ea:	6923      	ldr	r3, [r4, #16]
 80124ec:	b94b      	cbnz	r3, 8012502 <__swsetup_r+0x9a>
 80124ee:	89a3      	ldrh	r3, [r4, #12]
 80124f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80124f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124f8:	d003      	beq.n	8012502 <__swsetup_r+0x9a>
 80124fa:	4621      	mov	r1, r4
 80124fc:	4630      	mov	r0, r6
 80124fe:	f000 f84d 	bl	801259c <__smakebuf_r>
 8012502:	89a0      	ldrh	r0, [r4, #12]
 8012504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012508:	f010 0301 	ands.w	r3, r0, #1
 801250c:	d00a      	beq.n	8012524 <__swsetup_r+0xbc>
 801250e:	2300      	movs	r3, #0
 8012510:	60a3      	str	r3, [r4, #8]
 8012512:	6963      	ldr	r3, [r4, #20]
 8012514:	425b      	negs	r3, r3
 8012516:	61a3      	str	r3, [r4, #24]
 8012518:	6923      	ldr	r3, [r4, #16]
 801251a:	b943      	cbnz	r3, 801252e <__swsetup_r+0xc6>
 801251c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012520:	d1ba      	bne.n	8012498 <__swsetup_r+0x30>
 8012522:	bd70      	pop	{r4, r5, r6, pc}
 8012524:	0781      	lsls	r1, r0, #30
 8012526:	bf58      	it	pl
 8012528:	6963      	ldrpl	r3, [r4, #20]
 801252a:	60a3      	str	r3, [r4, #8]
 801252c:	e7f4      	b.n	8012518 <__swsetup_r+0xb0>
 801252e:	2000      	movs	r0, #0
 8012530:	e7f7      	b.n	8012522 <__swsetup_r+0xba>
 8012532:	bf00      	nop
 8012534:	20000030 	.word	0x20000030
 8012538:	080153c4 	.word	0x080153c4
 801253c:	080153e4 	.word	0x080153e4
 8012540:	080153a4 	.word	0x080153a4

08012544 <abort>:
 8012544:	b508      	push	{r3, lr}
 8012546:	2006      	movs	r0, #6
 8012548:	f000 f890 	bl	801266c <raise>
 801254c:	2001      	movs	r0, #1
 801254e:	f7ee fa19 	bl	8000984 <_exit>

08012552 <__swhatbuf_r>:
 8012552:	b570      	push	{r4, r5, r6, lr}
 8012554:	460e      	mov	r6, r1
 8012556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801255a:	2900      	cmp	r1, #0
 801255c:	b096      	sub	sp, #88	; 0x58
 801255e:	4614      	mov	r4, r2
 8012560:	461d      	mov	r5, r3
 8012562:	da08      	bge.n	8012576 <__swhatbuf_r+0x24>
 8012564:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012568:	2200      	movs	r2, #0
 801256a:	602a      	str	r2, [r5, #0]
 801256c:	061a      	lsls	r2, r3, #24
 801256e:	d410      	bmi.n	8012592 <__swhatbuf_r+0x40>
 8012570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012574:	e00e      	b.n	8012594 <__swhatbuf_r+0x42>
 8012576:	466a      	mov	r2, sp
 8012578:	f000 f894 	bl	80126a4 <_fstat_r>
 801257c:	2800      	cmp	r0, #0
 801257e:	dbf1      	blt.n	8012564 <__swhatbuf_r+0x12>
 8012580:	9a01      	ldr	r2, [sp, #4]
 8012582:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012586:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801258a:	425a      	negs	r2, r3
 801258c:	415a      	adcs	r2, r3
 801258e:	602a      	str	r2, [r5, #0]
 8012590:	e7ee      	b.n	8012570 <__swhatbuf_r+0x1e>
 8012592:	2340      	movs	r3, #64	; 0x40
 8012594:	2000      	movs	r0, #0
 8012596:	6023      	str	r3, [r4, #0]
 8012598:	b016      	add	sp, #88	; 0x58
 801259a:	bd70      	pop	{r4, r5, r6, pc}

0801259c <__smakebuf_r>:
 801259c:	898b      	ldrh	r3, [r1, #12]
 801259e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80125a0:	079d      	lsls	r5, r3, #30
 80125a2:	4606      	mov	r6, r0
 80125a4:	460c      	mov	r4, r1
 80125a6:	d507      	bpl.n	80125b8 <__smakebuf_r+0x1c>
 80125a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80125ac:	6023      	str	r3, [r4, #0]
 80125ae:	6123      	str	r3, [r4, #16]
 80125b0:	2301      	movs	r3, #1
 80125b2:	6163      	str	r3, [r4, #20]
 80125b4:	b002      	add	sp, #8
 80125b6:	bd70      	pop	{r4, r5, r6, pc}
 80125b8:	ab01      	add	r3, sp, #4
 80125ba:	466a      	mov	r2, sp
 80125bc:	f7ff ffc9 	bl	8012552 <__swhatbuf_r>
 80125c0:	9900      	ldr	r1, [sp, #0]
 80125c2:	4605      	mov	r5, r0
 80125c4:	4630      	mov	r0, r6
 80125c6:	f7ff f8ef 	bl	80117a8 <_malloc_r>
 80125ca:	b948      	cbnz	r0, 80125e0 <__smakebuf_r+0x44>
 80125cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125d0:	059a      	lsls	r2, r3, #22
 80125d2:	d4ef      	bmi.n	80125b4 <__smakebuf_r+0x18>
 80125d4:	f023 0303 	bic.w	r3, r3, #3
 80125d8:	f043 0302 	orr.w	r3, r3, #2
 80125dc:	81a3      	strh	r3, [r4, #12]
 80125de:	e7e3      	b.n	80125a8 <__smakebuf_r+0xc>
 80125e0:	4b0d      	ldr	r3, [pc, #52]	; (8012618 <__smakebuf_r+0x7c>)
 80125e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80125e4:	89a3      	ldrh	r3, [r4, #12]
 80125e6:	6020      	str	r0, [r4, #0]
 80125e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125ec:	81a3      	strh	r3, [r4, #12]
 80125ee:	9b00      	ldr	r3, [sp, #0]
 80125f0:	6163      	str	r3, [r4, #20]
 80125f2:	9b01      	ldr	r3, [sp, #4]
 80125f4:	6120      	str	r0, [r4, #16]
 80125f6:	b15b      	cbz	r3, 8012610 <__smakebuf_r+0x74>
 80125f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125fc:	4630      	mov	r0, r6
 80125fe:	f000 f863 	bl	80126c8 <_isatty_r>
 8012602:	b128      	cbz	r0, 8012610 <__smakebuf_r+0x74>
 8012604:	89a3      	ldrh	r3, [r4, #12]
 8012606:	f023 0303 	bic.w	r3, r3, #3
 801260a:	f043 0301 	orr.w	r3, r3, #1
 801260e:	81a3      	strh	r3, [r4, #12]
 8012610:	89a0      	ldrh	r0, [r4, #12]
 8012612:	4305      	orrs	r5, r0
 8012614:	81a5      	strh	r5, [r4, #12]
 8012616:	e7cd      	b.n	80125b4 <__smakebuf_r+0x18>
 8012618:	08011529 	.word	0x08011529

0801261c <_raise_r>:
 801261c:	291f      	cmp	r1, #31
 801261e:	b538      	push	{r3, r4, r5, lr}
 8012620:	4604      	mov	r4, r0
 8012622:	460d      	mov	r5, r1
 8012624:	d904      	bls.n	8012630 <_raise_r+0x14>
 8012626:	2316      	movs	r3, #22
 8012628:	6003      	str	r3, [r0, #0]
 801262a:	f04f 30ff 	mov.w	r0, #4294967295
 801262e:	bd38      	pop	{r3, r4, r5, pc}
 8012630:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012632:	b112      	cbz	r2, 801263a <_raise_r+0x1e>
 8012634:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012638:	b94b      	cbnz	r3, 801264e <_raise_r+0x32>
 801263a:	4620      	mov	r0, r4
 801263c:	f000 f830 	bl	80126a0 <_getpid_r>
 8012640:	462a      	mov	r2, r5
 8012642:	4601      	mov	r1, r0
 8012644:	4620      	mov	r0, r4
 8012646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801264a:	f000 b817 	b.w	801267c <_kill_r>
 801264e:	2b01      	cmp	r3, #1
 8012650:	d00a      	beq.n	8012668 <_raise_r+0x4c>
 8012652:	1c59      	adds	r1, r3, #1
 8012654:	d103      	bne.n	801265e <_raise_r+0x42>
 8012656:	2316      	movs	r3, #22
 8012658:	6003      	str	r3, [r0, #0]
 801265a:	2001      	movs	r0, #1
 801265c:	e7e7      	b.n	801262e <_raise_r+0x12>
 801265e:	2400      	movs	r4, #0
 8012660:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012664:	4628      	mov	r0, r5
 8012666:	4798      	blx	r3
 8012668:	2000      	movs	r0, #0
 801266a:	e7e0      	b.n	801262e <_raise_r+0x12>

0801266c <raise>:
 801266c:	4b02      	ldr	r3, [pc, #8]	; (8012678 <raise+0xc>)
 801266e:	4601      	mov	r1, r0
 8012670:	6818      	ldr	r0, [r3, #0]
 8012672:	f7ff bfd3 	b.w	801261c <_raise_r>
 8012676:	bf00      	nop
 8012678:	20000030 	.word	0x20000030

0801267c <_kill_r>:
 801267c:	b538      	push	{r3, r4, r5, lr}
 801267e:	4d07      	ldr	r5, [pc, #28]	; (801269c <_kill_r+0x20>)
 8012680:	2300      	movs	r3, #0
 8012682:	4604      	mov	r4, r0
 8012684:	4608      	mov	r0, r1
 8012686:	4611      	mov	r1, r2
 8012688:	602b      	str	r3, [r5, #0]
 801268a:	f7ee f969 	bl	8000960 <_kill>
 801268e:	1c43      	adds	r3, r0, #1
 8012690:	d102      	bne.n	8012698 <_kill_r+0x1c>
 8012692:	682b      	ldr	r3, [r5, #0]
 8012694:	b103      	cbz	r3, 8012698 <_kill_r+0x1c>
 8012696:	6023      	str	r3, [r4, #0]
 8012698:	bd38      	pop	{r3, r4, r5, pc}
 801269a:	bf00      	nop
 801269c:	2000c600 	.word	0x2000c600

080126a0 <_getpid_r>:
 80126a0:	f7ee b956 	b.w	8000950 <_getpid>

080126a4 <_fstat_r>:
 80126a4:	b538      	push	{r3, r4, r5, lr}
 80126a6:	4d07      	ldr	r5, [pc, #28]	; (80126c4 <_fstat_r+0x20>)
 80126a8:	2300      	movs	r3, #0
 80126aa:	4604      	mov	r4, r0
 80126ac:	4608      	mov	r0, r1
 80126ae:	4611      	mov	r1, r2
 80126b0:	602b      	str	r3, [r5, #0]
 80126b2:	f7ee f9b6 	bl	8000a22 <_fstat>
 80126b6:	1c43      	adds	r3, r0, #1
 80126b8:	d102      	bne.n	80126c0 <_fstat_r+0x1c>
 80126ba:	682b      	ldr	r3, [r5, #0]
 80126bc:	b103      	cbz	r3, 80126c0 <_fstat_r+0x1c>
 80126be:	6023      	str	r3, [r4, #0]
 80126c0:	bd38      	pop	{r3, r4, r5, pc}
 80126c2:	bf00      	nop
 80126c4:	2000c600 	.word	0x2000c600

080126c8 <_isatty_r>:
 80126c8:	b538      	push	{r3, r4, r5, lr}
 80126ca:	4d06      	ldr	r5, [pc, #24]	; (80126e4 <_isatty_r+0x1c>)
 80126cc:	2300      	movs	r3, #0
 80126ce:	4604      	mov	r4, r0
 80126d0:	4608      	mov	r0, r1
 80126d2:	602b      	str	r3, [r5, #0]
 80126d4:	f7ee f9b5 	bl	8000a42 <_isatty>
 80126d8:	1c43      	adds	r3, r0, #1
 80126da:	d102      	bne.n	80126e2 <_isatty_r+0x1a>
 80126dc:	682b      	ldr	r3, [r5, #0]
 80126de:	b103      	cbz	r3, 80126e2 <_isatty_r+0x1a>
 80126e0:	6023      	str	r3, [r4, #0]
 80126e2:	bd38      	pop	{r3, r4, r5, pc}
 80126e4:	2000c600 	.word	0x2000c600

080126e8 <_init>:
 80126e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ea:	bf00      	nop
 80126ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126ee:	bc08      	pop	{r3}
 80126f0:	469e      	mov	lr, r3
 80126f2:	4770      	bx	lr

080126f4 <_fini>:
 80126f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126f6:	bf00      	nop
 80126f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126fa:	bc08      	pop	{r3}
 80126fc:	469e      	mov	lr, r3
 80126fe:	4770      	bx	lr
