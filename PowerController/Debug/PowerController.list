
PowerController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080056c0  080056c0  000156c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e8  080056e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080056e8  080056e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056e8  080056e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e8  080056e8  000156e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056ec  080056ec  000156ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080056f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000000c  080056fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080056fc  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7ff  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f19  00000000  00000000  0002e83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00030758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00031498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001edb0  00000000  00000000  000320f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d268  00000000  00000000  00050ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb0e3  00000000  00000000  0005e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001291eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c0  00000000  00000000  0012923c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080056a8 	.word	0x080056a8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080056a8 	.word	0x080056a8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <Filter>:
{
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
	return len;
}*/

uint16_t Filter(uint16_t Val, uint16_t _Val, uint16_t gain){
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	80fb      	strh	r3, [r7, #6]
 80009fe:	460b      	mov	r3, r1
 8000a00:	80bb      	strh	r3, [r7, #4]
 8000a02:	4613      	mov	r3, r2
 8000a04:	807b      	strh	r3, [r7, #2]
	return (Val*gain + _Val*(100-gain)) / 100;
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	887a      	ldrh	r2, [r7, #2]
 8000a0a:	fb03 f202 	mul.w	r2, r3, r2
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	8879      	ldrh	r1, [r7, #2]
 8000a12:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 8000a16:	fb01 f303 	mul.w	r3, r1, r3
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <Filter+0x44>)
 8000a1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a22:	1152      	asrs	r2, r2, #5
 8000a24:	17db      	asrs	r3, r3, #31
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	b29b      	uxth	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	51eb851f 	.word	0x51eb851f
 8000a3c:	00000000 	.word	0x00000000

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b5b0      	push	{r4, r5, r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t PBattVol, CBattVol, AirPress, Tmp; //10^-2 V, 10^-2 V, 10^3 Pa, 10 ^-1 C
	uint16_t _PBattVol = 2220;
 8000a46:	f640 03ac 	movw	r3, #2220	; 0x8ac
 8000a4a:	83fb      	strh	r3, [r7, #30]
	uint16_t _CBattVol = 740;
 8000a4c:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 8000a50:	83bb      	strh	r3, [r7, #28]
	uint16_t _AirPress = 600;
 8000a52:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000a56:	837b      	strh	r3, [r7, #26]
	uint16_t _Tmp      = 180;
 8000a58:	23b4      	movs	r3, #180	; 0xb4
 8000a5a:	833b      	strh	r3, [r7, #24]
	uint16_t gain[4] = {90, 90, 90, 90};
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <main+0x94>)
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a66:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6a:	f000 fed2 	bl	8001812 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6e:	f000 f9bf 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a72:	f000 fbfb 	bl	800126c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a76:	f000 fbc7 	bl	8001208 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000a7a:	f000 fb2b 	bl	80010d4 <MX_FDCAN1_Init>
  MX_ADC1_Init();
 8000a7e:	f000 fa03 	bl	8000e88 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000a82:	f000 fa9d 	bl	8000fc0 <MX_ADC2_Init>
	TxHeader.DataLength = FDCAN_DLC_BYTES_1;

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
		Error_Handler();
	}*/
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);//Controller Power ON
 8000a86:	2201      	movs	r2, #1
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <main+0x98>)
 8000a8c:	f003 fe38 	bl	8004700 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)== GPIO_PIN_SET)HAL_Delay(1);
 8000a90:	e002      	b.n	8000a98 <main+0x58>
 8000a92:	2001      	movs	r0, #1
 8000a94:	f000 ff2e 	bl	80018f4 <HAL_Delay>
 8000a98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f003 fe16 	bl	80046d0 <HAL_GPIO_ReadPin>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d0f3      	beq.n	8000a92 <main+0x52>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab4:	f003 fe24 	bl	8004700 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)== GPIO_PIN_SET)HAL_Delay(1);
 8000ab8:	e002      	b.n	8000ac0 <main+0x80>
 8000aba:	2001      	movs	r0, #1
 8000abc:	f000 ff1a 	bl	80018f4 <HAL_Delay>
 8000ac0:	2140      	movs	r1, #64	; 0x40
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <main+0x9c>)
 8000ac4:	f003 fe04 	bl	80046d0 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d0f5      	beq.n	8000aba <main+0x7a>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	for(uint8_t i=0; i<10; i++){
 8000ace:	2300      	movs	r3, #0
 8000ad0:	75fb      	strb	r3, [r7, #23]
 8000ad2:	e121      	b.n	8000d18 <main+0x2d8>
 8000ad4:	080056c0 	.word	0x080056c0
 8000ad8:	48001400 	.word	0x48001400
 8000adc:	48000400 	.word	0x48000400


		HAL_Delay(10);
 8000ae0:	200a      	movs	r0, #10
 8000ae2:	f000 ff07 	bl	80018f4 <HAL_Delay>
		PBattVol = ((((float) ADC2Buff[0] * 3.3 / 4095 ) - ISLAMP_OFFSET) * 10 * 123.6 * 10 / (ISLAMP_GAIN * 6.7))*gain[0]/100;
 8000ae6:	4bb8      	ldr	r3, [pc, #736]	; (8000dc8 <main+0x388>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000af2:	ee17 0a90 	vmov	r0, s15
 8000af6:	f7ff fcf3 	bl	80004e0 <__aeabi_f2d>
 8000afa:	a3a5      	add	r3, pc, #660	; (adr r3, 8000d90 <main+0x350>)
 8000afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b00:	f7ff fd46 	bl	8000590 <__aeabi_dmul>
 8000b04:	4602      	mov	r2, r0
 8000b06:	460b      	mov	r3, r1
 8000b08:	4610      	mov	r0, r2
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	a3a2      	add	r3, pc, #648	; (adr r3, 8000d98 <main+0x358>)
 8000b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b12:	f7ff fe67 	bl	80007e4 <__aeabi_ddiv>
 8000b16:	4602      	mov	r2, r0
 8000b18:	460b      	mov	r3, r1
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f04f 0200 	mov.w	r2, #0
 8000b22:	4baa      	ldr	r3, [pc, #680]	; (8000dcc <main+0x38c>)
 8000b24:	f7ff fb7c 	bl	8000220 <__aeabi_dsub>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	4610      	mov	r0, r2
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 0200 	mov.w	r2, #0
 8000b34:	4ba6      	ldr	r3, [pc, #664]	; (8000dd0 <main+0x390>)
 8000b36:	f7ff fd2b 	bl	8000590 <__aeabi_dmul>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	4610      	mov	r0, r2
 8000b40:	4619      	mov	r1, r3
 8000b42:	a397      	add	r3, pc, #604	; (adr r3, 8000da0 <main+0x360>)
 8000b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b48:	f7ff fd22 	bl	8000590 <__aeabi_dmul>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	460b      	mov	r3, r1
 8000b50:	4610      	mov	r0, r2
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 0200 	mov.w	r2, #0
 8000b58:	4b9d      	ldr	r3, [pc, #628]	; (8000dd0 <main+0x390>)
 8000b5a:	f7ff fd19 	bl	8000590 <__aeabi_dmul>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	460b      	mov	r3, r1
 8000b62:	4610      	mov	r0, r2
 8000b64:	4619      	mov	r1, r3
 8000b66:	a390      	add	r3, pc, #576	; (adr r3, 8000da8 <main+0x368>)
 8000b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6c:	f7ff fe3a 	bl	80007e4 <__aeabi_ddiv>
 8000b70:	4602      	mov	r2, r0
 8000b72:	460b      	mov	r3, r1
 8000b74:	4614      	mov	r4, r2
 8000b76:	461d      	mov	r5, r3
 8000b78:	89bb      	ldrh	r3, [r7, #12]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fc9e 	bl	80004bc <__aeabi_i2d>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	4620      	mov	r0, r4
 8000b86:	4629      	mov	r1, r5
 8000b88:	f7ff fd02 	bl	8000590 <__aeabi_dmul>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	460b      	mov	r3, r1
 8000b90:	4610      	mov	r0, r2
 8000b92:	4619      	mov	r1, r3
 8000b94:	f04f 0200 	mov.w	r2, #0
 8000b98:	4b8e      	ldr	r3, [pc, #568]	; (8000dd4 <main+0x394>)
 8000b9a:	f7ff fe23 	bl	80007e4 <__aeabi_ddiv>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f7ff ff05 	bl	80009b4 <__aeabi_d2uiz>
 8000baa:	4603      	mov	r3, r0
 8000bac:	84fb      	strh	r3, [r7, #38]	; 0x26
		CBattVol = ((float) ADC1Buff[0] * 3.3 / 4095 )*60;
 8000bae:	4b8a      	ldr	r3, [pc, #552]	; (8000dd8 <main+0x398>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	ee07 3a90 	vmov	s15, r3
 8000bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bba:	ee17 0a90 	vmov	r0, s15
 8000bbe:	f7ff fc8f 	bl	80004e0 <__aeabi_f2d>
 8000bc2:	a373      	add	r3, pc, #460	; (adr r3, 8000d90 <main+0x350>)
 8000bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc8:	f7ff fce2 	bl	8000590 <__aeabi_dmul>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	a370      	add	r3, pc, #448	; (adr r3, 8000d98 <main+0x358>)
 8000bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bda:	f7ff fe03 	bl	80007e4 <__aeabi_ddiv>
 8000bde:	4602      	mov	r2, r0
 8000be0:	460b      	mov	r3, r1
 8000be2:	4610      	mov	r0, r2
 8000be4:	4619      	mov	r1, r3
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	4b7c      	ldr	r3, [pc, #496]	; (8000ddc <main+0x39c>)
 8000bec:	f7ff fcd0 	bl	8000590 <__aeabi_dmul>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	4610      	mov	r0, r2
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f7ff fedc 	bl	80009b4 <__aeabi_d2uiz>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	84bb      	strh	r3, [r7, #36]	; 0x24
		AirPress = ((((float) ADC2Buff[1] * 3.3 / 4095)*10/6.7 - 0.25) * 150 / 4.5)*6.895;
 8000c00:	4b71      	ldr	r3, [pc, #452]	; (8000dc8 <main+0x388>)
 8000c02:	885b      	ldrh	r3, [r3, #2]
 8000c04:	ee07 3a90 	vmov	s15, r3
 8000c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c0c:	ee17 0a90 	vmov	r0, s15
 8000c10:	f7ff fc66 	bl	80004e0 <__aeabi_f2d>
 8000c14:	a35e      	add	r3, pc, #376	; (adr r3, 8000d90 <main+0x350>)
 8000c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1a:	f7ff fcb9 	bl	8000590 <__aeabi_dmul>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	460b      	mov	r3, r1
 8000c22:	4610      	mov	r0, r2
 8000c24:	4619      	mov	r1, r3
 8000c26:	a35c      	add	r3, pc, #368	; (adr r3, 8000d98 <main+0x358>)
 8000c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2c:	f7ff fdda 	bl	80007e4 <__aeabi_ddiv>
 8000c30:	4602      	mov	r2, r0
 8000c32:	460b      	mov	r3, r1
 8000c34:	4610      	mov	r0, r2
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	4b64      	ldr	r3, [pc, #400]	; (8000dd0 <main+0x390>)
 8000c3e:	f7ff fca7 	bl	8000590 <__aeabi_dmul>
 8000c42:	4602      	mov	r2, r0
 8000c44:	460b      	mov	r3, r1
 8000c46:	4610      	mov	r0, r2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	a359      	add	r3, pc, #356	; (adr r3, 8000db0 <main+0x370>)
 8000c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c50:	f7ff fdc8 	bl	80007e4 <__aeabi_ddiv>
 8000c54:	4602      	mov	r2, r0
 8000c56:	460b      	mov	r3, r1
 8000c58:	4610      	mov	r0, r2
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 0200 	mov.w	r2, #0
 8000c60:	4b5f      	ldr	r3, [pc, #380]	; (8000de0 <main+0x3a0>)
 8000c62:	f7ff fadd 	bl	8000220 <__aeabi_dsub>
 8000c66:	4602      	mov	r2, r0
 8000c68:	460b      	mov	r3, r1
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	a352      	add	r3, pc, #328	; (adr r3, 8000db8 <main+0x378>)
 8000c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c74:	f7ff fc8c 	bl	8000590 <__aeabi_dmul>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f04f 0200 	mov.w	r2, #0
 8000c84:	4b57      	ldr	r3, [pc, #348]	; (8000de4 <main+0x3a4>)
 8000c86:	f7ff fdad 	bl	80007e4 <__aeabi_ddiv>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	4610      	mov	r0, r2
 8000c90:	4619      	mov	r1, r3
 8000c92:	a34b      	add	r3, pc, #300	; (adr r3, 8000dc0 <main+0x380>)
 8000c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c98:	f7ff fc7a 	bl	8000590 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f7ff fe86 	bl	80009b4 <__aeabi_d2uiz>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	847b      	strh	r3, [r7, #34]	; 0x22
		Tmp      = (float) ADC1Buff[1];
 8000cac:	4b4a      	ldr	r3, [pc, #296]	; (8000dd8 <main+0x398>)
 8000cae:	885b      	ldrh	r3, [r3, #2]
 8000cb0:	ee07 3a90 	vmov	s15, r3
 8000cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cbc:	ee17 3a90 	vmov	r3, s15
 8000cc0:	843b      	strh	r3, [r7, #32]


		PBattVol = Filter(PBattVol, _PBattVol, gain[0]);
 8000cc2:	89ba      	ldrh	r2, [r7, #12]
 8000cc4:	8bf9      	ldrh	r1, [r7, #30]
 8000cc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fe93 	bl	80009f4 <Filter>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	84fb      	strh	r3, [r7, #38]	; 0x26
		CBattVol = Filter(CBattVol, _CBattVol, gain[1]);
 8000cd2:	89fa      	ldrh	r2, [r7, #14]
 8000cd4:	8bb9      	ldrh	r1, [r7, #28]
 8000cd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fe8b 	bl	80009f4 <Filter>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	84bb      	strh	r3, [r7, #36]	; 0x24
		AirPress = Filter(AirPress, _AirPress, gain[2]);
 8000ce2:	8a3a      	ldrh	r2, [r7, #16]
 8000ce4:	8b79      	ldrh	r1, [r7, #26]
 8000ce6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fe83 	bl	80009f4 <Filter>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	847b      	strh	r3, [r7, #34]	; 0x22
		Tmp      = Filter(Tmp, _Tmp, gain[3]);
 8000cf2:	8a7a      	ldrh	r2, [r7, #18]
 8000cf4:	8b39      	ldrh	r1, [r7, #24]
 8000cf6:	8c3b      	ldrh	r3, [r7, #32]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe7b 	bl	80009f4 <Filter>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	843b      	strh	r3, [r7, #32]


		_PBattVol = PBattVol;
 8000d02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d04:	83fb      	strh	r3, [r7, #30]
		_CBattVol = CBattVol;
 8000d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d08:	83bb      	strh	r3, [r7, #28]
		_AirPress = AirPress;
 8000d0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d0c:	837b      	strh	r3, [r7, #26]
		_Tmp      = Tmp;
 8000d0e:	8c3b      	ldrh	r3, [r7, #32]
 8000d10:	833b      	strh	r3, [r7, #24]
	for(uint8_t i=0; i<10; i++){
 8000d12:	7dfb      	ldrb	r3, [r7, #23]
 8000d14:	3301      	adds	r3, #1
 8000d16:	75fb      	strb	r3, [r7, #23]
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	2b09      	cmp	r3, #9
 8000d1c:	f67f aee0 	bls.w	8000ae0 <main+0xa0>

	}
	TxData[0] = PBattVol>>8;
 8000d20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d22:	0a1b      	lsrs	r3, r3, #8
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	713b      	strb	r3, [r7, #4]
	TxData[1] = PBattVol & 0x00FF;
 8000d2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	717b      	strb	r3, [r7, #5]
	TxData[2] = CBattVol>>8;
 8000d30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d32:	0a1b      	lsrs	r3, r3, #8
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	71bb      	strb	r3, [r7, #6]
	TxData[3] = CBattVol & 0x00FF;
 8000d3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	71fb      	strb	r3, [r7, #7]
	TxData[4] = AirPress>>8;
 8000d40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d42:	0a1b      	lsrs	r3, r3, #8
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	723b      	strb	r3, [r7, #8]
	TxData[5] = AirPress & 0x00FF;
 8000d4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	727b      	strb	r3, [r7, #9]
	TxData[6] = Tmp>>8;
 8000d50:	8c3b      	ldrh	r3, [r7, #32]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	72bb      	strb	r3, [r7, #10]
	TxData[7] = Tmp & 0x00FF;
 8000d5a:	8c3b      	ldrh	r3, [r7, #32]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	72fb      	strb	r3, [r7, #11]

	TxHeader.Identifier = CANID_POWERFB;
 8000d60:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <main+0x3a8>)
 8000d62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d66:	601a      	str	r2, [r3, #0]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <main+0x3a8>)
 8000d6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d6e:	60da      	str	r2, [r3, #12]

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	461a      	mov	r2, r3
 8000d74:	491c      	ldr	r1, [pc, #112]	; (8000de8 <main+0x3a8>)
 8000d76:	481d      	ldr	r0, [pc, #116]	; (8000dec <main+0x3ac>)
 8000d78:	f002 feaf 	bl	8003ada <HAL_FDCAN_AddMessageToTxFifoQ>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f43f aea5 	beq.w	8000ace <main+0x8e>
		Error_Handler();
 8000d84:	f000 fb22 	bl	80013cc <Error_Handler>
	for(uint8_t i=0; i<10; i++){
 8000d88:	e6a1      	b.n	8000ace <main+0x8e>
 8000d8a:	bf00      	nop
 8000d8c:	f3af 8000 	nop.w
 8000d90:	66666666 	.word	0x66666666
 8000d94:	400a6666 	.word	0x400a6666
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	40affe00 	.word	0x40affe00
 8000da0:	66666666 	.word	0x66666666
 8000da4:	405ee666 	.word	0x405ee666
 8000da8:	4189374c 	.word	0x4189374c
 8000dac:	40505d60 	.word	0x40505d60
 8000db0:	cccccccd 	.word	0xcccccccd
 8000db4:	401acccc 	.word	0x401acccc
 8000db8:	00000000 	.word	0x00000000
 8000dbc:	4062c000 	.word	0x4062c000
 8000dc0:	e147ae14 	.word	0xe147ae14
 8000dc4:	401b947a 	.word	0x401b947a
 8000dc8:	2000024c 	.word	0x2000024c
 8000dcc:	40040000 	.word	0x40040000
 8000dd0:	40240000 	.word	0x40240000
 8000dd4:	40590000 	.word	0x40590000
 8000dd8:	20000248 	.word	0x20000248
 8000ddc:	404e0000 	.word	0x404e0000
 8000de0:	3fd00000 	.word	0x3fd00000
 8000de4:	40120000 	.word	0x40120000
 8000de8:	20000224 	.word	0x20000224
 8000dec:	200001c0 	.word	0x200001c0

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b094      	sub	sp, #80	; 0x50
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0318 	add.w	r3, r7, #24
 8000dfa:	2238      	movs	r2, #56	; 0x38
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 fc4a 	bl	8005698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e16:	f003 fc8b 	bl	8004730 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e24:	2340      	movs	r3, #64	; 0x40
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e34:	230a      	movs	r3, #10
 8000e36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e44:	f107 0318 	add.w	r3, r7, #24
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 fd15 	bl	8004878 <HAL_RCC_OscConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000e54:	f000 faba 	bl	80013cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e58:	230f      	movs	r3, #15
 8000e5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2102      	movs	r1, #2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 f819 	bl	8004ea8 <HAL_RCC_ClockConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e7c:	f000 faa6 	bl	80013cc <Error_Handler>
  }
}
 8000e80:	bf00      	nop
 8000e82:	3750      	adds	r7, #80	; 0x50
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f004 fbf9 	bl	8005698 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ea6:	4b41      	ldr	r3, [pc, #260]	; (8000fac <MX_ADC1_Init+0x124>)
 8000ea8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000eac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000eae:	4b3f      	ldr	r3, [pc, #252]	; (8000fac <MX_ADC1_Init+0x124>)
 8000eb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb6:	4b3d      	ldr	r3, [pc, #244]	; (8000fac <MX_ADC1_Init+0x124>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebc:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <MX_ADC1_Init+0x124>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ec2:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <MX_ADC1_Init+0x124>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ec8:	4b38      	ldr	r3, [pc, #224]	; (8000fac <MX_ADC1_Init+0x124>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <MX_ADC1_Init+0x124>)
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ed4:	4b35      	ldr	r3, [pc, #212]	; (8000fac <MX_ADC1_Init+0x124>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eda:	4b34      	ldr	r3, [pc, #208]	; (8000fac <MX_ADC1_Init+0x124>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000ee0:	4b32      	ldr	r3, [pc, #200]	; (8000fac <MX_ADC1_Init+0x124>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <MX_ADC1_Init+0x124>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eee:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <MX_ADC1_Init+0x124>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <MX_ADC1_Init+0x124>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000efa:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <MX_ADC1_Init+0x124>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <MX_ADC1_Init+0x124>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f08:	4b28      	ldr	r3, [pc, #160]	; (8000fac <MX_ADC1_Init+0x124>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f10:	4826      	ldr	r0, [pc, #152]	; (8000fac <MX_ADC1_Init+0x124>)
 8000f12:	f000 ff59 	bl	8001dc8 <HAL_ADC_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f1c:	f000 fa56 	bl	80013cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4820      	ldr	r0, [pc, #128]	; (8000fac <MX_ADC1_Init+0x124>)
 8000f2c:	f001 ffa2 	bl	8002e74 <HAL_ADCEx_MultiModeConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f36:	f000 fa49 	bl	80013cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_ADC1_Init+0x128>)
 8000f3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f3e:	2306      	movs	r3, #6
 8000f40:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000f42:	2304      	movs	r3, #4
 8000f44:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f46:	237f      	movs	r3, #127	; 0x7f
 8000f48:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4815      	ldr	r0, [pc, #84]	; (8000fac <MX_ADC1_Init+0x124>)
 8000f58:	f001 f992 	bl	8002280 <HAL_ADC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f62:	f000 fa33 	bl	80013cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_ADC1_Init+0x12c>)
 8000f68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	480e      	ldr	r0, [pc, #56]	; (8000fac <MX_ADC1_Init+0x124>)
 8000f74:	f001 f984 	bl	8002280 <HAL_ADC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000f7e:	f000 fa25 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000f82:	217f      	movs	r1, #127	; 0x7f
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <MX_ADC1_Init+0x124>)
 8000f86:	f001 ff13 	bl	8002db0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Buff, sizeof(ADC1Buff) / sizeof(ADC1Buff[0]));
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	490a      	ldr	r1, [pc, #40]	; (8000fb8 <MX_ADC1_Init+0x130>)
 8000f8e:	4807      	ldr	r0, [pc, #28]	; (8000fac <MX_ADC1_Init+0x124>)
 8000f90:	f001 f8a4 	bl	80020dc <HAL_ADC_Start_DMA>
	hdma_adc1.Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT);
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_ADC1_Init+0x134>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_ADC1_Init+0x134>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0206 	bic.w	r2, r2, #6
 8000fa2:	601a      	str	r2, [r3, #0]


  /* USER CODE END ADC1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	3730      	adds	r7, #48	; 0x30
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000028 	.word	0x20000028
 8000fb0:	0c900008 	.word	0x0c900008
 8000fb4:	c3210000 	.word	0xc3210000
 8000fb8:	20000248 	.word	0x20000248
 8000fbc:	20000100 	.word	0x20000100

08000fc0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2220      	movs	r2, #32
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f004 fb63 	bl	8005698 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fd2:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <MX_ADC2_Init+0xfc>)
 8000fd4:	4a3a      	ldr	r2, [pc, #232]	; (80010c0 <MX_ADC2_Init+0x100>)
 8000fd6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fd8:	4b38      	ldr	r3, [pc, #224]	; (80010bc <MX_ADC2_Init+0xfc>)
 8000fda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fde:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe0:	4b36      	ldr	r3, [pc, #216]	; (80010bc <MX_ADC2_Init+0xfc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe6:	4b35      	ldr	r3, [pc, #212]	; (80010bc <MX_ADC2_Init+0xfc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000fec:	4b33      	ldr	r3, [pc, #204]	; (80010bc <MX_ADC2_Init+0xfc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ff2:	4b32      	ldr	r3, [pc, #200]	; (80010bc <MX_ADC2_Init+0xfc>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff8:	4b30      	ldr	r3, [pc, #192]	; (80010bc <MX_ADC2_Init+0xfc>)
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ffe:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <MX_ADC2_Init+0xfc>)
 8001000:	2200      	movs	r2, #0
 8001002:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001004:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <MX_ADC2_Init+0xfc>)
 8001006:	2201      	movs	r2, #1
 8001008:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800100a:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <MX_ADC2_Init+0xfc>)
 800100c:	2202      	movs	r2, #2
 800100e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001010:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <MX_ADC2_Init+0xfc>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <MX_ADC2_Init+0xfc>)
 800101a:	2200      	movs	r2, #0
 800101c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101e:	4b27      	ldr	r3, [pc, #156]	; (80010bc <MX_ADC2_Init+0xfc>)
 8001020:	2200      	movs	r2, #0
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <MX_ADC2_Init+0xfc>)
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <MX_ADC2_Init+0xfc>)
 800102e:	2200      	movs	r2, #0
 8001030:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001032:	4b22      	ldr	r3, [pc, #136]	; (80010bc <MX_ADC2_Init+0xfc>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800103a:	4820      	ldr	r0, [pc, #128]	; (80010bc <MX_ADC2_Init+0xfc>)
 800103c:	f000 fec4 	bl	8001dc8 <HAL_ADC_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001046:	f000 f9c1 	bl	80013cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800104a:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <MX_ADC2_Init+0x104>)
 800104c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800104e:	2306      	movs	r3, #6
 8001050:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001052:	2304      	movs	r3, #4
 8001054:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001056:	237f      	movs	r3, #127	; 0x7f
 8001058:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800105a:	2304      	movs	r3, #4
 800105c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	4815      	ldr	r0, [pc, #84]	; (80010bc <MX_ADC2_Init+0xfc>)
 8001068:	f001 f90a 	bl	8002280 <HAL_ADC_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001072:	f000 f9ab 	bl	80013cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_ADC2_Init+0x108>)
 8001078:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800107a:	230c      	movs	r3, #12
 800107c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	4619      	mov	r1, r3
 8001082:	480e      	ldr	r0, [pc, #56]	; (80010bc <MX_ADC2_Init+0xfc>)
 8001084:	f001 f8fc 	bl	8002280 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800108e:	f000 f99d 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001092:	217f      	movs	r1, #127	; 0x7f
 8001094:	4809      	ldr	r0, [pc, #36]	; (80010bc <MX_ADC2_Init+0xfc>)
 8001096:	f001 fe8b 	bl	8002db0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)ADC2Buff, sizeof(ADC2Buff) / sizeof(ADC2Buff[0]));
 800109a:	2202      	movs	r2, #2
 800109c:	490b      	ldr	r1, [pc, #44]	; (80010cc <MX_ADC2_Init+0x10c>)
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <MX_ADC2_Init+0xfc>)
 80010a0:	f001 f81c 	bl	80020dc <HAL_ADC_Start_DMA>
	hdma_adc1.Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT);
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_ADC2_Init+0x110>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_ADC2_Init+0x110>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0206 	bic.w	r2, r2, #6
 80010b2:	601a      	str	r2, [r3, #0]

  /* USER CODE END ADC2_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000094 	.word	0x20000094
 80010c0:	50000100 	.word	0x50000100
 80010c4:	0c900008 	.word	0x0c900008
 80010c8:	10c00010 	.word	0x10c00010
 80010cc:	2000024c 	.word	0x2000024c
 80010d0:	20000100 	.word	0x20000100

080010d4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80010da:	4b48      	ldr	r3, [pc, #288]	; (80011fc <MX_FDCAN1_Init+0x128>)
 80010dc:	4a48      	ldr	r2, [pc, #288]	; (8001200 <MX_FDCAN1_Init+0x12c>)
 80010de:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80010e0:	4b46      	ldr	r3, [pc, #280]	; (80011fc <MX_FDCAN1_Init+0x128>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80010e6:	4b45      	ldr	r3, [pc, #276]	; (80011fc <MX_FDCAN1_Init+0x128>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80010ec:	4b43      	ldr	r3, [pc, #268]	; (80011fc <MX_FDCAN1_Init+0x128>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80010f2:	4b42      	ldr	r3, [pc, #264]	; (80011fc <MX_FDCAN1_Init+0x128>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80010f8:	4b40      	ldr	r3, [pc, #256]	; (80011fc <MX_FDCAN1_Init+0x128>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80010fe:	4b3f      	ldr	r3, [pc, #252]	; (80011fc <MX_FDCAN1_Init+0x128>)
 8001100:	2200      	movs	r2, #0
 8001102:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8001104:	4b3d      	ldr	r3, [pc, #244]	; (80011fc <MX_FDCAN1_Init+0x128>)
 8001106:	2205      	movs	r2, #5
 8001108:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 800110a:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <MX_FDCAN1_Init+0x128>)
 800110c:	2210      	movs	r2, #16
 800110e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8001110:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <MX_FDCAN1_Init+0x128>)
 8001112:	220d      	movs	r2, #13
 8001114:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001116:	4b39      	ldr	r3, [pc, #228]	; (80011fc <MX_FDCAN1_Init+0x128>)
 8001118:	2202      	movs	r2, #2
 800111a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800111c:	4b37      	ldr	r3, [pc, #220]	; (80011fc <MX_FDCAN1_Init+0x128>)
 800111e:	2201      	movs	r2, #1
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8001122:	4b36      	ldr	r3, [pc, #216]	; (80011fc <MX_FDCAN1_Init+0x128>)
 8001124:	2204      	movs	r2, #4
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8001128:	4b34      	ldr	r3, [pc, #208]	; (80011fc <MX_FDCAN1_Init+0x128>)
 800112a:	2205      	movs	r2, #5
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800112e:	4b33      	ldr	r3, [pc, #204]	; (80011fc <MX_FDCAN1_Init+0x128>)
 8001130:	2204      	movs	r2, #4
 8001132:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001134:	4b31      	ldr	r3, [pc, #196]	; (80011fc <MX_FDCAN1_Init+0x128>)
 8001136:	2201      	movs	r2, #1
 8001138:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800113a:	4b30      	ldr	r3, [pc, #192]	; (80011fc <MX_FDCAN1_Init+0x128>)
 800113c:	2200      	movs	r2, #0
 800113e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001140:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <MX_FDCAN1_Init+0x128>)
 8001142:	2200      	movs	r2, #0
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001146:	482d      	ldr	r0, [pc, #180]	; (80011fc <MX_FDCAN1_Init+0x128>)
 8001148:	f002 faba 	bl	80036c0 <HAL_FDCAN_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001152:	f000 f93b 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <MX_FDCAN1_Init+0x130>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <MX_FDCAN1_Init+0x130>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_3;
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <MX_FDCAN1_Init+0x130>)
 8001164:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001168:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <MX_FDCAN1_Init+0x130>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <MX_FDCAN1_Init+0x130>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <MX_FDCAN1_Init+0x130>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MX_FDCAN1_Init+0x130>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <MX_FDCAN1_Init+0x130>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
	//TxHeader.Identifier = CANID_ROBOTVEL;

	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001190:	2302      	movs	r3, #2
 8001192:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001194:	2301      	movs	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x000;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7F0;
 800119c:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 80011a0:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 80011a2:	463b      	mov	r3, r7
 80011a4:	4619      	mov	r1, r3
 80011a6:	4815      	ldr	r0, [pc, #84]	; (80011fc <MX_FDCAN1_Init+0x128>)
 80011a8:	f002 fbe4 	bl	8003974 <HAL_FDCAN_ConfigFilter>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_FDCAN1_Init+0xe2>
		Error_Handler();
 80011b2:	f000 f90b 	bl	80013cc <Error_Handler>
	}
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2300      	movs	r3, #0
 80011bc:	2202      	movs	r2, #2
 80011be:	2102      	movs	r1, #2
 80011c0:	480e      	ldr	r0, [pc, #56]	; (80011fc <MX_FDCAN1_Init+0x128>)
 80011c2:	f002 fc31 	bl	8003a28 <HAL_FDCAN_ConfigGlobalFilter>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_FDCAN1_Init+0xfc>
		Error_Handler();
 80011cc:	f000 f8fe 	bl	80013cc <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80011d0:	480a      	ldr	r0, [pc, #40]	; (80011fc <MX_FDCAN1_Init+0x128>)
 80011d2:	f002 fc5a 	bl	8003a8a <HAL_FDCAN_Start>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_FDCAN1_Init+0x10c>
		Error_Handler();
 80011dc:	f000 f8f6 	bl	80013cc <Error_Handler>
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80011e0:	2200      	movs	r2, #0
 80011e2:	2101      	movs	r1, #1
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_FDCAN1_Init+0x128>)
 80011e6:	f002 fd97 	bl	8003d18 <HAL_FDCAN_ActivateNotification>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_FDCAN1_Init+0x120>
	  Error_Handler();
 80011f0:	f000 f8ec 	bl	80013cc <Error_Handler>
	}

  /* USER CODE END FDCAN1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200001c0 	.word	0x200001c0
 8001200:	40006400 	.word	0x40006400
 8001204:	20000224 	.word	0x20000224

08001208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_DMA_Init+0x60>)
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	4a15      	ldr	r2, [pc, #84]	; (8001268 <MX_DMA_Init+0x60>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6493      	str	r3, [r2, #72]	; 0x48
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_DMA_Init+0x60>)
 800121c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_DMA_Init+0x60>)
 8001228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <MX_DMA_Init+0x60>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6493      	str	r3, [r2, #72]	; 0x48
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <MX_DMA_Init+0x60>)
 8001234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	200b      	movs	r0, #11
 8001244:	f001 ff95 	bl	8003172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001248:	200b      	movs	r0, #11
 800124a:	f001 ffac 	bl	80031a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	200c      	movs	r0, #12
 8001254:	f001 ff8d 	bl	8003172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001258:	200c      	movs	r0, #12
 800125a:	f001 ffa4 	bl	80031a6 <HAL_NVIC_EnableIRQ>

}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000

0800126c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001282:	4b41      	ldr	r3, [pc, #260]	; (8001388 <MX_GPIO_Init+0x11c>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a40      	ldr	r2, [pc, #256]	; (8001388 <MX_GPIO_Init+0x11c>)
 8001288:	f043 0320 	orr.w	r3, r3, #32
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b3e      	ldr	r3, [pc, #248]	; (8001388 <MX_GPIO_Init+0x11c>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0320 	and.w	r3, r3, #32
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <MX_GPIO_Init+0x11c>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a3a      	ldr	r2, [pc, #232]	; (8001388 <MX_GPIO_Init+0x11c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <MX_GPIO_Init+0x11c>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <MX_GPIO_Init+0x11c>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a34      	ldr	r2, [pc, #208]	; (8001388 <MX_GPIO_Init+0x11c>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <MX_GPIO_Init+0x11c>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTR_PIN_GPIO_Port, CTR_PIN_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2102      	movs	r1, #2
 80012ce:	482f      	ldr	r0, [pc, #188]	; (800138c <MX_GPIO_Init+0x120>)
 80012d0:	f003 fa16 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_PIN_GPIO_Port, PWR_PIN_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f003 fa0f 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e8:	4829      	ldr	r0, [pc, #164]	; (8001390 <MX_GPIO_Init+0x124>)
 80012ea:	f003 fa09 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CTR_PIN_Pin */
  GPIO_InitStruct.Pin = CTR_PIN_Pin;
 80012ee:	2302      	movs	r3, #2
 80012f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CTR_PIN_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	4619      	mov	r1, r3
 8001304:	4821      	ldr	r0, [pc, #132]	; (800138c <MX_GPIO_Init+0x120>)
 8001306:	f003 f861 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_PIN_Pin */
  GPIO_InitStruct.Pin = PWR_PIN_Pin;
 800130a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PWR_PIN_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001326:	f003 f851 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001330:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001344:	f003 f842 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001348:	2340      	movs	r3, #64	; 0x40
 800134a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800134c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4619      	mov	r1, r3
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <MX_GPIO_Init+0x124>)
 800135e:	f003 f835 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_GPIO_Init+0x124>)
 800137c:	f003 f826 	bl	80043cc <HAL_GPIO_Init>

}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000
 800138c:	48001400 	.word	0x48001400
 8001390:	48000400 	.word	0x48000400

08001394 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08e      	sub	sp, #56	; 0x38
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	if(hfdcan==&hfdcan1){
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <HAL_FDCAN_RxFifo0Callback+0x34>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d10c      	bne.n	80013c0 <HAL_FDCAN_RxFifo0Callback+0x2c>
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	f107 0210 	add.w	r2, r7, #16
 80013ae:	2140      	movs	r1, #64	; 0x40
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f002 fbd7 	bl	8003b64 <HAL_FDCAN_GetRxMessage>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_FDCAN_RxFifo0Callback+0x2c>
			Error_Handler();
 80013bc:	f000 f806 	bl	80013cc <Error_Handler>
		}
	}
}
 80013c0:	bf00      	nop
 80013c2:	3738      	adds	r7, #56	; 0x38
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200001c0 	.word	0x200001c0

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <Error_Handler+0x8>
	...

080013d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_MspInit+0x44>)
 80013e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e2:	4a0e      	ldr	r2, [pc, #56]	; (800141c <HAL_MspInit+0x44>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6613      	str	r3, [r2, #96]	; 0x60
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_MspInit+0x44>)
 80013ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_MspInit+0x44>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_MspInit+0x44>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001400:	6593      	str	r3, [r2, #88]	; 0x58
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_MspInit+0x44>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000

08001420 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b09c      	sub	sp, #112	; 0x70
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001438:	f107 0318 	add.w	r3, r7, #24
 800143c:	2244      	movs	r2, #68	; 0x44
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f004 f929 	bl	8005698 <memset>
  if(hadc->Instance==ADC1)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800144e:	d169      	bne.n	8001524 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001454:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001456:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800145a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145c:	f107 0318 	add.w	r3, r7, #24
 8001460:	4618      	mov	r0, r3
 8001462:	f003 ff05 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800146c:	f7ff ffae 	bl	80013cc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001470:	4b65      	ldr	r3, [pc, #404]	; (8001608 <HAL_ADC_MspInit+0x1e8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	4a64      	ldr	r2, [pc, #400]	; (8001608 <HAL_ADC_MspInit+0x1e8>)
 8001478:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800147a:	4b63      	ldr	r3, [pc, #396]	; (8001608 <HAL_ADC_MspInit+0x1e8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d10b      	bne.n	800149a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001482:	4b62      	ldr	r3, [pc, #392]	; (800160c <HAL_ADC_MspInit+0x1ec>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a61      	ldr	r2, [pc, #388]	; (800160c <HAL_ADC_MspInit+0x1ec>)
 8001488:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b5f      	ldr	r3, [pc, #380]	; (800160c <HAL_ADC_MspInit+0x1ec>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b5c      	ldr	r3, [pc, #368]	; (800160c <HAL_ADC_MspInit+0x1ec>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a5b      	ldr	r2, [pc, #364]	; (800160c <HAL_ADC_MspInit+0x1ec>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b59      	ldr	r3, [pc, #356]	; (800160c <HAL_ADC_MspInit+0x1ec>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CBATT_PIN_Pin;
 80014b2:	2304      	movs	r3, #4
 80014b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b6:	2303      	movs	r3, #3
 80014b8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(CBATT_PIN_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c8:	f002 ff80 	bl	80043cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <HAL_ADC_MspInit+0x1f0>)
 80014ce:	4a51      	ldr	r2, [pc, #324]	; (8001614 <HAL_ADC_MspInit+0x1f4>)
 80014d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80014d2:	4b4f      	ldr	r3, [pc, #316]	; (8001610 <HAL_ADC_MspInit+0x1f0>)
 80014d4:	2205      	movs	r2, #5
 80014d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d8:	4b4d      	ldr	r3, [pc, #308]	; (8001610 <HAL_ADC_MspInit+0x1f0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014de:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <HAL_ADC_MspInit+0x1f0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014e4:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <HAL_ADC_MspInit+0x1f0>)
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ea:	4b49      	ldr	r3, [pc, #292]	; (8001610 <HAL_ADC_MspInit+0x1f0>)
 80014ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_ADC_MspInit+0x1f0>)
 80014f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014fa:	4b45      	ldr	r3, [pc, #276]	; (8001610 <HAL_ADC_MspInit+0x1f0>)
 80014fc:	2220      	movs	r2, #32
 80014fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001500:	4b43      	ldr	r3, [pc, #268]	; (8001610 <HAL_ADC_MspInit+0x1f0>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001506:	4842      	ldr	r0, [pc, #264]	; (8001610 <HAL_ADC_MspInit+0x1f0>)
 8001508:	f001 fe68 	bl	80031dc <HAL_DMA_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8001512:	f7ff ff5b 	bl	80013cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a3d      	ldr	r2, [pc, #244]	; (8001610 <HAL_ADC_MspInit+0x1f0>)
 800151a:	655a      	str	r2, [r3, #84]	; 0x54
 800151c:	4a3c      	ldr	r2, [pc, #240]	; (8001610 <HAL_ADC_MspInit+0x1f0>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001522:	e06d      	b.n	8001600 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a3b      	ldr	r2, [pc, #236]	; (8001618 <HAL_ADC_MspInit+0x1f8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d168      	bne.n	8001600 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800152e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001532:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001534:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001538:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153a:	f107 0318 	add.w	r3, r7, #24
 800153e:	4618      	mov	r0, r3
 8001540:	f003 fe96 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800154a:	f7ff ff3f 	bl	80013cc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800154e:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <HAL_ADC_MspInit+0x1e8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	4a2c      	ldr	r2, [pc, #176]	; (8001608 <HAL_ADC_MspInit+0x1e8>)
 8001556:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <HAL_ADC_MspInit+0x1e8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d10b      	bne.n	8001578 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <HAL_ADC_MspInit+0x1ec>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001564:	4a29      	ldr	r2, [pc, #164]	; (800160c <HAL_ADC_MspInit+0x1ec>)
 8001566:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800156a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <HAL_ADC_MspInit+0x1ec>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <HAL_ADC_MspInit+0x1ec>)
 800157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157c:	4a23      	ldr	r2, [pc, #140]	; (800160c <HAL_ADC_MspInit+0x1ec>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_ADC_MspInit+0x1ec>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PBATT_PIN_Pin|PRSS_PIN_Pin;
 8001590:	23c0      	movs	r3, #192	; 0xc0
 8001592:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001594:	2303      	movs	r3, #3
 8001596:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015a0:	4619      	mov	r1, r3
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a6:	f002 ff11 	bl	80043cc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <HAL_ADC_MspInit+0x1fc>)
 80015ac:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <HAL_ADC_MspInit+0x200>)
 80015ae:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HAL_ADC_MspInit+0x1fc>)
 80015b2:	2224      	movs	r2, #36	; 0x24
 80015b4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_ADC_MspInit+0x1fc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_ADC_MspInit+0x1fc>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_ADC_MspInit+0x1fc>)
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_ADC_MspInit+0x1fc>)
 80015ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ce:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_ADC_MspInit+0x1fc>)
 80015d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_ADC_MspInit+0x1fc>)
 80015da:	2220      	movs	r2, #32
 80015dc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_ADC_MspInit+0x1fc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <HAL_ADC_MspInit+0x1fc>)
 80015e6:	f001 fdf9 	bl	80031dc <HAL_DMA_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 80015f0:	f7ff feec 	bl	80013cc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a09      	ldr	r2, [pc, #36]	; (800161c <HAL_ADC_MspInit+0x1fc>)
 80015f8:	655a      	str	r2, [r3, #84]	; 0x54
 80015fa:	4a08      	ldr	r2, [pc, #32]	; (800161c <HAL_ADC_MspInit+0x1fc>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001600:	bf00      	nop
 8001602:	3770      	adds	r7, #112	; 0x70
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000250 	.word	0x20000250
 800160c:	40021000 	.word	0x40021000
 8001610:	20000100 	.word	0x20000100
 8001614:	40020008 	.word	0x40020008
 8001618:	50000100 	.word	0x50000100
 800161c:	20000160 	.word	0x20000160
 8001620:	4002001c 	.word	0x4002001c

08001624 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b09a      	sub	sp, #104	; 0x68
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	2244      	movs	r2, #68	; 0x44
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f004 f827 	bl	8005698 <memset>
  if(hfdcan->Instance==FDCAN1)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a28      	ldr	r2, [pc, #160]	; (80016f0 <HAL_FDCAN_MspInit+0xcc>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d149      	bne.n	80016e8 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001658:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800165a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800165e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	4618      	mov	r0, r3
 8001666:	f003 fe03 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001670:	f7ff feac 	bl	80013cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HAL_FDCAN_MspInit+0xd0>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <HAL_FDCAN_MspInit+0xd0>)
 800167a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800167e:	6593      	str	r3, [r2, #88]	; 0x58
 8001680:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <HAL_FDCAN_MspInit+0xd0>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_FDCAN_MspInit+0xd0>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <HAL_FDCAN_MspInit+0xd0>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_FDCAN_MspInit+0xd0>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016a8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80016b6:	2309      	movs	r3, #9
 80016b8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f002 fe82 	bl	80043cc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2015      	movs	r0, #21
 80016ce:	f001 fd50 	bl	8003172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80016d2:	2015      	movs	r0, #21
 80016d4:	f001 fd67 	bl	80031a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2016      	movs	r0, #22
 80016de:	f001 fd48 	bl	8003172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80016e2:	2016      	movs	r0, #22
 80016e4:	f001 fd5f 	bl	80031a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	3768      	adds	r7, #104	; 0x68
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40006400 	.word	0x40006400
 80016f4:	40021000 	.word	0x40021000

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <NMI_Handler+0x4>

080016fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <HardFault_Handler+0x4>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <MemManage_Handler+0x4>

0800170a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <UsageFault_Handler+0x4>

08001716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001744:	f000 f8b8 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <DMA1_Channel1_IRQHandler+0x10>)
 8001752:	f001 fe66 	bl	8003422 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000100 	.word	0x20000100

08001760 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <DMA1_Channel2_IRQHandler+0x10>)
 8001766:	f001 fe5c 	bl	8003422 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000160 	.word	0x20000160

08001774 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <FDCAN1_IT0_IRQHandler+0x10>)
 800177a:	f002 fbb3 	bl	8003ee4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200001c0 	.word	0x200001c0

08001788 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <FDCAN1_IT1_IRQHandler+0x10>)
 800178e:	f002 fba9 	bl	8003ee4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200001c0 	.word	0x200001c0

0800179c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <SystemInit+0x20>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <SystemInit+0x20>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c4:	480d      	ldr	r0, [pc, #52]	; (80017fc <LoopForever+0x6>)
  ldr r1, =_edata
 80017c6:	490e      	ldr	r1, [pc, #56]	; (8001800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <LoopForever+0xe>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017dc:	4c0b      	ldr	r4, [pc, #44]	; (800180c <LoopForever+0x16>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ea:	f7ff ffd7 	bl	800179c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f003 ff2f 	bl	8005650 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017f2:	f7ff f925 	bl	8000a40 <main>

080017f6 <LoopForever>:

LoopForever:
    b LoopForever
 80017f6:	e7fe      	b.n	80017f6 <LoopForever>
  ldr   r0, =_estack
 80017f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001804:	080056f0 	.word	0x080056f0
  ldr r2, =_sbss
 8001808:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800180c:	20000258 	.word	0x20000258

08001810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC1_2_IRQHandler>

08001812 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f001 fc9d 	bl	800315c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f80e 	bl	8001844 <HAL_InitTick>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	e001      	b.n	8001838 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001834:	f7ff fdd0 	bl	80013d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001838:	79fb      	ldrb	r3, [r7, #7]

}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <HAL_InitTick+0x68>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d022      	beq.n	800189e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_InitTick+0x6c>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_InitTick+0x68>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001864:	fbb1 f3f3 	udiv	r3, r1, r3
 8001868:	fbb2 f3f3 	udiv	r3, r2, r3
 800186c:	4618      	mov	r0, r3
 800186e:	f001 fca8 	bl	80031c2 <HAL_SYSTICK_Config>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10f      	bne.n	8001898 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b0f      	cmp	r3, #15
 800187c:	d809      	bhi.n	8001892 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187e:	2200      	movs	r2, #0
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	f04f 30ff 	mov.w	r0, #4294967295
 8001886:	f001 fc74 	bl	8003172 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <HAL_InitTick+0x70>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e007      	b.n	80018a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
 8001896:	e004      	b.n	80018a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e001      	b.n	80018a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_IncTick+0x1c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_IncTick+0x20>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a03      	ldr	r2, [pc, #12]	; (80018d4 <HAL_IncTick+0x1c>)
 80018c8:	6013      	str	r3, [r2, #0]
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	20000254 	.word	0x20000254
 80018d8:	20000008 	.word	0x20000008

080018dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <HAL_GetTick+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000254 	.word	0x20000254

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff ffee 	bl	80018dc <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d004      	beq.n	8001918 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_Delay+0x40>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4413      	add	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001918:	bf00      	nop
 800191a:	f7ff ffdf 	bl	80018dc <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	429a      	cmp	r2, r3
 8001928:	d8f7      	bhi.n	800191a <HAL_Delay+0x26>
  {
  }
}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000008 	.word	0x20000008

08001938 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	609a      	str	r2, [r3, #8]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	609a      	str	r2, [r3, #8]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3360      	adds	r3, #96	; 0x60
 80019b2:	461a      	mov	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <LL_ADC_SetOffset+0x44>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	4313      	orrs	r3, r2
 80019d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019d8:	bf00      	nop
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	03fff000 	.word	0x03fff000

080019e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3360      	adds	r3, #96	; 0x60
 80019f6:	461a      	mov	r2, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3360      	adds	r3, #96	; 0x60
 8001a24:	461a      	mov	r2, r3
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a3e:	bf00      	nop
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b087      	sub	sp, #28
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3360      	adds	r3, #96	; 0x60
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3360      	adds	r3, #96	; 0x60
 8001a90:	461a      	mov	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001aaa:	bf00      	nop
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	615a      	str	r2, [r3, #20]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b087      	sub	sp, #28
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3330      	adds	r3, #48	; 0x30
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	4413      	add	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	211f      	movs	r1, #31
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	401a      	ands	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	0e9b      	lsrs	r3, r3, #26
 8001b3a:	f003 011f 	and.w	r1, r3, #31
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b4e:	bf00      	nop
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b087      	sub	sp, #28
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3314      	adds	r3, #20
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	0e5b      	lsrs	r3, r3, #25
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	4413      	add	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	0d1b      	lsrs	r3, r3, #20
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	2107      	movs	r1, #7
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	0d1b      	lsrs	r3, r3, #20
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ba4:	bf00      	nop
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d10a      	bne.n	8001bda <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be6:	43db      	mvns	r3, r3
 8001be8:	401a      	ands	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	407f0000 	.word	0x407f0000

08001c00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6093      	str	r3, [r2, #8]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c54:	d101      	bne.n	8001c5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ca4:	d101      	bne.n	8001caa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ccc:	f043 0201 	orr.w	r2, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cf4:	f043 0202 	orr.w	r2, r3, #2
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <LL_ADC_IsEnabled+0x18>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <LL_ADC_IsEnabled+0x1a>
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d101      	bne.n	8001d46 <LL_ADC_IsDisableOngoing+0x18>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <LL_ADC_IsDisableOngoing+0x1a>
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d68:	f043 0204 	orr.w	r2, r3, #4
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d101      	bne.n	8001d94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d101      	bne.n	8001dba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e177      	b.n	80020d2 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff fb15 	bl	8001420 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff19 	bl	8001c40 <LL_ADC_IsDeepPowerDownEnabled>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d004      	beq.n	8001e1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff feff 	bl	8001c1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ff34 	bl	8001c90 <LL_ADC_IsInternalRegulatorEnabled>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d115      	bne.n	8001e5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff18 	bl	8001c68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e38:	4b9c      	ldr	r3, [pc, #624]	; (80020ac <HAL_ADC_Init+0x2e4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	099b      	lsrs	r3, r3, #6
 8001e3e:	4a9c      	ldr	r2, [pc, #624]	; (80020b0 <HAL_ADC_Init+0x2e8>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	099b      	lsrs	r3, r3, #6
 8001e46:	3301      	adds	r3, #1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e4c:	e002      	b.n	8001e54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f9      	bne.n	8001e4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff16 	bl	8001c90 <LL_ADC_IsInternalRegulatorEnabled>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10d      	bne.n	8001e86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	f043 0210 	orr.w	r2, r3, #16
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7a:	f043 0201 	orr.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ff76 	bl	8001d7c <LL_ADC_REG_IsConversionOngoing>
 8001e90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 8110 	bne.w	80020c0 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f040 810c 	bne.w	80020c0 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001eb0:	f043 0202 	orr.w	r2, r3, #2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff23 	bl	8001d08 <LL_ADC_IsEnabled>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d111      	bne.n	8001eec <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ec8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ecc:	f7ff ff1c 	bl	8001d08 <LL_ADC_IsEnabled>
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	4878      	ldr	r0, [pc, #480]	; (80020b4 <HAL_ADC_Init+0x2ec>)
 8001ed4:	f7ff ff18 	bl	8001d08 <LL_ADC_IsEnabled>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4323      	orrs	r3, r4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d105      	bne.n	8001eec <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4874      	ldr	r0, [pc, #464]	; (80020b8 <HAL_ADC_Init+0x2f0>)
 8001ee8:	f7ff fd26 	bl	8001938 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7f5b      	ldrb	r3, [r3, #29]
 8001ef0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001efc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001f02:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f0a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d106      	bne.n	8001f28 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	045b      	lsls	r3, r3, #17
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d009      	beq.n	8001f44 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <HAL_ADC_Init+0x2f4>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	69b9      	ldr	r1, [r7, #24]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff02 	bl	8001d7c <LL_ADC_REG_IsConversionOngoing>
 8001f78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff0f 	bl	8001da2 <LL_ADC_INJ_IsConversionOngoing>
 8001f84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d16d      	bne.n	8002068 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d16a      	bne.n	8002068 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f9e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fae:	f023 0302 	bic.w	r3, r3, #2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	69b9      	ldr	r1, [r7, #24]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d017      	beq.n	8001ff4 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fd2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fdc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6911      	ldr	r1, [r2, #16]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001ff2:	e013      	b.n	800201c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002002:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002018:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002022:	2b01      	cmp	r3, #1
 8002024:	d118      	bne.n	8002058 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800203c:	4311      	orrs	r1, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002042:	4311      	orrs	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002048:	430a      	orrs	r2, r1
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	611a      	str	r2, [r3, #16]
 8002056:	e007      	b.n	8002068 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d10c      	bne.n	800208a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f023 010f 	bic.w	r1, r3, #15
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	1e5a      	subs	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
 8002088:	e007      	b.n	800209a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 020f 	bic.w	r2, r2, #15
 8002098:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80020aa:	e011      	b.n	80020d0 <HAL_ADC_Init+0x308>
 80020ac:	20000000 	.word	0x20000000
 80020b0:	053e2d63 	.word	0x053e2d63
 80020b4:	50000100 	.word	0x50000100
 80020b8:	50000300 	.word	0x50000300
 80020bc:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	f043 0210 	orr.w	r2, r3, #16
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd90      	pop	{r4, r7, pc}
 80020da:	bf00      	nop

080020dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020e8:	4851      	ldr	r0, [pc, #324]	; (8002230 <HAL_ADC_Start_DMA+0x154>)
 80020ea:	f7ff fd89 	bl	8001c00 <LL_ADC_GetMultimode>
 80020ee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fe41 	bl	8001d7c <LL_ADC_REG_IsConversionOngoing>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f040 808f 	bne.w	8002220 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_ADC_Start_DMA+0x34>
 800210c:	2302      	movs	r3, #2
 800210e:	e08a      	b.n	8002226 <HAL_ADC_Start_DMA+0x14a>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	2b05      	cmp	r3, #5
 8002122:	d002      	beq.n	800212a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b09      	cmp	r3, #9
 8002128:	d173      	bne.n	8002212 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fc98 	bl	8002a60 <ADC_Enable>
 8002130:	4603      	mov	r3, r0
 8002132:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002134:	7dfb      	ldrb	r3, [r7, #23]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d166      	bne.n	8002208 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002142:	f023 0301 	bic.w	r3, r3, #1
 8002146:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a38      	ldr	r2, [pc, #224]	; (8002234 <HAL_ADC_Start_DMA+0x158>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d002      	beq.n	800215e <HAL_ADC_Start_DMA+0x82>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	e001      	b.n	8002162 <HAL_ADC_Start_DMA+0x86>
 800215e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	4293      	cmp	r3, r2
 8002168:	d002      	beq.n	8002170 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d105      	bne.n	800217c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218c:	f023 0206 	bic.w	r2, r3, #6
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	661a      	str	r2, [r3, #96]	; 0x60
 8002194:	e002      	b.n	800219c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	4a25      	ldr	r2, [pc, #148]	; (8002238 <HAL_ADC_Start_DMA+0x15c>)
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	4a24      	ldr	r2, [pc, #144]	; (800223c <HAL_ADC_Start_DMA+0x160>)
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b0:	4a23      	ldr	r2, [pc, #140]	; (8002240 <HAL_ADC_Start_DMA+0x164>)
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	221c      	movs	r2, #28
 80021ba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0210 	orr.w	r2, r2, #16
 80021d2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3340      	adds	r3, #64	; 0x40
 80021ee:	4619      	mov	r1, r3
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f001 f89a 	bl	800332c <HAL_DMA_Start_IT>
 80021f8:	4603      	mov	r3, r0
 80021fa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fda7 	bl	8001d54 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002206:	e00d      	b.n	8002224 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002210:	e008      	b.n	8002224 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800221e:	e001      	b.n	8002224 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002220:	2302      	movs	r3, #2
 8002222:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002224:	7dfb      	ldrb	r3, [r7, #23]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	50000300 	.word	0x50000300
 8002234:	50000100 	.word	0x50000100
 8002238:	08002be3 	.word	0x08002be3
 800223c:	08002cbb 	.word	0x08002cbb
 8002240:	08002cd7 	.word	0x08002cd7

08002244 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b0b6      	sub	sp, #216	; 0xd8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x22>
 800229e:	2302      	movs	r3, #2
 80022a0:	e3c8      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x7b4>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fd64 	bl	8001d7c <LL_ADC_REG_IsConversionOngoing>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f040 83ad 	bne.w	8002a16 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	f7ff fc1a 	bl	8001b02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fd52 	bl	8001d7c <LL_ADC_REG_IsConversionOngoing>
 80022d8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fd5e 	bl	8001da2 <LL_ADC_INJ_IsConversionOngoing>
 80022e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 81d9 	bne.w	80026a6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 81d4 	bne.w	80026a6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002306:	d10f      	bne.n	8002328 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2200      	movs	r2, #0
 8002312:	4619      	mov	r1, r3
 8002314:	f7ff fc21 	bl	8001b5a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fbc8 	bl	8001ab6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002326:	e00e      	b.n	8002346 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	6819      	ldr	r1, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	461a      	mov	r2, r3
 8002336:	f7ff fc10 	bl	8001b5a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fbb8 	bl	8001ab6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	08db      	lsrs	r3, r3, #3
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b04      	cmp	r3, #4
 8002366:	d022      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	6919      	ldr	r1, [r3, #16]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002378:	f7ff fb12 	bl	80019a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	6919      	ldr	r1, [r3, #16]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	461a      	mov	r2, r3
 800238a:	f7ff fb5e 	bl	8001a4a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6919      	ldr	r1, [r3, #16]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	7f1b      	ldrb	r3, [r3, #28]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x124>
 800239e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a2:	e000      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x126>
 80023a4:	2300      	movs	r3, #0
 80023a6:	461a      	mov	r2, r3
 80023a8:	f7ff fb6a 	bl	8001a80 <LL_ADC_SetOffsetSaturation>
 80023ac:	e17b      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fb17 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <HAL_ADC_ConfigChannel+0x15a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fb0c 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	0e9b      	lsrs	r3, r3, #26
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	e01e      	b.n	8002418 <HAL_ADC_ConfigChannel+0x198>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fb01 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e004      	b.n	8002416 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800240c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x1b0>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	e018      	b.n	8002462 <HAL_ADC_ConfigChannel+0x1e2>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800244c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e004      	b.n	8002462 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002458:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002462:	429a      	cmp	r2, r3
 8002464:	d106      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2200      	movs	r2, #0
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fad0 	bl	8001a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2101      	movs	r1, #1
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fab4 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x220>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2101      	movs	r1, #1
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff faa9 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	f003 021f 	and.w	r2, r3, #31
 800249e:	e01e      	b.n	80024de <HAL_ADC_ConfigChannel+0x25e>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fa9e 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80024be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80024c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80024ce:	2320      	movs	r3, #32
 80024d0:	e004      	b.n	80024dc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80024d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d105      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x276>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0e9b      	lsrs	r3, r3, #26
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	e018      	b.n	8002528 <HAL_ADC_ConfigChannel+0x2a8>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800250a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800250e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002512:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800251a:	2320      	movs	r3, #32
 800251c:	e004      	b.n	8002528 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800251e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002528:	429a      	cmp	r2, r3
 800252a:	d106      	bne.n	800253a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2200      	movs	r2, #0
 8002532:	2101      	movs	r1, #1
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fa6d 	bl	8001a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2102      	movs	r1, #2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fa51 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x2e6>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2102      	movs	r1, #2
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fa46 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	0e9b      	lsrs	r3, r3, #26
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	e01e      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x324>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2102      	movs	r1, #2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fa3b 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002572:	4603      	mov	r3, r0
 8002574:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002584:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002588:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800258c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002594:	2320      	movs	r3, #32
 8002596:	e004      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002598:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x33c>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	e016      	b.n	80025ea <HAL_ADC_ConfigChannel+0x36a>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80025ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80025d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80025dc:	2320      	movs	r3, #32
 80025de:	e004      	b.n	80025ea <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80025e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d106      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2200      	movs	r2, #0
 80025f4:	2102      	movs	r1, #2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fa0c 	bl	8001a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2103      	movs	r1, #3
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff f9f0 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002608:	4603      	mov	r3, r0
 800260a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10a      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x3a8>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2103      	movs	r1, #3
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff f9e5 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 800261e:	4603      	mov	r3, r0
 8002620:	0e9b      	lsrs	r3, r3, #26
 8002622:	f003 021f 	and.w	r2, r3, #31
 8002626:	e017      	b.n	8002658 <HAL_ADC_ConfigChannel+0x3d8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2103      	movs	r1, #3
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff f9da 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002634:	4603      	mov	r3, r0
 8002636:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002642:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800264a:	2320      	movs	r3, #32
 800264c:	e003      	b.n	8002656 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800264e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x3f0>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	e011      	b.n	8002694 <HAL_ADC_ConfigChannel+0x414>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800267e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002680:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002688:	2320      	movs	r3, #32
 800268a:	e003      	b.n	8002694 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800268c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002694:	429a      	cmp	r2, r3
 8002696:	d106      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2200      	movs	r2, #0
 800269e:	2103      	movs	r1, #3
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff f9b7 	bl	8001a14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fb2c 	bl	8001d08 <LL_ADC_IsEnabled>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 8140 	bne.w	8002938 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6819      	ldr	r1, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	461a      	mov	r2, r3
 80026c6:	f7ff fa73 	bl	8001bb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	4a8f      	ldr	r2, [pc, #572]	; (800290c <HAL_ADC_ConfigChannel+0x68c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	f040 8131 	bne.w	8002938 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10b      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x47e>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	3301      	adds	r3, #1
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	2b09      	cmp	r3, #9
 80026f4:	bf94      	ite	ls
 80026f6:	2301      	movls	r3, #1
 80026f8:	2300      	movhi	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	e019      	b.n	8002732 <HAL_ADC_ConfigChannel+0x4b2>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800270c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800270e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002716:	2320      	movs	r3, #32
 8002718:	e003      	b.n	8002722 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800271a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	3301      	adds	r3, #1
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	2b09      	cmp	r3, #9
 800272a:	bf94      	ite	ls
 800272c:	2301      	movls	r3, #1
 800272e:	2300      	movhi	r3, #0
 8002730:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002732:	2b00      	cmp	r3, #0
 8002734:	d079      	beq.n	800282a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273e:	2b00      	cmp	r3, #0
 8002740:	d107      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x4d2>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	0e9b      	lsrs	r3, r3, #26
 8002748:	3301      	adds	r3, #1
 800274a:	069b      	lsls	r3, r3, #26
 800274c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002750:	e015      	b.n	800277e <HAL_ADC_ConfigChannel+0x4fe>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002762:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800276a:	2320      	movs	r3, #32
 800276c:	e003      	b.n	8002776 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800276e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	3301      	adds	r3, #1
 8002778:	069b      	lsls	r3, r3, #26
 800277a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_ADC_ConfigChannel+0x51e>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	0e9b      	lsrs	r3, r3, #26
 8002790:	3301      	adds	r3, #1
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2101      	movs	r1, #1
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	e017      	b.n	80027ce <HAL_ADC_ConfigChannel+0x54e>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80027ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80027b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80027b6:	2320      	movs	r3, #32
 80027b8:	e003      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80027ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2101      	movs	r1, #1
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	ea42 0103 	orr.w	r1, r2, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10a      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x574>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0e9b      	lsrs	r3, r3, #26
 80027e4:	3301      	adds	r3, #1
 80027e6:	f003 021f 	and.w	r2, r3, #31
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	051b      	lsls	r3, r3, #20
 80027f2:	e018      	b.n	8002826 <HAL_ADC_ConfigChannel+0x5a6>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002804:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e003      	b.n	8002818 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	3301      	adds	r3, #1
 800281a:	f003 021f 	and.w	r2, r3, #31
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002826:	430b      	orrs	r3, r1
 8002828:	e081      	b.n	800292e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002832:	2b00      	cmp	r3, #0
 8002834:	d107      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x5c6>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	0e9b      	lsrs	r3, r3, #26
 800283c:	3301      	adds	r3, #1
 800283e:	069b      	lsls	r3, r3, #26
 8002840:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002844:	e015      	b.n	8002872 <HAL_ADC_ConfigChannel+0x5f2>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800285e:	2320      	movs	r3, #32
 8002860:	e003      	b.n	800286a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	3301      	adds	r3, #1
 800286c:	069b      	lsls	r3, r3, #26
 800286e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x612>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	0e9b      	lsrs	r3, r3, #26
 8002884:	3301      	adds	r3, #1
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	2101      	movs	r1, #1
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	e017      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x642>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	61fb      	str	r3, [r7, #28]
  return result;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80028aa:	2320      	movs	r3, #32
 80028ac:	e003      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	3301      	adds	r3, #1
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2101      	movs	r1, #1
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	ea42 0103 	orr.w	r1, r2, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10d      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x66e>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	0e9b      	lsrs	r3, r3, #26
 80028d8:	3301      	adds	r3, #1
 80028da:	f003 021f 	and.w	r2, r3, #31
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	3b1e      	subs	r3, #30
 80028e6:	051b      	lsls	r3, r3, #20
 80028e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028ec:	e01e      	b.n	800292c <HAL_ADC_ConfigChannel+0x6ac>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	613b      	str	r3, [r7, #16]
  return result;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d104      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002906:	2320      	movs	r3, #32
 8002908:	e006      	b.n	8002918 <HAL_ADC_ConfigChannel+0x698>
 800290a:	bf00      	nop
 800290c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	3301      	adds	r3, #1
 800291a:	f003 021f 	and.w	r2, r3, #31
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	3b1e      	subs	r3, #30
 8002926:	051b      	lsls	r3, r3, #20
 8002928:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800292c:	430b      	orrs	r3, r1
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	6892      	ldr	r2, [r2, #8]
 8002932:	4619      	mov	r1, r3
 8002934:	f7ff f911 	bl	8001b5a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <HAL_ADC_ConfigChannel+0x7bc>)
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d071      	beq.n	8002a28 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002944:	483e      	ldr	r0, [pc, #248]	; (8002a40 <HAL_ADC_ConfigChannel+0x7c0>)
 8002946:	f7ff f81d 	bl	8001984 <LL_ADC_GetCommonPathInternalCh>
 800294a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a3c      	ldr	r2, [pc, #240]	; (8002a44 <HAL_ADC_ConfigChannel+0x7c4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d004      	beq.n	8002962 <HAL_ADC_ConfigChannel+0x6e2>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a3a      	ldr	r2, [pc, #232]	; (8002a48 <HAL_ADC_ConfigChannel+0x7c8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d127      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002962:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d121      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002976:	d157      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800297c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002980:	4619      	mov	r1, r3
 8002982:	482f      	ldr	r0, [pc, #188]	; (8002a40 <HAL_ADC_ConfigChannel+0x7c0>)
 8002984:	f7fe ffeb 	bl	800195e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002988:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <HAL_ADC_ConfigChannel+0x7cc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	099b      	lsrs	r3, r3, #6
 800298e:	4a30      	ldr	r2, [pc, #192]	; (8002a50 <HAL_ADC_ConfigChannel+0x7d0>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029a2:	e002      	b.n	80029aa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f9      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029b0:	e03a      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a27      	ldr	r2, [pc, #156]	; (8002a54 <HAL_ADC_ConfigChannel+0x7d4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d113      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x764>
 80029bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10d      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a22      	ldr	r2, [pc, #136]	; (8002a58 <HAL_ADC_ConfigChannel+0x7d8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d02a      	beq.n	8002a28 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029da:	4619      	mov	r1, r3
 80029dc:	4818      	ldr	r0, [pc, #96]	; (8002a40 <HAL_ADC_ConfigChannel+0x7c0>)
 80029de:	f7fe ffbe 	bl	800195e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e2:	e021      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <HAL_ADC_ConfigChannel+0x7dc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d11c      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d116      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d011      	beq.n	8002a28 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	480c      	ldr	r0, [pc, #48]	; (8002a40 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a10:	f7fe ffa5 	bl	800195e <LL_ADC_SetCommonPathInternalCh>
 8002a14:	e008      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1a:	f043 0220 	orr.w	r2, r3, #32
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a30:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	37d8      	adds	r7, #216	; 0xd8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	80080000 	.word	0x80080000
 8002a40:	50000300 	.word	0x50000300
 8002a44:	c3210000 	.word	0xc3210000
 8002a48:	90c00010 	.word	0x90c00010
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	053e2d63 	.word	0x053e2d63
 8002a54:	c7520000 	.word	0xc7520000
 8002a58:	50000100 	.word	0x50000100
 8002a5c:	cb840000 	.word	0xcb840000

08002a60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff f94b 	bl	8001d08 <LL_ADC_IsEnabled>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d14d      	bne.n	8002b14 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <ADC_Enable+0xc0>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00d      	beq.n	8002aa2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	f043 0210 	orr.w	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a96:	f043 0201 	orr.w	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e039      	b.n	8002b16 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff f906 	bl	8001cb8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002aac:	f7fe ff16 	bl	80018dc <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ab2:	e028      	b.n	8002b06 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff f925 	bl	8001d08 <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d104      	bne.n	8002ace <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff f8f5 	bl	8001cb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ace:	f7fe ff05 	bl	80018dc <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d914      	bls.n	8002b06 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d00d      	beq.n	8002b06 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	f043 0210 	orr.w	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afa:	f043 0201 	orr.w	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e007      	b.n	8002b16 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d1cf      	bne.n	8002ab4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	8000003f 	.word	0x8000003f

08002b24 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff f8fc 	bl	8001d2e <LL_ADC_IsDisableOngoing>
 8002b36:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff f8e3 	bl	8001d08 <LL_ADC_IsEnabled>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d047      	beq.n	8002bd8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d144      	bne.n	8002bd8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 030d 	and.w	r3, r3, #13
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10c      	bne.n	8002b76 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff f8bd 	bl	8001ce0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b6e:	f7fe feb5 	bl	80018dc <HAL_GetTick>
 8002b72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b74:	e029      	b.n	8002bca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	f043 0210 	orr.w	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b86:	f043 0201 	orr.w	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e023      	b.n	8002bda <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b92:	f7fe fea3 	bl	80018dc <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d914      	bls.n	8002bca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	f043 0210 	orr.w	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e007      	b.n	8002bda <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1dc      	bne.n	8002b92 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d14b      	bne.n	8002c94 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d021      	beq.n	8002c5a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ff5e 	bl	8001adc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d032      	beq.n	8002c8c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d12b      	bne.n	8002c8c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d11f      	bne.n	8002c8c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	f043 0201 	orr.w	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c58:	e018      	b.n	8002c8c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d111      	bne.n	8002c8c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	f043 0201 	orr.w	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff fad9 	bl	8002244 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c92:	e00e      	b.n	8002cb2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7ff fae3 	bl	800226c <HAL_ADC_ErrorCallback>
}
 8002ca6:	e004      	b.n	8002cb2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4798      	blx	r3
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff fac5 	bl	8002258 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf4:	f043 0204 	orr.w	r2, r3, #4
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff fab5 	bl	800226c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <LL_ADC_IsEnabled>:
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <LL_ADC_IsEnabled+0x18>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <LL_ADC_IsEnabled+0x1a>
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_StartCalibration>:
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002d42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	609a      	str	r2, [r3, #8]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <LL_ADC_IsCalibrationOnGoing>:
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d76:	d101      	bne.n	8002d7c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_ADC_REG_IsConversionOngoing>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d101      	bne.n	8002da2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADCEx_Calibration_Start+0x1c>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e04d      	b.n	8002e68 <HAL_ADCEx_Calibration_Start+0xb8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff fea5 	bl	8002b24 <ADC_Disable>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d136      	bne.n	8002e52 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dec:	f023 0302 	bic.w	r3, r3, #2
 8002df0:	f043 0202 	orr.w	r2, r3, #2
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6839      	ldr	r1, [r7, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ff96 	bl	8002d30 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e04:	e014      	b.n	8002e30 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4a18      	ldr	r2, [pc, #96]	; (8002e70 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d90d      	bls.n	8002e30 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	f023 0312 	bic.w	r3, r3, #18
 8002e1c:	f043 0210 	orr.w	r2, r3, #16
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e01b      	b.n	8002e68 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ff94 	bl	8002d62 <LL_ADC_IsCalibrationOnGoing>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e2      	bne.n	8002e06 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	f023 0303 	bic.w	r3, r3, #3
 8002e48:	f043 0201 	orr.w	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e50:	e005      	b.n	8002e5e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	f043 0210 	orr.w	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	0004de01 	.word	0x0004de01

08002e74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b0a1      	sub	sp, #132	; 0x84
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e08b      	b.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eaa:	d102      	bne.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002eac:	4b41      	ldr	r3, [pc, #260]	; (8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	e001      	b.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	f043 0220 	orr.w	r2, r3, #32
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e06a      	b.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff57 	bl	8002d8a <LL_ADC_REG_IsConversionOngoing>
 8002edc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ff51 	bl	8002d8a <LL_ADC_REG_IsConversionOngoing>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d14c      	bne.n	8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d149      	bne.n	8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ef4:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002ef6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d028      	beq.n	8002f52 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f12:	035b      	lsls	r3, r3, #13
 8002f14:	430b      	orrs	r3, r1
 8002f16:	431a      	orrs	r2, r3
 8002f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f20:	f7ff fef3 	bl	8002d0a <LL_ADC_IsEnabled>
 8002f24:	4604      	mov	r4, r0
 8002f26:	4823      	ldr	r0, [pc, #140]	; (8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f28:	f7ff feef 	bl	8002d0a <LL_ADC_IsEnabled>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4323      	orrs	r3, r4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d133      	bne.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f3c:	f023 030f 	bic.w	r3, r3, #15
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	6811      	ldr	r1, [r2, #0]
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	6892      	ldr	r2, [r2, #8]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f50:	e024      	b.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f5c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f5e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f62:	f7ff fed2 	bl	8002d0a <LL_ADC_IsEnabled>
 8002f66:	4604      	mov	r4, r0
 8002f68:	4812      	ldr	r0, [pc, #72]	; (8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f6a:	f7ff fece 	bl	8002d0a <LL_ADC_IsEnabled>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4323      	orrs	r3, r4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d112      	bne.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f7e:	f023 030f 	bic.w	r3, r3, #15
 8002f82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f84:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f86:	e009      	b.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f9a:	e000      	b.n	8002f9e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fa6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3784      	adds	r7, #132	; 0x84
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd90      	pop	{r4, r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	50000100 	.word	0x50000100
 8002fb8:	50000300 	.word	0x50000300

08002fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fee:	4a04      	ldr	r2, [pc, #16]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	60d3      	str	r3, [r2, #12]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <__NVIC_GetPriorityGrouping+0x18>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	f003 0307 	and.w	r3, r3, #7
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	2b00      	cmp	r3, #0
 8003030:	db0b      	blt.n	800304a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	4907      	ldr	r1, [pc, #28]	; (8003058 <__NVIC_EnableIRQ+0x38>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	2001      	movs	r0, #1
 8003042:	fa00 f202 	lsl.w	r2, r0, r2
 8003046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	e000e100 	.word	0xe000e100

0800305c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	6039      	str	r1, [r7, #0]
 8003066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	2b00      	cmp	r3, #0
 800306e:	db0a      	blt.n	8003086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	490c      	ldr	r1, [pc, #48]	; (80030a8 <__NVIC_SetPriority+0x4c>)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	440b      	add	r3, r1
 8003080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003084:	e00a      	b.n	800309c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4908      	ldr	r1, [pc, #32]	; (80030ac <__NVIC_SetPriority+0x50>)
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	3b04      	subs	r3, #4
 8003094:	0112      	lsls	r2, r2, #4
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	440b      	add	r3, r1
 800309a:	761a      	strb	r2, [r3, #24]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000e100 	.word	0xe000e100
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f1c3 0307 	rsb	r3, r3, #7
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	bf28      	it	cs
 80030ce:	2304      	movcs	r3, #4
 80030d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3304      	adds	r3, #4
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d902      	bls.n	80030e0 <NVIC_EncodePriority+0x30>
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3b03      	subs	r3, #3
 80030de:	e000      	b.n	80030e2 <NVIC_EncodePriority+0x32>
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	401a      	ands	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f8:	f04f 31ff 	mov.w	r1, #4294967295
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	43d9      	mvns	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	4313      	orrs	r3, r2
         );
}
 800310a:	4618      	mov	r0, r3
 800310c:	3724      	adds	r7, #36	; 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3b01      	subs	r3, #1
 8003124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003128:	d301      	bcc.n	800312e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800312a:	2301      	movs	r3, #1
 800312c:	e00f      	b.n	800314e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800312e:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <SysTick_Config+0x40>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3b01      	subs	r3, #1
 8003134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003136:	210f      	movs	r1, #15
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	f7ff ff8e 	bl	800305c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <SysTick_Config+0x40>)
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003146:	4b04      	ldr	r3, [pc, #16]	; (8003158 <SysTick_Config+0x40>)
 8003148:	2207      	movs	r2, #7
 800314a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	e000e010 	.word	0xe000e010

0800315c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ff29 	bl	8002fbc <__NVIC_SetPriorityGrouping>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003180:	f7ff ff40 	bl	8003004 <__NVIC_GetPriorityGrouping>
 8003184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	6978      	ldr	r0, [r7, #20]
 800318c:	f7ff ff90 	bl	80030b0 <NVIC_EncodePriority>
 8003190:	4602      	mov	r2, r0
 8003192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff5f 	bl	800305c <__NVIC_SetPriority>
}
 800319e:	bf00      	nop
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff33 	bl	8003020 <__NVIC_EnableIRQ>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ffa4 	bl	8003118 <SysTick_Config>
 80031d0:	4603      	mov	r3, r0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e08d      	b.n	800330a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_DMA_Init+0x138>)
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d80f      	bhi.n	800321a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	4b45      	ldr	r3, [pc, #276]	; (8003318 <HAL_DMA_Init+0x13c>)
 8003202:	4413      	add	r3, r2
 8003204:	4a45      	ldr	r2, [pc, #276]	; (800331c <HAL_DMA_Init+0x140>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	009a      	lsls	r2, r3, #2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a42      	ldr	r2, [pc, #264]	; (8003320 <HAL_DMA_Init+0x144>)
 8003216:	641a      	str	r2, [r3, #64]	; 0x40
 8003218:	e00e      	b.n	8003238 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	4b40      	ldr	r3, [pc, #256]	; (8003324 <HAL_DMA_Init+0x148>)
 8003222:	4413      	add	r3, r2
 8003224:	4a3d      	ldr	r2, [pc, #244]	; (800331c <HAL_DMA_Init+0x140>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	009a      	lsls	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a3c      	ldr	r2, [pc, #240]	; (8003328 <HAL_DMA_Init+0x14c>)
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800324e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003252:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800325c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9b6 	bl	80035fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003298:	d102      	bne.n	80032a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d010      	beq.n	80032e0 <HAL_DMA_Init+0x104>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d80c      	bhi.n	80032e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f9d6 	bl	8003678 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	e008      	b.n	80032f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40020407 	.word	0x40020407
 8003318:	bffdfff8 	.word	0xbffdfff8
 800331c:	cccccccd 	.word	0xcccccccd
 8003320:	40020000 	.word	0x40020000
 8003324:	bffdfbf8 	.word	0xbffdfbf8
 8003328:	40020400 	.word	0x40020400

0800332c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_DMA_Start_IT+0x20>
 8003348:	2302      	movs	r3, #2
 800334a:	e066      	b.n	800341a <HAL_DMA_Start_IT+0xee>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	d155      	bne.n	800340c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f8fb 	bl	8003580 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 020e 	orr.w	r2, r2, #14
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e00f      	b.n	80033c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0204 	bic.w	r2, r2, #4
 80033b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 020a 	orr.w	r2, r2, #10
 80033c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d007      	beq.n	80033e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0201 	orr.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e005      	b.n	8003418 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003414:	2302      	movs	r3, #2
 8003416:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003418:	7dfb      	ldrb	r3, [r7, #23]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2204      	movs	r2, #4
 8003444:	409a      	lsls	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d026      	beq.n	800349c <HAL_DMA_IRQHandler+0x7a>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d021      	beq.n	800349c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d107      	bne.n	8003476 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0204 	bic.w	r2, r2, #4
 8003474:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f003 021f 	and.w	r2, r3, #31
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2104      	movs	r1, #4
 8003484:	fa01 f202 	lsl.w	r2, r1, r2
 8003488:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	2b00      	cmp	r3, #0
 8003490:	d071      	beq.n	8003576 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800349a:	e06c      	b.n	8003576 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	2202      	movs	r2, #2
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d02e      	beq.n	800350e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d029      	beq.n	800350e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 020a 	bic.w	r2, r2, #10
 80034d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f003 021f 	and.w	r2, r3, #31
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2102      	movs	r1, #2
 80034ee:	fa01 f202 	lsl.w	r2, r1, r2
 80034f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d038      	beq.n	8003576 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800350c:	e033      	b.n	8003576 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2208      	movs	r2, #8
 8003518:	409a      	lsls	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4013      	ands	r3, r2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d02a      	beq.n	8003578 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d025      	beq.n	8003578 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 020e 	bic.w	r2, r2, #14
 800353a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003540:	f003 021f 	and.w	r2, r3, #31
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f202 	lsl.w	r2, r1, r2
 800354e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356a:	2b00      	cmp	r3, #0
 800356c:	d004      	beq.n	8003578 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003576:	bf00      	nop
 8003578:	bf00      	nop
}
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003596:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f003 021f 	and.w	r2, r3, #31
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2101      	movs	r1, #1
 80035b8:	fa01 f202 	lsl.w	r2, r1, r2
 80035bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d108      	bne.n	80035e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035de:	e007      	b.n	80035f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	4b16      	ldr	r3, [pc, #88]	; (8003664 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800360c:	429a      	cmp	r2, r3
 800360e:	d802      	bhi.n	8003616 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003610:	4b15      	ldr	r3, [pc, #84]	; (8003668 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	e001      	b.n	800361a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003618:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	3b08      	subs	r3, #8
 8003626:	4a12      	ldr	r2, [pc, #72]	; (8003670 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	009a      	lsls	r2, r3, #2
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4413      	add	r3, r2
 800363c:	461a      	mov	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003646:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	2201      	movs	r2, #1
 8003650:	409a      	lsls	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40020407 	.word	0x40020407
 8003668:	40020800 	.word	0x40020800
 800366c:	40020820 	.word	0x40020820
 8003670:	cccccccd 	.word	0xcccccccd
 8003674:	40020880 	.word	0x40020880

08003678 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	461a      	mov	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a08      	ldr	r2, [pc, #32]	; (80036bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800369a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3b01      	subs	r3, #1
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	2201      	movs	r2, #1
 80036a6:	409a      	lsls	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	1000823f 	.word	0x1000823f
 80036bc:	40020940 	.word	0x40020940

080036c0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e147      	b.n	8003962 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd ff9c 	bl	8001624 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0210 	bic.w	r2, r2, #16
 80036fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036fc:	f7fe f8ee 	bl	80018dc <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003702:	e012      	b.n	800372a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003704:	f7fe f8ea 	bl	80018dc <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b0a      	cmp	r3, #10
 8003710:	d90b      	bls.n	800372a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2203      	movs	r2, #3
 8003722:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e11b      	b.n	8003962 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b08      	cmp	r3, #8
 8003736:	d0e5      	beq.n	8003704 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003748:	f7fe f8c8 	bl	80018dc <HAL_GetTick>
 800374c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800374e:	e012      	b.n	8003776 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003750:	f7fe f8c4 	bl	80018dc <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b0a      	cmp	r3, #10
 800375c:	d90b      	bls.n	8003776 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003762:	f043 0201 	orr.w	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2203      	movs	r2, #3
 800376e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0f5      	b.n	8003962 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0e5      	beq.n	8003750 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0202 	orr.w	r2, r2, #2
 8003792:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a74      	ldr	r2, [pc, #464]	; (800396c <HAL_FDCAN_Init+0x2ac>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d103      	bne.n	80037a6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800379e:	4a74      	ldr	r2, [pc, #464]	; (8003970 <HAL_FDCAN_Init+0x2b0>)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	7c1b      	ldrb	r3, [r3, #16]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d108      	bne.n	80037c0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	699a      	ldr	r2, [r3, #24]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037bc:	619a      	str	r2, [r3, #24]
 80037be:	e007      	b.n	80037d0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ce:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	7c5b      	ldrb	r3, [r3, #17]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d108      	bne.n	80037ea <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037e6:	619a      	str	r2, [r3, #24]
 80037e8:	e007      	b.n	80037fa <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037f8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	7c9b      	ldrb	r3, [r3, #18]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d108      	bne.n	8003814 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699a      	ldr	r2, [r3, #24]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003810:	619a      	str	r2, [r3, #24]
 8003812:	e007      	b.n	8003824 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003822:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003848:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0210 	bic.w	r2, r2, #16
 8003858:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d108      	bne.n	8003874 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0204 	orr.w	r2, r2, #4
 8003870:	619a      	str	r2, [r3, #24]
 8003872:	e02c      	b.n	80038ce <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d028      	beq.n	80038ce <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d01c      	beq.n	80038be <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003892:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0210 	orr.w	r2, r2, #16
 80038a2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d110      	bne.n	80038ce <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0220 	orr.w	r2, r2, #32
 80038ba:	619a      	str	r2, [r3, #24]
 80038bc:	e007      	b.n	80038ce <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699a      	ldr	r2, [r3, #24]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0220 	orr.w	r2, r2, #32
 80038cc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	3b01      	subs	r3, #1
 80038dc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038de:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80038e6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80038f6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038f8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003902:	d115      	bne.n	8003930 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	3b01      	subs	r3, #1
 8003910:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003912:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	3b01      	subs	r3, #1
 800391a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800391c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	3b01      	subs	r3, #1
 8003926:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800392c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800392e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fc6e 	bl	8004228 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40006400 	.word	0x40006400
 8003970:	40006500 	.word	0x40006500

08003974 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003984:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d002      	beq.n	8003992 <HAL_FDCAN_ConfigFilter+0x1e>
 800398c:	7dfb      	ldrb	r3, [r7, #23]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d13d      	bne.n	8003a0e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d119      	bne.n	80039ce <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80039a6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80039ae:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	e01d      	b.n	8003a0a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	075a      	lsls	r2, r3, #29
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	079a      	lsls	r2, r3, #30
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4413      	add	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3304      	adds	r3, #4
 8003a02:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e006      	b.n	8003a1c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a12:	f043 0202 	orr.w	r2, r3, #2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d116      	bne.n	8003a70 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	011a      	lsls	r2, r3, #4
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	431a      	orrs	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e006      	b.n	8003a7e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a74:	f043 0204 	orr.w	r2, r3, #4
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
  }
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d110      	bne.n	8003ac0 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699a      	ldr	r2, [r3, #24]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	e006      	b.n	8003ace <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac4:	f043 0204 	orr.w	r2, r3, #4
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
  }
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d12c      	bne.n	8003b4c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e023      	b.n	8003b5a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fbd3 	bl	80042d4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2101      	movs	r1, #1
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003b3e:	2201      	movs	r2, #1
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	409a      	lsls	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e006      	b.n	8003b5a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b50:	f043 0208 	orr.w	r2, r3, #8
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b08b      	sub	sp, #44	; 0x2c
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b78:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003b7a:	7efb      	ldrb	r3, [r7, #27]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	f040 80bc 	bne.w	8003cfa <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	d121      	bne.n	8003bcc <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d107      	bne.n	8003ba8 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0af      	b.n	8003d08 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	440b      	add	r3, r1
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bca:	e020      	b.n	8003c0e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd4:	f003 030f 	and.w	r3, r3, #15
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d107      	bne.n	8003bec <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e08d      	b.n	8003d08 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bf4:	0a1b      	lsrs	r3, r3, #8
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	440b      	add	r3, r1
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d107      	bne.n	8003c32 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	0c9b      	lsrs	r3, r3, #18
 8003c28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e005      	b.n	8003c3e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	3304      	adds	r3, #4
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	0e1b      	lsrs	r3, r3, #24
 8003c90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	0fda      	lsrs	r2, r3, #31
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003cac:	2300      	movs	r3, #0
 8003cae:	623b      	str	r3, [r7, #32]
 8003cb0:	e00a      	b.n	8003cc8 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	441a      	add	r2, r3
 8003cb8:	6839      	ldr	r1, [r7, #0]
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	440b      	add	r3, r1
 8003cbe:	7812      	ldrb	r2, [r2, #0]
 8003cc0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	4a11      	ldr	r2, [pc, #68]	; (8003d14 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8003cd0:	5cd3      	ldrb	r3, [r2, r3]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d3eb      	bcc.n	8003cb2 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b40      	cmp	r3, #64	; 0x40
 8003cde:	d105      	bne.n	8003cec <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003cea:	e004      	b.n	8003cf6 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e006      	b.n	8003d08 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfe:	f043 0208 	orr.w	r2, r3, #8
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
  }
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	372c      	adds	r7, #44	; 0x2c
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	080056d8 	.word	0x080056d8

08003d18 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d2a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d003      	beq.n	8003d3a <HAL_FDCAN_ActivateNotification+0x22>
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	f040 80c8 	bne.w	8003eca <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d004      	beq.n	8003d56 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d03b      	beq.n	8003dce <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d031      	beq.n	8003dce <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d004      	beq.n	8003d7e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d027      	beq.n	8003dce <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d004      	beq.n	8003d92 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01d      	beq.n	8003dce <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d013      	beq.n	8003dce <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00c      	beq.n	8003dde <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d107      	bne.n	8003dde <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0201 	orr.w	r2, r2, #1
 8003ddc:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d13b      	bne.n	8003e6a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d131      	bne.n	8003e6a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d004      	beq.n	8003e1a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d127      	bne.n	8003e6a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d004      	beq.n	8003e2e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d11d      	bne.n	8003e6a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d004      	beq.n	8003e42 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d113      	bne.n	8003e6a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00c      	beq.n	8003e7a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0202 	orr.w	r2, r2, #2
 8003e78:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d009      	beq.n	8003e98 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e006      	b.n	8003ed8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ece:	f043 0202 	orr.w	r2, r3, #2
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f00:	4013      	ands	r3, r2
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	6a3a      	ldr	r2, [r7, #32]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f26:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8003f3e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f52:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003f56:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4013      	ands	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00d      	beq.n	8003f8e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d006      	beq.n	8003f8e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2240      	movs	r2, #64	; 0x40
 8003f86:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f92e 	bl	80041ea <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01b      	beq.n	8003fd4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d014      	beq.n	8003fd4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003fb2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003fcc:	6939      	ldr	r1, [r7, #16]
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8ec 	bl	80041ac <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003fe2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f8b6 	bl	8004156 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6a3a      	ldr	r2, [r7, #32]
 8003ff6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003ff8:	6a39      	ldr	r1, [r7, #32]
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fd f9ca 	bl	8001394 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800400e:	69f9      	ldr	r1, [r7, #28]
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f8ab 	bl	800416c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00e      	beq.n	8004042 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800402e:	2b00      	cmp	r3, #0
 8004030:	d007      	beq.n	8004042 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800403a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f8a0 	bl	8004182 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01a      	beq.n	8004086 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d013      	beq.n	8004086 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004066:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4013      	ands	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2280      	movs	r2, #128	; 0x80
 800407c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f888 	bl	8004196 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00e      	beq.n	80040b2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040aa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f888 	bl	80041c2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00e      	beq.n	80040de <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80040d6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f87c 	bl	80041d6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d011      	beq.n	8004110 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004102:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004108:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800411e:	6979      	ldr	r1, [r7, #20]
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f876 	bl	8004212 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d009      	beq.n	8004140 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f858 	bl	80041fe <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800414e:	bf00      	nop
 8004150:	3728      	adds	r7, #40	; 0x28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004230:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004232:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004242:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424a:	041a      	lsls	r2, r3, #16
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004268:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	061a      	lsls	r2, r3, #24
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	e005      	b.n	80042b6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3304      	adds	r3, #4
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d3f3      	bcc.n	80042aa <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	4000a400 	.word	0x4000a400

080042d4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b089      	sub	sp, #36	; 0x24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10a      	bne.n	8004300 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80042f2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	e00a      	b.n	8004316 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004308:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800430e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004310:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004314:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004320:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004326:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800432c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	440b      	add	r3, r1
 8004346:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	3304      	adds	r3, #4
 8004352:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	3304      	adds	r3, #4
 800435e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e020      	b.n	80043a8 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	3303      	adds	r3, #3
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4413      	add	r3, r2
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	3302      	adds	r3, #2
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	440b      	add	r3, r1
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800437e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	3301      	adds	r3, #1
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	440b      	add	r3, r1
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800438c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	440a      	add	r2, r1
 8004394:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004396:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	3304      	adds	r3, #4
 80043a0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	3304      	adds	r3, #4
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	0c1b      	lsrs	r3, r3, #16
 80043ae:	4a06      	ldr	r2, [pc, #24]	; (80043c8 <FDCAN_CopyMessageToRAM+0xf4>)
 80043b0:	5cd3      	ldrb	r3, [r2, r3]
 80043b2:	461a      	mov	r2, r3
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d3d5      	bcc.n	8004366 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80043ba:	bf00      	nop
 80043bc:	bf00      	nop
 80043be:	3724      	adds	r7, #36	; 0x24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	080056d8 	.word	0x080056d8

080043cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043da:	e15a      	b.n	8004692 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	2101      	movs	r1, #1
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	fa01 f303 	lsl.w	r3, r1, r3
 80043e8:	4013      	ands	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 814c 	beq.w	800468c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d005      	beq.n	800440c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004408:	2b02      	cmp	r3, #2
 800440a:	d130      	bne.n	800446e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	2203      	movs	r2, #3
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004442:	2201      	movs	r2, #1
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43db      	mvns	r3, r3
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4013      	ands	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	f003 0201 	and.w	r2, r3, #1
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b03      	cmp	r3, #3
 8004478:	d017      	beq.n	80044aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	2203      	movs	r2, #3
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4013      	ands	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d123      	bne.n	80044fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	08da      	lsrs	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3208      	adds	r2, #8
 80044be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	220f      	movs	r2, #15
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	08da      	lsrs	r2, r3, #3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3208      	adds	r2, #8
 80044f8:	6939      	ldr	r1, [r7, #16]
 80044fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	2203      	movs	r2, #3
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4013      	ands	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 0203 	and.w	r2, r3, #3
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80a6 	beq.w	800468c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004540:	4b5b      	ldr	r3, [pc, #364]	; (80046b0 <HAL_GPIO_Init+0x2e4>)
 8004542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004544:	4a5a      	ldr	r2, [pc, #360]	; (80046b0 <HAL_GPIO_Init+0x2e4>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6613      	str	r3, [r2, #96]	; 0x60
 800454c:	4b58      	ldr	r3, [pc, #352]	; (80046b0 <HAL_GPIO_Init+0x2e4>)
 800454e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004558:	4a56      	ldr	r2, [pc, #344]	; (80046b4 <HAL_GPIO_Init+0x2e8>)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	089b      	lsrs	r3, r3, #2
 800455e:	3302      	adds	r3, #2
 8004560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	220f      	movs	r2, #15
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004582:	d01f      	beq.n	80045c4 <HAL_GPIO_Init+0x1f8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a4c      	ldr	r2, [pc, #304]	; (80046b8 <HAL_GPIO_Init+0x2ec>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d019      	beq.n	80045c0 <HAL_GPIO_Init+0x1f4>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a4b      	ldr	r2, [pc, #300]	; (80046bc <HAL_GPIO_Init+0x2f0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d013      	beq.n	80045bc <HAL_GPIO_Init+0x1f0>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a4a      	ldr	r2, [pc, #296]	; (80046c0 <HAL_GPIO_Init+0x2f4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00d      	beq.n	80045b8 <HAL_GPIO_Init+0x1ec>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a49      	ldr	r2, [pc, #292]	; (80046c4 <HAL_GPIO_Init+0x2f8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <HAL_GPIO_Init+0x1e8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a48      	ldr	r2, [pc, #288]	; (80046c8 <HAL_GPIO_Init+0x2fc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d101      	bne.n	80045b0 <HAL_GPIO_Init+0x1e4>
 80045ac:	2305      	movs	r3, #5
 80045ae:	e00a      	b.n	80045c6 <HAL_GPIO_Init+0x1fa>
 80045b0:	2306      	movs	r3, #6
 80045b2:	e008      	b.n	80045c6 <HAL_GPIO_Init+0x1fa>
 80045b4:	2304      	movs	r3, #4
 80045b6:	e006      	b.n	80045c6 <HAL_GPIO_Init+0x1fa>
 80045b8:	2303      	movs	r3, #3
 80045ba:	e004      	b.n	80045c6 <HAL_GPIO_Init+0x1fa>
 80045bc:	2302      	movs	r3, #2
 80045be:	e002      	b.n	80045c6 <HAL_GPIO_Init+0x1fa>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <HAL_GPIO_Init+0x1fa>
 80045c4:	2300      	movs	r3, #0
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	f002 0203 	and.w	r2, r2, #3
 80045cc:	0092      	lsls	r2, r2, #2
 80045ce:	4093      	lsls	r3, r2
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045d6:	4937      	ldr	r1, [pc, #220]	; (80046b4 <HAL_GPIO_Init+0x2e8>)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	089b      	lsrs	r3, r3, #2
 80045dc:	3302      	adds	r3, #2
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045e4:	4b39      	ldr	r3, [pc, #228]	; (80046cc <HAL_GPIO_Init+0x300>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4013      	ands	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004608:	4a30      	ldr	r2, [pc, #192]	; (80046cc <HAL_GPIO_Init+0x300>)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800460e:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <HAL_GPIO_Init+0x300>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	43db      	mvns	r3, r3
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4013      	ands	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004632:	4a26      	ldr	r2, [pc, #152]	; (80046cc <HAL_GPIO_Init+0x300>)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004638:	4b24      	ldr	r3, [pc, #144]	; (80046cc <HAL_GPIO_Init+0x300>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	43db      	mvns	r3, r3
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4013      	ands	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800465c:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <HAL_GPIO_Init+0x300>)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004662:	4b1a      	ldr	r3, [pc, #104]	; (80046cc <HAL_GPIO_Init+0x300>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	43db      	mvns	r3, r3
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004686:	4a11      	ldr	r2, [pc, #68]	; (80046cc <HAL_GPIO_Init+0x300>)
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	3301      	adds	r3, #1
 8004690:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	f47f ae9d 	bne.w	80043dc <HAL_GPIO_Init+0x10>
  }
}
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40010000 	.word	0x40010000
 80046b8:	48000400 	.word	0x48000400
 80046bc:	48000800 	.word	0x48000800
 80046c0:	48000c00 	.word	0x48000c00
 80046c4:	48001000 	.word	0x48001000
 80046c8:	48001400 	.word	0x48001400
 80046cc:	40010400 	.word	0x40010400

080046d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	887b      	ldrh	r3, [r7, #2]
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
 80046ec:	e001      	b.n	80046f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046ee:	2300      	movs	r3, #0
 80046f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	807b      	strh	r3, [r7, #2]
 800470c:	4613      	mov	r3, r2
 800470e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004710:	787b      	ldrb	r3, [r7, #1]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004716:	887a      	ldrh	r2, [r7, #2]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800471c:	e002      	b.n	8004724 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800471e:	887a      	ldrh	r2, [r7, #2]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d141      	bne.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800473e:	4b4b      	ldr	r3, [pc, #300]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474a:	d131      	bne.n	80047b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800474c:	4b47      	ldr	r3, [pc, #284]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004752:	4a46      	ldr	r2, [pc, #280]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800475c:	4b43      	ldr	r3, [pc, #268]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004764:	4a41      	ldr	r2, [pc, #260]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800476a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800476c:	4b40      	ldr	r3, [pc, #256]	; (8004870 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2232      	movs	r2, #50	; 0x32
 8004772:	fb02 f303 	mul.w	r3, r2, r3
 8004776:	4a3f      	ldr	r2, [pc, #252]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	0c9b      	lsrs	r3, r3, #18
 800477e:	3301      	adds	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004782:	e002      	b.n	800478a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3b01      	subs	r3, #1
 8004788:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800478a:	4b38      	ldr	r3, [pc, #224]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004796:	d102      	bne.n	800479e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f2      	bne.n	8004784 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800479e:	4b33      	ldr	r3, [pc, #204]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047aa:	d158      	bne.n	800485e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e057      	b.n	8004860 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047b0:	4b2e      	ldr	r3, [pc, #184]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047b6:	4a2d      	ldr	r2, [pc, #180]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047c0:	e04d      	b.n	800485e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c8:	d141      	bne.n	800484e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ca:	4b28      	ldr	r3, [pc, #160]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d6:	d131      	bne.n	800483c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047d8:	4b24      	ldr	r3, [pc, #144]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047de:	4a23      	ldr	r2, [pc, #140]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047e8:	4b20      	ldr	r3, [pc, #128]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047f0:	4a1e      	ldr	r2, [pc, #120]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047f8:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2232      	movs	r2, #50	; 0x32
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	0c9b      	lsrs	r3, r3, #18
 800480a:	3301      	adds	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800480e:	e002      	b.n	8004816 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3b01      	subs	r3, #1
 8004814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004816:	4b15      	ldr	r3, [pc, #84]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004822:	d102      	bne.n	800482a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f2      	bne.n	8004810 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004836:	d112      	bne.n	800485e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e011      	b.n	8004860 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004842:	4a0a      	ldr	r2, [pc, #40]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800484c:	e007      	b.n	800485e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800484e:	4b07      	ldr	r3, [pc, #28]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004856:	4a05      	ldr	r2, [pc, #20]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004858:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800485c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	40007000 	.word	0x40007000
 8004870:	20000000 	.word	0x20000000
 8004874:	431bde83 	.word	0x431bde83

08004878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e306      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d075      	beq.n	8004982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004896:	4b97      	ldr	r3, [pc, #604]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048a0:	4b94      	ldr	r3, [pc, #592]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	d102      	bne.n	80048b6 <HAL_RCC_OscConfig+0x3e>
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d002      	beq.n	80048bc <HAL_RCC_OscConfig+0x44>
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d10b      	bne.n	80048d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048bc:	4b8d      	ldr	r3, [pc, #564]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d05b      	beq.n	8004980 <HAL_RCC_OscConfig+0x108>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d157      	bne.n	8004980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e2e1      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048dc:	d106      	bne.n	80048ec <HAL_RCC_OscConfig+0x74>
 80048de:	4b85      	ldr	r3, [pc, #532]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a84      	ldr	r2, [pc, #528]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 80048e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	e01d      	b.n	8004928 <HAL_RCC_OscConfig+0xb0>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048f4:	d10c      	bne.n	8004910 <HAL_RCC_OscConfig+0x98>
 80048f6:	4b7f      	ldr	r3, [pc, #508]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a7e      	ldr	r2, [pc, #504]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 80048fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	4b7c      	ldr	r3, [pc, #496]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a7b      	ldr	r2, [pc, #492]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e00b      	b.n	8004928 <HAL_RCC_OscConfig+0xb0>
 8004910:	4b78      	ldr	r3, [pc, #480]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a77      	ldr	r2, [pc, #476]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	4b75      	ldr	r3, [pc, #468]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a74      	ldr	r2, [pc, #464]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d013      	beq.n	8004958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fc ffd4 	bl	80018dc <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004938:	f7fc ffd0 	bl	80018dc <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b64      	cmp	r3, #100	; 0x64
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e2a6      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800494a:	4b6a      	ldr	r3, [pc, #424]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0xc0>
 8004956:	e014      	b.n	8004982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fc ffc0 	bl	80018dc <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004960:	f7fc ffbc 	bl	80018dc <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e292      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004972:	4b60      	ldr	r3, [pc, #384]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCC_OscConfig+0xe8>
 800497e:	e000      	b.n	8004982 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d075      	beq.n	8004a7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800498e:	4b59      	ldr	r3, [pc, #356]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004998:	4b56      	ldr	r3, [pc, #344]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	2b0c      	cmp	r3, #12
 80049a6:	d102      	bne.n	80049ae <HAL_RCC_OscConfig+0x136>
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d002      	beq.n	80049b4 <HAL_RCC_OscConfig+0x13c>
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d11f      	bne.n	80049f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049b4:	4b4f      	ldr	r3, [pc, #316]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_OscConfig+0x154>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e265      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049cc:	4b49      	ldr	r3, [pc, #292]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	061b      	lsls	r3, r3, #24
 80049da:	4946      	ldr	r1, [pc, #280]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049e0:	4b45      	ldr	r3, [pc, #276]	; (8004af8 <HAL_RCC_OscConfig+0x280>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fc ff2d 	bl	8001844 <HAL_InitTick>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d043      	beq.n	8004a78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e251      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d023      	beq.n	8004a44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049fc:	4b3d      	ldr	r3, [pc, #244]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a3c      	ldr	r2, [pc, #240]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a08:	f7fc ff68 	bl	80018dc <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a10:	f7fc ff64 	bl	80018dc <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e23a      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a22:	4b34      	ldr	r3, [pc, #208]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2e:	4b31      	ldr	r3, [pc, #196]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	061b      	lsls	r3, r3, #24
 8004a3c:	492d      	ldr	r1, [pc, #180]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	604b      	str	r3, [r1, #4]
 8004a42:	e01a      	b.n	8004a7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a44:	4b2b      	ldr	r3, [pc, #172]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a2a      	ldr	r2, [pc, #168]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004a4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fc ff44 	bl	80018dc <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a58:	f7fc ff40 	bl	80018dc <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e216      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a6a:	4b22      	ldr	r3, [pc, #136]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x1e0>
 8004a76:	e000      	b.n	8004a7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d041      	beq.n	8004b0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01c      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8e:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a94:	4a17      	ldr	r2, [pc, #92]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9e:	f7fc ff1d 	bl	80018dc <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa6:	f7fc ff19 	bl	80018dc <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e1ef      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ab8:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0ef      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x22e>
 8004ac6:	e020      	b.n	8004b0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ace:	4a09      	ldr	r2, [pc, #36]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad8:	f7fc ff00 	bl	80018dc <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ade:	e00d      	b.n	8004afc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae0:	f7fc fefc 	bl	80018dc <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d906      	bls.n	8004afc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e1d2      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
 8004af2:	bf00      	nop
 8004af4:	40021000 	.word	0x40021000
 8004af8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004afc:	4b8c      	ldr	r3, [pc, #560]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1ea      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 80a6 	beq.w	8004c64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b1c:	4b84      	ldr	r3, [pc, #528]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_OscConfig+0x2b4>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <HAL_RCC_OscConfig+0x2b6>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00d      	beq.n	8004b4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b32:	4b7f      	ldr	r3, [pc, #508]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b36:	4a7e      	ldr	r2, [pc, #504]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b3e:	4b7c      	ldr	r3, [pc, #496]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b4e:	4b79      	ldr	r3, [pc, #484]	; (8004d34 <HAL_RCC_OscConfig+0x4bc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d118      	bne.n	8004b8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b5a:	4b76      	ldr	r3, [pc, #472]	; (8004d34 <HAL_RCC_OscConfig+0x4bc>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a75      	ldr	r2, [pc, #468]	; (8004d34 <HAL_RCC_OscConfig+0x4bc>)
 8004b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b66:	f7fc feb9 	bl	80018dc <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6e:	f7fc feb5 	bl	80018dc <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e18b      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b80:	4b6c      	ldr	r3, [pc, #432]	; (8004d34 <HAL_RCC_OscConfig+0x4bc>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d108      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x32e>
 8004b94:	4b66      	ldr	r3, [pc, #408]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	4a65      	ldr	r2, [pc, #404]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ba4:	e024      	b.n	8004bf0 <HAL_RCC_OscConfig+0x378>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b05      	cmp	r3, #5
 8004bac:	d110      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x358>
 8004bae:	4b60      	ldr	r3, [pc, #384]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb4:	4a5e      	ldr	r2, [pc, #376]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004bb6:	f043 0304 	orr.w	r3, r3, #4
 8004bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bbe:	4b5c      	ldr	r3, [pc, #368]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	4a5a      	ldr	r2, [pc, #360]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bce:	e00f      	b.n	8004bf0 <HAL_RCC_OscConfig+0x378>
 8004bd0:	4b57      	ldr	r3, [pc, #348]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd6:	4a56      	ldr	r2, [pc, #344]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004be0:	4b53      	ldr	r3, [pc, #332]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	4a52      	ldr	r2, [pc, #328]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004be8:	f023 0304 	bic.w	r3, r3, #4
 8004bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d016      	beq.n	8004c26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fc fe70 	bl	80018dc <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bfe:	e00a      	b.n	8004c16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c00:	f7fc fe6c 	bl	80018dc <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e140      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c16:	4b46      	ldr	r3, [pc, #280]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0ed      	beq.n	8004c00 <HAL_RCC_OscConfig+0x388>
 8004c24:	e015      	b.n	8004c52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c26:	f7fc fe59 	bl	80018dc <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c2c:	e00a      	b.n	8004c44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2e:	f7fc fe55 	bl	80018dc <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e129      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c44:	4b3a      	ldr	r3, [pc, #232]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1ed      	bne.n	8004c2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c52:	7ffb      	ldrb	r3, [r7, #31]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d105      	bne.n	8004c64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c58:	4b35      	ldr	r3, [pc, #212]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5c:	4a34      	ldr	r2, [pc, #208]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d03c      	beq.n	8004cea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01c      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c78:	4b2d      	ldr	r3, [pc, #180]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c7e:	4a2c      	ldr	r2, [pc, #176]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c88:	f7fc fe28 	bl	80018dc <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c90:	f7fc fe24 	bl	80018dc <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e0fa      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ca2:	4b23      	ldr	r3, [pc, #140]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0ef      	beq.n	8004c90 <HAL_RCC_OscConfig+0x418>
 8004cb0:	e01b      	b.n	8004cea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cb2:	4b1f      	ldr	r3, [pc, #124]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cb8:	4a1d      	ldr	r2, [pc, #116]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc2:	f7fc fe0b 	bl	80018dc <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cca:	f7fc fe07 	bl	80018dc <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e0dd      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cdc:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1ef      	bne.n	8004cca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80d1 	beq.w	8004e96 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 030c 	and.w	r3, r3, #12
 8004cfc:	2b0c      	cmp	r3, #12
 8004cfe:	f000 808b 	beq.w	8004e18 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d15e      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0a:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a08      	ldr	r2, [pc, #32]	; (8004d30 <HAL_RCC_OscConfig+0x4b8>)
 8004d10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d16:	f7fc fde1 	bl	80018dc <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d1c:	e00c      	b.n	8004d38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d1e:	f7fc fddd 	bl	80018dc <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d905      	bls.n	8004d38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e0b3      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d38:	4b59      	ldr	r3, [pc, #356]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1ec      	bne.n	8004d1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d44:	4b56      	ldr	r3, [pc, #344]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	4b56      	ldr	r3, [pc, #344]	; (8004ea4 <HAL_RCC_OscConfig+0x62c>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6a11      	ldr	r1, [r2, #32]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d54:	3a01      	subs	r2, #1
 8004d56:	0112      	lsls	r2, r2, #4
 8004d58:	4311      	orrs	r1, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004d5e:	0212      	lsls	r2, r2, #8
 8004d60:	4311      	orrs	r1, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d66:	0852      	lsrs	r2, r2, #1
 8004d68:	3a01      	subs	r2, #1
 8004d6a:	0552      	lsls	r2, r2, #21
 8004d6c:	4311      	orrs	r1, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d72:	0852      	lsrs	r2, r2, #1
 8004d74:	3a01      	subs	r2, #1
 8004d76:	0652      	lsls	r2, r2, #25
 8004d78:	4311      	orrs	r1, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d7e:	06d2      	lsls	r2, r2, #27
 8004d80:	430a      	orrs	r2, r1
 8004d82:	4947      	ldr	r1, [pc, #284]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d88:	4b45      	ldr	r3, [pc, #276]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a44      	ldr	r2, [pc, #272]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d94:	4b42      	ldr	r3, [pc, #264]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4a41      	ldr	r2, [pc, #260]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fc fd9c 	bl	80018dc <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da8:	f7fc fd98 	bl	80018dc <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e06e      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dba:	4b39      	ldr	r3, [pc, #228]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0f0      	beq.n	8004da8 <HAL_RCC_OscConfig+0x530>
 8004dc6:	e066      	b.n	8004e96 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc8:	4b35      	ldr	r3, [pc, #212]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a34      	ldr	r2, [pc, #208]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004dd4:	4b32      	ldr	r3, [pc, #200]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4a31      	ldr	r2, [pc, #196]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004dda:	f023 0303 	bic.w	r3, r3, #3
 8004dde:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004de0:	4b2f      	ldr	r3, [pc, #188]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4a2e      	ldr	r2, [pc, #184]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004de6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fc fd74 	bl	80018dc <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df8:	f7fc fd70 	bl	80018dc <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e046      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e0a:	4b25      	ldr	r3, [pc, #148]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0x580>
 8004e16:	e03e      	b.n	8004e96 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e039      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e24:	4b1e      	ldr	r3, [pc, #120]	; (8004ea0 <HAL_RCC_OscConfig+0x628>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 0203 	and.w	r2, r3, #3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d12c      	bne.n	8004e92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	3b01      	subs	r3, #1
 8004e44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d123      	bne.n	8004e92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d11b      	bne.n	8004e92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d113      	bne.n	8004e92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	085b      	lsrs	r3, r3, #1
 8004e76:	3b01      	subs	r3, #1
 8004e78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d109      	bne.n	8004e92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e88:	085b      	lsrs	r3, r3, #1
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d001      	beq.n	8004e96 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3720      	adds	r7, #32
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	019f800c 	.word	0x019f800c

08004ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e11e      	b.n	80050fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec0:	4b91      	ldr	r3, [pc, #580]	; (8005108 <HAL_RCC_ClockConfig+0x260>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d910      	bls.n	8004ef0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ece:	4b8e      	ldr	r3, [pc, #568]	; (8005108 <HAL_RCC_ClockConfig+0x260>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f023 020f 	bic.w	r2, r3, #15
 8004ed6:	498c      	ldr	r1, [pc, #560]	; (8005108 <HAL_RCC_ClockConfig+0x260>)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ede:	4b8a      	ldr	r3, [pc, #552]	; (8005108 <HAL_RCC_ClockConfig+0x260>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d001      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e106      	b.n	80050fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d073      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d129      	bne.n	8004f58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f04:	4b81      	ldr	r3, [pc, #516]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0f4      	b.n	80050fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f14:	f000 f966 	bl	80051e4 <RCC_GetSysClockFreqFromPLLSource>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	4a7c      	ldr	r2, [pc, #496]	; (8005110 <HAL_RCC_ClockConfig+0x268>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d93f      	bls.n	8004fa2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f22:	4b7a      	ldr	r3, [pc, #488]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d033      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d12f      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f42:	4b72      	ldr	r3, [pc, #456]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f4a:	4a70      	ldr	r2, [pc, #448]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8004f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	e024      	b.n	8004fa2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d107      	bne.n	8004f70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f60:	4b6a      	ldr	r3, [pc, #424]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d109      	bne.n	8004f80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0c6      	b.n	80050fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f70:	4b66      	ldr	r3, [pc, #408]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0be      	b.n	80050fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f80:	f000 f8ce 	bl	8005120 <HAL_RCC_GetSysClockFreq>
 8004f84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4a61      	ldr	r2, [pc, #388]	; (8005110 <HAL_RCC_ClockConfig+0x268>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d909      	bls.n	8004fa2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f8e:	4b5f      	ldr	r3, [pc, #380]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f96:	4a5d      	ldr	r2, [pc, #372]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8004f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fa2:	4b5a      	ldr	r3, [pc, #360]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f023 0203 	bic.w	r2, r3, #3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	4957      	ldr	r1, [pc, #348]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb4:	f7fc fc92 	bl	80018dc <HAL_GetTick>
 8004fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fbc:	f7fc fc8e 	bl	80018dc <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e095      	b.n	80050fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd2:	4b4e      	ldr	r3, [pc, #312]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 020c 	and.w	r2, r3, #12
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d1eb      	bne.n	8004fbc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d023      	beq.n	8005038 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ffc:	4b43      	ldr	r3, [pc, #268]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	4a42      	ldr	r2, [pc, #264]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8005002:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005006:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005014:	4b3d      	ldr	r3, [pc, #244]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800501c:	4a3b      	ldr	r2, [pc, #236]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 800501e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005022:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005024:	4b39      	ldr	r3, [pc, #228]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	4936      	ldr	r1, [pc, #216]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
 8005036:	e008      	b.n	800504a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b80      	cmp	r3, #128	; 0x80
 800503c:	d105      	bne.n	800504a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800503e:	4b33      	ldr	r3, [pc, #204]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	4a32      	ldr	r2, [pc, #200]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 8005044:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005048:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800504a:	4b2f      	ldr	r3, [pc, #188]	; (8005108 <HAL_RCC_ClockConfig+0x260>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d21d      	bcs.n	8005094 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005058:	4b2b      	ldr	r3, [pc, #172]	; (8005108 <HAL_RCC_ClockConfig+0x260>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f023 020f 	bic.w	r2, r3, #15
 8005060:	4929      	ldr	r1, [pc, #164]	; (8005108 <HAL_RCC_ClockConfig+0x260>)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	4313      	orrs	r3, r2
 8005066:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005068:	f7fc fc38 	bl	80018dc <HAL_GetTick>
 800506c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800506e:	e00a      	b.n	8005086 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005070:	f7fc fc34 	bl	80018dc <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	; 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e03b      	b.n	80050fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005086:	4b20      	ldr	r3, [pc, #128]	; (8005108 <HAL_RCC_ClockConfig+0x260>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d1ed      	bne.n	8005070 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a0:	4b1a      	ldr	r3, [pc, #104]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	4917      	ldr	r1, [pc, #92]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050be:	4b13      	ldr	r3, [pc, #76]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	490f      	ldr	r1, [pc, #60]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050d2:	f000 f825 	bl	8005120 <HAL_RCC_GetSysClockFreq>
 80050d6:	4602      	mov	r2, r0
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <HAL_RCC_ClockConfig+0x264>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	490c      	ldr	r1, [pc, #48]	; (8005114 <HAL_RCC_ClockConfig+0x26c>)
 80050e4:	5ccb      	ldrb	r3, [r1, r3]
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	fa22 f303 	lsr.w	r3, r2, r3
 80050ee:	4a0a      	ldr	r2, [pc, #40]	; (8005118 <HAL_RCC_ClockConfig+0x270>)
 80050f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050f2:	4b0a      	ldr	r3, [pc, #40]	; (800511c <HAL_RCC_ClockConfig+0x274>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fc fba4 	bl	8001844 <HAL_InitTick>
 80050fc:	4603      	mov	r3, r0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40022000 	.word	0x40022000
 800510c:	40021000 	.word	0x40021000
 8005110:	04c4b400 	.word	0x04c4b400
 8005114:	080056c8 	.word	0x080056c8
 8005118:	20000000 	.word	0x20000000
 800511c:	20000004 	.word	0x20000004

08005120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005126:	4b2c      	ldr	r3, [pc, #176]	; (80051d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
 800512e:	2b04      	cmp	r3, #4
 8005130:	d102      	bne.n	8005138 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005132:	4b2a      	ldr	r3, [pc, #168]	; (80051dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	e047      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005138:	4b27      	ldr	r3, [pc, #156]	; (80051d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 030c 	and.w	r3, r3, #12
 8005140:	2b08      	cmp	r3, #8
 8005142:	d102      	bne.n	800514a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005144:	4b26      	ldr	r3, [pc, #152]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	e03e      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800514a:	4b23      	ldr	r3, [pc, #140]	; (80051d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	2b0c      	cmp	r3, #12
 8005154:	d136      	bne.n	80051c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005156:	4b20      	ldr	r3, [pc, #128]	; (80051d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005160:	4b1d      	ldr	r3, [pc, #116]	; (80051d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	3301      	adds	r3, #1
 800516c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b03      	cmp	r3, #3
 8005172:	d10c      	bne.n	800518e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005174:	4a1a      	ldr	r2, [pc, #104]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	fbb2 f3f3 	udiv	r3, r2, r3
 800517c:	4a16      	ldr	r2, [pc, #88]	; (80051d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800517e:	68d2      	ldr	r2, [r2, #12]
 8005180:	0a12      	lsrs	r2, r2, #8
 8005182:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005186:	fb02 f303 	mul.w	r3, r2, r3
 800518a:	617b      	str	r3, [r7, #20]
      break;
 800518c:	e00c      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800518e:	4a13      	ldr	r2, [pc, #76]	; (80051dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	fbb2 f3f3 	udiv	r3, r2, r3
 8005196:	4a10      	ldr	r2, [pc, #64]	; (80051d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005198:	68d2      	ldr	r2, [r2, #12]
 800519a:	0a12      	lsrs	r2, r2, #8
 800519c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051a0:	fb02 f303 	mul.w	r3, r2, r3
 80051a4:	617b      	str	r3, [r7, #20]
      break;
 80051a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	0e5b      	lsrs	r3, r3, #25
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	3301      	adds	r3, #1
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	e001      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051c8:	693b      	ldr	r3, [r7, #16]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40021000 	.word	0x40021000
 80051dc:	00f42400 	.word	0x00f42400
 80051e0:	007a1200 	.word	0x007a1200

080051e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051ea:	4b1e      	ldr	r3, [pc, #120]	; (8005264 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051f4:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	091b      	lsrs	r3, r3, #4
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	3301      	adds	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b03      	cmp	r3, #3
 8005206:	d10c      	bne.n	8005222 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005208:	4a17      	ldr	r2, [pc, #92]	; (8005268 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	4a14      	ldr	r2, [pc, #80]	; (8005264 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005212:	68d2      	ldr	r2, [r2, #12]
 8005214:	0a12      	lsrs	r2, r2, #8
 8005216:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800521a:	fb02 f303 	mul.w	r3, r2, r3
 800521e:	617b      	str	r3, [r7, #20]
    break;
 8005220:	e00c      	b.n	800523c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005222:	4a12      	ldr	r2, [pc, #72]	; (800526c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	fbb2 f3f3 	udiv	r3, r2, r3
 800522a:	4a0e      	ldr	r2, [pc, #56]	; (8005264 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800522c:	68d2      	ldr	r2, [r2, #12]
 800522e:	0a12      	lsrs	r2, r2, #8
 8005230:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005234:	fb02 f303 	mul.w	r3, r2, r3
 8005238:	617b      	str	r3, [r7, #20]
    break;
 800523a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800523c:	4b09      	ldr	r3, [pc, #36]	; (8005264 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	0e5b      	lsrs	r3, r3, #25
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	3301      	adds	r3, #1
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	fbb2 f3f3 	udiv	r3, r2, r3
 8005254:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005256:	687b      	ldr	r3, [r7, #4]
}
 8005258:	4618      	mov	r0, r3
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	40021000 	.word	0x40021000
 8005268:	007a1200 	.word	0x007a1200
 800526c:	00f42400 	.word	0x00f42400

08005270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005278:	2300      	movs	r3, #0
 800527a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800527c:	2300      	movs	r3, #0
 800527e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8098 	beq.w	80053be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800528e:	2300      	movs	r3, #0
 8005290:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005292:	4b43      	ldr	r3, [pc, #268]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10d      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800529e:	4b40      	ldr	r3, [pc, #256]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a2:	4a3f      	ldr	r2, [pc, #252]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a8:	6593      	str	r3, [r2, #88]	; 0x58
 80052aa:	4b3d      	ldr	r3, [pc, #244]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052b6:	2301      	movs	r3, #1
 80052b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052ba:	4b3a      	ldr	r3, [pc, #232]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a39      	ldr	r2, [pc, #228]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052c6:	f7fc fb09 	bl	80018dc <HAL_GetTick>
 80052ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052cc:	e009      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ce:	f7fc fb05 	bl	80018dc <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d902      	bls.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	74fb      	strb	r3, [r7, #19]
        break;
 80052e0:	e005      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052e2:	4b30      	ldr	r3, [pc, #192]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0ef      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80052ee:	7cfb      	ldrb	r3, [r7, #19]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d159      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052f4:	4b2a      	ldr	r3, [pc, #168]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01e      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	429a      	cmp	r2, r3
 800530e:	d019      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005310:	4b23      	ldr	r3, [pc, #140]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800531c:	4b20      	ldr	r3, [pc, #128]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	4a1f      	ldr	r2, [pc, #124]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800532c:	4b1c      	ldr	r3, [pc, #112]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800532e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005332:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800533c:	4a18      	ldr	r2, [pc, #96]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d016      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534e:	f7fc fac5 	bl	80018dc <HAL_GetTick>
 8005352:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005354:	e00b      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005356:	f7fc fac1 	bl	80018dc <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	f241 3288 	movw	r2, #5000	; 0x1388
 8005364:	4293      	cmp	r3, r2
 8005366:	d902      	bls.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	74fb      	strb	r3, [r7, #19]
            break;
 800536c:	e006      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0ec      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800537c:	7cfb      	ldrb	r3, [r7, #19]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10b      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005382:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	4903      	ldr	r1, [pc, #12]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005398:	e008      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800539a:	7cfb      	ldrb	r3, [r7, #19]
 800539c:	74bb      	strb	r3, [r7, #18]
 800539e:	e005      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80053a0:	40021000 	.word	0x40021000
 80053a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a8:	7cfb      	ldrb	r3, [r7, #19]
 80053aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ac:	7c7b      	ldrb	r3, [r7, #17]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d105      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b2:	4ba6      	ldr	r3, [pc, #664]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b6:	4aa5      	ldr	r2, [pc, #660]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053ca:	4ba0      	ldr	r3, [pc, #640]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f023 0203 	bic.w	r2, r3, #3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	499c      	ldr	r1, [pc, #624]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ec:	4b97      	ldr	r3, [pc, #604]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	f023 020c 	bic.w	r2, r3, #12
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	4994      	ldr	r1, [pc, #592]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800540e:	4b8f      	ldr	r3, [pc, #572]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005414:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	498b      	ldr	r1, [pc, #556]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005430:	4b86      	ldr	r3, [pc, #536]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005436:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	4983      	ldr	r1, [pc, #524]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005452:	4b7e      	ldr	r3, [pc, #504]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	497a      	ldr	r1, [pc, #488]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005474:	4b75      	ldr	r3, [pc, #468]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	4972      	ldr	r1, [pc, #456]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005496:	4b6d      	ldr	r3, [pc, #436]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	4969      	ldr	r1, [pc, #420]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054b8:	4b64      	ldr	r3, [pc, #400]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	4961      	ldr	r1, [pc, #388]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054da:	4b5c      	ldr	r3, [pc, #368]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	4958      	ldr	r1, [pc, #352]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d015      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054fc:	4b53      	ldr	r3, [pc, #332]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005502:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	4950      	ldr	r1, [pc, #320]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551a:	d105      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800551c:	4b4b      	ldr	r3, [pc, #300]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4a4a      	ldr	r2, [pc, #296]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005526:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005530:	2b00      	cmp	r3, #0
 8005532:	d015      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005534:	4b45      	ldr	r3, [pc, #276]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	4942      	ldr	r1, [pc, #264]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005552:	d105      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005554:	4b3d      	ldr	r3, [pc, #244]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	4a3c      	ldr	r2, [pc, #240]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800555a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800555e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d015      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800556c:	4b37      	ldr	r3, [pc, #220]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005572:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	4934      	ldr	r1, [pc, #208]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800558a:	d105      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800558c:	4b2f      	ldr	r3, [pc, #188]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4a2e      	ldr	r2, [pc, #184]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005596:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d015      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055a4:	4b29      	ldr	r3, [pc, #164]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	4926      	ldr	r1, [pc, #152]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c2:	d105      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c4:	4b21      	ldr	r3, [pc, #132]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4a20      	ldr	r2, [pc, #128]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d015      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055dc:	4b1b      	ldr	r3, [pc, #108]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	4918      	ldr	r1, [pc, #96]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055fa:	d105      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055fc:	4b13      	ldr	r3, [pc, #76]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	4a12      	ldr	r2, [pc, #72]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005606:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d015      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005614:	4b0d      	ldr	r3, [pc, #52]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005622:	490a      	ldr	r1, [pc, #40]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005632:	d105      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4a04      	ldr	r2, [pc, #16]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800563a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005640:	7cbb      	ldrb	r3, [r7, #18]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40021000 	.word	0x40021000

08005650 <__libc_init_array>:
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	4d0d      	ldr	r5, [pc, #52]	; (8005688 <__libc_init_array+0x38>)
 8005654:	4c0d      	ldr	r4, [pc, #52]	; (800568c <__libc_init_array+0x3c>)
 8005656:	1b64      	subs	r4, r4, r5
 8005658:	10a4      	asrs	r4, r4, #2
 800565a:	2600      	movs	r6, #0
 800565c:	42a6      	cmp	r6, r4
 800565e:	d109      	bne.n	8005674 <__libc_init_array+0x24>
 8005660:	4d0b      	ldr	r5, [pc, #44]	; (8005690 <__libc_init_array+0x40>)
 8005662:	4c0c      	ldr	r4, [pc, #48]	; (8005694 <__libc_init_array+0x44>)
 8005664:	f000 f820 	bl	80056a8 <_init>
 8005668:	1b64      	subs	r4, r4, r5
 800566a:	10a4      	asrs	r4, r4, #2
 800566c:	2600      	movs	r6, #0
 800566e:	42a6      	cmp	r6, r4
 8005670:	d105      	bne.n	800567e <__libc_init_array+0x2e>
 8005672:	bd70      	pop	{r4, r5, r6, pc}
 8005674:	f855 3b04 	ldr.w	r3, [r5], #4
 8005678:	4798      	blx	r3
 800567a:	3601      	adds	r6, #1
 800567c:	e7ee      	b.n	800565c <__libc_init_array+0xc>
 800567e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005682:	4798      	blx	r3
 8005684:	3601      	adds	r6, #1
 8005686:	e7f2      	b.n	800566e <__libc_init_array+0x1e>
 8005688:	080056e8 	.word	0x080056e8
 800568c:	080056e8 	.word	0x080056e8
 8005690:	080056e8 	.word	0x080056e8
 8005694:	080056ec 	.word	0x080056ec

08005698 <memset>:
 8005698:	4402      	add	r2, r0
 800569a:	4603      	mov	r3, r0
 800569c:	4293      	cmp	r3, r2
 800569e:	d100      	bne.n	80056a2 <memset+0xa>
 80056a0:	4770      	bx	lr
 80056a2:	f803 1b01 	strb.w	r1, [r3], #1
 80056a6:	e7f9      	b.n	800569c <memset+0x4>

080056a8 <_init>:
 80056a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056aa:	bf00      	nop
 80056ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ae:	bc08      	pop	{r3}
 80056b0:	469e      	mov	lr, r3
 80056b2:	4770      	bx	lr

080056b4 <_fini>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	bf00      	nop
 80056b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ba:	bc08      	pop	{r3}
 80056bc:	469e      	mov	lr, r3
 80056be:	4770      	bx	lr
