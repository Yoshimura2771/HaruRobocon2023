
AirCylinderDriver3V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005890  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b60  08005b60  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08005b60  08005b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b68  08005b68  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b68  08005b68  00015b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08005b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200000a0  08005c10  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08005c10  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015725  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d3  00000000  00000000  000357f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00037dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  00039088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f951  00000000  00000000  0003a260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014249  00000000  00000000  00059bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccc63  00000000  00000000  0006ddfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013aa5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057cc  00000000  00000000  0013aab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a0 	.word	0x200000a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005a50 	.word	0x08005a50

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000a4 	.word	0x200000a4
 8000214:	08005a50 	.word	0x08005a50

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	b29a      	uxth	r2, r3
 800052c:	230a      	movs	r3, #10
 800052e:	68b9      	ldr	r1, [r7, #8]
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <_write+0x24>)
 8000532:	f003 fe6d 	bl	8004210 <HAL_UART_Transmit>
	return len;
 8000536:	687b      	ldr	r3, [r7, #4]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200001b8 	.word	0x200001b8

08000544 <CylN>:

void CylN(uint8_t CylID){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	printf("N\r\n");
 800054e:	4814      	ldr	r0, [pc, #80]	; (80005a0 <CylN+0x5c>)
 8000550:	f004 fd18 	bl	8004f84 <puts>
	if(CylID < 4){
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b03      	cmp	r3, #3
 8000558:	d81d      	bhi.n	8000596 <CylN+0x52>
		HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_RESET);
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <CylN+0x60>)
 8000560:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	4a0f      	ldr	r2, [pc, #60]	; (80005a8 <CylN+0x64>)
 800056a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800056e:	2200      	movs	r2, #0
 8000570:	4619      	mov	r1, r3
 8000572:	f001 ff83 	bl	800247c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_RESET);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	3301      	adds	r3, #1
 800057c:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <CylN+0x60>)
 800057e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	3301      	adds	r3, #1
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <CylN+0x64>)
 800058a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058e:	2200      	movs	r2, #0
 8000590:	4619      	mov	r1, r3
 8000592:	f001 ff73 	bl	800247c <HAL_GPIO_WritePin>
	}
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	08005a68 	.word	0x08005a68
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000020 	.word	0x20000020

080005ac <CylPush>:

void CylPush(uint8_t CylID){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	printf("Push\r\n");
 80005b6:	4814      	ldr	r0, [pc, #80]	; (8000608 <CylPush+0x5c>)
 80005b8:	f004 fce4 	bl	8004f84 <puts>
	if(CylID < 4){
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d81d      	bhi.n	80005fe <CylPush+0x52>
		HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_SET);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <CylPush+0x60>)
 80005c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <CylPush+0x64>)
 80005d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005d6:	2201      	movs	r2, #1
 80005d8:	4619      	mov	r1, r3
 80005da:	f001 ff4f 	bl	800247c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_RESET);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	3301      	adds	r3, #1
 80005e4:	4a09      	ldr	r2, [pc, #36]	; (800060c <CylPush+0x60>)
 80005e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	3301      	adds	r3, #1
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <CylPush+0x64>)
 80005f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005f6:	2200      	movs	r2, #0
 80005f8:	4619      	mov	r1, r3
 80005fa:	f001 ff3f 	bl	800247c <HAL_GPIO_WritePin>
	}
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	08005a6c 	.word	0x08005a6c
 800060c:	20000000 	.word	0x20000000
 8000610:	20000020 	.word	0x20000020

08000614 <CylPull>:

void CylPull(uint8_t CylID){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	printf("Move B\r\n");
 800061e:	4814      	ldr	r0, [pc, #80]	; (8000670 <CylPull+0x5c>)
 8000620:	f004 fcb0 	bl	8004f84 <puts>
	if(CylID < 4){
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	2b03      	cmp	r3, #3
 8000628:	d81d      	bhi.n	8000666 <CylPull+0x52>
		HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_RESET);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	4a11      	ldr	r2, [pc, #68]	; (8000674 <CylPull+0x60>)
 8000630:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <CylPull+0x64>)
 800063a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800063e:	2200      	movs	r2, #0
 8000640:	4619      	mov	r1, r3
 8000642:	f001 ff1b 	bl	800247c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_SET);
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	3301      	adds	r3, #1
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <CylPull+0x60>)
 800064e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	3301      	adds	r3, #1
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <CylPull+0x64>)
 800065a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800065e:	2201      	movs	r2, #1
 8000660:	4619      	mov	r1, r3
 8000662:	f001 ff0b 	bl	800247c <HAL_GPIO_WritePin>
	}
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	08005a74 	.word	0x08005a74
 8000674:	20000000 	.word	0x20000000
 8000678:	20000020 	.word	0x20000020

0800067c <CylThrow>:

void CylThrow(uint8_t CylID){
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
	printf("Throw\r\n");
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <CylThrow+0x40>)
 8000688:	f004 fc7c 	bl	8004f84 <puts>
	if(CylID < 4){
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2b03      	cmp	r3, #3
 8000690:	d80f      	bhi.n	80006b2 <CylThrow+0x36>
		CylPush(CylID);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff89 	bl	80005ac <CylPush>
		HAL_Delay(DELAYMS);
 800069a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800069e:	f000 fe73 	bl	8001388 <HAL_Delay>
		CylPull(CylID);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffb5 	bl	8000614 <CylPull>
		//HAL_Delay(DELAYMS);
		//CylN(CylID);
		CylFlag[CylID]=2;
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <CylThrow+0x44>)
 80006ae:	2102      	movs	r1, #2
 80006b0:	54d1      	strb	r1, [r2, r3]
	}
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	08005a7c 	.word	0x08005a7c
 80006c0:	20000248 	.word	0x20000248

080006c4 <CylRThrow>:

void CylRThrow(uint8_t CylID){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	printf("Throw\r\n");
 80006ce:	480b      	ldr	r0, [pc, #44]	; (80006fc <CylRThrow+0x38>)
 80006d0:	f004 fc58 	bl	8004f84 <puts>
	CylPull(CylID);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff9c 	bl	8000614 <CylPull>
	HAL_Delay(DELAYMS);
 80006dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e0:	f000 fe52 	bl	8001388 <HAL_Delay>
	CylPush(CylID);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff60 	bl	80005ac <CylPush>
	//HAL_Delay(DELAYMS);
	//CylN(CylID);
	CylFlag[CylID]=2;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <CylRThrow+0x3c>)
 80006f0:	2102      	movs	r1, #2
 80006f2:	54d1      	strb	r1, [r2, r3]
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	08005a7c 	.word	0x08005a7c
 8000700:	20000248 	.word	0x20000248

08000704 <CylDrive1>:
void CylStop(uint8_t CylID){
	HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_SET);
}

void CylDrive1(uint8_t CylID){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	printf("exception1\r\n");
 800070e:	481a      	ldr	r0, [pc, #104]	; (8000778 <CylDrive1+0x74>)
 8000710:	f004 fc38 	bl	8004f84 <puts>
	switch(CylID){
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	3b03      	subs	r3, #3
 8000718:	2b03      	cmp	r3, #3
 800071a:	d829      	bhi.n	8000770 <CylDrive1+0x6c>
 800071c:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <CylDrive1+0x20>)
 800071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000722:	bf00      	nop
 8000724:	08000735 	.word	0x08000735
 8000728:	08000747 	.word	0x08000747
 800072c:	08000759 	.word	0x08000759
 8000730:	08000765 	.word	0x08000765
	case 3:
		HAL_GPIO_WritePin(GPIOs[6], GPIOPins[6], GPIO_PIN_RESET);
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <CylDrive1+0x78>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <CylDrive1+0x7c>)
 800073a:	8991      	ldrh	r1, [r2, #12]
 800073c:	2200      	movs	r2, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fe9c 	bl	800247c <HAL_GPIO_WritePin>
		break;
 8000744:	e014      	b.n	8000770 <CylDrive1+0x6c>
	case 4:
		HAL_GPIO_WritePin(GPIOs[7], GPIOPins[7], GPIO_PIN_RESET);
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <CylDrive1+0x78>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <CylDrive1+0x7c>)
 800074c:	89d1      	ldrh	r1, [r2, #14]
 800074e:	2200      	movs	r2, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f001 fe93 	bl	800247c <HAL_GPIO_WritePin>
		break;
 8000756:	e00b      	b.n	8000770 <CylDrive1+0x6c>
	case 5:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2000);
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <CylDrive1+0x80>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000760:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8000762:	e005      	b.n	8000770 <CylDrive1+0x6c>
	case 6:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1800);
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <CylDrive1+0x84>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800076c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800076e:	bf00      	nop
	}
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08005a84 	.word	0x08005a84
 800077c:	20000000 	.word	0x20000000
 8000780:	20000020 	.word	0x20000020
 8000784:	2000016c 	.word	0x2000016c
 8000788:	20000120 	.word	0x20000120

0800078c <CylDrive2>:
void CylDrive2(uint8_t CylID){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	printf("exception2\r\n");
 8000796:	481a      	ldr	r0, [pc, #104]	; (8000800 <CylDrive2+0x74>)
 8000798:	f004 fbf4 	bl	8004f84 <puts>
	switch(CylID){
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	3b03      	subs	r3, #3
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	d829      	bhi.n	80007f8 <CylDrive2+0x6c>
 80007a4:	a201      	add	r2, pc, #4	; (adr r2, 80007ac <CylDrive2+0x20>)
 80007a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007aa:	bf00      	nop
 80007ac:	080007bd 	.word	0x080007bd
 80007b0:	080007cf 	.word	0x080007cf
 80007b4:	080007e1 	.word	0x080007e1
 80007b8:	080007ed 	.word	0x080007ed
	case 3:
		HAL_GPIO_WritePin(GPIOs[6], GPIOPins[6], GPIO_PIN_SET);
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <CylDrive2+0x78>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a11      	ldr	r2, [pc, #68]	; (8000808 <CylDrive2+0x7c>)
 80007c2:	8991      	ldrh	r1, [r2, #12]
 80007c4:	2201      	movs	r2, #1
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fe58 	bl	800247c <HAL_GPIO_WritePin>
		break;
 80007cc:	e014      	b.n	80007f8 <CylDrive2+0x6c>
	case 4:
		HAL_GPIO_WritePin(GPIOs[7], GPIOPins[7], GPIO_PIN_SET);
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <CylDrive2+0x78>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <CylDrive2+0x7c>)
 80007d4:	89d1      	ldrh	r1, [r2, #14]
 80007d6:	2201      	movs	r2, #1
 80007d8:	4618      	mov	r0, r3
 80007da:	f001 fe4f 	bl	800247c <HAL_GPIO_WritePin>
		break;
 80007de:	e00b      	b.n	80007f8 <CylDrive2+0x6c>
	case 5:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <CylDrive2+0x80>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007e8:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80007ea:	e005      	b.n	80007f8 <CylDrive2+0x6c>
	case 6:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <CylDrive2+0x84>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80007f6:	bf00      	nop
	}
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	08005a90 	.word	0x08005a90
 8000804:	20000000 	.word	0x20000000
 8000808:	20000020 	.word	0x20000020
 800080c:	2000016c 	.word	0x2000016c
 8000810:	20000120 	.word	0x20000120

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f000 fd44 	bl	80012a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f855 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000822:	f000 fa41 	bl	8000ca8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000826:	f000 f9e9 	bl	8000bfc <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 800082a:	f000 f89b 	bl	8000964 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 800082e:	f000 f919 	bl	8000a64 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000832:	f000 f97d 	bl	8000b30 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(uint8_t i=0; i<7; i++){
 8000836:	2300      	movs	r3, #0
 8000838:	71fb      	strb	r3, [r7, #7]
 800083a:	e03d      	b.n	80008b8 <main+0xa4>

		  switch(CylFlag[i]){
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	4a22      	ldr	r2, [pc, #136]	; (80008c8 <main+0xb4>)
 8000840:	5cd3      	ldrb	r3, [r2, r3]
 8000842:	2b07      	cmp	r3, #7
 8000844:	d835      	bhi.n	80008b2 <main+0x9e>
 8000846:	a201      	add	r2, pc, #4	; (adr r2, 800084c <main+0x38>)
 8000848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084c:	0800086d 	.word	0x0800086d
 8000850:	08000877 	.word	0x08000877
 8000854:	08000881 	.word	0x08000881
 8000858:	0800088b 	.word	0x0800088b
 800085c:	08000895 	.word	0x08000895
 8000860:	080008b3 	.word	0x080008b3
 8000864:	0800089f 	.word	0x0800089f
 8000868:	080008a9 	.word	0x080008a9

		  		case 0:
		  			CylN(i);
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fe68 	bl	8000544 <CylN>
		  			break;
 8000874:	e01d      	b.n	80008b2 <main+0x9e>

		  		case 1:
		  			CylPush(i);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe97 	bl	80005ac <CylPush>
		  			break;
 800087e:	e018      	b.n	80008b2 <main+0x9e>

		  		case 2:
		  			CylPull(i);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fec6 	bl	8000614 <CylPull>
		  			break;
 8000888:	e013      	b.n	80008b2 <main+0x9e>

		  		case 3:
		  			CylThrow(i);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fef5 	bl	800067c <CylThrow>
		  			break;
 8000892:	e00e      	b.n	80008b2 <main+0x9e>

		  		case 4:
		  			CylRThrow(i);
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff14 	bl	80006c4 <CylRThrow>
		  			break;
 800089c:	e009      	b.n	80008b2 <main+0x9e>
		  		case 5:
		  			break;
		  		case 6:
		  			CylDrive1(i);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff2f 	bl	8000704 <CylDrive1>
		  			break;
 80008a6:	e004      	b.n	80008b2 <main+0x9e>
		  		case 7:
		  			CylDrive2(i);
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff6e 	bl	800078c <CylDrive2>
		  			break;
 80008b0:	bf00      	nop
	  for(uint8_t i=0; i<7; i++){
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	3301      	adds	r3, #1
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d9be      	bls.n	800083c <main+0x28>
		  		}

	  }

	  HAL_Delay(15);
 80008be:	200f      	movs	r0, #15
 80008c0:	f000 fd62 	bl	8001388 <HAL_Delay>
	  for(uint8_t i=0; i<7; i++){
 80008c4:	e7b7      	b.n	8000836 <main+0x22>
 80008c6:	bf00      	nop
 80008c8:	20000248 	.word	0x20000248

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	; 0x50
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0318 	add.w	r3, r7, #24
 80008d6:	2238      	movs	r2, #56	; 0x38
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 fadc 	bl	8004e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008f2:	f001 fddb 	bl	80024ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f6:	2302      	movs	r3, #2
 80008f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000900:	2340      	movs	r3, #64	; 0x40
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000904:	2302      	movs	r3, #2
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000908:	2302      	movs	r3, #2
 800090a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800090c:	2301      	movs	r3, #1
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000910:	230a      	movs	r3, #10
 8000912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800091c:	2302      	movs	r3, #2
 800091e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f107 0318 	add.w	r3, r7, #24
 8000924:	4618      	mov	r0, r3
 8000926:	f001 fe65 	bl	80025f4 <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000930:	f000 fa40 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000934:	230f      	movs	r3, #15
 8000936:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000938:	2303      	movs	r3, #3
 800093a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2102      	movs	r1, #2
 800094c:	4618      	mov	r0, r3
 800094e:	f002 f969 	bl	8002c24 <HAL_RCC_ClockConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000958:	f000 fa2c 	bl	8000db4 <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	3750      	adds	r7, #80	; 0x50
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800096a:	4b3c      	ldr	r3, [pc, #240]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 800096c:	4a3c      	ldr	r2, [pc, #240]	; (8000a60 <MX_FDCAN1_Init+0xfc>)
 800096e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000970:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000976:	4b39      	ldr	r3, [pc, #228]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800097c:	4b37      	ldr	r3, [pc, #220]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000982:	4b36      	ldr	r3, [pc, #216]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 8000984:	2200      	movs	r2, #0
 8000986:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000988:	4b34      	ldr	r3, [pc, #208]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 800098a:	2200      	movs	r2, #0
 800098c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800098e:	4b33      	ldr	r3, [pc, #204]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 8000990:	2200      	movs	r2, #0
 8000992:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000994:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 8000996:	2205      	movs	r2, #5
 8000998:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 800099a:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 800099c:	2210      	movs	r2, #16
 800099e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80009a0:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 80009a2:	220d      	movs	r2, #13
 80009a4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80009b2:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 80009b4:	2204      	movs	r2, #4
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80009b8:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 80009ba:	2205      	movs	r2, #5
 80009bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80009be:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 80009c0:	2204      	movs	r2, #4
 80009c2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80009c4:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009ca:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009d6:	4821      	ldr	r0, [pc, #132]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 80009d8:	f000 fe08 	bl	80015ec <HAL_FDCAN_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80009e2:	f000 f9e7 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIndex = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80009ee:	2302      	movs	r3, #2
 80009f0:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80009f2:	2301      	movs	r3, #1
 80009f4:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterID1 = CANID_FSTCYL;
 80009f6:	f44f 738c 	mov.w	r3, #280	; 0x118
 80009fa:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterID2 = 0x7F8;
 80009fc:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000a00:	617b      	str	r3, [r7, #20]

  	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000a02:	463b      	mov	r3, r7
 8000a04:	4619      	mov	r1, r3
 8000a06:	4815      	ldr	r0, [pc, #84]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 8000a08:	f000 ff4a 	bl	80018a0 <HAL_FDCAN_ConfigFilter>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_FDCAN1_Init+0xb2>
  		Error_Handler();
 8000a12:	f000 f9cf 	bl	8000db4 <Error_Handler>
  	}
  	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8000a16:	2300      	movs	r3, #0
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	2102      	movs	r1, #2
 8000a20:	480e      	ldr	r0, [pc, #56]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 8000a22:	f000 ff97 	bl	8001954 <HAL_FDCAN_ConfigGlobalFilter>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_FDCAN1_Init+0xcc>
  		Error_Handler();
 8000a2c:	f000 f9c2 	bl	8000db4 <Error_Handler>
  	}

  	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000a30:	480a      	ldr	r0, [pc, #40]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 8000a32:	f000 ffc0 	bl	80019b6 <HAL_FDCAN_Start>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_FDCAN1_Init+0xdc>
  		Error_Handler();
 8000a3c:	f000 f9ba 	bl	8000db4 <Error_Handler>
  	}
  	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000a40:	2200      	movs	r2, #0
 8000a42:	2101      	movs	r1, #1
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_FDCAN1_Init+0xf8>)
 8000a46:	f001 f8b9 	bl	8001bbc <HAL_FDCAN_ActivateNotification>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_FDCAN1_Init+0xf0>
  	  Error_Handler();
 8000a50:	f000 f9b0 	bl	8000db4 <Error_Handler>
  	}

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200000bc 	.word	0x200000bc
 8000a60:	40006400 	.word	0x40006400

08000a64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a76:	463b      	mov	r3, r7
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <MX_TIM2_Init+0xc8>)
 8000a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <MX_TIM2_Init+0xc8>)
 8000a92:	224f      	movs	r2, #79	; 0x4f
 8000a94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MX_TIM2_Init+0xc8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <MX_TIM2_Init+0xc8>)
 8000a9e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000aa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_TIM2_Init+0xc8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <MX_TIM2_Init+0xc8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ab0:	481e      	ldr	r0, [pc, #120]	; (8000b2c <MX_TIM2_Init+0xc8>)
 8000ab2:	f002 fcc3 	bl	800343c <HAL_TIM_PWM_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000abc:	f000 f97a 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4817      	ldr	r0, [pc, #92]	; (8000b2c <MX_TIM2_Init+0xc8>)
 8000ad0:	f003 facc 	bl	800406c <HAL_TIMEx_MasterConfigSynchronization>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ada:	f000 f96b 	bl	8000db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ade:	2360      	movs	r3, #96	; 0x60
 8000ae0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aee:	463b      	mov	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	4619      	mov	r1, r3
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_TIM2_Init+0xc8>)
 8000af6:	f002 fdf9 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b00:	f000 f958 	bl	8000db4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_TIM2_Init+0xc8>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	699a      	ldr	r2, [r3, #24]
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_TIM2_Init+0xc8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f022 0208 	bic.w	r2, r2, #8
 8000b12:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b14:	2100      	movs	r1, #0
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_TIM2_Init+0xc8>)
 8000b18:	f002 fce8 	bl	80034ec <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <MX_TIM2_Init+0xc8>)
 8000b1e:	f000 fa0f 	bl	8000f40 <HAL_TIM_MspPostInit>

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000120 	.word	0x20000120

08000b30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b54:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <MX_TIM3_Init+0xc4>)
 8000b56:	4a28      	ldr	r2, [pc, #160]	; (8000bf8 <MX_TIM3_Init+0xc8>)
 8000b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000b5a:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <MX_TIM3_Init+0xc4>)
 8000b5c:	224f      	movs	r2, #79	; 0x4f
 8000b5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <MX_TIM3_Init+0xc4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000b66:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <MX_TIM3_Init+0xc4>)
 8000b68:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000b6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <MX_TIM3_Init+0xc4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <MX_TIM3_Init+0xc4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b7a:	481e      	ldr	r0, [pc, #120]	; (8000bf4 <MX_TIM3_Init+0xc4>)
 8000b7c:	f002 fc5e 	bl	800343c <HAL_TIM_PWM_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b86:	f000 f915 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	4816      	ldr	r0, [pc, #88]	; (8000bf4 <MX_TIM3_Init+0xc4>)
 8000b9a:	f003 fa67 	bl	800406c <HAL_TIMEx_MasterConfigSynchronization>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ba4:	f000 f906 	bl	8000db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba8:	2360      	movs	r3, #96	; 0x60
 8000baa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2204      	movs	r2, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_TIM3_Init+0xc4>)
 8000bc0:	f002 fd94 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000bca:	f000 f8f3 	bl	8000db4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_TIM3_Init+0xc4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	699a      	ldr	r2, [r3, #24]
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_TIM3_Init+0xc4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bdc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000bde:	2104      	movs	r1, #4
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_TIM3_Init+0xc4>)
 8000be2:	f002 fc83 	bl	80034ec <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <MX_TIM3_Init+0xc4>)
 8000be8:	f000 f9aa 	bl	8000f40 <HAL_TIM_MspPostInit>

}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000016c 	.word	0x2000016c
 8000bf8:	40000400 	.word	0x40000400

08000bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c02:	4a27      	ldr	r2, [pc, #156]	; (8000ca0 <MX_USART2_UART_Init+0xa4>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c06:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c44:	4815      	ldr	r0, [pc, #84]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c46:	f003 fa93 	bl	8004170 <HAL_UART_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c50:	f000 f8b0 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	4811      	ldr	r0, [pc, #68]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c58:	f004 f82a 	bl	8004cb0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c62:	f000 f8a7 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c6a:	f004 f85f 	bl	8004d2c <HAL_UARTEx_SetRxFifoThreshold>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c74:	f000 f89e 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c78:	4808      	ldr	r0, [pc, #32]	; (8000c9c <MX_USART2_UART_Init+0xa0>)
 8000c7a:	f003 ffe0 	bl	8004c3e <HAL_UARTEx_DisableFifoMode>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c84:	f000 f896 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  setbuf(stdout, NULL);
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_USART2_UART_Init+0xa8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f004 f97f 	bl	8004f94 <setbuf>
  /* USER CODE END USART2_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200001b8 	.word	0x200001b8
 8000ca0:	40004400 	.word	0x40004400
 8000ca4:	2000003c 	.word	0x2000003c

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <MX_GPIO_Init+0xa8>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <MX_GPIO_Init+0xa8>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <MX_GPIO_Init+0xa8>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <MX_GPIO_Init+0xa8>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a1d      	ldr	r2, [pc, #116]	; (8000d50 <MX_GPIO_Init+0xa8>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <MX_GPIO_Init+0xa8>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CYL1A_Pin|CYL1B_Pin|CYL2A_Pin|CYL2B_Pin
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f240 7103 	movw	r1, #1795	; 0x703
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf8:	f001 fbc0 	bl	800247c <HAL_GPIO_WritePin>
                          |CYL3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CYL3B_Pin|CYL4A_Pin|CYL4B_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 719c 	mov.w	r1, #312	; 0x138
 8000d02:	4814      	ldr	r0, [pc, #80]	; (8000d54 <MX_GPIO_Init+0xac>)
 8000d04:	f001 fbba 	bl	800247c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CYL1A_Pin CYL1B_Pin CYL2A_Pin CYL2B_Pin
                           CYL3A_Pin */
  GPIO_InitStruct.Pin = CYL1A_Pin|CYL1B_Pin|CYL2A_Pin|CYL2B_Pin
 8000d08:	f240 7303 	movw	r3, #1795	; 0x703
 8000d0c:	60fb      	str	r3, [r7, #12]
                          |CYL3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f001 fa28 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : CYL3B_Pin CYL4A_Pin CYL4B_Pin LD2_Pin */
  GPIO_InitStruct.Pin = CYL3B_Pin|CYL4A_Pin|CYL4B_Pin|LD2_Pin;
 8000d28:	f44f 739c 	mov.w	r3, #312	; 0x138
 8000d2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_GPIO_Init+0xac>)
 8000d42:	f001 fa19 	bl	8002178 <HAL_GPIO_Init>

}
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000
 8000d54:	48000400 	.word	0x48000400

08000d58 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08e      	sub	sp, #56	; 0x38
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[1];
	uint8_t CylID;

	if (hfdcan == &hfdcan1) {
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d119      	bne.n	8000d9e <HAL_FDCAN_RxFifo0Callback+0x46>
		printf("Get message\r\n");
 8000d6a:	4810      	ldr	r0, [pc, #64]	; (8000dac <HAL_FDCAN_RxFifo0Callback+0x54>)
 8000d6c:	f004 f90a 	bl	8004f84 <puts>
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	f107 020c 	add.w	r2, r7, #12
 8000d78:	2140      	movs	r1, #64	; 0x40
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 fe44 	bl	8001a08 <HAL_FDCAN_GetRxMessage>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_FDCAN_RxFifo0Callback+0x32>
			Error_Handler();
 8000d86:	f000 f815 	bl	8000db4 <Error_Handler>
		}
		CylID = RxHeader.Identifier - CANID_FSTCYL;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	3b18      	subs	r3, #24
 8000d90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		CylFlag[CylID] = RxData[0];
 8000d94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d98:	7a39      	ldrb	r1, [r7, #8]
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8000d9c:	54d1      	strb	r1, [r2, r3]
		//HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], RxData[0]);

		//printf("Motor%x:%d\r\n", RxHeader.Identifier- 0x201, actMotorVel[MOTOR1]); //index is motorID-201 (0x201 - 0x201 =0)
		//Motor%x:RxHeader.Identifier- 0x201,
	}
}
 8000d9e:	bf00      	nop
 8000da0:	3738      	adds	r7, #56	; 0x38
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000bc 	.word	0x200000bc
 8000dac:	08005a9c 	.word	0x08005a9c
 8000db0:	20000248 	.word	0x20000248

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <Error_Handler+0x8>
	...

08000dc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_MspInit+0x44>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <HAL_MspInit+0x44>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_MspInit+0x44>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_MspInit+0x44>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <HAL_MspInit+0x44>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_MspInit+0x44>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b09a      	sub	sp, #104	; 0x68
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	2244      	movs	r2, #68	; 0x44
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 f835 	bl	8004e98 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a28      	ldr	r2, [pc, #160]	; (8000ed4 <HAL_FDCAN_MspInit+0xcc>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d149      	bne.n	8000ecc <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e42:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 f907 	bl	800305c <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000e54:	f7ff ffae 	bl	8000db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <HAL_FDCAN_MspInit+0xd0>)
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <HAL_FDCAN_MspInit+0xd0>)
 8000e5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e62:	6593      	str	r3, [r2, #88]	; 0x58
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_FDCAN_MspInit+0xd0>)
 8000e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_FDCAN_MspInit+0xd0>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <HAL_FDCAN_MspInit+0xd0>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_FDCAN_MspInit+0xd0>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e88:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e8c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e9a:	2309      	movs	r3, #9
 8000e9c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f001 f966 	bl	8002178 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2015      	movs	r0, #21
 8000eb2:	f000 fb66 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000eb6:	2015      	movs	r0, #21
 8000eb8:	f000 fb7d 	bl	80015b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2016      	movs	r0, #22
 8000ec2:	f000 fb5e 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000ec6:	2016      	movs	r0, #22
 8000ec8:	f000 fb75 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3768      	adds	r7, #104	; 0x68
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40006400 	.word	0x40006400
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eec:	d10c      	bne.n	8000f08 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	4a11      	ldr	r2, [pc, #68]	; (8000f38 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_TIM_PWM_MspInit+0x5c>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f06:	e010      	b.n	8000f2a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <HAL_TIM_PWM_MspInit+0x60>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d10b      	bne.n	8000f2a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40000400 	.word	0x40000400

08000f40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f60:	d11d      	bne.n	8000f9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <HAL_TIM_MspPostInit+0xac>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a21      	ldr	r2, [pc, #132]	; (8000fec <HAL_TIM_MspPostInit+0xac>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <HAL_TIM_MspPostInit+0xac>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f7a:	2320      	movs	r3, #32
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f001 f8ee 	bl	8002178 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f9c:	e021      	b.n	8000fe2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <HAL_TIM_MspPostInit+0xb0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d11c      	bne.n	8000fe2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_TIM_MspPostInit+0xac>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fac:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_TIM_MspPostInit+0xac>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_TIM_MspPostInit+0xac>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f001 f8cb 	bl	8002178 <HAL_GPIO_Init>
}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40000400 	.word	0x40000400

08000ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09a      	sub	sp, #104	; 0x68
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	2244      	movs	r2, #68	; 0x44
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f003 ff3f 	bl	8004e98 <memset>
  if(huart->Instance==USART2)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1f      	ldr	r2, [pc, #124]	; (800109c <HAL_UART_MspInit+0xa8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d136      	bne.n	8001092 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001024:	2302      	movs	r3, #2
 8001026:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4618      	mov	r0, r3
 8001032:	f002 f813 	bl	800305c <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800103c:	f7ff feba 	bl	8000db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <HAL_UART_MspInit+0xac>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001044:	4a16      	ldr	r2, [pc, #88]	; (80010a0 <HAL_UART_MspInit+0xac>)
 8001046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104a:	6593      	str	r3, [r2, #88]	; 0x58
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <HAL_UART_MspInit+0xac>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_UART_MspInit+0xac>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <HAL_UART_MspInit+0xac>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_UART_MspInit+0xac>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001070:	230c      	movs	r3, #12
 8001072:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001080:	2307      	movs	r3, #7
 8001082:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f001 f873 	bl	8002178 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3768      	adds	r7, #104	; 0x68
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40004400 	.word	0x40004400
 80010a0:	40021000 	.word	0x40021000

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <NMI_Handler+0x4>

080010aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler+0x4>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f0:	f000 f92c 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <FDCAN1_IT0_IRQHandler+0x10>)
 80010fe:	f000 fe43 	bl	8001d88 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200000bc 	.word	0x200000bc

0800110c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <FDCAN1_IT1_IRQHandler+0x10>)
 8001112:	f000 fe39 	bl	8001d88 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000bc 	.word	0x200000bc

08001120 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e00a      	b.n	8001148 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001132:	f3af 8000 	nop.w
 8001136:	4601      	mov	r1, r0
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	60ba      	str	r2, [r7, #8]
 800113e:	b2ca      	uxtb	r2, r1
 8001140:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbf0      	blt.n	8001132 <_read+0x12>
	}

return len;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_close>:
	}
	return len;
}

int _close(int file)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	return -1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001182:	605a      	str	r2, [r3, #4]
	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <_isatty>:

int _isatty(int file)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	return 1;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
	return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f003 fe26 	bl	8004e44 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20008000 	.word	0x20008000
 8001224:	00000400 	.word	0x00000400
 8001228:	20000250 	.word	0x20000250
 800122c:	20000268 	.word	0x20000268

08001230 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <SystemInit+0x20>)
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <SystemInit+0x20>)
 800123c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001256:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480d      	ldr	r0, [pc, #52]	; (8001290 <LoopForever+0x6>)
  ldr r1, =_edata
 800125a:	490e      	ldr	r1, [pc, #56]	; (8001294 <LoopForever+0xa>)
  ldr r2, =_sidata
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <LoopForever+0xe>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001270:	4c0b      	ldr	r4, [pc, #44]	; (80012a0 <LoopForever+0x16>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800127e:	f7ff ffd7 	bl	8001230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001282:	f003 fde5 	bl	8004e50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001286:	f7ff fac5 	bl	8000814 <main>

0800128a <LoopForever>:

LoopForever:
    b LoopForever
 800128a:	e7fe      	b.n	800128a <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 800128c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001298:	08005b70 	.word	0x08005b70
  ldr r2, =_sbss
 800129c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80012a0:	20000268 	.word	0x20000268

080012a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC1_2_IRQHandler>

080012a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 f95b 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b6:	2001      	movs	r0, #1
 80012b8:	f000 f80e 	bl	80012d8 <HAL_InitTick>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	e001      	b.n	80012cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c8:	f7ff fd7a 	bl	8000dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012cc:	79fb      	ldrb	r3, [r7, #7]

}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_InitTick+0x68>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d022      	beq.n	8001332 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_InitTick+0x6c>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <HAL_InitTick+0x68>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f000 f966 	bl	80015d2 <HAL_SYSTICK_Config>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10f      	bne.n	800132c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b0f      	cmp	r3, #15
 8001310:	d809      	bhi.n	8001326 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001312:	2200      	movs	r2, #0
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	f04f 30ff 	mov.w	r0, #4294967295
 800131a:	f000 f932 	bl	8001582 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_InitTick+0x70>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	e007      	b.n	8001336 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	e004      	b.n	8001336 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e001      	b.n	8001336 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000038 	.word	0x20000038
 8001344:	20000030 	.word	0x20000030
 8001348:	20000034 	.word	0x20000034

0800134c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_IncTick+0x1c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_IncTick+0x20>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4413      	add	r3, r2
 800135a:	4a03      	ldr	r2, [pc, #12]	; (8001368 <HAL_IncTick+0x1c>)
 800135c:	6013      	str	r3, [r2, #0]
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	20000254 	.word	0x20000254
 800136c:	20000038 	.word	0x20000038

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_GetTick+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000254 	.word	0x20000254

08001388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001390:	f7ff ffee 	bl	8001370 <HAL_GetTick>
 8001394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a0:	d004      	beq.n	80013ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_Delay+0x40>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ac:	bf00      	nop
 80013ae:	f7ff ffdf 	bl	8001370 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d8f7      	bhi.n	80013ae <HAL_Delay+0x26>
  {
  }
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000038 	.word	0x20000038

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <__NVIC_EnableIRQ+0x38>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff8e 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff29 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff40 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff90 	bl	80014c0 <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5f 	bl	800146c <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff33 	bl	8001430 <__NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffa4 	bl	8001528 <SysTick_Config>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e147      	b.n	800188e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fbf8 	bl	8000e08 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699a      	ldr	r2, [r3, #24]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0210 	bic.w	r2, r2, #16
 8001626:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001628:	f7ff fea2 	bl	8001370 <HAL_GetTick>
 800162c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800162e:	e012      	b.n	8001656 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001630:	f7ff fe9e 	bl	8001370 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b0a      	cmp	r3, #10
 800163c:	d90b      	bls.n	8001656 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2203      	movs	r2, #3
 800164e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e11b      	b.n	800188e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b08      	cmp	r3, #8
 8001662:	d0e5      	beq.n	8001630 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699a      	ldr	r2, [r3, #24]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001674:	f7ff fe7c 	bl	8001370 <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800167a:	e012      	b.n	80016a2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800167c:	f7ff fe78 	bl	8001370 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b0a      	cmp	r3, #10
 8001688:	d90b      	bls.n	80016a2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168e:	f043 0201 	orr.w	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2203      	movs	r2, #3
 800169a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0f5      	b.n	800188e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0e5      	beq.n	800167c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699a      	ldr	r2, [r3, #24]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0202 	orr.w	r2, r2, #2
 80016be:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a74      	ldr	r2, [pc, #464]	; (8001898 <HAL_FDCAN_Init+0x2ac>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d103      	bne.n	80016d2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80016ca:	4a74      	ldr	r2, [pc, #464]	; (800189c <HAL_FDCAN_Init+0x2b0>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7c1b      	ldrb	r3, [r3, #16]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d108      	bne.n	80016ec <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	699a      	ldr	r2, [r3, #24]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016e8:	619a      	str	r2, [r3, #24]
 80016ea:	e007      	b.n	80016fc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699a      	ldr	r2, [r3, #24]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016fa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7c5b      	ldrb	r3, [r3, #17]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d108      	bne.n	8001716 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001712:	619a      	str	r2, [r3, #24]
 8001714:	e007      	b.n	8001726 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	699a      	ldr	r2, [r3, #24]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001724:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7c9b      	ldrb	r3, [r3, #18]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d108      	bne.n	8001740 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	699a      	ldr	r2, [r3, #24]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800173c:	619a      	str	r2, [r3, #24]
 800173e:	e007      	b.n	8001750 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699a      	ldr	r2, [r3, #24]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800174e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	699a      	ldr	r2, [r3, #24]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001774:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0210 	bic.w	r2, r2, #16
 8001784:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d108      	bne.n	80017a0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	699a      	ldr	r2, [r3, #24]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0204 	orr.w	r2, r2, #4
 800179c:	619a      	str	r2, [r3, #24]
 800179e:	e02c      	b.n	80017fa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d028      	beq.n	80017fa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d01c      	beq.n	80017ea <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699a      	ldr	r2, [r3, #24]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017be:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0210 	orr.w	r2, r2, #16
 80017ce:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d110      	bne.n	80017fa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699a      	ldr	r2, [r3, #24]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0220 	orr.w	r2, r2, #32
 80017e6:	619a      	str	r2, [r3, #24]
 80017e8:	e007      	b.n	80017fa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	699a      	ldr	r2, [r3, #24]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f042 0220 	orr.w	r2, r2, #32
 80017f8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	3b01      	subs	r3, #1
 8001800:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	3b01      	subs	r3, #1
 8001808:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800180a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001812:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	3b01      	subs	r3, #1
 800181c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001822:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001824:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800182e:	d115      	bne.n	800185c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	3b01      	subs	r3, #1
 800183c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800183e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	3b01      	subs	r3, #1
 8001846:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001848:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	3b01      	subs	r3, #1
 8001852:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001858:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800185a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 fc2a 	bl	80020cc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40006400 	.word	0x40006400
 800189c:	40006500 	.word	0x40006500

080018a0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80018b0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d002      	beq.n	80018be <HAL_FDCAN_ConfigFilter+0x1e>
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d13d      	bne.n	800193a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d119      	bne.n	80018fa <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80018d2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80018da:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e01d      	b.n	8001936 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	075a      	lsls	r2, r3, #29
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	079a      	lsls	r2, r3, #30
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	4313      	orrs	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4413      	add	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	3304      	adds	r3, #4
 800192e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e006      	b.n	8001948 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193e:	f043 0202 	orr.w	r2, r3, #2
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
  }
}
 8001948:	4618      	mov	r0, r3
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b01      	cmp	r3, #1
 800196c:	d116      	bne.n	800199c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001976:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	011a      	lsls	r2, r3, #4
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	431a      	orrs	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	431a      	orrs	r2, r3
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	431a      	orrs	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	e006      	b.n	80019aa <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a0:	f043 0204 	orr.w	r2, r3, #4
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
  }
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d110      	bne.n	80019ec <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2202      	movs	r2, #2
 80019ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699a      	ldr	r2, [r3, #24]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e006      	b.n	80019fa <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f0:	f043 0204 	orr.w	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b08b      	sub	sp, #44	; 0x2c
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a1c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001a1e:	7efb      	ldrb	r3, [r7, #27]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	f040 80bc 	bne.w	8001b9e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b40      	cmp	r3, #64	; 0x40
 8001a2a:	d121      	bne.n	8001a70 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d107      	bne.n	8001a4c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0af      	b.n	8001bac <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	440b      	add	r3, r1
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	e020      	b.n	8001ab2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d107      	bne.n	8001a90 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e08d      	b.n	8001bac <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4413      	add	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	440b      	add	r3, r1
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d107      	bne.n	8001ad6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	0c9b      	lsrs	r3, r3, #18
 8001acc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e005      	b.n	8001ae2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	3304      	adds	r3, #4
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	0e1b      	lsrs	r3, r3, #24
 8001b34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0fda      	lsrs	r2, r3, #31
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	3304      	adds	r3, #4
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	e00a      	b.n	8001b6c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	441a      	add	r2, r3
 8001b5c:	6839      	ldr	r1, [r7, #0]
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	440b      	add	r3, r1
 8001b62:	7812      	ldrb	r2, [r2, #0]
 8001b64:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	4a11      	ldr	r2, [pc, #68]	; (8001bb8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001b74:	5cd3      	ldrb	r3, [r2, r3]
 8001b76:	461a      	mov	r2, r3
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d3eb      	bcc.n	8001b56 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b40      	cmp	r3, #64	; 0x40
 8001b82:	d105      	bne.n	8001b90 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001b8e:	e004      	b.n	8001b9a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e006      	b.n	8001bac <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba2:	f043 0208 	orr.w	r2, r3, #8
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
  }
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	372c      	adds	r7, #44	; 0x2c
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	08005ac4 	.word	0x08005ac4

08001bbc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001bce:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d003      	beq.n	8001bde <HAL_FDCAN_ActivateNotification+0x22>
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	f040 80c8 	bne.w	8001d6e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d004      	beq.n	8001bfa <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d03b      	beq.n	8001c72 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d031      	beq.n	8001c72 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d027      	beq.n	8001c72 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d01d      	beq.n	8001c72 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d013      	beq.n	8001c72 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d004      	beq.n	8001c5e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00c      	beq.n	8001c82 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d107      	bne.n	8001c82 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0201 	orr.w	r2, r2, #1
 8001c80:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d13b      	bne.n	8001d0e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d004      	beq.n	8001caa <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d131      	bne.n	8001d0e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d004      	beq.n	8001cbe <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d127      	bne.n	8001d0e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d004      	beq.n	8001cd2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d11d      	bne.n	8001d0e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d113      	bne.n	8001d0e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d004      	beq.n	8001cfa <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00c      	beq.n	8001d1e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0202 	orr.w	r2, r2, #2
 8001d1c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d009      	beq.n	8001d3c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d009      	beq.n	8001d5a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e006      	b.n	8001d7c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d72:	f043 0202 	orr.w	r2, r3, #2
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
  }
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d96:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da4:	4013      	ands	r3, r2
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dba:	6a3a      	ldr	r2, [r7, #32]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dca:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dde:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001de2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dfa:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4013      	ands	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00d      	beq.n	8001e32 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d006      	beq.n	8001e32 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2240      	movs	r2, #64	; 0x40
 8001e2a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f92e 	bl	800208e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01b      	beq.n	8001e78 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d014      	beq.n	8001e78 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e56:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e6e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001e70:	6939      	ldr	r1, [r7, #16]
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8ec 	bl	8002050 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e84:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f8b6 	bl	8001ffa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6a3a      	ldr	r2, [r7, #32]
 8001e9a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001e9c:	6a39      	ldr	r1, [r7, #32]
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe ff5a 	bl	8000d58 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001eb2:	69f9      	ldr	r1, [r7, #28]
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f8ab 	bl	8002010 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00e      	beq.n	8001ee6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ede:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f8a0 	bl	8002026 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01a      	beq.n	8001f2a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d013      	beq.n	8001f2a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f0a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4013      	ands	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2280      	movs	r2, #128	; 0x80
 8001f20:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001f22:	68f9      	ldr	r1, [r7, #12]
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f888 	bl	800203a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00e      	beq.n	8001f56 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f4e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f888 	bl	8002066 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00e      	beq.n	8001f82 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f7a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f87c 	bl	800207a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d011      	beq.n	8001fb4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fa6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001fc2:	6979      	ldr	r1, [r7, #20]
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f876 	bl	80020b6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d009      	beq.n	8001fe4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f858 	bl	80020a2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3728      	adds	r7, #40	; 0x28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80020d4:	4b27      	ldr	r3, [pc, #156]	; (8002174 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80020d6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020e6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ee:	041a      	lsls	r2, r3, #16
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800210c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002114:	061a      	lsls	r2, r3, #24
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e005      	b.n	800215a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	3304      	adds	r3, #4
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	429a      	cmp	r2, r3
 8002164:	d3f3      	bcc.n	800214e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002166:	bf00      	nop
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	4000a400 	.word	0x4000a400

08002178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002186:	e15a      	b.n	800243e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	4013      	ands	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 814c 	beq.w	8002438 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d005      	beq.n	80021b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d130      	bne.n	800221a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ee:	2201      	movs	r2, #1
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	f003 0201 	and.w	r2, r3, #1
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b03      	cmp	r3, #3
 8002224:	d017      	beq.n	8002256 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d123      	bne.n	80022aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	6939      	ldr	r1, [r7, #16]
 80022a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0203 	and.w	r2, r3, #3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80a6 	beq.w	8002438 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ec:	4b5b      	ldr	r3, [pc, #364]	; (800245c <HAL_GPIO_Init+0x2e4>)
 80022ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f0:	4a5a      	ldr	r2, [pc, #360]	; (800245c <HAL_GPIO_Init+0x2e4>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6613      	str	r3, [r2, #96]	; 0x60
 80022f8:	4b58      	ldr	r3, [pc, #352]	; (800245c <HAL_GPIO_Init+0x2e4>)
 80022fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002304:	4a56      	ldr	r2, [pc, #344]	; (8002460 <HAL_GPIO_Init+0x2e8>)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	089b      	lsrs	r3, r3, #2
 800230a:	3302      	adds	r3, #2
 800230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800232e:	d01f      	beq.n	8002370 <HAL_GPIO_Init+0x1f8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a4c      	ldr	r2, [pc, #304]	; (8002464 <HAL_GPIO_Init+0x2ec>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d019      	beq.n	800236c <HAL_GPIO_Init+0x1f4>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a4b      	ldr	r2, [pc, #300]	; (8002468 <HAL_GPIO_Init+0x2f0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <HAL_GPIO_Init+0x1f0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a4a      	ldr	r2, [pc, #296]	; (800246c <HAL_GPIO_Init+0x2f4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00d      	beq.n	8002364 <HAL_GPIO_Init+0x1ec>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a49      	ldr	r2, [pc, #292]	; (8002470 <HAL_GPIO_Init+0x2f8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d007      	beq.n	8002360 <HAL_GPIO_Init+0x1e8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a48      	ldr	r2, [pc, #288]	; (8002474 <HAL_GPIO_Init+0x2fc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_GPIO_Init+0x1e4>
 8002358:	2305      	movs	r3, #5
 800235a:	e00a      	b.n	8002372 <HAL_GPIO_Init+0x1fa>
 800235c:	2306      	movs	r3, #6
 800235e:	e008      	b.n	8002372 <HAL_GPIO_Init+0x1fa>
 8002360:	2304      	movs	r3, #4
 8002362:	e006      	b.n	8002372 <HAL_GPIO_Init+0x1fa>
 8002364:	2303      	movs	r3, #3
 8002366:	e004      	b.n	8002372 <HAL_GPIO_Init+0x1fa>
 8002368:	2302      	movs	r3, #2
 800236a:	e002      	b.n	8002372 <HAL_GPIO_Init+0x1fa>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_GPIO_Init+0x1fa>
 8002370:	2300      	movs	r3, #0
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	f002 0203 	and.w	r2, r2, #3
 8002378:	0092      	lsls	r2, r2, #2
 800237a:	4093      	lsls	r3, r2
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002382:	4937      	ldr	r1, [pc, #220]	; (8002460 <HAL_GPIO_Init+0x2e8>)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002390:	4b39      	ldr	r3, [pc, #228]	; (8002478 <HAL_GPIO_Init+0x300>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023b4:	4a30      	ldr	r2, [pc, #192]	; (8002478 <HAL_GPIO_Init+0x300>)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HAL_GPIO_Init+0x300>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023de:	4a26      	ldr	r2, [pc, #152]	; (8002478 <HAL_GPIO_Init+0x300>)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80023e4:	4b24      	ldr	r3, [pc, #144]	; (8002478 <HAL_GPIO_Init+0x300>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002408:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <HAL_GPIO_Init+0x300>)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <HAL_GPIO_Init+0x300>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002432:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_GPIO_Init+0x300>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	f47f ae9d 	bne.w	8002188 <HAL_GPIO_Init+0x10>
  }
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40021000 	.word	0x40021000
 8002460:	40010000 	.word	0x40010000
 8002464:	48000400 	.word	0x48000400
 8002468:	48000800 	.word	0x48000800
 800246c:	48000c00 	.word	0x48000c00
 8002470:	48001000 	.word	0x48001000
 8002474:	48001400 	.word	0x48001400
 8002478:	40010400 	.word	0x40010400

0800247c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
 8002488:	4613      	mov	r3, r2
 800248a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800248c:	787b      	ldrb	r3, [r7, #1]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d141      	bne.n	800253e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ba:	4b4b      	ldr	r3, [pc, #300]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c6:	d131      	bne.n	800252c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024c8:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024ce:	4a46      	ldr	r2, [pc, #280]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024d8:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024e0:	4a41      	ldr	r2, [pc, #260]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024e8:	4b40      	ldr	r3, [pc, #256]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2232      	movs	r2, #50	; 0x32
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	4a3f      	ldr	r2, [pc, #252]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	0c9b      	lsrs	r3, r3, #18
 80024fa:	3301      	adds	r3, #1
 80024fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024fe:	e002      	b.n	8002506 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3b01      	subs	r3, #1
 8002504:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002506:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002512:	d102      	bne.n	800251a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f2      	bne.n	8002500 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800251a:	4b33      	ldr	r3, [pc, #204]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002526:	d158      	bne.n	80025da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e057      	b.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800252c:	4b2e      	ldr	r3, [pc, #184]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800252e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002532:	4a2d      	ldr	r2, [pc, #180]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002538:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800253c:	e04d      	b.n	80025da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002544:	d141      	bne.n	80025ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002546:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800254e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002552:	d131      	bne.n	80025b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002554:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800255a:	4a23      	ldr	r2, [pc, #140]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002560:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002564:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800256c:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800256e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002572:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2232      	movs	r2, #50	; 0x32
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	0c9b      	lsrs	r3, r3, #18
 8002586:	3301      	adds	r3, #1
 8002588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800258a:	e002      	b.n	8002592 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	3b01      	subs	r3, #1
 8002590:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259e:	d102      	bne.n	80025a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f2      	bne.n	800258c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b2:	d112      	bne.n	80025da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e011      	b.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025be:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80025c8:	e007      	b.n	80025da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40007000 	.word	0x40007000
 80025ec:	20000030 	.word	0x20000030
 80025f0:	431bde83 	.word	0x431bde83

080025f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e306      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d075      	beq.n	80026fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002612:	4b97      	ldr	r3, [pc, #604]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800261c:	4b94      	ldr	r3, [pc, #592]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	d102      	bne.n	8002632 <HAL_RCC_OscConfig+0x3e>
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b03      	cmp	r3, #3
 8002630:	d002      	beq.n	8002638 <HAL_RCC_OscConfig+0x44>
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d10b      	bne.n	8002650 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	4b8d      	ldr	r3, [pc, #564]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d05b      	beq.n	80026fc <HAL_RCC_OscConfig+0x108>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d157      	bne.n	80026fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e2e1      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d106      	bne.n	8002668 <HAL_RCC_OscConfig+0x74>
 800265a:	4b85      	ldr	r3, [pc, #532]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a84      	ldr	r2, [pc, #528]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e01d      	b.n	80026a4 <HAL_RCC_OscConfig+0xb0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x98>
 8002672:	4b7f      	ldr	r3, [pc, #508]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a7e      	ldr	r2, [pc, #504]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b7c      	ldr	r3, [pc, #496]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a7b      	ldr	r2, [pc, #492]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0xb0>
 800268c:	4b78      	ldr	r3, [pc, #480]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a77      	ldr	r2, [pc, #476]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b75      	ldr	r3, [pc, #468]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a74      	ldr	r2, [pc, #464]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800269e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fe60 	bl	8001370 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe fe5c 	bl	8001370 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e2a6      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c6:	4b6a      	ldr	r3, [pc, #424]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0xc0>
 80026d2:	e014      	b.n	80026fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fe4c 	bl	8001370 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026dc:	f7fe fe48 	bl	8001370 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e292      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ee:	4b60      	ldr	r3, [pc, #384]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0xe8>
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d075      	beq.n	80027f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270a:	4b59      	ldr	r3, [pc, #356]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002714:	4b56      	ldr	r3, [pc, #344]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	d102      	bne.n	800272a <HAL_RCC_OscConfig+0x136>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d002      	beq.n	8002730 <HAL_RCC_OscConfig+0x13c>
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b04      	cmp	r3, #4
 800272e:	d11f      	bne.n	8002770 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002730:	4b4f      	ldr	r3, [pc, #316]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_OscConfig+0x154>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e265      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002748:	4b49      	ldr	r3, [pc, #292]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	4946      	ldr	r1, [pc, #280]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800275c:	4b45      	ldr	r3, [pc, #276]	; (8002874 <HAL_RCC_OscConfig+0x280>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe fdb9 	bl	80012d8 <HAL_InitTick>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d043      	beq.n	80027f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e251      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d023      	beq.n	80027c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002778:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a3c      	ldr	r2, [pc, #240]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800277e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe fdf4 	bl	8001370 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7fe fdf0 	bl	8001370 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e23a      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800279e:	4b34      	ldr	r3, [pc, #208]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027aa:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	061b      	lsls	r3, r3, #24
 80027b8:	492d      	ldr	r1, [pc, #180]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
 80027be:	e01a      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c0:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2a      	ldr	r2, [pc, #168]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fdd0 	bl	8001370 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d4:	f7fe fdcc 	bl	8001370 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e216      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e6:	4b22      	ldr	r3, [pc, #136]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x1e0>
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d041      	beq.n	8002886 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01c      	beq.n	8002844 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800280c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002810:	4a17      	ldr	r2, [pc, #92]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281a:	f7fe fda9 	bl	8001370 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002822:	f7fe fda5 	bl	8001370 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e1ef      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ef      	beq.n	8002822 <HAL_RCC_OscConfig+0x22e>
 8002842:	e020      	b.n	8002886 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002844:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800284a:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HAL_RCC_OscConfig+0x27c>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe fd8c 	bl	8001370 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800285a:	e00d      	b.n	8002878 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285c:	f7fe fd88 	bl	8001370 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d906      	bls.n	8002878 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1d2      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002878:	4b8c      	ldr	r3, [pc, #560]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800287a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1ea      	bne.n	800285c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80a6 	beq.w	80029e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002898:	4b84      	ldr	r3, [pc, #528]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_OscConfig+0x2b4>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x2b6>
 80028a8:	2300      	movs	r3, #0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	4b7f      	ldr	r3, [pc, #508]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	4a7e      	ldr	r2, [pc, #504]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b8:	6593      	str	r3, [r2, #88]	; 0x58
 80028ba:	4b7c      	ldr	r3, [pc, #496]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028c6:	2301      	movs	r3, #1
 80028c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ca:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <HAL_RCC_OscConfig+0x4bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d118      	bne.n	8002908 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d6:	4b76      	ldr	r3, [pc, #472]	; (8002ab0 <HAL_RCC_OscConfig+0x4bc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a75      	ldr	r2, [pc, #468]	; (8002ab0 <HAL_RCC_OscConfig+0x4bc>)
 80028dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e2:	f7fe fd45 	bl	8001370 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ea:	f7fe fd41 	bl	8001370 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e18b      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fc:	4b6c      	ldr	r3, [pc, #432]	; (8002ab0 <HAL_RCC_OscConfig+0x4bc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d108      	bne.n	8002922 <HAL_RCC_OscConfig+0x32e>
 8002910:	4b66      	ldr	r3, [pc, #408]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	4a65      	ldr	r2, [pc, #404]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002920:	e024      	b.n	800296c <HAL_RCC_OscConfig+0x378>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b05      	cmp	r3, #5
 8002928:	d110      	bne.n	800294c <HAL_RCC_OscConfig+0x358>
 800292a:	4b60      	ldr	r3, [pc, #384]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	4a5e      	ldr	r2, [pc, #376]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800293a:	4b5c      	ldr	r3, [pc, #368]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	4a5a      	ldr	r2, [pc, #360]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800294a:	e00f      	b.n	800296c <HAL_RCC_OscConfig+0x378>
 800294c:	4b57      	ldr	r3, [pc, #348]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	4a56      	ldr	r2, [pc, #344]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800295c:	4b53      	ldr	r3, [pc, #332]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	4a52      	ldr	r2, [pc, #328]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002964:	f023 0304 	bic.w	r3, r3, #4
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d016      	beq.n	80029a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7fe fcfc 	bl	8001370 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe fcf8 	bl	8001370 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e140      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002992:	4b46      	ldr	r3, [pc, #280]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ed      	beq.n	800297c <HAL_RCC_OscConfig+0x388>
 80029a0:	e015      	b.n	80029ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7fe fce5 	bl	8001370 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fe fce1 	bl	8001370 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e129      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029c0:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1ed      	bne.n	80029aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ce:	7ffb      	ldrb	r3, [r7, #31]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d105      	bne.n	80029e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d4:	4b35      	ldr	r3, [pc, #212]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	4a34      	ldr	r2, [pc, #208]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d03c      	beq.n	8002a66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01c      	beq.n	8002a2e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029fa:	4a2c      	ldr	r2, [pc, #176]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe fcb4 	bl	8001370 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a0c:	f7fe fcb0 	bl	8001370 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0fa      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ef      	beq.n	8002a0c <HAL_RCC_OscConfig+0x418>
 8002a2c:	e01b      	b.n	8002a66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a2e:	4b1f      	ldr	r3, [pc, #124]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a34:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fc97 	bl	8001370 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a46:	f7fe fc93 	bl	8001370 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e0dd      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1ef      	bne.n	8002a46 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80d1 	beq.w	8002c12 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b0c      	cmp	r3, #12
 8002a7a:	f000 808b 	beq.w	8002b94 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d15e      	bne.n	8002b44 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a08      	ldr	r2, [pc, #32]	; (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a92:	f7fe fc6d 	bl	8001370 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a98:	e00c      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9a:	f7fe fc69 	bl	8001370 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d905      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e0b3      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab4:	4b59      	ldr	r3, [pc, #356]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ec      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac0:	4b56      	ldr	r3, [pc, #344]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	4b56      	ldr	r3, [pc, #344]	; (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6a11      	ldr	r1, [r2, #32]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ad0:	3a01      	subs	r2, #1
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	4311      	orrs	r1, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002ada:	0212      	lsls	r2, r2, #8
 8002adc:	4311      	orrs	r1, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ae2:	0852      	lsrs	r2, r2, #1
 8002ae4:	3a01      	subs	r2, #1
 8002ae6:	0552      	lsls	r2, r2, #21
 8002ae8:	4311      	orrs	r1, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002aee:	0852      	lsrs	r2, r2, #1
 8002af0:	3a01      	subs	r2, #1
 8002af2:	0652      	lsls	r2, r2, #25
 8002af4:	4311      	orrs	r1, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002afa:	06d2      	lsls	r2, r2, #27
 8002afc:	430a      	orrs	r2, r1
 8002afe:	4947      	ldr	r1, [pc, #284]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b04:	4b45      	ldr	r3, [pc, #276]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a44      	ldr	r2, [pc, #272]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b10:	4b42      	ldr	r3, [pc, #264]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a41      	ldr	r2, [pc, #260]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fc28 	bl	8001370 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe fc24 	bl	8001370 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e06e      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b36:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x530>
 8002b42:	e066      	b.n	8002c12 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b35      	ldr	r3, [pc, #212]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a34      	ldr	r2, [pc, #208]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b50:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a31      	ldr	r2, [pc, #196]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b56:	f023 0303 	bic.w	r3, r3, #3
 8002b5a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002b5c:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a2e      	ldr	r2, [pc, #184]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b62:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fc00 	bl	8001370 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fe fbfc 	bl	8001370 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e046      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b86:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x580>
 8002b92:	e03e      	b.n	8002c12 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e039      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <HAL_RCC_OscConfig+0x628>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0203 	and.w	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d12c      	bne.n	8002c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d123      	bne.n	8002c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d11b      	bne.n	8002c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d113      	bne.n	8002c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d109      	bne.n	8002c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	3b01      	subs	r3, #1
 8002c08:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	019f800c 	.word	0x019f800c

08002c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e11e      	b.n	8002e7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b91      	ldr	r3, [pc, #580]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d910      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b8e      	ldr	r3, [pc, #568]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 020f 	bic.w	r2, r3, #15
 8002c52:	498c      	ldr	r1, [pc, #560]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b8a      	ldr	r3, [pc, #552]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e106      	b.n	8002e7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d073      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d129      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c80:	4b81      	ldr	r3, [pc, #516]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0f4      	b.n	8002e7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002c90:	f000 f99e 	bl	8002fd0 <RCC_GetSysClockFreqFromPLLSource>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4a7c      	ldr	r2, [pc, #496]	; (8002e8c <HAL_RCC_ClockConfig+0x268>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d93f      	bls.n	8002d1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c9e:	4b7a      	ldr	r3, [pc, #488]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d033      	beq.n	8002d1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d12f      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cbe:	4b72      	ldr	r3, [pc, #456]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cc6:	4a70      	ldr	r2, [pc, #448]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ccc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e024      	b.n	8002d1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d107      	bne.n	8002cec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cdc:	4b6a      	ldr	r3, [pc, #424]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0c6      	b.n	8002e7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cec:	4b66      	ldr	r3, [pc, #408]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0be      	b.n	8002e7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002cfc:	f000 f8ce 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4a61      	ldr	r2, [pc, #388]	; (8002e8c <HAL_RCC_ClockConfig+0x268>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d909      	bls.n	8002d1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d0a:	4b5f      	ldr	r3, [pc, #380]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d12:	4a5d      	ldr	r2, [pc, #372]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d1e:	4b5a      	ldr	r3, [pc, #360]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f023 0203 	bic.w	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4957      	ldr	r1, [pc, #348]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d30:	f7fe fb1e 	bl	8001370 <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d38:	f7fe fb1a 	bl	8001370 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e095      	b.n	8002e7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	4b4e      	ldr	r3, [pc, #312]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 020c 	and.w	r2, r3, #12
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d1eb      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d023      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d78:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4a42      	ldr	r2, [pc, #264]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002d90:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d98:	4a3b      	ldr	r2, [pc, #236]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da0:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4936      	ldr	r1, [pc, #216]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	d105      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002dba:	4b33      	ldr	r3, [pc, #204]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4a32      	ldr	r2, [pc, #200]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002dc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc6:	4b2f      	ldr	r3, [pc, #188]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d21d      	bcs.n	8002e10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f023 020f 	bic.w	r2, r3, #15
 8002ddc:	4929      	ldr	r1, [pc, #164]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002de4:	f7fe fac4 	bl	8001370 <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7fe fac0 	bl	8001370 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e03b      	b.n	8002e7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCC_ClockConfig+0x260>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1ed      	bne.n	8002dec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4917      	ldr	r1, [pc, #92]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	490f      	ldr	r1, [pc, #60]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e4e:	f000 f825 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <HAL_RCC_ClockConfig+0x264>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	490c      	ldr	r1, [pc, #48]	; (8002e90 <HAL_RCC_ClockConfig+0x26c>)
 8002e60:	5ccb      	ldrb	r3, [r1, r3]
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <HAL_RCC_ClockConfig+0x270>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <HAL_RCC_ClockConfig+0x274>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fa30 	bl	80012d8 <HAL_InitTick>
 8002e78:	4603      	mov	r3, r0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40022000 	.word	0x40022000
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	04c4b400 	.word	0x04c4b400
 8002e90:	08005aac 	.word	0x08005aac
 8002e94:	20000030 	.word	0x20000030
 8002e98:	20000034 	.word	0x20000034

08002e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ea2:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d102      	bne.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eae:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	e047      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002eb4:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d102      	bne.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ec0:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	e03e      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d136      	bne.n	8002f40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002edc:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d10c      	bne.n	8002f0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ef0:	4a1a      	ldr	r2, [pc, #104]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	4a16      	ldr	r2, [pc, #88]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002efa:	68d2      	ldr	r2, [r2, #12]
 8002efc:	0a12      	lsrs	r2, r2, #8
 8002efe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
      break;
 8002f08:	e00c      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f0a:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f12:	4a10      	ldr	r2, [pc, #64]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f14:	68d2      	ldr	r2, [r2, #12]
 8002f16:	0a12      	lsrs	r2, r2, #8
 8002f18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f1c:	fb02 f303 	mul.w	r3, r2, r3
 8002f20:	617b      	str	r3, [r7, #20]
      break;
 8002f22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	0e5b      	lsrs	r3, r3, #25
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	e001      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f44:	693b      	ldr	r3, [r7, #16]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	00f42400 	.word	0x00f42400
 8002f5c:	007a1200 	.word	0x007a1200

08002f60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f66:	681b      	ldr	r3, [r3, #0]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000030 	.word	0x20000030

08002f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f7c:	f7ff fff0 	bl	8002f60 <HAL_RCC_GetHCLKFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	4904      	ldr	r1, [pc, #16]	; (8002fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	08005abc 	.word	0x08005abc

08002fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fa8:	f7ff ffda 	bl	8002f60 <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	0adb      	lsrs	r3, r3, #11
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4904      	ldr	r1, [pc, #16]	; (8002fcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08005abc 	.word	0x08005abc

08002fd0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	3301      	adds	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d10c      	bne.n	800300e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ff4:	4a17      	ldr	r2, [pc, #92]	; (8003054 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ffe:	68d2      	ldr	r2, [r2, #12]
 8003000:	0a12      	lsrs	r2, r2, #8
 8003002:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	617b      	str	r3, [r7, #20]
    break;
 800300c:	e00c      	b.n	8003028 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800300e:	4a12      	ldr	r2, [pc, #72]	; (8003058 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	fbb2 f3f3 	udiv	r3, r2, r3
 8003016:	4a0e      	ldr	r2, [pc, #56]	; (8003050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003018:	68d2      	ldr	r2, [r2, #12]
 800301a:	0a12      	lsrs	r2, r2, #8
 800301c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]
    break;
 8003026:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	0e5b      	lsrs	r3, r3, #25
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	3301      	adds	r3, #1
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003042:	687b      	ldr	r3, [r7, #4]
}
 8003044:	4618      	mov	r0, r3
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	40021000 	.word	0x40021000
 8003054:	007a1200 	.word	0x007a1200
 8003058:	00f42400 	.word	0x00f42400

0800305c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003064:	2300      	movs	r3, #0
 8003066:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003068:	2300      	movs	r3, #0
 800306a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8098 	beq.w	80031aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307e:	4b43      	ldr	r3, [pc, #268]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10d      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	4b40      	ldr	r3, [pc, #256]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	4a3f      	ldr	r2, [pc, #252]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003094:	6593      	str	r3, [r2, #88]	; 0x58
 8003096:	4b3d      	ldr	r3, [pc, #244]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a2:	2301      	movs	r3, #1
 80030a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a6:	4b3a      	ldr	r3, [pc, #232]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a39      	ldr	r2, [pc, #228]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b2:	f7fe f95d 	bl	8001370 <HAL_GetTick>
 80030b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030b8:	e009      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ba:	f7fe f959 	bl	8001370 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d902      	bls.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	74fb      	strb	r3, [r7, #19]
        break;
 80030cc:	e005      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ce:	4b30      	ldr	r3, [pc, #192]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0ef      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d159      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030e0:	4b2a      	ldr	r3, [pc, #168]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01e      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d019      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030fc:	4b23      	ldr	r3, [pc, #140]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003106:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003108:	4b20      	ldr	r3, [pc, #128]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	4a1f      	ldr	r2, [pc, #124]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003118:	4b1c      	ldr	r3, [pc, #112]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	4a1b      	ldr	r2, [pc, #108]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d016      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe f919 	bl	8001370 <HAL_GetTick>
 800313e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003140:	e00b      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe f915 	bl	8001370 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d902      	bls.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	74fb      	strb	r3, [r7, #19]
            break;
 8003158:	e006      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ec      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10b      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	4903      	ldr	r1, [pc, #12]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003184:	e008      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003186:	7cfb      	ldrb	r3, [r7, #19]
 8003188:	74bb      	strb	r3, [r7, #18]
 800318a:	e005      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003198:	7c7b      	ldrb	r3, [r7, #17]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319e:	4ba6      	ldr	r3, [pc, #664]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	4aa5      	ldr	r2, [pc, #660]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031b6:	4ba0      	ldr	r3, [pc, #640]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f023 0203 	bic.w	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	499c      	ldr	r1, [pc, #624]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031d8:	4b97      	ldr	r3, [pc, #604]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f023 020c 	bic.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	4994      	ldr	r1, [pc, #592]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031fa:	4b8f      	ldr	r3, [pc, #572]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003200:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	498b      	ldr	r1, [pc, #556]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800321c:	4b86      	ldr	r3, [pc, #536]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	4983      	ldr	r1, [pc, #524]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800323e:	4b7e      	ldr	r3, [pc, #504]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	497a      	ldr	r1, [pc, #488]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003260:	4b75      	ldr	r3, [pc, #468]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	4972      	ldr	r1, [pc, #456]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003282:	4b6d      	ldr	r3, [pc, #436]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	4969      	ldr	r1, [pc, #420]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032a4:	4b64      	ldr	r3, [pc, #400]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	4961      	ldr	r1, [pc, #388]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032c6:	4b5c      	ldr	r3, [pc, #368]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	4958      	ldr	r1, [pc, #352]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d015      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032e8:	4b53      	ldr	r3, [pc, #332]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	4950      	ldr	r1, [pc, #320]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003306:	d105      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003308:	4b4b      	ldr	r3, [pc, #300]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4a4a      	ldr	r2, [pc, #296]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800330e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003312:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003320:	4b45      	ldr	r3, [pc, #276]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	4942      	ldr	r1, [pc, #264]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800333e:	d105      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003340:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a3c      	ldr	r2, [pc, #240]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800334a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d015      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003358:	4b37      	ldr	r3, [pc, #220]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4934      	ldr	r1, [pc, #208]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003376:	d105      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003378:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a2e      	ldr	r2, [pc, #184]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003382:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d015      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003390:	4b29      	ldr	r3, [pc, #164]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	4926      	ldr	r1, [pc, #152]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ae:	d105      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b0:	4b21      	ldr	r3, [pc, #132]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a20      	ldr	r2, [pc, #128]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d015      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	4918      	ldr	r1, [pc, #96]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033e6:	d105      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e8:	4b13      	ldr	r3, [pc, #76]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a12      	ldr	r2, [pc, #72]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d015      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003400:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	490a      	ldr	r1, [pc, #40]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800341e:	d105      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a04      	ldr	r2, [pc, #16]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800342c:	7cbb      	ldrb	r3, [r7, #18]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e049      	b.n	80034e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fd fd3a 	bl	8000edc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	4619      	mov	r1, r3
 800347a:	4610      	mov	r0, r2
 800347c:	f000 fa4a 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <HAL_TIM_PWM_Start+0x24>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e03c      	b.n	800358a <HAL_TIM_PWM_Start+0x9e>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b04      	cmp	r3, #4
 8003514:	d109      	bne.n	800352a <HAL_TIM_PWM_Start+0x3e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	bf14      	ite	ne
 8003522:	2301      	movne	r3, #1
 8003524:	2300      	moveq	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	e02f      	b.n	800358a <HAL_TIM_PWM_Start+0x9e>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d109      	bne.n	8003544 <HAL_TIM_PWM_Start+0x58>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e022      	b.n	800358a <HAL_TIM_PWM_Start+0x9e>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d109      	bne.n	800355e <HAL_TIM_PWM_Start+0x72>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e015      	b.n	800358a <HAL_TIM_PWM_Start+0x9e>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b10      	cmp	r3, #16
 8003562:	d109      	bne.n	8003578 <HAL_TIM_PWM_Start+0x8c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e008      	b.n	800358a <HAL_TIM_PWM_Start+0x9e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e097      	b.n	80036c2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_PWM_Start+0xb6>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a0:	e023      	b.n	80035ea <HAL_TIM_PWM_Start+0xfe>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_PWM_Start+0xc6>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b0:	e01b      	b.n	80035ea <HAL_TIM_PWM_Start+0xfe>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start+0xd6>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c0:	e013      	b.n	80035ea <HAL_TIM_PWM_Start+0xfe>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_PWM_Start+0xe6>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035d0:	e00b      	b.n	80035ea <HAL_TIM_PWM_Start+0xfe>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_PWM_Start+0xf6>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035e0:	e003      	b.n	80035ea <HAL_TIM_PWM_Start+0xfe>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2201      	movs	r2, #1
 80035f0:	6839      	ldr	r1, [r7, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fd14 	bl	8004020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a33      	ldr	r2, [pc, #204]	; (80036cc <HAL_TIM_PWM_Start+0x1e0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_TIM_PWM_Start+0x13e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a32      	ldr	r2, [pc, #200]	; (80036d0 <HAL_TIM_PWM_Start+0x1e4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00e      	beq.n	800362a <HAL_TIM_PWM_Start+0x13e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a30      	ldr	r2, [pc, #192]	; (80036d4 <HAL_TIM_PWM_Start+0x1e8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_TIM_PWM_Start+0x13e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a2f      	ldr	r2, [pc, #188]	; (80036d8 <HAL_TIM_PWM_Start+0x1ec>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_TIM_PWM_Start+0x13e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2d      	ldr	r2, [pc, #180]	; (80036dc <HAL_TIM_PWM_Start+0x1f0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_TIM_PWM_Start+0x142>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_TIM_PWM_Start+0x144>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003642:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a20      	ldr	r2, [pc, #128]	; (80036cc <HAL_TIM_PWM_Start+0x1e0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d018      	beq.n	8003680 <HAL_TIM_PWM_Start+0x194>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003656:	d013      	beq.n	8003680 <HAL_TIM_PWM_Start+0x194>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a20      	ldr	r2, [pc, #128]	; (80036e0 <HAL_TIM_PWM_Start+0x1f4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00e      	beq.n	8003680 <HAL_TIM_PWM_Start+0x194>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1f      	ldr	r2, [pc, #124]	; (80036e4 <HAL_TIM_PWM_Start+0x1f8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d009      	beq.n	8003680 <HAL_TIM_PWM_Start+0x194>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a17      	ldr	r2, [pc, #92]	; (80036d0 <HAL_TIM_PWM_Start+0x1e4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_TIM_PWM_Start+0x194>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a16      	ldr	r2, [pc, #88]	; (80036d4 <HAL_TIM_PWM_Start+0x1e8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d115      	bne.n	80036ac <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <HAL_TIM_PWM_Start+0x1fc>)
 8003688:	4013      	ands	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b06      	cmp	r3, #6
 8003690:	d015      	beq.n	80036be <HAL_TIM_PWM_Start+0x1d2>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d011      	beq.n	80036be <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0201 	orr.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036aa:	e008      	b.n	80036be <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e000      	b.n	80036c0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40012c00 	.word	0x40012c00
 80036d0:	40013400 	.word	0x40013400
 80036d4:	40014000 	.word	0x40014000
 80036d8:	40014400 	.word	0x40014400
 80036dc:	40014800 	.word	0x40014800
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800
 80036e8:	00010007 	.word	0x00010007

080036ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003706:	2302      	movs	r3, #2
 8003708:	e0ff      	b.n	800390a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b14      	cmp	r3, #20
 8003716:	f200 80f0 	bhi.w	80038fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800371a:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003720:	08003775 	.word	0x08003775
 8003724:	080038fb 	.word	0x080038fb
 8003728:	080038fb 	.word	0x080038fb
 800372c:	080038fb 	.word	0x080038fb
 8003730:	080037b5 	.word	0x080037b5
 8003734:	080038fb 	.word	0x080038fb
 8003738:	080038fb 	.word	0x080038fb
 800373c:	080038fb 	.word	0x080038fb
 8003740:	080037f7 	.word	0x080037f7
 8003744:	080038fb 	.word	0x080038fb
 8003748:	080038fb 	.word	0x080038fb
 800374c:	080038fb 	.word	0x080038fb
 8003750:	08003837 	.word	0x08003837
 8003754:	080038fb 	.word	0x080038fb
 8003758:	080038fb 	.word	0x080038fb
 800375c:	080038fb 	.word	0x080038fb
 8003760:	08003879 	.word	0x08003879
 8003764:	080038fb 	.word	0x080038fb
 8003768:	080038fb 	.word	0x080038fb
 800376c:	080038fb 	.word	0x080038fb
 8003770:	080038b9 	.word	0x080038b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f95a 	bl	8003a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0208 	orr.w	r2, r2, #8
 800378e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0204 	bic.w	r2, r2, #4
 800379e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6999      	ldr	r1, [r3, #24]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	619a      	str	r2, [r3, #24]
      break;
 80037b2:	e0a5      	b.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f9ca 	bl	8003b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6999      	ldr	r1, [r3, #24]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	021a      	lsls	r2, r3, #8
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	619a      	str	r2, [r3, #24]
      break;
 80037f4:	e084      	b.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fa33 	bl	8003c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0208 	orr.w	r2, r2, #8
 8003810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0204 	bic.w	r2, r2, #4
 8003820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69d9      	ldr	r1, [r3, #28]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	61da      	str	r2, [r3, #28]
      break;
 8003834:	e064      	b.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fa9b 	bl	8003d78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69d9      	ldr	r1, [r3, #28]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	021a      	lsls	r2, r3, #8
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	61da      	str	r2, [r3, #28]
      break;
 8003876:	e043      	b.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fb04 	bl	8003e8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0208 	orr.w	r2, r2, #8
 8003892:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80038b6:	e023      	b.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fb48 	bl	8003f54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	021a      	lsls	r2, r3, #8
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80038f8:	e002      	b.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	75fb      	strb	r3, [r7, #23]
      break;
 80038fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003908:	7dfb      	ldrb	r3, [r7, #23]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop

08003914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a3c      	ldr	r2, [pc, #240]	; (8003a18 <TIM_Base_SetConfig+0x104>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00f      	beq.n	800394c <TIM_Base_SetConfig+0x38>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003932:	d00b      	beq.n	800394c <TIM_Base_SetConfig+0x38>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a39      	ldr	r2, [pc, #228]	; (8003a1c <TIM_Base_SetConfig+0x108>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d007      	beq.n	800394c <TIM_Base_SetConfig+0x38>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a38      	ldr	r2, [pc, #224]	; (8003a20 <TIM_Base_SetConfig+0x10c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d003      	beq.n	800394c <TIM_Base_SetConfig+0x38>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a37      	ldr	r2, [pc, #220]	; (8003a24 <TIM_Base_SetConfig+0x110>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d108      	bne.n	800395e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2d      	ldr	r2, [pc, #180]	; (8003a18 <TIM_Base_SetConfig+0x104>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01b      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396c:	d017      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a2a      	ldr	r2, [pc, #168]	; (8003a1c <TIM_Base_SetConfig+0x108>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a29      	ldr	r2, [pc, #164]	; (8003a20 <TIM_Base_SetConfig+0x10c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00f      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a28      	ldr	r2, [pc, #160]	; (8003a24 <TIM_Base_SetConfig+0x110>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00b      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a27      	ldr	r2, [pc, #156]	; (8003a28 <TIM_Base_SetConfig+0x114>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d007      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a26      	ldr	r2, [pc, #152]	; (8003a2c <TIM_Base_SetConfig+0x118>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d003      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a25      	ldr	r2, [pc, #148]	; (8003a30 <TIM_Base_SetConfig+0x11c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d108      	bne.n	80039b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a10      	ldr	r2, [pc, #64]	; (8003a18 <TIM_Base_SetConfig+0x104>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00f      	beq.n	80039fc <TIM_Base_SetConfig+0xe8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a11      	ldr	r2, [pc, #68]	; (8003a24 <TIM_Base_SetConfig+0x110>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00b      	beq.n	80039fc <TIM_Base_SetConfig+0xe8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a10      	ldr	r2, [pc, #64]	; (8003a28 <TIM_Base_SetConfig+0x114>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d007      	beq.n	80039fc <TIM_Base_SetConfig+0xe8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a0f      	ldr	r2, [pc, #60]	; (8003a2c <TIM_Base_SetConfig+0x118>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d003      	beq.n	80039fc <TIM_Base_SetConfig+0xe8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a0e      	ldr	r2, [pc, #56]	; (8003a30 <TIM_Base_SetConfig+0x11c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d103      	bne.n	8003a04 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	615a      	str	r2, [r3, #20]
}
 8003a0a:	bf00      	nop
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40000800 	.word	0x40000800
 8003a24:	40013400 	.word	0x40013400
 8003a28:	40014000 	.word	0x40014000
 8003a2c:	40014400 	.word	0x40014400
 8003a30:	40014800 	.word	0x40014800

08003a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f023 0201 	bic.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0303 	bic.w	r3, r3, #3
 8003a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f023 0302 	bic.w	r3, r3, #2
 8003a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a2c      	ldr	r2, [pc, #176]	; (8003b40 <TIM_OC1_SetConfig+0x10c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00f      	beq.n	8003ab4 <TIM_OC1_SetConfig+0x80>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a2b      	ldr	r2, [pc, #172]	; (8003b44 <TIM_OC1_SetConfig+0x110>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00b      	beq.n	8003ab4 <TIM_OC1_SetConfig+0x80>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a2a      	ldr	r2, [pc, #168]	; (8003b48 <TIM_OC1_SetConfig+0x114>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d007      	beq.n	8003ab4 <TIM_OC1_SetConfig+0x80>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a29      	ldr	r2, [pc, #164]	; (8003b4c <TIM_OC1_SetConfig+0x118>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <TIM_OC1_SetConfig+0x80>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a28      	ldr	r2, [pc, #160]	; (8003b50 <TIM_OC1_SetConfig+0x11c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d10c      	bne.n	8003ace <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f023 0308 	bic.w	r3, r3, #8
 8003aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f023 0304 	bic.w	r3, r3, #4
 8003acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1b      	ldr	r2, [pc, #108]	; (8003b40 <TIM_OC1_SetConfig+0x10c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00f      	beq.n	8003af6 <TIM_OC1_SetConfig+0xc2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a1a      	ldr	r2, [pc, #104]	; (8003b44 <TIM_OC1_SetConfig+0x110>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <TIM_OC1_SetConfig+0xc2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a19      	ldr	r2, [pc, #100]	; (8003b48 <TIM_OC1_SetConfig+0x114>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d007      	beq.n	8003af6 <TIM_OC1_SetConfig+0xc2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a18      	ldr	r2, [pc, #96]	; (8003b4c <TIM_OC1_SetConfig+0x118>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d003      	beq.n	8003af6 <TIM_OC1_SetConfig+0xc2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <TIM_OC1_SetConfig+0x11c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d111      	bne.n	8003b1a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	621a      	str	r2, [r3, #32]
}
 8003b34:	bf00      	nop
 8003b36:	371c      	adds	r7, #28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40013400 	.word	0x40013400
 8003b48:	40014000 	.word	0x40014000
 8003b4c:	40014400 	.word	0x40014400
 8003b50:	40014800 	.word	0x40014800

08003b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f023 0210 	bic.w	r2, r3, #16
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f023 0320 	bic.w	r3, r3, #32
 8003ba2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a28      	ldr	r2, [pc, #160]	; (8003c54 <TIM_OC2_SetConfig+0x100>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d003      	beq.n	8003bc0 <TIM_OC2_SetConfig+0x6c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a27      	ldr	r2, [pc, #156]	; (8003c58 <TIM_OC2_SetConfig+0x104>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d10d      	bne.n	8003bdc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a1d      	ldr	r2, [pc, #116]	; (8003c54 <TIM_OC2_SetConfig+0x100>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00f      	beq.n	8003c04 <TIM_OC2_SetConfig+0xb0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <TIM_OC2_SetConfig+0x104>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00b      	beq.n	8003c04 <TIM_OC2_SetConfig+0xb0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a1b      	ldr	r2, [pc, #108]	; (8003c5c <TIM_OC2_SetConfig+0x108>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d007      	beq.n	8003c04 <TIM_OC2_SetConfig+0xb0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a1a      	ldr	r2, [pc, #104]	; (8003c60 <TIM_OC2_SetConfig+0x10c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d003      	beq.n	8003c04 <TIM_OC2_SetConfig+0xb0>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a19      	ldr	r2, [pc, #100]	; (8003c64 <TIM_OC2_SetConfig+0x110>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d113      	bne.n	8003c2c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40013400 	.word	0x40013400
 8003c5c:	40014000 	.word	0x40014000
 8003c60:	40014400 	.word	0x40014400
 8003c64:	40014800 	.word	0x40014800

08003c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0303 	bic.w	r3, r3, #3
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	021b      	lsls	r3, r3, #8
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a27      	ldr	r2, [pc, #156]	; (8003d64 <TIM_OC3_SetConfig+0xfc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <TIM_OC3_SetConfig+0x6a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a26      	ldr	r2, [pc, #152]	; (8003d68 <TIM_OC3_SetConfig+0x100>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d10d      	bne.n	8003cee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <TIM_OC3_SetConfig+0xfc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00f      	beq.n	8003d16 <TIM_OC3_SetConfig+0xae>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a1b      	ldr	r2, [pc, #108]	; (8003d68 <TIM_OC3_SetConfig+0x100>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00b      	beq.n	8003d16 <TIM_OC3_SetConfig+0xae>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <TIM_OC3_SetConfig+0x104>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d007      	beq.n	8003d16 <TIM_OC3_SetConfig+0xae>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <TIM_OC3_SetConfig+0x108>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d003      	beq.n	8003d16 <TIM_OC3_SetConfig+0xae>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <TIM_OC3_SetConfig+0x10c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d113      	bne.n	8003d3e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	621a      	str	r2, [r3, #32]
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40013400 	.word	0x40013400
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40014400 	.word	0x40014400
 8003d74:	40014800 	.word	0x40014800

08003d78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	031b      	lsls	r3, r3, #12
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a28      	ldr	r2, [pc, #160]	; (8003e78 <TIM_OC4_SetConfig+0x100>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d003      	beq.n	8003de4 <TIM_OC4_SetConfig+0x6c>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a27      	ldr	r2, [pc, #156]	; (8003e7c <TIM_OC4_SetConfig+0x104>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d10d      	bne.n	8003e00 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	031b      	lsls	r3, r3, #12
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a1d      	ldr	r2, [pc, #116]	; (8003e78 <TIM_OC4_SetConfig+0x100>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00f      	beq.n	8003e28 <TIM_OC4_SetConfig+0xb0>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <TIM_OC4_SetConfig+0x104>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00b      	beq.n	8003e28 <TIM_OC4_SetConfig+0xb0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <TIM_OC4_SetConfig+0x108>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d007      	beq.n	8003e28 <TIM_OC4_SetConfig+0xb0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a1a      	ldr	r2, [pc, #104]	; (8003e84 <TIM_OC4_SetConfig+0x10c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d003      	beq.n	8003e28 <TIM_OC4_SetConfig+0xb0>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a19      	ldr	r2, [pc, #100]	; (8003e88 <TIM_OC4_SetConfig+0x110>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d113      	bne.n	8003e50 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e2e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e36:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	019b      	lsls	r3, r3, #6
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	019b      	lsls	r3, r3, #6
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	621a      	str	r2, [r3, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40012c00 	.word	0x40012c00
 8003e7c:	40013400 	.word	0x40013400
 8003e80:	40014000 	.word	0x40014000
 8003e84:	40014400 	.word	0x40014400
 8003e88:	40014800 	.word	0x40014800

08003e8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ed0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	041b      	lsls	r3, r3, #16
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a17      	ldr	r2, [pc, #92]	; (8003f40 <TIM_OC5_SetConfig+0xb4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00f      	beq.n	8003f06 <TIM_OC5_SetConfig+0x7a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a16      	ldr	r2, [pc, #88]	; (8003f44 <TIM_OC5_SetConfig+0xb8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00b      	beq.n	8003f06 <TIM_OC5_SetConfig+0x7a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a15      	ldr	r2, [pc, #84]	; (8003f48 <TIM_OC5_SetConfig+0xbc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <TIM_OC5_SetConfig+0x7a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <TIM_OC5_SetConfig+0xc0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <TIM_OC5_SetConfig+0x7a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <TIM_OC5_SetConfig+0xc4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d109      	bne.n	8003f1a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	621a      	str	r2, [r3, #32]
}
 8003f34:	bf00      	nop
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40012c00 	.word	0x40012c00
 8003f44:	40013400 	.word	0x40013400
 8003f48:	40014000 	.word	0x40014000
 8003f4c:	40014400 	.word	0x40014400
 8003f50:	40014800 	.word	0x40014800

08003f54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	051b      	lsls	r3, r3, #20
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a18      	ldr	r2, [pc, #96]	; (800400c <TIM_OC6_SetConfig+0xb8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00f      	beq.n	8003fd0 <TIM_OC6_SetConfig+0x7c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a17      	ldr	r2, [pc, #92]	; (8004010 <TIM_OC6_SetConfig+0xbc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00b      	beq.n	8003fd0 <TIM_OC6_SetConfig+0x7c>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a16      	ldr	r2, [pc, #88]	; (8004014 <TIM_OC6_SetConfig+0xc0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d007      	beq.n	8003fd0 <TIM_OC6_SetConfig+0x7c>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a15      	ldr	r2, [pc, #84]	; (8004018 <TIM_OC6_SetConfig+0xc4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_OC6_SetConfig+0x7c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a14      	ldr	r2, [pc, #80]	; (800401c <TIM_OC6_SetConfig+0xc8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d109      	bne.n	8003fe4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	029b      	lsls	r3, r3, #10
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40012c00 	.word	0x40012c00
 8004010:	40013400 	.word	0x40013400
 8004014:	40014000 	.word	0x40014000
 8004018:	40014400 	.word	0x40014400
 800401c:	40014800 	.word	0x40014800

08004020 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	2201      	movs	r2, #1
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	43db      	mvns	r3, r3
 8004042:	401a      	ands	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a1a      	ldr	r2, [r3, #32]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	431a      	orrs	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004080:	2302      	movs	r3, #2
 8004082:	e065      	b.n	8004150 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a2c      	ldr	r2, [pc, #176]	; (800415c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d004      	beq.n	80040b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2b      	ldr	r2, [pc, #172]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d108      	bne.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80040d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1b      	ldr	r2, [pc, #108]	; (800415c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d018      	beq.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fa:	d013      	beq.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a18      	ldr	r2, [pc, #96]	; (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a17      	ldr	r2, [pc, #92]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d009      	beq.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a12      	ldr	r2, [pc, #72]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a13      	ldr	r2, [pc, #76]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d10c      	bne.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800412a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	4313      	orrs	r3, r2
 8004134:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40013400 	.word	0x40013400
 8004164:	40000400 	.word	0x40000400
 8004168:	40000800 	.word	0x40000800
 800416c:	40014000 	.word	0x40014000

08004170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e042      	b.n	8004208 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7fc ff2d 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2224      	movs	r2, #36	; 0x24
 800419e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0201 	bic.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f8c2 	bl	800433c <UART_SetConfig>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e022      	b.n	8004208 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fb82 	bl	80048d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fc09 	bl	8004a18 <UART_CheckIdleState>
 8004206:	4603      	mov	r3, r0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08a      	sub	sp, #40	; 0x28
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004226:	2b20      	cmp	r3, #32
 8004228:	f040 8083 	bne.w	8004332 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_UART_Transmit+0x28>
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e07b      	b.n	8004334 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_UART_Transmit+0x3a>
 8004246:	2302      	movs	r3, #2
 8004248:	e074      	b.n	8004334 <HAL_UART_Transmit+0x124>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2221      	movs	r2, #33	; 0x21
 800425e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004262:	f7fd f885 	bl	8001370 <HAL_GetTick>
 8004266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	88fa      	ldrh	r2, [r7, #6]
 800426c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	88fa      	ldrh	r2, [r7, #6]
 8004274:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004280:	d108      	bne.n	8004294 <HAL_UART_Transmit+0x84>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d104      	bne.n	8004294 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	e003      	b.n	800429c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004298:	2300      	movs	r3, #0
 800429a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80042a4:	e02c      	b.n	8004300 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2200      	movs	r2, #0
 80042ae:	2180      	movs	r1, #128	; 0x80
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 fbfc 	bl	8004aae <UART_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e039      	b.n	8004334 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	3302      	adds	r3, #2
 80042da:	61bb      	str	r3, [r7, #24]
 80042dc:	e007      	b.n	80042ee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	3301      	adds	r3, #1
 80042ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1cc      	bne.n	80042a6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2200      	movs	r2, #0
 8004314:	2140      	movs	r1, #64	; 0x40
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fbc9 	bl	8004aae <UART_WaitOnFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e006      	b.n	8004334 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	e000      	b.n	8004334 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004332:	2302      	movs	r3, #2
  }
}
 8004334:	4618      	mov	r0, r3
 8004336:	3720      	adds	r7, #32
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800433c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004340:	b08c      	sub	sp, #48	; 0x30
 8004342:	af00      	add	r7, sp, #0
 8004344:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	431a      	orrs	r2, r3
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	431a      	orrs	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	4313      	orrs	r3, r2
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4bab      	ldr	r3, [pc, #684]	; (8004618 <UART_SetConfig+0x2dc>)
 800436c:	4013      	ands	r3, r2
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004374:	430b      	orrs	r3, r1
 8004376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4aa0      	ldr	r2, [pc, #640]	; (800461c <UART_SetConfig+0x2e0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043a4:	4313      	orrs	r3, r2
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80043b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043bc:	430b      	orrs	r3, r1
 80043be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	f023 010f 	bic.w	r1, r3, #15
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a91      	ldr	r2, [pc, #580]	; (8004620 <UART_SetConfig+0x2e4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d125      	bne.n	800442c <UART_SetConfig+0xf0>
 80043e0:	4b90      	ldr	r3, [pc, #576]	; (8004624 <UART_SetConfig+0x2e8>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d81a      	bhi.n	8004424 <UART_SetConfig+0xe8>
 80043ee:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <UART_SetConfig+0xb8>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	08004405 	.word	0x08004405
 80043f8:	08004415 	.word	0x08004415
 80043fc:	0800440d 	.word	0x0800440d
 8004400:	0800441d 	.word	0x0800441d
 8004404:	2301      	movs	r3, #1
 8004406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800440a:	e0d6      	b.n	80045ba <UART_SetConfig+0x27e>
 800440c:	2302      	movs	r3, #2
 800440e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004412:	e0d2      	b.n	80045ba <UART_SetConfig+0x27e>
 8004414:	2304      	movs	r3, #4
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800441a:	e0ce      	b.n	80045ba <UART_SetConfig+0x27e>
 800441c:	2308      	movs	r3, #8
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004422:	e0ca      	b.n	80045ba <UART_SetConfig+0x27e>
 8004424:	2310      	movs	r3, #16
 8004426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800442a:	e0c6      	b.n	80045ba <UART_SetConfig+0x27e>
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a7d      	ldr	r2, [pc, #500]	; (8004628 <UART_SetConfig+0x2ec>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d138      	bne.n	80044a8 <UART_SetConfig+0x16c>
 8004436:	4b7b      	ldr	r3, [pc, #492]	; (8004624 <UART_SetConfig+0x2e8>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f003 030c 	and.w	r3, r3, #12
 8004440:	2b0c      	cmp	r3, #12
 8004442:	d82d      	bhi.n	80044a0 <UART_SetConfig+0x164>
 8004444:	a201      	add	r2, pc, #4	; (adr r2, 800444c <UART_SetConfig+0x110>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	08004481 	.word	0x08004481
 8004450:	080044a1 	.word	0x080044a1
 8004454:	080044a1 	.word	0x080044a1
 8004458:	080044a1 	.word	0x080044a1
 800445c:	08004491 	.word	0x08004491
 8004460:	080044a1 	.word	0x080044a1
 8004464:	080044a1 	.word	0x080044a1
 8004468:	080044a1 	.word	0x080044a1
 800446c:	08004489 	.word	0x08004489
 8004470:	080044a1 	.word	0x080044a1
 8004474:	080044a1 	.word	0x080044a1
 8004478:	080044a1 	.word	0x080044a1
 800447c:	08004499 	.word	0x08004499
 8004480:	2300      	movs	r3, #0
 8004482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004486:	e098      	b.n	80045ba <UART_SetConfig+0x27e>
 8004488:	2302      	movs	r3, #2
 800448a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800448e:	e094      	b.n	80045ba <UART_SetConfig+0x27e>
 8004490:	2304      	movs	r3, #4
 8004492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004496:	e090      	b.n	80045ba <UART_SetConfig+0x27e>
 8004498:	2308      	movs	r3, #8
 800449a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800449e:	e08c      	b.n	80045ba <UART_SetConfig+0x27e>
 80044a0:	2310      	movs	r3, #16
 80044a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a6:	e088      	b.n	80045ba <UART_SetConfig+0x27e>
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a5f      	ldr	r2, [pc, #380]	; (800462c <UART_SetConfig+0x2f0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d125      	bne.n	80044fe <UART_SetConfig+0x1c2>
 80044b2:	4b5c      	ldr	r3, [pc, #368]	; (8004624 <UART_SetConfig+0x2e8>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044bc:	2b30      	cmp	r3, #48	; 0x30
 80044be:	d016      	beq.n	80044ee <UART_SetConfig+0x1b2>
 80044c0:	2b30      	cmp	r3, #48	; 0x30
 80044c2:	d818      	bhi.n	80044f6 <UART_SetConfig+0x1ba>
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d00a      	beq.n	80044de <UART_SetConfig+0x1a2>
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d814      	bhi.n	80044f6 <UART_SetConfig+0x1ba>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <UART_SetConfig+0x19a>
 80044d0:	2b10      	cmp	r3, #16
 80044d2:	d008      	beq.n	80044e6 <UART_SetConfig+0x1aa>
 80044d4:	e00f      	b.n	80044f6 <UART_SetConfig+0x1ba>
 80044d6:	2300      	movs	r3, #0
 80044d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044dc:	e06d      	b.n	80045ba <UART_SetConfig+0x27e>
 80044de:	2302      	movs	r3, #2
 80044e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044e4:	e069      	b.n	80045ba <UART_SetConfig+0x27e>
 80044e6:	2304      	movs	r3, #4
 80044e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ec:	e065      	b.n	80045ba <UART_SetConfig+0x27e>
 80044ee:	2308      	movs	r3, #8
 80044f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044f4:	e061      	b.n	80045ba <UART_SetConfig+0x27e>
 80044f6:	2310      	movs	r3, #16
 80044f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044fc:	e05d      	b.n	80045ba <UART_SetConfig+0x27e>
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a4b      	ldr	r2, [pc, #300]	; (8004630 <UART_SetConfig+0x2f4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d125      	bne.n	8004554 <UART_SetConfig+0x218>
 8004508:	4b46      	ldr	r3, [pc, #280]	; (8004624 <UART_SetConfig+0x2e8>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004512:	2bc0      	cmp	r3, #192	; 0xc0
 8004514:	d016      	beq.n	8004544 <UART_SetConfig+0x208>
 8004516:	2bc0      	cmp	r3, #192	; 0xc0
 8004518:	d818      	bhi.n	800454c <UART_SetConfig+0x210>
 800451a:	2b80      	cmp	r3, #128	; 0x80
 800451c:	d00a      	beq.n	8004534 <UART_SetConfig+0x1f8>
 800451e:	2b80      	cmp	r3, #128	; 0x80
 8004520:	d814      	bhi.n	800454c <UART_SetConfig+0x210>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <UART_SetConfig+0x1f0>
 8004526:	2b40      	cmp	r3, #64	; 0x40
 8004528:	d008      	beq.n	800453c <UART_SetConfig+0x200>
 800452a:	e00f      	b.n	800454c <UART_SetConfig+0x210>
 800452c:	2300      	movs	r3, #0
 800452e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004532:	e042      	b.n	80045ba <UART_SetConfig+0x27e>
 8004534:	2302      	movs	r3, #2
 8004536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800453a:	e03e      	b.n	80045ba <UART_SetConfig+0x27e>
 800453c:	2304      	movs	r3, #4
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004542:	e03a      	b.n	80045ba <UART_SetConfig+0x27e>
 8004544:	2308      	movs	r3, #8
 8004546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800454a:	e036      	b.n	80045ba <UART_SetConfig+0x27e>
 800454c:	2310      	movs	r3, #16
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004552:	e032      	b.n	80045ba <UART_SetConfig+0x27e>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a30      	ldr	r2, [pc, #192]	; (800461c <UART_SetConfig+0x2e0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d12a      	bne.n	80045b4 <UART_SetConfig+0x278>
 800455e:	4b31      	ldr	r3, [pc, #196]	; (8004624 <UART_SetConfig+0x2e8>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004568:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800456c:	d01a      	beq.n	80045a4 <UART_SetConfig+0x268>
 800456e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004572:	d81b      	bhi.n	80045ac <UART_SetConfig+0x270>
 8004574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004578:	d00c      	beq.n	8004594 <UART_SetConfig+0x258>
 800457a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457e:	d815      	bhi.n	80045ac <UART_SetConfig+0x270>
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <UART_SetConfig+0x250>
 8004584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004588:	d008      	beq.n	800459c <UART_SetConfig+0x260>
 800458a:	e00f      	b.n	80045ac <UART_SetConfig+0x270>
 800458c:	2300      	movs	r3, #0
 800458e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004592:	e012      	b.n	80045ba <UART_SetConfig+0x27e>
 8004594:	2302      	movs	r3, #2
 8004596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800459a:	e00e      	b.n	80045ba <UART_SetConfig+0x27e>
 800459c:	2304      	movs	r3, #4
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045a2:	e00a      	b.n	80045ba <UART_SetConfig+0x27e>
 80045a4:	2308      	movs	r3, #8
 80045a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045aa:	e006      	b.n	80045ba <UART_SetConfig+0x27e>
 80045ac:	2310      	movs	r3, #16
 80045ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045b2:	e002      	b.n	80045ba <UART_SetConfig+0x27e>
 80045b4:	2310      	movs	r3, #16
 80045b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a17      	ldr	r2, [pc, #92]	; (800461c <UART_SetConfig+0x2e0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	f040 80a8 	bne.w	8004716 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d834      	bhi.n	8004638 <UART_SetConfig+0x2fc>
 80045ce:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <UART_SetConfig+0x298>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	080045f9 	.word	0x080045f9
 80045d8:	08004639 	.word	0x08004639
 80045dc:	08004601 	.word	0x08004601
 80045e0:	08004639 	.word	0x08004639
 80045e4:	08004607 	.word	0x08004607
 80045e8:	08004639 	.word	0x08004639
 80045ec:	08004639 	.word	0x08004639
 80045f0:	08004639 	.word	0x08004639
 80045f4:	0800460f 	.word	0x0800460f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f8:	f7fe fcbe 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 80045fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045fe:	e021      	b.n	8004644 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <UART_SetConfig+0x2f8>)
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004604:	e01e      	b.n	8004644 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004606:	f7fe fc49 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 800460a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800460c:	e01a      	b.n	8004644 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800460e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004614:	e016      	b.n	8004644 <UART_SetConfig+0x308>
 8004616:	bf00      	nop
 8004618:	cfff69f3 	.word	0xcfff69f3
 800461c:	40008000 	.word	0x40008000
 8004620:	40013800 	.word	0x40013800
 8004624:	40021000 	.word	0x40021000
 8004628:	40004400 	.word	0x40004400
 800462c:	40004800 	.word	0x40004800
 8004630:	40004c00 	.word	0x40004c00
 8004634:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004642:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 812a 	beq.w	80048a0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	4a9e      	ldr	r2, [pc, #632]	; (80048cc <UART_SetConfig+0x590>)
 8004652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004656:	461a      	mov	r2, r3
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	fbb3 f3f2 	udiv	r3, r3, r2
 800465e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	4413      	add	r3, r2
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	429a      	cmp	r2, r3
 800466e:	d305      	bcc.n	800467c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	429a      	cmp	r2, r3
 800467a:	d903      	bls.n	8004684 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004682:	e10d      	b.n	80048a0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	2200      	movs	r2, #0
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	60fa      	str	r2, [r7, #12]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	4a8e      	ldr	r2, [pc, #568]	; (80048cc <UART_SetConfig+0x590>)
 8004692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004696:	b29b      	uxth	r3, r3
 8004698:	2200      	movs	r2, #0
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046a6:	f7fb fdb7 	bl	8000218 <__aeabi_uldivmod>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4610      	mov	r0, r2
 80046b0:	4619      	mov	r1, r3
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	020b      	lsls	r3, r1, #8
 80046bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046c0:	0202      	lsls	r2, r0, #8
 80046c2:	6979      	ldr	r1, [r7, #20]
 80046c4:	6849      	ldr	r1, [r1, #4]
 80046c6:	0849      	lsrs	r1, r1, #1
 80046c8:	2000      	movs	r0, #0
 80046ca:	460c      	mov	r4, r1
 80046cc:	4605      	mov	r5, r0
 80046ce:	eb12 0804 	adds.w	r8, r2, r4
 80046d2:	eb43 0905 	adc.w	r9, r3, r5
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	469a      	mov	sl, r3
 80046de:	4693      	mov	fp, r2
 80046e0:	4652      	mov	r2, sl
 80046e2:	465b      	mov	r3, fp
 80046e4:	4640      	mov	r0, r8
 80046e6:	4649      	mov	r1, r9
 80046e8:	f7fb fd96 	bl	8000218 <__aeabi_uldivmod>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4613      	mov	r3, r2
 80046f2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046fa:	d308      	bcc.n	800470e <UART_SetConfig+0x3d2>
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004702:	d204      	bcs.n	800470e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6a3a      	ldr	r2, [r7, #32]
 800470a:	60da      	str	r2, [r3, #12]
 800470c:	e0c8      	b.n	80048a0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004714:	e0c4      	b.n	80048a0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471e:	d167      	bne.n	80047f0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004720:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004724:	2b08      	cmp	r3, #8
 8004726:	d828      	bhi.n	800477a <UART_SetConfig+0x43e>
 8004728:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <UART_SetConfig+0x3f4>)
 800472a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472e:	bf00      	nop
 8004730:	08004755 	.word	0x08004755
 8004734:	0800475d 	.word	0x0800475d
 8004738:	08004765 	.word	0x08004765
 800473c:	0800477b 	.word	0x0800477b
 8004740:	0800476b 	.word	0x0800476b
 8004744:	0800477b 	.word	0x0800477b
 8004748:	0800477b 	.word	0x0800477b
 800474c:	0800477b 	.word	0x0800477b
 8004750:	08004773 	.word	0x08004773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004754:	f7fe fc10 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 8004758:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800475a:	e014      	b.n	8004786 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800475c:	f7fe fc22 	bl	8002fa4 <HAL_RCC_GetPCLK2Freq>
 8004760:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004762:	e010      	b.n	8004786 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004764:	4b5a      	ldr	r3, [pc, #360]	; (80048d0 <UART_SetConfig+0x594>)
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004768:	e00d      	b.n	8004786 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476a:	f7fe fb97 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 800476e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004770:	e009      	b.n	8004786 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004778:	e005      	b.n	8004786 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004784:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8089 	beq.w	80048a0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	4a4e      	ldr	r2, [pc, #312]	; (80048cc <UART_SetConfig+0x590>)
 8004794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004798:	461a      	mov	r2, r3
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	fbb3 f3f2 	udiv	r3, r3, r2
 80047a0:	005a      	lsls	r2, r3, #1
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	441a      	add	r2, r3
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	2b0f      	cmp	r3, #15
 80047b8:	d916      	bls.n	80047e8 <UART_SetConfig+0x4ac>
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c0:	d212      	bcs.n	80047e8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f023 030f 	bic.w	r3, r3, #15
 80047ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	8bfb      	ldrh	r3, [r7, #30]
 80047da:	4313      	orrs	r3, r2
 80047dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	8bfa      	ldrh	r2, [r7, #30]
 80047e4:	60da      	str	r2, [r3, #12]
 80047e6:	e05b      	b.n	80048a0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047ee:	e057      	b.n	80048a0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d828      	bhi.n	800484a <UART_SetConfig+0x50e>
 80047f8:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <UART_SetConfig+0x4c4>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004825 	.word	0x08004825
 8004804:	0800482d 	.word	0x0800482d
 8004808:	08004835 	.word	0x08004835
 800480c:	0800484b 	.word	0x0800484b
 8004810:	0800483b 	.word	0x0800483b
 8004814:	0800484b 	.word	0x0800484b
 8004818:	0800484b 	.word	0x0800484b
 800481c:	0800484b 	.word	0x0800484b
 8004820:	08004843 	.word	0x08004843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004824:	f7fe fba8 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 8004828:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800482a:	e014      	b.n	8004856 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800482c:	f7fe fbba 	bl	8002fa4 <HAL_RCC_GetPCLK2Freq>
 8004830:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004832:	e010      	b.n	8004856 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004834:	4b26      	ldr	r3, [pc, #152]	; (80048d0 <UART_SetConfig+0x594>)
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004838:	e00d      	b.n	8004856 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800483a:	f7fe fb2f 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 800483e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004840:	e009      	b.n	8004856 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004848:	e005      	b.n	8004856 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004854:	bf00      	nop
    }

    if (pclk != 0U)
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	2b00      	cmp	r3, #0
 800485a:	d021      	beq.n	80048a0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	4a1a      	ldr	r2, [pc, #104]	; (80048cc <UART_SetConfig+0x590>)
 8004862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004866:	461a      	mov	r2, r3
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	fbb3 f2f2 	udiv	r2, r3, r2
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	441a      	add	r2, r3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	fbb2 f3f3 	udiv	r3, r2, r3
 800487e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	2b0f      	cmp	r3, #15
 8004884:	d909      	bls.n	800489a <UART_SetConfig+0x55e>
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488c:	d205      	bcs.n	800489a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	b29a      	uxth	r2, r3
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60da      	str	r2, [r3, #12]
 8004898:	e002      	b.n	80048a0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2200      	movs	r2, #0
 80048b4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2200      	movs	r2, #0
 80048ba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80048bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3730      	adds	r7, #48	; 0x30
 80048c4:	46bd      	mov	sp, r7
 80048c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ca:	bf00      	nop
 80048cc:	08005ad4 	.word	0x08005ad4
 80048d0:	00f42400 	.word	0x00f42400

080048d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01a      	beq.n	80049ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049d2:	d10a      	bne.n	80049ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	605a      	str	r2, [r3, #4]
  }
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a28:	f7fc fca2 	bl	8001370 <HAL_GetTick>
 8004a2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d10e      	bne.n	8004a5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f82f 	bl	8004aae <UART_WaitOnFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e025      	b.n	8004aa6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d10e      	bne.n	8004a86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f819 	bl	8004aae <UART_WaitOnFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e00f      	b.n	8004aa6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b09c      	sub	sp, #112	; 0x70
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	603b      	str	r3, [r7, #0]
 8004aba:	4613      	mov	r3, r2
 8004abc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abe:	e0a9      	b.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	f000 80a5 	beq.w	8004c14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aca:	f7fc fc51 	bl	8001370 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d302      	bcc.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d140      	bne.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004af4:	667b      	str	r3, [r7, #100]	; 0x64
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004afe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e6      	bne.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3308      	adds	r3, #8
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	663b      	str	r3, [r7, #96]	; 0x60
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3308      	adds	r3, #8
 8004b30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b32:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e5      	bne.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e069      	b.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d051      	beq.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7e:	d149      	bne.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8004baa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e6      	bne.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	613b      	str	r3, [r7, #16]
   return(result);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3308      	adds	r3, #8
 8004bda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bdc:	623a      	str	r2, [r7, #32]
 8004bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	69f9      	ldr	r1, [r7, #28]
 8004be2:	6a3a      	ldr	r2, [r7, #32]
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e5      	bne.n	8004bbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e010      	b.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	bf0c      	ite	eq
 8004c24:	2301      	moveq	r3, #1
 8004c26:	2300      	movne	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	f43f af46 	beq.w	8004ac0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3770      	adds	r7, #112	; 0x70
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b085      	sub	sp, #20
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_UARTEx_DisableFifoMode+0x16>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e027      	b.n	8004ca4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2224      	movs	r2, #36	; 0x24
 8004c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0201 	bic.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e02d      	b.n	8004d24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2224      	movs	r2, #36	; 0x24
 8004cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0201 	bic.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f84f 	bl	8004da8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e02d      	b.n	8004da0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2224      	movs	r2, #36	; 0x24
 8004d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f811 	bl	8004da8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d108      	bne.n	8004dca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004dc8:	e031      	b.n	8004e2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004dca:	2308      	movs	r3, #8
 8004dcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004dce:	2308      	movs	r3, #8
 8004dd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	0e5b      	lsrs	r3, r3, #25
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	0f5b      	lsrs	r3, r3, #29
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004df2:	7bbb      	ldrb	r3, [r7, #14]
 8004df4:	7b3a      	ldrb	r2, [r7, #12]
 8004df6:	4911      	ldr	r1, [pc, #68]	; (8004e3c <UARTEx_SetNbDataToProcess+0x94>)
 8004df8:	5c8a      	ldrb	r2, [r1, r2]
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004dfe:	7b3a      	ldrb	r2, [r7, #12]
 8004e00:	490f      	ldr	r1, [pc, #60]	; (8004e40 <UARTEx_SetNbDataToProcess+0x98>)
 8004e02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e04:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	7b7a      	ldrb	r2, [r7, #13]
 8004e14:	4909      	ldr	r1, [pc, #36]	; (8004e3c <UARTEx_SetNbDataToProcess+0x94>)
 8004e16:	5c8a      	ldrb	r2, [r1, r2]
 8004e18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e1c:	7b7a      	ldrb	r2, [r7, #13]
 8004e1e:	4908      	ldr	r1, [pc, #32]	; (8004e40 <UARTEx_SetNbDataToProcess+0x98>)
 8004e20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e22:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e2e:	bf00      	nop
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	08005aec 	.word	0x08005aec
 8004e40:	08005af4 	.word	0x08005af4

08004e44 <__errno>:
 8004e44:	4b01      	ldr	r3, [pc, #4]	; (8004e4c <__errno+0x8>)
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	2000003c 	.word	0x2000003c

08004e50 <__libc_init_array>:
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	4d0d      	ldr	r5, [pc, #52]	; (8004e88 <__libc_init_array+0x38>)
 8004e54:	4c0d      	ldr	r4, [pc, #52]	; (8004e8c <__libc_init_array+0x3c>)
 8004e56:	1b64      	subs	r4, r4, r5
 8004e58:	10a4      	asrs	r4, r4, #2
 8004e5a:	2600      	movs	r6, #0
 8004e5c:	42a6      	cmp	r6, r4
 8004e5e:	d109      	bne.n	8004e74 <__libc_init_array+0x24>
 8004e60:	4d0b      	ldr	r5, [pc, #44]	; (8004e90 <__libc_init_array+0x40>)
 8004e62:	4c0c      	ldr	r4, [pc, #48]	; (8004e94 <__libc_init_array+0x44>)
 8004e64:	f000 fdf4 	bl	8005a50 <_init>
 8004e68:	1b64      	subs	r4, r4, r5
 8004e6a:	10a4      	asrs	r4, r4, #2
 8004e6c:	2600      	movs	r6, #0
 8004e6e:	42a6      	cmp	r6, r4
 8004e70:	d105      	bne.n	8004e7e <__libc_init_array+0x2e>
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e78:	4798      	blx	r3
 8004e7a:	3601      	adds	r6, #1
 8004e7c:	e7ee      	b.n	8004e5c <__libc_init_array+0xc>
 8004e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e82:	4798      	blx	r3
 8004e84:	3601      	adds	r6, #1
 8004e86:	e7f2      	b.n	8004e6e <__libc_init_array+0x1e>
 8004e88:	08005b68 	.word	0x08005b68
 8004e8c:	08005b68 	.word	0x08005b68
 8004e90:	08005b68 	.word	0x08005b68
 8004e94:	08005b6c 	.word	0x08005b6c

08004e98 <memset>:
 8004e98:	4402      	add	r2, r0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d100      	bne.n	8004ea2 <memset+0xa>
 8004ea0:	4770      	bx	lr
 8004ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ea6:	e7f9      	b.n	8004e9c <memset+0x4>

08004ea8 <_puts_r>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	460e      	mov	r6, r1
 8004eac:	4605      	mov	r5, r0
 8004eae:	b118      	cbz	r0, 8004eb8 <_puts_r+0x10>
 8004eb0:	6983      	ldr	r3, [r0, #24]
 8004eb2:	b90b      	cbnz	r3, 8004eb8 <_puts_r+0x10>
 8004eb4:	f000 fb16 	bl	80054e4 <__sinit>
 8004eb8:	69ab      	ldr	r3, [r5, #24]
 8004eba:	68ac      	ldr	r4, [r5, #8]
 8004ebc:	b913      	cbnz	r3, 8004ec4 <_puts_r+0x1c>
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f000 fb10 	bl	80054e4 <__sinit>
 8004ec4:	4b2c      	ldr	r3, [pc, #176]	; (8004f78 <_puts_r+0xd0>)
 8004ec6:	429c      	cmp	r4, r3
 8004ec8:	d120      	bne.n	8004f0c <_puts_r+0x64>
 8004eca:	686c      	ldr	r4, [r5, #4]
 8004ecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ece:	07db      	lsls	r3, r3, #31
 8004ed0:	d405      	bmi.n	8004ede <_puts_r+0x36>
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	0598      	lsls	r0, r3, #22
 8004ed6:	d402      	bmi.n	8004ede <_puts_r+0x36>
 8004ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eda:	f000 fba1 	bl	8005620 <__retarget_lock_acquire_recursive>
 8004ede:	89a3      	ldrh	r3, [r4, #12]
 8004ee0:	0719      	lsls	r1, r3, #28
 8004ee2:	d51d      	bpl.n	8004f20 <_puts_r+0x78>
 8004ee4:	6923      	ldr	r3, [r4, #16]
 8004ee6:	b1db      	cbz	r3, 8004f20 <_puts_r+0x78>
 8004ee8:	3e01      	subs	r6, #1
 8004eea:	68a3      	ldr	r3, [r4, #8]
 8004eec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	60a3      	str	r3, [r4, #8]
 8004ef4:	bb39      	cbnz	r1, 8004f46 <_puts_r+0x9e>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	da38      	bge.n	8004f6c <_puts_r+0xc4>
 8004efa:	4622      	mov	r2, r4
 8004efc:	210a      	movs	r1, #10
 8004efe:	4628      	mov	r0, r5
 8004f00:	f000 f916 	bl	8005130 <__swbuf_r>
 8004f04:	3001      	adds	r0, #1
 8004f06:	d011      	beq.n	8004f2c <_puts_r+0x84>
 8004f08:	250a      	movs	r5, #10
 8004f0a:	e011      	b.n	8004f30 <_puts_r+0x88>
 8004f0c:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <_puts_r+0xd4>)
 8004f0e:	429c      	cmp	r4, r3
 8004f10:	d101      	bne.n	8004f16 <_puts_r+0x6e>
 8004f12:	68ac      	ldr	r4, [r5, #8]
 8004f14:	e7da      	b.n	8004ecc <_puts_r+0x24>
 8004f16:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <_puts_r+0xd8>)
 8004f18:	429c      	cmp	r4, r3
 8004f1a:	bf08      	it	eq
 8004f1c:	68ec      	ldreq	r4, [r5, #12]
 8004f1e:	e7d5      	b.n	8004ecc <_puts_r+0x24>
 8004f20:	4621      	mov	r1, r4
 8004f22:	4628      	mov	r0, r5
 8004f24:	f000 f956 	bl	80051d4 <__swsetup_r>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d0dd      	beq.n	8004ee8 <_puts_r+0x40>
 8004f2c:	f04f 35ff 	mov.w	r5, #4294967295
 8004f30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f32:	07da      	lsls	r2, r3, #31
 8004f34:	d405      	bmi.n	8004f42 <_puts_r+0x9a>
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	059b      	lsls	r3, r3, #22
 8004f3a:	d402      	bmi.n	8004f42 <_puts_r+0x9a>
 8004f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f3e:	f000 fb70 	bl	8005622 <__retarget_lock_release_recursive>
 8004f42:	4628      	mov	r0, r5
 8004f44:	bd70      	pop	{r4, r5, r6, pc}
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	da04      	bge.n	8004f54 <_puts_r+0xac>
 8004f4a:	69a2      	ldr	r2, [r4, #24]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	dc06      	bgt.n	8004f5e <_puts_r+0xb6>
 8004f50:	290a      	cmp	r1, #10
 8004f52:	d004      	beq.n	8004f5e <_puts_r+0xb6>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	7019      	strb	r1, [r3, #0]
 8004f5c:	e7c5      	b.n	8004eea <_puts_r+0x42>
 8004f5e:	4622      	mov	r2, r4
 8004f60:	4628      	mov	r0, r5
 8004f62:	f000 f8e5 	bl	8005130 <__swbuf_r>
 8004f66:	3001      	adds	r0, #1
 8004f68:	d1bf      	bne.n	8004eea <_puts_r+0x42>
 8004f6a:	e7df      	b.n	8004f2c <_puts_r+0x84>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	250a      	movs	r5, #10
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	6022      	str	r2, [r4, #0]
 8004f74:	701d      	strb	r5, [r3, #0]
 8004f76:	e7db      	b.n	8004f30 <_puts_r+0x88>
 8004f78:	08005b20 	.word	0x08005b20
 8004f7c:	08005b40 	.word	0x08005b40
 8004f80:	08005b00 	.word	0x08005b00

08004f84 <puts>:
 8004f84:	4b02      	ldr	r3, [pc, #8]	; (8004f90 <puts+0xc>)
 8004f86:	4601      	mov	r1, r0
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	f7ff bf8d 	b.w	8004ea8 <_puts_r>
 8004f8e:	bf00      	nop
 8004f90:	2000003c 	.word	0x2000003c

08004f94 <setbuf>:
 8004f94:	2900      	cmp	r1, #0
 8004f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2202      	moveq	r2, #2
 8004f9e:	2200      	movne	r2, #0
 8004fa0:	f000 b800 	b.w	8004fa4 <setvbuf>

08004fa4 <setvbuf>:
 8004fa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004fa8:	461d      	mov	r5, r3
 8004faa:	4b5d      	ldr	r3, [pc, #372]	; (8005120 <setvbuf+0x17c>)
 8004fac:	681f      	ldr	r7, [r3, #0]
 8004fae:	4604      	mov	r4, r0
 8004fb0:	460e      	mov	r6, r1
 8004fb2:	4690      	mov	r8, r2
 8004fb4:	b127      	cbz	r7, 8004fc0 <setvbuf+0x1c>
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	b913      	cbnz	r3, 8004fc0 <setvbuf+0x1c>
 8004fba:	4638      	mov	r0, r7
 8004fbc:	f000 fa92 	bl	80054e4 <__sinit>
 8004fc0:	4b58      	ldr	r3, [pc, #352]	; (8005124 <setvbuf+0x180>)
 8004fc2:	429c      	cmp	r4, r3
 8004fc4:	d167      	bne.n	8005096 <setvbuf+0xf2>
 8004fc6:	687c      	ldr	r4, [r7, #4]
 8004fc8:	f1b8 0f02 	cmp.w	r8, #2
 8004fcc:	d006      	beq.n	8004fdc <setvbuf+0x38>
 8004fce:	f1b8 0f01 	cmp.w	r8, #1
 8004fd2:	f200 809f 	bhi.w	8005114 <setvbuf+0x170>
 8004fd6:	2d00      	cmp	r5, #0
 8004fd8:	f2c0 809c 	blt.w	8005114 <setvbuf+0x170>
 8004fdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fde:	07db      	lsls	r3, r3, #31
 8004fe0:	d405      	bmi.n	8004fee <setvbuf+0x4a>
 8004fe2:	89a3      	ldrh	r3, [r4, #12]
 8004fe4:	0598      	lsls	r0, r3, #22
 8004fe6:	d402      	bmi.n	8004fee <setvbuf+0x4a>
 8004fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fea:	f000 fb19 	bl	8005620 <__retarget_lock_acquire_recursive>
 8004fee:	4621      	mov	r1, r4
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f000 f9e3 	bl	80053bc <_fflush_r>
 8004ff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ff8:	b141      	cbz	r1, 800500c <setvbuf+0x68>
 8004ffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ffe:	4299      	cmp	r1, r3
 8005000:	d002      	beq.n	8005008 <setvbuf+0x64>
 8005002:	4638      	mov	r0, r7
 8005004:	f000 fb7c 	bl	8005700 <_free_r>
 8005008:	2300      	movs	r3, #0
 800500a:	6363      	str	r3, [r4, #52]	; 0x34
 800500c:	2300      	movs	r3, #0
 800500e:	61a3      	str	r3, [r4, #24]
 8005010:	6063      	str	r3, [r4, #4]
 8005012:	89a3      	ldrh	r3, [r4, #12]
 8005014:	0619      	lsls	r1, r3, #24
 8005016:	d503      	bpl.n	8005020 <setvbuf+0x7c>
 8005018:	6921      	ldr	r1, [r4, #16]
 800501a:	4638      	mov	r0, r7
 800501c:	f000 fb70 	bl	8005700 <_free_r>
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005026:	f023 0303 	bic.w	r3, r3, #3
 800502a:	f1b8 0f02 	cmp.w	r8, #2
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	d06c      	beq.n	800510c <setvbuf+0x168>
 8005032:	ab01      	add	r3, sp, #4
 8005034:	466a      	mov	r2, sp
 8005036:	4621      	mov	r1, r4
 8005038:	4638      	mov	r0, r7
 800503a:	f000 faf3 	bl	8005624 <__swhatbuf_r>
 800503e:	89a3      	ldrh	r3, [r4, #12]
 8005040:	4318      	orrs	r0, r3
 8005042:	81a0      	strh	r0, [r4, #12]
 8005044:	2d00      	cmp	r5, #0
 8005046:	d130      	bne.n	80050aa <setvbuf+0x106>
 8005048:	9d00      	ldr	r5, [sp, #0]
 800504a:	4628      	mov	r0, r5
 800504c:	f000 fb50 	bl	80056f0 <malloc>
 8005050:	4606      	mov	r6, r0
 8005052:	2800      	cmp	r0, #0
 8005054:	d155      	bne.n	8005102 <setvbuf+0x15e>
 8005056:	f8dd 9000 	ldr.w	r9, [sp]
 800505a:	45a9      	cmp	r9, r5
 800505c:	d14a      	bne.n	80050f4 <setvbuf+0x150>
 800505e:	f04f 35ff 	mov.w	r5, #4294967295
 8005062:	2200      	movs	r2, #0
 8005064:	60a2      	str	r2, [r4, #8]
 8005066:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800506a:	6022      	str	r2, [r4, #0]
 800506c:	6122      	str	r2, [r4, #16]
 800506e:	2201      	movs	r2, #1
 8005070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005074:	6162      	str	r2, [r4, #20]
 8005076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005078:	f043 0302 	orr.w	r3, r3, #2
 800507c:	07d2      	lsls	r2, r2, #31
 800507e:	81a3      	strh	r3, [r4, #12]
 8005080:	d405      	bmi.n	800508e <setvbuf+0xea>
 8005082:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005086:	d102      	bne.n	800508e <setvbuf+0xea>
 8005088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800508a:	f000 faca 	bl	8005622 <__retarget_lock_release_recursive>
 800508e:	4628      	mov	r0, r5
 8005090:	b003      	add	sp, #12
 8005092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005096:	4b24      	ldr	r3, [pc, #144]	; (8005128 <setvbuf+0x184>)
 8005098:	429c      	cmp	r4, r3
 800509a:	d101      	bne.n	80050a0 <setvbuf+0xfc>
 800509c:	68bc      	ldr	r4, [r7, #8]
 800509e:	e793      	b.n	8004fc8 <setvbuf+0x24>
 80050a0:	4b22      	ldr	r3, [pc, #136]	; (800512c <setvbuf+0x188>)
 80050a2:	429c      	cmp	r4, r3
 80050a4:	bf08      	it	eq
 80050a6:	68fc      	ldreq	r4, [r7, #12]
 80050a8:	e78e      	b.n	8004fc8 <setvbuf+0x24>
 80050aa:	2e00      	cmp	r6, #0
 80050ac:	d0cd      	beq.n	800504a <setvbuf+0xa6>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	b913      	cbnz	r3, 80050b8 <setvbuf+0x114>
 80050b2:	4638      	mov	r0, r7
 80050b4:	f000 fa16 	bl	80054e4 <__sinit>
 80050b8:	f1b8 0f01 	cmp.w	r8, #1
 80050bc:	bf08      	it	eq
 80050be:	89a3      	ldrheq	r3, [r4, #12]
 80050c0:	6026      	str	r6, [r4, #0]
 80050c2:	bf04      	itt	eq
 80050c4:	f043 0301 	orreq.w	r3, r3, #1
 80050c8:	81a3      	strheq	r3, [r4, #12]
 80050ca:	89a2      	ldrh	r2, [r4, #12]
 80050cc:	f012 0308 	ands.w	r3, r2, #8
 80050d0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80050d4:	d01c      	beq.n	8005110 <setvbuf+0x16c>
 80050d6:	07d3      	lsls	r3, r2, #31
 80050d8:	bf41      	itttt	mi
 80050da:	2300      	movmi	r3, #0
 80050dc:	426d      	negmi	r5, r5
 80050de:	60a3      	strmi	r3, [r4, #8]
 80050e0:	61a5      	strmi	r5, [r4, #24]
 80050e2:	bf58      	it	pl
 80050e4:	60a5      	strpl	r5, [r4, #8]
 80050e6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80050e8:	f015 0501 	ands.w	r5, r5, #1
 80050ec:	d115      	bne.n	800511a <setvbuf+0x176>
 80050ee:	f412 7f00 	tst.w	r2, #512	; 0x200
 80050f2:	e7c8      	b.n	8005086 <setvbuf+0xe2>
 80050f4:	4648      	mov	r0, r9
 80050f6:	f000 fafb 	bl	80056f0 <malloc>
 80050fa:	4606      	mov	r6, r0
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d0ae      	beq.n	800505e <setvbuf+0xba>
 8005100:	464d      	mov	r5, r9
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005108:	81a3      	strh	r3, [r4, #12]
 800510a:	e7d0      	b.n	80050ae <setvbuf+0x10a>
 800510c:	2500      	movs	r5, #0
 800510e:	e7a8      	b.n	8005062 <setvbuf+0xbe>
 8005110:	60a3      	str	r3, [r4, #8]
 8005112:	e7e8      	b.n	80050e6 <setvbuf+0x142>
 8005114:	f04f 35ff 	mov.w	r5, #4294967295
 8005118:	e7b9      	b.n	800508e <setvbuf+0xea>
 800511a:	2500      	movs	r5, #0
 800511c:	e7b7      	b.n	800508e <setvbuf+0xea>
 800511e:	bf00      	nop
 8005120:	2000003c 	.word	0x2000003c
 8005124:	08005b20 	.word	0x08005b20
 8005128:	08005b40 	.word	0x08005b40
 800512c:	08005b00 	.word	0x08005b00

08005130 <__swbuf_r>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	460e      	mov	r6, r1
 8005134:	4614      	mov	r4, r2
 8005136:	4605      	mov	r5, r0
 8005138:	b118      	cbz	r0, 8005142 <__swbuf_r+0x12>
 800513a:	6983      	ldr	r3, [r0, #24]
 800513c:	b90b      	cbnz	r3, 8005142 <__swbuf_r+0x12>
 800513e:	f000 f9d1 	bl	80054e4 <__sinit>
 8005142:	4b21      	ldr	r3, [pc, #132]	; (80051c8 <__swbuf_r+0x98>)
 8005144:	429c      	cmp	r4, r3
 8005146:	d12b      	bne.n	80051a0 <__swbuf_r+0x70>
 8005148:	686c      	ldr	r4, [r5, #4]
 800514a:	69a3      	ldr	r3, [r4, #24]
 800514c:	60a3      	str	r3, [r4, #8]
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	071a      	lsls	r2, r3, #28
 8005152:	d52f      	bpl.n	80051b4 <__swbuf_r+0x84>
 8005154:	6923      	ldr	r3, [r4, #16]
 8005156:	b36b      	cbz	r3, 80051b4 <__swbuf_r+0x84>
 8005158:	6923      	ldr	r3, [r4, #16]
 800515a:	6820      	ldr	r0, [r4, #0]
 800515c:	1ac0      	subs	r0, r0, r3
 800515e:	6963      	ldr	r3, [r4, #20]
 8005160:	b2f6      	uxtb	r6, r6
 8005162:	4283      	cmp	r3, r0
 8005164:	4637      	mov	r7, r6
 8005166:	dc04      	bgt.n	8005172 <__swbuf_r+0x42>
 8005168:	4621      	mov	r1, r4
 800516a:	4628      	mov	r0, r5
 800516c:	f000 f926 	bl	80053bc <_fflush_r>
 8005170:	bb30      	cbnz	r0, 80051c0 <__swbuf_r+0x90>
 8005172:	68a3      	ldr	r3, [r4, #8]
 8005174:	3b01      	subs	r3, #1
 8005176:	60a3      	str	r3, [r4, #8]
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	6022      	str	r2, [r4, #0]
 800517e:	701e      	strb	r6, [r3, #0]
 8005180:	6963      	ldr	r3, [r4, #20]
 8005182:	3001      	adds	r0, #1
 8005184:	4283      	cmp	r3, r0
 8005186:	d004      	beq.n	8005192 <__swbuf_r+0x62>
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	07db      	lsls	r3, r3, #31
 800518c:	d506      	bpl.n	800519c <__swbuf_r+0x6c>
 800518e:	2e0a      	cmp	r6, #10
 8005190:	d104      	bne.n	800519c <__swbuf_r+0x6c>
 8005192:	4621      	mov	r1, r4
 8005194:	4628      	mov	r0, r5
 8005196:	f000 f911 	bl	80053bc <_fflush_r>
 800519a:	b988      	cbnz	r0, 80051c0 <__swbuf_r+0x90>
 800519c:	4638      	mov	r0, r7
 800519e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a0:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <__swbuf_r+0x9c>)
 80051a2:	429c      	cmp	r4, r3
 80051a4:	d101      	bne.n	80051aa <__swbuf_r+0x7a>
 80051a6:	68ac      	ldr	r4, [r5, #8]
 80051a8:	e7cf      	b.n	800514a <__swbuf_r+0x1a>
 80051aa:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <__swbuf_r+0xa0>)
 80051ac:	429c      	cmp	r4, r3
 80051ae:	bf08      	it	eq
 80051b0:	68ec      	ldreq	r4, [r5, #12]
 80051b2:	e7ca      	b.n	800514a <__swbuf_r+0x1a>
 80051b4:	4621      	mov	r1, r4
 80051b6:	4628      	mov	r0, r5
 80051b8:	f000 f80c 	bl	80051d4 <__swsetup_r>
 80051bc:	2800      	cmp	r0, #0
 80051be:	d0cb      	beq.n	8005158 <__swbuf_r+0x28>
 80051c0:	f04f 37ff 	mov.w	r7, #4294967295
 80051c4:	e7ea      	b.n	800519c <__swbuf_r+0x6c>
 80051c6:	bf00      	nop
 80051c8:	08005b20 	.word	0x08005b20
 80051cc:	08005b40 	.word	0x08005b40
 80051d0:	08005b00 	.word	0x08005b00

080051d4 <__swsetup_r>:
 80051d4:	4b32      	ldr	r3, [pc, #200]	; (80052a0 <__swsetup_r+0xcc>)
 80051d6:	b570      	push	{r4, r5, r6, lr}
 80051d8:	681d      	ldr	r5, [r3, #0]
 80051da:	4606      	mov	r6, r0
 80051dc:	460c      	mov	r4, r1
 80051de:	b125      	cbz	r5, 80051ea <__swsetup_r+0x16>
 80051e0:	69ab      	ldr	r3, [r5, #24]
 80051e2:	b913      	cbnz	r3, 80051ea <__swsetup_r+0x16>
 80051e4:	4628      	mov	r0, r5
 80051e6:	f000 f97d 	bl	80054e4 <__sinit>
 80051ea:	4b2e      	ldr	r3, [pc, #184]	; (80052a4 <__swsetup_r+0xd0>)
 80051ec:	429c      	cmp	r4, r3
 80051ee:	d10f      	bne.n	8005210 <__swsetup_r+0x3c>
 80051f0:	686c      	ldr	r4, [r5, #4]
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051f8:	0719      	lsls	r1, r3, #28
 80051fa:	d42c      	bmi.n	8005256 <__swsetup_r+0x82>
 80051fc:	06dd      	lsls	r5, r3, #27
 80051fe:	d411      	bmi.n	8005224 <__swsetup_r+0x50>
 8005200:	2309      	movs	r3, #9
 8005202:	6033      	str	r3, [r6, #0]
 8005204:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005208:	81a3      	strh	r3, [r4, #12]
 800520a:	f04f 30ff 	mov.w	r0, #4294967295
 800520e:	e03e      	b.n	800528e <__swsetup_r+0xba>
 8005210:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <__swsetup_r+0xd4>)
 8005212:	429c      	cmp	r4, r3
 8005214:	d101      	bne.n	800521a <__swsetup_r+0x46>
 8005216:	68ac      	ldr	r4, [r5, #8]
 8005218:	e7eb      	b.n	80051f2 <__swsetup_r+0x1e>
 800521a:	4b24      	ldr	r3, [pc, #144]	; (80052ac <__swsetup_r+0xd8>)
 800521c:	429c      	cmp	r4, r3
 800521e:	bf08      	it	eq
 8005220:	68ec      	ldreq	r4, [r5, #12]
 8005222:	e7e6      	b.n	80051f2 <__swsetup_r+0x1e>
 8005224:	0758      	lsls	r0, r3, #29
 8005226:	d512      	bpl.n	800524e <__swsetup_r+0x7a>
 8005228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800522a:	b141      	cbz	r1, 800523e <__swsetup_r+0x6a>
 800522c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005230:	4299      	cmp	r1, r3
 8005232:	d002      	beq.n	800523a <__swsetup_r+0x66>
 8005234:	4630      	mov	r0, r6
 8005236:	f000 fa63 	bl	8005700 <_free_r>
 800523a:	2300      	movs	r3, #0
 800523c:	6363      	str	r3, [r4, #52]	; 0x34
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005244:	81a3      	strh	r3, [r4, #12]
 8005246:	2300      	movs	r3, #0
 8005248:	6063      	str	r3, [r4, #4]
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	f043 0308 	orr.w	r3, r3, #8
 8005254:	81a3      	strh	r3, [r4, #12]
 8005256:	6923      	ldr	r3, [r4, #16]
 8005258:	b94b      	cbnz	r3, 800526e <__swsetup_r+0x9a>
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005264:	d003      	beq.n	800526e <__swsetup_r+0x9a>
 8005266:	4621      	mov	r1, r4
 8005268:	4630      	mov	r0, r6
 800526a:	f000 fa01 	bl	8005670 <__smakebuf_r>
 800526e:	89a0      	ldrh	r0, [r4, #12]
 8005270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005274:	f010 0301 	ands.w	r3, r0, #1
 8005278:	d00a      	beq.n	8005290 <__swsetup_r+0xbc>
 800527a:	2300      	movs	r3, #0
 800527c:	60a3      	str	r3, [r4, #8]
 800527e:	6963      	ldr	r3, [r4, #20]
 8005280:	425b      	negs	r3, r3
 8005282:	61a3      	str	r3, [r4, #24]
 8005284:	6923      	ldr	r3, [r4, #16]
 8005286:	b943      	cbnz	r3, 800529a <__swsetup_r+0xc6>
 8005288:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800528c:	d1ba      	bne.n	8005204 <__swsetup_r+0x30>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	0781      	lsls	r1, r0, #30
 8005292:	bf58      	it	pl
 8005294:	6963      	ldrpl	r3, [r4, #20]
 8005296:	60a3      	str	r3, [r4, #8]
 8005298:	e7f4      	b.n	8005284 <__swsetup_r+0xb0>
 800529a:	2000      	movs	r0, #0
 800529c:	e7f7      	b.n	800528e <__swsetup_r+0xba>
 800529e:	bf00      	nop
 80052a0:	2000003c 	.word	0x2000003c
 80052a4:	08005b20 	.word	0x08005b20
 80052a8:	08005b40 	.word	0x08005b40
 80052ac:	08005b00 	.word	0x08005b00

080052b0 <__sflush_r>:
 80052b0:	898a      	ldrh	r2, [r1, #12]
 80052b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b6:	4605      	mov	r5, r0
 80052b8:	0710      	lsls	r0, r2, #28
 80052ba:	460c      	mov	r4, r1
 80052bc:	d458      	bmi.n	8005370 <__sflush_r+0xc0>
 80052be:	684b      	ldr	r3, [r1, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	dc05      	bgt.n	80052d0 <__sflush_r+0x20>
 80052c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	dc02      	bgt.n	80052d0 <__sflush_r+0x20>
 80052ca:	2000      	movs	r0, #0
 80052cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052d2:	2e00      	cmp	r6, #0
 80052d4:	d0f9      	beq.n	80052ca <__sflush_r+0x1a>
 80052d6:	2300      	movs	r3, #0
 80052d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052dc:	682f      	ldr	r7, [r5, #0]
 80052de:	602b      	str	r3, [r5, #0]
 80052e0:	d032      	beq.n	8005348 <__sflush_r+0x98>
 80052e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	075a      	lsls	r2, r3, #29
 80052e8:	d505      	bpl.n	80052f6 <__sflush_r+0x46>
 80052ea:	6863      	ldr	r3, [r4, #4]
 80052ec:	1ac0      	subs	r0, r0, r3
 80052ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052f0:	b10b      	cbz	r3, 80052f6 <__sflush_r+0x46>
 80052f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052f4:	1ac0      	subs	r0, r0, r3
 80052f6:	2300      	movs	r3, #0
 80052f8:	4602      	mov	r2, r0
 80052fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052fc:	6a21      	ldr	r1, [r4, #32]
 80052fe:	4628      	mov	r0, r5
 8005300:	47b0      	blx	r6
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	d106      	bne.n	8005316 <__sflush_r+0x66>
 8005308:	6829      	ldr	r1, [r5, #0]
 800530a:	291d      	cmp	r1, #29
 800530c:	d82c      	bhi.n	8005368 <__sflush_r+0xb8>
 800530e:	4a2a      	ldr	r2, [pc, #168]	; (80053b8 <__sflush_r+0x108>)
 8005310:	40ca      	lsrs	r2, r1
 8005312:	07d6      	lsls	r6, r2, #31
 8005314:	d528      	bpl.n	8005368 <__sflush_r+0xb8>
 8005316:	2200      	movs	r2, #0
 8005318:	6062      	str	r2, [r4, #4]
 800531a:	04d9      	lsls	r1, r3, #19
 800531c:	6922      	ldr	r2, [r4, #16]
 800531e:	6022      	str	r2, [r4, #0]
 8005320:	d504      	bpl.n	800532c <__sflush_r+0x7c>
 8005322:	1c42      	adds	r2, r0, #1
 8005324:	d101      	bne.n	800532a <__sflush_r+0x7a>
 8005326:	682b      	ldr	r3, [r5, #0]
 8005328:	b903      	cbnz	r3, 800532c <__sflush_r+0x7c>
 800532a:	6560      	str	r0, [r4, #84]	; 0x54
 800532c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800532e:	602f      	str	r7, [r5, #0]
 8005330:	2900      	cmp	r1, #0
 8005332:	d0ca      	beq.n	80052ca <__sflush_r+0x1a>
 8005334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005338:	4299      	cmp	r1, r3
 800533a:	d002      	beq.n	8005342 <__sflush_r+0x92>
 800533c:	4628      	mov	r0, r5
 800533e:	f000 f9df 	bl	8005700 <_free_r>
 8005342:	2000      	movs	r0, #0
 8005344:	6360      	str	r0, [r4, #52]	; 0x34
 8005346:	e7c1      	b.n	80052cc <__sflush_r+0x1c>
 8005348:	6a21      	ldr	r1, [r4, #32]
 800534a:	2301      	movs	r3, #1
 800534c:	4628      	mov	r0, r5
 800534e:	47b0      	blx	r6
 8005350:	1c41      	adds	r1, r0, #1
 8005352:	d1c7      	bne.n	80052e4 <__sflush_r+0x34>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0c4      	beq.n	80052e4 <__sflush_r+0x34>
 800535a:	2b1d      	cmp	r3, #29
 800535c:	d001      	beq.n	8005362 <__sflush_r+0xb2>
 800535e:	2b16      	cmp	r3, #22
 8005360:	d101      	bne.n	8005366 <__sflush_r+0xb6>
 8005362:	602f      	str	r7, [r5, #0]
 8005364:	e7b1      	b.n	80052ca <__sflush_r+0x1a>
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800536c:	81a3      	strh	r3, [r4, #12]
 800536e:	e7ad      	b.n	80052cc <__sflush_r+0x1c>
 8005370:	690f      	ldr	r7, [r1, #16]
 8005372:	2f00      	cmp	r7, #0
 8005374:	d0a9      	beq.n	80052ca <__sflush_r+0x1a>
 8005376:	0793      	lsls	r3, r2, #30
 8005378:	680e      	ldr	r6, [r1, #0]
 800537a:	bf08      	it	eq
 800537c:	694b      	ldreq	r3, [r1, #20]
 800537e:	600f      	str	r7, [r1, #0]
 8005380:	bf18      	it	ne
 8005382:	2300      	movne	r3, #0
 8005384:	eba6 0807 	sub.w	r8, r6, r7
 8005388:	608b      	str	r3, [r1, #8]
 800538a:	f1b8 0f00 	cmp.w	r8, #0
 800538e:	dd9c      	ble.n	80052ca <__sflush_r+0x1a>
 8005390:	6a21      	ldr	r1, [r4, #32]
 8005392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005394:	4643      	mov	r3, r8
 8005396:	463a      	mov	r2, r7
 8005398:	4628      	mov	r0, r5
 800539a:	47b0      	blx	r6
 800539c:	2800      	cmp	r0, #0
 800539e:	dc06      	bgt.n	80053ae <__sflush_r+0xfe>
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ac:	e78e      	b.n	80052cc <__sflush_r+0x1c>
 80053ae:	4407      	add	r7, r0
 80053b0:	eba8 0800 	sub.w	r8, r8, r0
 80053b4:	e7e9      	b.n	800538a <__sflush_r+0xda>
 80053b6:	bf00      	nop
 80053b8:	20400001 	.word	0x20400001

080053bc <_fflush_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	690b      	ldr	r3, [r1, #16]
 80053c0:	4605      	mov	r5, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	b913      	cbnz	r3, 80053cc <_fflush_r+0x10>
 80053c6:	2500      	movs	r5, #0
 80053c8:	4628      	mov	r0, r5
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
 80053cc:	b118      	cbz	r0, 80053d6 <_fflush_r+0x1a>
 80053ce:	6983      	ldr	r3, [r0, #24]
 80053d0:	b90b      	cbnz	r3, 80053d6 <_fflush_r+0x1a>
 80053d2:	f000 f887 	bl	80054e4 <__sinit>
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <_fflush_r+0x6c>)
 80053d8:	429c      	cmp	r4, r3
 80053da:	d11b      	bne.n	8005414 <_fflush_r+0x58>
 80053dc:	686c      	ldr	r4, [r5, #4]
 80053de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0ef      	beq.n	80053c6 <_fflush_r+0xa>
 80053e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053e8:	07d0      	lsls	r0, r2, #31
 80053ea:	d404      	bmi.n	80053f6 <_fflush_r+0x3a>
 80053ec:	0599      	lsls	r1, r3, #22
 80053ee:	d402      	bmi.n	80053f6 <_fflush_r+0x3a>
 80053f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053f2:	f000 f915 	bl	8005620 <__retarget_lock_acquire_recursive>
 80053f6:	4628      	mov	r0, r5
 80053f8:	4621      	mov	r1, r4
 80053fa:	f7ff ff59 	bl	80052b0 <__sflush_r>
 80053fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005400:	07da      	lsls	r2, r3, #31
 8005402:	4605      	mov	r5, r0
 8005404:	d4e0      	bmi.n	80053c8 <_fflush_r+0xc>
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	059b      	lsls	r3, r3, #22
 800540a:	d4dd      	bmi.n	80053c8 <_fflush_r+0xc>
 800540c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800540e:	f000 f908 	bl	8005622 <__retarget_lock_release_recursive>
 8005412:	e7d9      	b.n	80053c8 <_fflush_r+0xc>
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <_fflush_r+0x70>)
 8005416:	429c      	cmp	r4, r3
 8005418:	d101      	bne.n	800541e <_fflush_r+0x62>
 800541a:	68ac      	ldr	r4, [r5, #8]
 800541c:	e7df      	b.n	80053de <_fflush_r+0x22>
 800541e:	4b04      	ldr	r3, [pc, #16]	; (8005430 <_fflush_r+0x74>)
 8005420:	429c      	cmp	r4, r3
 8005422:	bf08      	it	eq
 8005424:	68ec      	ldreq	r4, [r5, #12]
 8005426:	e7da      	b.n	80053de <_fflush_r+0x22>
 8005428:	08005b20 	.word	0x08005b20
 800542c:	08005b40 	.word	0x08005b40
 8005430:	08005b00 	.word	0x08005b00

08005434 <std>:
 8005434:	2300      	movs	r3, #0
 8005436:	b510      	push	{r4, lr}
 8005438:	4604      	mov	r4, r0
 800543a:	e9c0 3300 	strd	r3, r3, [r0]
 800543e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005442:	6083      	str	r3, [r0, #8]
 8005444:	8181      	strh	r1, [r0, #12]
 8005446:	6643      	str	r3, [r0, #100]	; 0x64
 8005448:	81c2      	strh	r2, [r0, #14]
 800544a:	6183      	str	r3, [r0, #24]
 800544c:	4619      	mov	r1, r3
 800544e:	2208      	movs	r2, #8
 8005450:	305c      	adds	r0, #92	; 0x5c
 8005452:	f7ff fd21 	bl	8004e98 <memset>
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <std+0x38>)
 8005458:	6263      	str	r3, [r4, #36]	; 0x24
 800545a:	4b05      	ldr	r3, [pc, #20]	; (8005470 <std+0x3c>)
 800545c:	62a3      	str	r3, [r4, #40]	; 0x28
 800545e:	4b05      	ldr	r3, [pc, #20]	; (8005474 <std+0x40>)
 8005460:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005462:	4b05      	ldr	r3, [pc, #20]	; (8005478 <std+0x44>)
 8005464:	6224      	str	r4, [r4, #32]
 8005466:	6323      	str	r3, [r4, #48]	; 0x30
 8005468:	bd10      	pop	{r4, pc}
 800546a:	bf00      	nop
 800546c:	080058e1 	.word	0x080058e1
 8005470:	08005903 	.word	0x08005903
 8005474:	0800593b 	.word	0x0800593b
 8005478:	0800595f 	.word	0x0800595f

0800547c <_cleanup_r>:
 800547c:	4901      	ldr	r1, [pc, #4]	; (8005484 <_cleanup_r+0x8>)
 800547e:	f000 b8af 	b.w	80055e0 <_fwalk_reent>
 8005482:	bf00      	nop
 8005484:	080053bd 	.word	0x080053bd

08005488 <__sfmoreglue>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	2268      	movs	r2, #104	; 0x68
 800548c:	1e4d      	subs	r5, r1, #1
 800548e:	4355      	muls	r5, r2
 8005490:	460e      	mov	r6, r1
 8005492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005496:	f000 f99f 	bl	80057d8 <_malloc_r>
 800549a:	4604      	mov	r4, r0
 800549c:	b140      	cbz	r0, 80054b0 <__sfmoreglue+0x28>
 800549e:	2100      	movs	r1, #0
 80054a0:	e9c0 1600 	strd	r1, r6, [r0]
 80054a4:	300c      	adds	r0, #12
 80054a6:	60a0      	str	r0, [r4, #8]
 80054a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80054ac:	f7ff fcf4 	bl	8004e98 <memset>
 80054b0:	4620      	mov	r0, r4
 80054b2:	bd70      	pop	{r4, r5, r6, pc}

080054b4 <__sfp_lock_acquire>:
 80054b4:	4801      	ldr	r0, [pc, #4]	; (80054bc <__sfp_lock_acquire+0x8>)
 80054b6:	f000 b8b3 	b.w	8005620 <__retarget_lock_acquire_recursive>
 80054ba:	bf00      	nop
 80054bc:	20000259 	.word	0x20000259

080054c0 <__sfp_lock_release>:
 80054c0:	4801      	ldr	r0, [pc, #4]	; (80054c8 <__sfp_lock_release+0x8>)
 80054c2:	f000 b8ae 	b.w	8005622 <__retarget_lock_release_recursive>
 80054c6:	bf00      	nop
 80054c8:	20000259 	.word	0x20000259

080054cc <__sinit_lock_acquire>:
 80054cc:	4801      	ldr	r0, [pc, #4]	; (80054d4 <__sinit_lock_acquire+0x8>)
 80054ce:	f000 b8a7 	b.w	8005620 <__retarget_lock_acquire_recursive>
 80054d2:	bf00      	nop
 80054d4:	2000025a 	.word	0x2000025a

080054d8 <__sinit_lock_release>:
 80054d8:	4801      	ldr	r0, [pc, #4]	; (80054e0 <__sinit_lock_release+0x8>)
 80054da:	f000 b8a2 	b.w	8005622 <__retarget_lock_release_recursive>
 80054de:	bf00      	nop
 80054e0:	2000025a 	.word	0x2000025a

080054e4 <__sinit>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	4604      	mov	r4, r0
 80054e8:	f7ff fff0 	bl	80054cc <__sinit_lock_acquire>
 80054ec:	69a3      	ldr	r3, [r4, #24]
 80054ee:	b11b      	cbz	r3, 80054f8 <__sinit+0x14>
 80054f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f4:	f7ff bff0 	b.w	80054d8 <__sinit_lock_release>
 80054f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054fc:	6523      	str	r3, [r4, #80]	; 0x50
 80054fe:	4b13      	ldr	r3, [pc, #76]	; (800554c <__sinit+0x68>)
 8005500:	4a13      	ldr	r2, [pc, #76]	; (8005550 <__sinit+0x6c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	62a2      	str	r2, [r4, #40]	; 0x28
 8005506:	42a3      	cmp	r3, r4
 8005508:	bf04      	itt	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	61a3      	streq	r3, [r4, #24]
 800550e:	4620      	mov	r0, r4
 8005510:	f000 f820 	bl	8005554 <__sfp>
 8005514:	6060      	str	r0, [r4, #4]
 8005516:	4620      	mov	r0, r4
 8005518:	f000 f81c 	bl	8005554 <__sfp>
 800551c:	60a0      	str	r0, [r4, #8]
 800551e:	4620      	mov	r0, r4
 8005520:	f000 f818 	bl	8005554 <__sfp>
 8005524:	2200      	movs	r2, #0
 8005526:	60e0      	str	r0, [r4, #12]
 8005528:	2104      	movs	r1, #4
 800552a:	6860      	ldr	r0, [r4, #4]
 800552c:	f7ff ff82 	bl	8005434 <std>
 8005530:	68a0      	ldr	r0, [r4, #8]
 8005532:	2201      	movs	r2, #1
 8005534:	2109      	movs	r1, #9
 8005536:	f7ff ff7d 	bl	8005434 <std>
 800553a:	68e0      	ldr	r0, [r4, #12]
 800553c:	2202      	movs	r2, #2
 800553e:	2112      	movs	r1, #18
 8005540:	f7ff ff78 	bl	8005434 <std>
 8005544:	2301      	movs	r3, #1
 8005546:	61a3      	str	r3, [r4, #24]
 8005548:	e7d2      	b.n	80054f0 <__sinit+0xc>
 800554a:	bf00      	nop
 800554c:	08005afc 	.word	0x08005afc
 8005550:	0800547d 	.word	0x0800547d

08005554 <__sfp>:
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	4607      	mov	r7, r0
 8005558:	f7ff ffac 	bl	80054b4 <__sfp_lock_acquire>
 800555c:	4b1e      	ldr	r3, [pc, #120]	; (80055d8 <__sfp+0x84>)
 800555e:	681e      	ldr	r6, [r3, #0]
 8005560:	69b3      	ldr	r3, [r6, #24]
 8005562:	b913      	cbnz	r3, 800556a <__sfp+0x16>
 8005564:	4630      	mov	r0, r6
 8005566:	f7ff ffbd 	bl	80054e4 <__sinit>
 800556a:	3648      	adds	r6, #72	; 0x48
 800556c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005570:	3b01      	subs	r3, #1
 8005572:	d503      	bpl.n	800557c <__sfp+0x28>
 8005574:	6833      	ldr	r3, [r6, #0]
 8005576:	b30b      	cbz	r3, 80055bc <__sfp+0x68>
 8005578:	6836      	ldr	r6, [r6, #0]
 800557a:	e7f7      	b.n	800556c <__sfp+0x18>
 800557c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005580:	b9d5      	cbnz	r5, 80055b8 <__sfp+0x64>
 8005582:	4b16      	ldr	r3, [pc, #88]	; (80055dc <__sfp+0x88>)
 8005584:	60e3      	str	r3, [r4, #12]
 8005586:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800558a:	6665      	str	r5, [r4, #100]	; 0x64
 800558c:	f000 f847 	bl	800561e <__retarget_lock_init_recursive>
 8005590:	f7ff ff96 	bl	80054c0 <__sfp_lock_release>
 8005594:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005598:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800559c:	6025      	str	r5, [r4, #0]
 800559e:	61a5      	str	r5, [r4, #24]
 80055a0:	2208      	movs	r2, #8
 80055a2:	4629      	mov	r1, r5
 80055a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055a8:	f7ff fc76 	bl	8004e98 <memset>
 80055ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055b4:	4620      	mov	r0, r4
 80055b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b8:	3468      	adds	r4, #104	; 0x68
 80055ba:	e7d9      	b.n	8005570 <__sfp+0x1c>
 80055bc:	2104      	movs	r1, #4
 80055be:	4638      	mov	r0, r7
 80055c0:	f7ff ff62 	bl	8005488 <__sfmoreglue>
 80055c4:	4604      	mov	r4, r0
 80055c6:	6030      	str	r0, [r6, #0]
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d1d5      	bne.n	8005578 <__sfp+0x24>
 80055cc:	f7ff ff78 	bl	80054c0 <__sfp_lock_release>
 80055d0:	230c      	movs	r3, #12
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	e7ee      	b.n	80055b4 <__sfp+0x60>
 80055d6:	bf00      	nop
 80055d8:	08005afc 	.word	0x08005afc
 80055dc:	ffff0001 	.word	0xffff0001

080055e0 <_fwalk_reent>:
 80055e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e4:	4606      	mov	r6, r0
 80055e6:	4688      	mov	r8, r1
 80055e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055ec:	2700      	movs	r7, #0
 80055ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055f2:	f1b9 0901 	subs.w	r9, r9, #1
 80055f6:	d505      	bpl.n	8005604 <_fwalk_reent+0x24>
 80055f8:	6824      	ldr	r4, [r4, #0]
 80055fa:	2c00      	cmp	r4, #0
 80055fc:	d1f7      	bne.n	80055ee <_fwalk_reent+0xe>
 80055fe:	4638      	mov	r0, r7
 8005600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005604:	89ab      	ldrh	r3, [r5, #12]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d907      	bls.n	800561a <_fwalk_reent+0x3a>
 800560a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800560e:	3301      	adds	r3, #1
 8005610:	d003      	beq.n	800561a <_fwalk_reent+0x3a>
 8005612:	4629      	mov	r1, r5
 8005614:	4630      	mov	r0, r6
 8005616:	47c0      	blx	r8
 8005618:	4307      	orrs	r7, r0
 800561a:	3568      	adds	r5, #104	; 0x68
 800561c:	e7e9      	b.n	80055f2 <_fwalk_reent+0x12>

0800561e <__retarget_lock_init_recursive>:
 800561e:	4770      	bx	lr

08005620 <__retarget_lock_acquire_recursive>:
 8005620:	4770      	bx	lr

08005622 <__retarget_lock_release_recursive>:
 8005622:	4770      	bx	lr

08005624 <__swhatbuf_r>:
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	460e      	mov	r6, r1
 8005628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800562c:	2900      	cmp	r1, #0
 800562e:	b096      	sub	sp, #88	; 0x58
 8005630:	4614      	mov	r4, r2
 8005632:	461d      	mov	r5, r3
 8005634:	da08      	bge.n	8005648 <__swhatbuf_r+0x24>
 8005636:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	602a      	str	r2, [r5, #0]
 800563e:	061a      	lsls	r2, r3, #24
 8005640:	d410      	bmi.n	8005664 <__swhatbuf_r+0x40>
 8005642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005646:	e00e      	b.n	8005666 <__swhatbuf_r+0x42>
 8005648:	466a      	mov	r2, sp
 800564a:	f000 f9af 	bl	80059ac <_fstat_r>
 800564e:	2800      	cmp	r0, #0
 8005650:	dbf1      	blt.n	8005636 <__swhatbuf_r+0x12>
 8005652:	9a01      	ldr	r2, [sp, #4]
 8005654:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005658:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800565c:	425a      	negs	r2, r3
 800565e:	415a      	adcs	r2, r3
 8005660:	602a      	str	r2, [r5, #0]
 8005662:	e7ee      	b.n	8005642 <__swhatbuf_r+0x1e>
 8005664:	2340      	movs	r3, #64	; 0x40
 8005666:	2000      	movs	r0, #0
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	b016      	add	sp, #88	; 0x58
 800566c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005670 <__smakebuf_r>:
 8005670:	898b      	ldrh	r3, [r1, #12]
 8005672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005674:	079d      	lsls	r5, r3, #30
 8005676:	4606      	mov	r6, r0
 8005678:	460c      	mov	r4, r1
 800567a:	d507      	bpl.n	800568c <__smakebuf_r+0x1c>
 800567c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	6123      	str	r3, [r4, #16]
 8005684:	2301      	movs	r3, #1
 8005686:	6163      	str	r3, [r4, #20]
 8005688:	b002      	add	sp, #8
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	ab01      	add	r3, sp, #4
 800568e:	466a      	mov	r2, sp
 8005690:	f7ff ffc8 	bl	8005624 <__swhatbuf_r>
 8005694:	9900      	ldr	r1, [sp, #0]
 8005696:	4605      	mov	r5, r0
 8005698:	4630      	mov	r0, r6
 800569a:	f000 f89d 	bl	80057d8 <_malloc_r>
 800569e:	b948      	cbnz	r0, 80056b4 <__smakebuf_r+0x44>
 80056a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a4:	059a      	lsls	r2, r3, #22
 80056a6:	d4ef      	bmi.n	8005688 <__smakebuf_r+0x18>
 80056a8:	f023 0303 	bic.w	r3, r3, #3
 80056ac:	f043 0302 	orr.w	r3, r3, #2
 80056b0:	81a3      	strh	r3, [r4, #12]
 80056b2:	e7e3      	b.n	800567c <__smakebuf_r+0xc>
 80056b4:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <__smakebuf_r+0x7c>)
 80056b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	6020      	str	r0, [r4, #0]
 80056bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c0:	81a3      	strh	r3, [r4, #12]
 80056c2:	9b00      	ldr	r3, [sp, #0]
 80056c4:	6163      	str	r3, [r4, #20]
 80056c6:	9b01      	ldr	r3, [sp, #4]
 80056c8:	6120      	str	r0, [r4, #16]
 80056ca:	b15b      	cbz	r3, 80056e4 <__smakebuf_r+0x74>
 80056cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056d0:	4630      	mov	r0, r6
 80056d2:	f000 f97d 	bl	80059d0 <_isatty_r>
 80056d6:	b128      	cbz	r0, 80056e4 <__smakebuf_r+0x74>
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	f023 0303 	bic.w	r3, r3, #3
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	89a0      	ldrh	r0, [r4, #12]
 80056e6:	4305      	orrs	r5, r0
 80056e8:	81a5      	strh	r5, [r4, #12]
 80056ea:	e7cd      	b.n	8005688 <__smakebuf_r+0x18>
 80056ec:	0800547d 	.word	0x0800547d

080056f0 <malloc>:
 80056f0:	4b02      	ldr	r3, [pc, #8]	; (80056fc <malloc+0xc>)
 80056f2:	4601      	mov	r1, r0
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	f000 b86f 	b.w	80057d8 <_malloc_r>
 80056fa:	bf00      	nop
 80056fc:	2000003c 	.word	0x2000003c

08005700 <_free_r>:
 8005700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005702:	2900      	cmp	r1, #0
 8005704:	d044      	beq.n	8005790 <_free_r+0x90>
 8005706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800570a:	9001      	str	r0, [sp, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f1a1 0404 	sub.w	r4, r1, #4
 8005712:	bfb8      	it	lt
 8005714:	18e4      	addlt	r4, r4, r3
 8005716:	f000 f97d 	bl	8005a14 <__malloc_lock>
 800571a:	4a1e      	ldr	r2, [pc, #120]	; (8005794 <_free_r+0x94>)
 800571c:	9801      	ldr	r0, [sp, #4]
 800571e:	6813      	ldr	r3, [r2, #0]
 8005720:	b933      	cbnz	r3, 8005730 <_free_r+0x30>
 8005722:	6063      	str	r3, [r4, #4]
 8005724:	6014      	str	r4, [r2, #0]
 8005726:	b003      	add	sp, #12
 8005728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800572c:	f000 b978 	b.w	8005a20 <__malloc_unlock>
 8005730:	42a3      	cmp	r3, r4
 8005732:	d908      	bls.n	8005746 <_free_r+0x46>
 8005734:	6825      	ldr	r5, [r4, #0]
 8005736:	1961      	adds	r1, r4, r5
 8005738:	428b      	cmp	r3, r1
 800573a:	bf01      	itttt	eq
 800573c:	6819      	ldreq	r1, [r3, #0]
 800573e:	685b      	ldreq	r3, [r3, #4]
 8005740:	1949      	addeq	r1, r1, r5
 8005742:	6021      	streq	r1, [r4, #0]
 8005744:	e7ed      	b.n	8005722 <_free_r+0x22>
 8005746:	461a      	mov	r2, r3
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	b10b      	cbz	r3, 8005750 <_free_r+0x50>
 800574c:	42a3      	cmp	r3, r4
 800574e:	d9fa      	bls.n	8005746 <_free_r+0x46>
 8005750:	6811      	ldr	r1, [r2, #0]
 8005752:	1855      	adds	r5, r2, r1
 8005754:	42a5      	cmp	r5, r4
 8005756:	d10b      	bne.n	8005770 <_free_r+0x70>
 8005758:	6824      	ldr	r4, [r4, #0]
 800575a:	4421      	add	r1, r4
 800575c:	1854      	adds	r4, r2, r1
 800575e:	42a3      	cmp	r3, r4
 8005760:	6011      	str	r1, [r2, #0]
 8005762:	d1e0      	bne.n	8005726 <_free_r+0x26>
 8005764:	681c      	ldr	r4, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	6053      	str	r3, [r2, #4]
 800576a:	4421      	add	r1, r4
 800576c:	6011      	str	r1, [r2, #0]
 800576e:	e7da      	b.n	8005726 <_free_r+0x26>
 8005770:	d902      	bls.n	8005778 <_free_r+0x78>
 8005772:	230c      	movs	r3, #12
 8005774:	6003      	str	r3, [r0, #0]
 8005776:	e7d6      	b.n	8005726 <_free_r+0x26>
 8005778:	6825      	ldr	r5, [r4, #0]
 800577a:	1961      	adds	r1, r4, r5
 800577c:	428b      	cmp	r3, r1
 800577e:	bf04      	itt	eq
 8005780:	6819      	ldreq	r1, [r3, #0]
 8005782:	685b      	ldreq	r3, [r3, #4]
 8005784:	6063      	str	r3, [r4, #4]
 8005786:	bf04      	itt	eq
 8005788:	1949      	addeq	r1, r1, r5
 800578a:	6021      	streq	r1, [r4, #0]
 800578c:	6054      	str	r4, [r2, #4]
 800578e:	e7ca      	b.n	8005726 <_free_r+0x26>
 8005790:	b003      	add	sp, #12
 8005792:	bd30      	pop	{r4, r5, pc}
 8005794:	2000025c 	.word	0x2000025c

08005798 <sbrk_aligned>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	4e0e      	ldr	r6, [pc, #56]	; (80057d4 <sbrk_aligned+0x3c>)
 800579c:	460c      	mov	r4, r1
 800579e:	6831      	ldr	r1, [r6, #0]
 80057a0:	4605      	mov	r5, r0
 80057a2:	b911      	cbnz	r1, 80057aa <sbrk_aligned+0x12>
 80057a4:	f000 f88c 	bl	80058c0 <_sbrk_r>
 80057a8:	6030      	str	r0, [r6, #0]
 80057aa:	4621      	mov	r1, r4
 80057ac:	4628      	mov	r0, r5
 80057ae:	f000 f887 	bl	80058c0 <_sbrk_r>
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	d00a      	beq.n	80057cc <sbrk_aligned+0x34>
 80057b6:	1cc4      	adds	r4, r0, #3
 80057b8:	f024 0403 	bic.w	r4, r4, #3
 80057bc:	42a0      	cmp	r0, r4
 80057be:	d007      	beq.n	80057d0 <sbrk_aligned+0x38>
 80057c0:	1a21      	subs	r1, r4, r0
 80057c2:	4628      	mov	r0, r5
 80057c4:	f000 f87c 	bl	80058c0 <_sbrk_r>
 80057c8:	3001      	adds	r0, #1
 80057ca:	d101      	bne.n	80057d0 <sbrk_aligned+0x38>
 80057cc:	f04f 34ff 	mov.w	r4, #4294967295
 80057d0:	4620      	mov	r0, r4
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
 80057d4:	20000260 	.word	0x20000260

080057d8 <_malloc_r>:
 80057d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057dc:	1ccd      	adds	r5, r1, #3
 80057de:	f025 0503 	bic.w	r5, r5, #3
 80057e2:	3508      	adds	r5, #8
 80057e4:	2d0c      	cmp	r5, #12
 80057e6:	bf38      	it	cc
 80057e8:	250c      	movcc	r5, #12
 80057ea:	2d00      	cmp	r5, #0
 80057ec:	4607      	mov	r7, r0
 80057ee:	db01      	blt.n	80057f4 <_malloc_r+0x1c>
 80057f0:	42a9      	cmp	r1, r5
 80057f2:	d905      	bls.n	8005800 <_malloc_r+0x28>
 80057f4:	230c      	movs	r3, #12
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	2600      	movs	r6, #0
 80057fa:	4630      	mov	r0, r6
 80057fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005800:	4e2e      	ldr	r6, [pc, #184]	; (80058bc <_malloc_r+0xe4>)
 8005802:	f000 f907 	bl	8005a14 <__malloc_lock>
 8005806:	6833      	ldr	r3, [r6, #0]
 8005808:	461c      	mov	r4, r3
 800580a:	bb34      	cbnz	r4, 800585a <_malloc_r+0x82>
 800580c:	4629      	mov	r1, r5
 800580e:	4638      	mov	r0, r7
 8005810:	f7ff ffc2 	bl	8005798 <sbrk_aligned>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	4604      	mov	r4, r0
 8005818:	d14d      	bne.n	80058b6 <_malloc_r+0xde>
 800581a:	6834      	ldr	r4, [r6, #0]
 800581c:	4626      	mov	r6, r4
 800581e:	2e00      	cmp	r6, #0
 8005820:	d140      	bne.n	80058a4 <_malloc_r+0xcc>
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	4631      	mov	r1, r6
 8005826:	4638      	mov	r0, r7
 8005828:	eb04 0803 	add.w	r8, r4, r3
 800582c:	f000 f848 	bl	80058c0 <_sbrk_r>
 8005830:	4580      	cmp	r8, r0
 8005832:	d13a      	bne.n	80058aa <_malloc_r+0xd2>
 8005834:	6821      	ldr	r1, [r4, #0]
 8005836:	3503      	adds	r5, #3
 8005838:	1a6d      	subs	r5, r5, r1
 800583a:	f025 0503 	bic.w	r5, r5, #3
 800583e:	3508      	adds	r5, #8
 8005840:	2d0c      	cmp	r5, #12
 8005842:	bf38      	it	cc
 8005844:	250c      	movcc	r5, #12
 8005846:	4629      	mov	r1, r5
 8005848:	4638      	mov	r0, r7
 800584a:	f7ff ffa5 	bl	8005798 <sbrk_aligned>
 800584e:	3001      	adds	r0, #1
 8005850:	d02b      	beq.n	80058aa <_malloc_r+0xd2>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	442b      	add	r3, r5
 8005856:	6023      	str	r3, [r4, #0]
 8005858:	e00e      	b.n	8005878 <_malloc_r+0xa0>
 800585a:	6822      	ldr	r2, [r4, #0]
 800585c:	1b52      	subs	r2, r2, r5
 800585e:	d41e      	bmi.n	800589e <_malloc_r+0xc6>
 8005860:	2a0b      	cmp	r2, #11
 8005862:	d916      	bls.n	8005892 <_malloc_r+0xba>
 8005864:	1961      	adds	r1, r4, r5
 8005866:	42a3      	cmp	r3, r4
 8005868:	6025      	str	r5, [r4, #0]
 800586a:	bf18      	it	ne
 800586c:	6059      	strne	r1, [r3, #4]
 800586e:	6863      	ldr	r3, [r4, #4]
 8005870:	bf08      	it	eq
 8005872:	6031      	streq	r1, [r6, #0]
 8005874:	5162      	str	r2, [r4, r5]
 8005876:	604b      	str	r3, [r1, #4]
 8005878:	4638      	mov	r0, r7
 800587a:	f104 060b 	add.w	r6, r4, #11
 800587e:	f000 f8cf 	bl	8005a20 <__malloc_unlock>
 8005882:	f026 0607 	bic.w	r6, r6, #7
 8005886:	1d23      	adds	r3, r4, #4
 8005888:	1af2      	subs	r2, r6, r3
 800588a:	d0b6      	beq.n	80057fa <_malloc_r+0x22>
 800588c:	1b9b      	subs	r3, r3, r6
 800588e:	50a3      	str	r3, [r4, r2]
 8005890:	e7b3      	b.n	80057fa <_malloc_r+0x22>
 8005892:	6862      	ldr	r2, [r4, #4]
 8005894:	42a3      	cmp	r3, r4
 8005896:	bf0c      	ite	eq
 8005898:	6032      	streq	r2, [r6, #0]
 800589a:	605a      	strne	r2, [r3, #4]
 800589c:	e7ec      	b.n	8005878 <_malloc_r+0xa0>
 800589e:	4623      	mov	r3, r4
 80058a0:	6864      	ldr	r4, [r4, #4]
 80058a2:	e7b2      	b.n	800580a <_malloc_r+0x32>
 80058a4:	4634      	mov	r4, r6
 80058a6:	6876      	ldr	r6, [r6, #4]
 80058a8:	e7b9      	b.n	800581e <_malloc_r+0x46>
 80058aa:	230c      	movs	r3, #12
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	4638      	mov	r0, r7
 80058b0:	f000 f8b6 	bl	8005a20 <__malloc_unlock>
 80058b4:	e7a1      	b.n	80057fa <_malloc_r+0x22>
 80058b6:	6025      	str	r5, [r4, #0]
 80058b8:	e7de      	b.n	8005878 <_malloc_r+0xa0>
 80058ba:	bf00      	nop
 80058bc:	2000025c 	.word	0x2000025c

080058c0 <_sbrk_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4d06      	ldr	r5, [pc, #24]	; (80058dc <_sbrk_r+0x1c>)
 80058c4:	2300      	movs	r3, #0
 80058c6:	4604      	mov	r4, r0
 80058c8:	4608      	mov	r0, r1
 80058ca:	602b      	str	r3, [r5, #0]
 80058cc:	f7fb fc7a 	bl	80011c4 <_sbrk>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_sbrk_r+0x1a>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b103      	cbz	r3, 80058da <_sbrk_r+0x1a>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	20000264 	.word	0x20000264

080058e0 <__sread>:
 80058e0:	b510      	push	{r4, lr}
 80058e2:	460c      	mov	r4, r1
 80058e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e8:	f000 f8a0 	bl	8005a2c <_read_r>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	bfab      	itete	ge
 80058f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058f2:	89a3      	ldrhlt	r3, [r4, #12]
 80058f4:	181b      	addge	r3, r3, r0
 80058f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058fa:	bfac      	ite	ge
 80058fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80058fe:	81a3      	strhlt	r3, [r4, #12]
 8005900:	bd10      	pop	{r4, pc}

08005902 <__swrite>:
 8005902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005906:	461f      	mov	r7, r3
 8005908:	898b      	ldrh	r3, [r1, #12]
 800590a:	05db      	lsls	r3, r3, #23
 800590c:	4605      	mov	r5, r0
 800590e:	460c      	mov	r4, r1
 8005910:	4616      	mov	r6, r2
 8005912:	d505      	bpl.n	8005920 <__swrite+0x1e>
 8005914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005918:	2302      	movs	r3, #2
 800591a:	2200      	movs	r2, #0
 800591c:	f000 f868 	bl	80059f0 <_lseek_r>
 8005920:	89a3      	ldrh	r3, [r4, #12]
 8005922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800592a:	81a3      	strh	r3, [r4, #12]
 800592c:	4632      	mov	r2, r6
 800592e:	463b      	mov	r3, r7
 8005930:	4628      	mov	r0, r5
 8005932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005936:	f000 b817 	b.w	8005968 <_write_r>

0800593a <__sseek>:
 800593a:	b510      	push	{r4, lr}
 800593c:	460c      	mov	r4, r1
 800593e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005942:	f000 f855 	bl	80059f0 <_lseek_r>
 8005946:	1c43      	adds	r3, r0, #1
 8005948:	89a3      	ldrh	r3, [r4, #12]
 800594a:	bf15      	itete	ne
 800594c:	6560      	strne	r0, [r4, #84]	; 0x54
 800594e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005956:	81a3      	strheq	r3, [r4, #12]
 8005958:	bf18      	it	ne
 800595a:	81a3      	strhne	r3, [r4, #12]
 800595c:	bd10      	pop	{r4, pc}

0800595e <__sclose>:
 800595e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005962:	f000 b813 	b.w	800598c <_close_r>
	...

08005968 <_write_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4d07      	ldr	r5, [pc, #28]	; (8005988 <_write_r+0x20>)
 800596c:	4604      	mov	r4, r0
 800596e:	4608      	mov	r0, r1
 8005970:	4611      	mov	r1, r2
 8005972:	2200      	movs	r2, #0
 8005974:	602a      	str	r2, [r5, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	f7fa fdd0 	bl	800051c <_write>
 800597c:	1c43      	adds	r3, r0, #1
 800597e:	d102      	bne.n	8005986 <_write_r+0x1e>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	b103      	cbz	r3, 8005986 <_write_r+0x1e>
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	bd38      	pop	{r3, r4, r5, pc}
 8005988:	20000264 	.word	0x20000264

0800598c <_close_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	4d06      	ldr	r5, [pc, #24]	; (80059a8 <_close_r+0x1c>)
 8005990:	2300      	movs	r3, #0
 8005992:	4604      	mov	r4, r0
 8005994:	4608      	mov	r0, r1
 8005996:	602b      	str	r3, [r5, #0]
 8005998:	f7fb fbdf 	bl	800115a <_close>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d102      	bne.n	80059a6 <_close_r+0x1a>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	b103      	cbz	r3, 80059a6 <_close_r+0x1a>
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	20000264 	.word	0x20000264

080059ac <_fstat_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4d07      	ldr	r5, [pc, #28]	; (80059cc <_fstat_r+0x20>)
 80059b0:	2300      	movs	r3, #0
 80059b2:	4604      	mov	r4, r0
 80059b4:	4608      	mov	r0, r1
 80059b6:	4611      	mov	r1, r2
 80059b8:	602b      	str	r3, [r5, #0]
 80059ba:	f7fb fbda 	bl	8001172 <_fstat>
 80059be:	1c43      	adds	r3, r0, #1
 80059c0:	d102      	bne.n	80059c8 <_fstat_r+0x1c>
 80059c2:	682b      	ldr	r3, [r5, #0]
 80059c4:	b103      	cbz	r3, 80059c8 <_fstat_r+0x1c>
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	bd38      	pop	{r3, r4, r5, pc}
 80059ca:	bf00      	nop
 80059cc:	20000264 	.word	0x20000264

080059d0 <_isatty_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4d06      	ldr	r5, [pc, #24]	; (80059ec <_isatty_r+0x1c>)
 80059d4:	2300      	movs	r3, #0
 80059d6:	4604      	mov	r4, r0
 80059d8:	4608      	mov	r0, r1
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	f7fb fbd9 	bl	8001192 <_isatty>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_isatty_r+0x1a>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_isatty_r+0x1a>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	20000264 	.word	0x20000264

080059f0 <_lseek_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4d07      	ldr	r5, [pc, #28]	; (8005a10 <_lseek_r+0x20>)
 80059f4:	4604      	mov	r4, r0
 80059f6:	4608      	mov	r0, r1
 80059f8:	4611      	mov	r1, r2
 80059fa:	2200      	movs	r2, #0
 80059fc:	602a      	str	r2, [r5, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	f7fb fbd2 	bl	80011a8 <_lseek>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d102      	bne.n	8005a0e <_lseek_r+0x1e>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	b103      	cbz	r3, 8005a0e <_lseek_r+0x1e>
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	20000264 	.word	0x20000264

08005a14 <__malloc_lock>:
 8005a14:	4801      	ldr	r0, [pc, #4]	; (8005a1c <__malloc_lock+0x8>)
 8005a16:	f7ff be03 	b.w	8005620 <__retarget_lock_acquire_recursive>
 8005a1a:	bf00      	nop
 8005a1c:	20000258 	.word	0x20000258

08005a20 <__malloc_unlock>:
 8005a20:	4801      	ldr	r0, [pc, #4]	; (8005a28 <__malloc_unlock+0x8>)
 8005a22:	f7ff bdfe 	b.w	8005622 <__retarget_lock_release_recursive>
 8005a26:	bf00      	nop
 8005a28:	20000258 	.word	0x20000258

08005a2c <_read_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4d07      	ldr	r5, [pc, #28]	; (8005a4c <_read_r+0x20>)
 8005a30:	4604      	mov	r4, r0
 8005a32:	4608      	mov	r0, r1
 8005a34:	4611      	mov	r1, r2
 8005a36:	2200      	movs	r2, #0
 8005a38:	602a      	str	r2, [r5, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f7fb fb70 	bl	8001120 <_read>
 8005a40:	1c43      	adds	r3, r0, #1
 8005a42:	d102      	bne.n	8005a4a <_read_r+0x1e>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	b103      	cbz	r3, 8005a4a <_read_r+0x1e>
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	bd38      	pop	{r3, r4, r5, pc}
 8005a4c:	20000264 	.word	0x20000264

08005a50 <_init>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	bf00      	nop
 8005a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a56:	bc08      	pop	{r3}
 8005a58:	469e      	mov	lr, r3
 8005a5a:	4770      	bx	lr

08005a5c <_fini>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr
